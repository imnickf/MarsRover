
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001e00  00001e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080013a  0080013a  00001ece  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002517  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000884  00000000  00000000  00004659  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000120f  00000000  00000000  00004edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  000060ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000977  00000000  00000000  0000671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015eb  00000000  00000000  00007093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0000867e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c5       	rjmp	.+2750   	; 0xae4 <__vector_9>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b1 c5       	rjmp	.+2914   	; 0xb90 <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <oi_update+0x144>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <oi_update+0x74>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	fe e1       	ldi	r31, 0x1E	; 30
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	aa 33       	cpi	r26, 0x3A	; 58
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	aa e3       	ldi	r26, 0x3A	; 58
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ae 39       	cpi	r26, 0x9E	; 158
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	94 d1       	rcall	.+808    	; 0x48c <main>
     164:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <scanForObjects>:
		}	
	}
}

object_t * scanForObjects()
{
     16a:	2f 92       	push	r2
     16c:	3f 92       	push	r3
     16e:	4f 92       	push	r4
     170:	5f 92       	push	r5
     172:	6f 92       	push	r6
     174:	7f 92       	push	r7
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     18e:	88 e2       	ldi	r24, 0x28	; 40
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 a1 0a 	call	0x1542	; 0x1542 <malloc>
     196:	5c 01       	movw	r10, r24
		for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
			USART_Transmit(heading[i]);
		}
		*/
		
		move_servo(degrees);
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	ce d4       	rcall	.+2460   	; 0xb3a <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     19e:	80 e2       	ldi	r24, 0x20	; 32
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	8a d4       	rcall	.+2324   	; 0xab8 <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     1a4:	c0 e0       	ldi	r28, 0x00	; 0
     1a6:	d0 e0       	ldi	r29, 0x00	; 0
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     1a8:	81 2c       	mov	r8, r1
     1aa:	91 2c       	mov	r9, r1
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     1ac:	e1 2c       	mov	r14, r1
     1ae:	f1 2c       	mov	r15, r1
	int currObjectIndex = -1;
	//int currDiam = 0;
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
     1b0:	c1 2c       	mov	r12, r1
     1b2:	d1 2c       	mov	r13, r1
	int irDistance = 0;
	/*
	char heading[]="\r\nDegrees\t     IRDistance\tSonarDistance";   //   \r\n for new line, \t and spaces to line up text and numbers on output
	char output[50];
	*/
	int currObjectIndex = -1;
     1b4:	0f ef       	ldi	r16, 0xFF	; 255
     1b6:	1f ef       	ldi	r17, 0xFF	; 255
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     1b8:	33 24       	eor	r3, r3
     1ba:	33 94       	inc	r3
     1bc:	21 2c       	mov	r2, r1
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     1be:	ce 01       	movw	r24, r28
     1c0:	bc d4       	rcall	.+2424   	; 0xb3a <move_servo>
			sonarDistance = getPingDistance();
     1c2:	29 d5       	rcall	.+2642   	; 0xc16 <getPingDistance>
     1c4:	68 2e       	mov	r6, r24
     1c6:	79 2e       	mov	r7, r25
			irDistance = getIrDistance();			
     1c8:	61 d5       	rcall	.+2754   	; 0xc8c <getIrDistance>
			for(int i = 0; i < strlen(output); i++){		//  Print output data
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     1ca:	85 36       	cpi	r24, 0x65	; 101
     1cc:	91 05       	cpc	r25, r1
     1ce:	0c f0       	brlt	.+2      	; 0x1d2 <scanForObjects+0x68>
     1d0:	65 c0       	rjmp	.+202    	; 0x29c <scanForObjects+0x132>
     1d2:	c1 14       	cp	r12, r1
     1d4:	d1 04       	cpc	r13, r1
     1d6:	09 f0       	breq	.+2      	; 0x1da <scanForObjects+0x70>
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <scanForObjects+0x10a>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     1da:	0f 5f       	subi	r16, 0xFF	; 255
     1dc:	1f 4f       	sbci	r17, 0xFF	; 255
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     1de:	86 2c       	mov	r8, r6
     1e0:	97 2c       	mov	r9, r7
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     1e2:	7e 01       	movw	r14, r28
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     1e4:	c3 2c       	mov	r12, r3
     1e6:	d2 2c       	mov	r13, r2
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <scanForObjects+0x10a>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     1ea:	68 01       	movw	r12, r16
     1ec:	cc 0c       	add	r12, r12
     1ee:	dd 1c       	adc	r13, r13
     1f0:	cc 0c       	add	r12, r12
     1f2:	dd 1c       	adc	r13, r13
     1f4:	ca 0c       	add	r12, r10
     1f6:	db 1c       	adc	r13, r11
     1f8:	c7 01       	movw	r24, r14
     1fa:	8c 0f       	add	r24, r28
     1fc:	9d 1f       	adc	r25, r29
     1fe:	99 23       	and	r25, r25
     200:	0c f4       	brge	.+2      	; 0x204 <scanForObjects+0x9a>
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	95 95       	asr	r25
     206:	87 95       	ror	r24
     208:	f6 01       	movw	r30, r12
     20a:	93 83       	std	Z+3, r25	; 0x03
     20c:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     20e:	b4 01       	movw	r22, r8
     210:	88 27       	eor	r24, r24
     212:	77 fd       	sbrc	r23, 7
     214:	80 95       	com	r24
     216:	98 2f       	mov	r25, r24
     218:	6c d6       	rcall	.+3288   	; 0xef2 <__floatsisf>
     21a:	9b 01       	movw	r18, r22
     21c:	ac 01       	movw	r20, r24
     21e:	2e d7       	rcall	.+3676   	; 0x107c <__mulsf3>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	64 d5       	rcall	.+2760   	; 0xcee <__addsf3>
     226:	2b 01       	movw	r4, r22
     228:	3c 01       	movw	r6, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     22a:	c7 01       	movw	r24, r14
     22c:	8c 1b       	sub	r24, r28
     22e:	9d 0b       	sbc	r25, r29
     230:	bc 01       	movw	r22, r24
     232:	22 f4       	brpl	.+8      	; 0x23c <scanForObjects+0xd2>
     234:	66 27       	eor	r22, r22
     236:	77 27       	eor	r23, r23
     238:	68 1b       	sub	r22, r24
     23a:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     23c:	88 27       	eor	r24, r24
     23e:	77 fd       	sbrc	r23, 7
     240:	80 95       	com	r24
     242:	98 2f       	mov	r25, r24
     244:	56 d6       	rcall	.+3244   	; 0xef2 <__floatsisf>
     246:	b7 d5       	rcall	.+2926   	; 0xdb6 <cos>
     248:	9b 01       	movw	r18, r22
     24a:	ac 01       	movw	r20, r24
     24c:	c3 01       	movw	r24, r6
     24e:	b2 01       	movw	r22, r4
     250:	15 d7       	rcall	.+3626   	; 0x107c <__mulsf3>
     252:	9b 01       	movw	r18, r22
     254:	ac 01       	movw	r20, r24
     256:	c3 01       	movw	r24, r6
     258:	b2 01       	movw	r22, r4
     25a:	48 d5       	rcall	.+2704   	; 0xcec <__subsf3>
     25c:	c2 d7       	rcall	.+3972   	; 0x11e2 <sqrt>
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 eb       	ldi	r20, 0xB0	; 176
     264:	50 e4       	ldi	r21, 0x40	; 64
     266:	aa d5       	rcall	.+2900   	; 0xdbc <__divsf3>
     268:	11 d6       	rcall	.+3106   	; 0xe8c <__fixsfsi>
     26a:	f6 01       	movw	r30, r12
     26c:	71 83       	std	Z+1, r23	; 0x01
     26e:	60 83       	st	Z, r22
				inObject = 0;											//Sensor is no longer on an object
     270:	c1 2c       	mov	r12, r1
     272:	d1 2c       	mov	r13, r1
			}	
		
			degrees += 2;
     274:	22 96       	adiw	r28, 0x02	; 2
			wait_ms(200);
     276:	88 ec       	ldi	r24, 0xC8	; 200
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	1e d4       	rcall	.+2108   	; 0xab8 <wait_ms>
		}
		*/
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     27c:	c6 3b       	cpi	r28, 0xB6	; 182
     27e:	d1 05       	cpc	r29, r1
     280:	09 f0       	breq	.+2      	; 0x284 <scanForObjects+0x11a>
     282:	9d cf       	rjmp	.-198    	; 0x1be <scanForObjects+0x54>
     284:	10 c0       	rjmp	.+32     	; 0x2a6 <scanForObjects+0x13c>
			wait_ms(200);
		}
    }
	
	for (int i = currObjectIndex; i < 10; i++) {
		objects[i].diameter = 0;
     286:	11 82       	std	Z+1, r1	; 0x01
     288:	10 82       	st	Z, r1
		objects[i].location = 0;
     28a:	13 82       	std	Z+3, r1	; 0x03
     28c:	12 82       	std	Z+2, r1	; 0x02
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = currObjectIndex; i < 10; i++) {
     28e:	0f 5f       	subi	r16, 0xFF	; 255
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	34 96       	adiw	r30, 0x04	; 4
     294:	0a 30       	cpi	r16, 0x0A	; 10
     296:	11 05       	cpc	r17, r1
     298:	b1 f7       	brne	.-20     	; 0x286 <scanForObjects+0x11c>
     29a:	10 c0       	rjmp	.+32     	; 0x2bc <scanForObjects+0x152>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	cf 16       	cp	r12, r31
     2a0:	d1 04       	cpc	r13, r1
     2a2:	41 f7       	brne	.-48     	; 0x274 <scanForObjects+0x10a>
     2a4:	a2 cf       	rjmp	.-188    	; 0x1ea <scanForObjects+0x80>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = currObjectIndex; i < 10; i++) {
     2a6:	0a 30       	cpi	r16, 0x0A	; 10
     2a8:	11 05       	cpc	r17, r1
     2aa:	44 f4       	brge	.+16     	; 0x2bc <scanForObjects+0x152>
		objects[i].diameter = 0;
     2ac:	f8 01       	movw	r30, r16
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	ee 0f       	add	r30, r30
     2b4:	ff 1f       	adc	r31, r31
     2b6:	ea 0d       	add	r30, r10
     2b8:	fb 1d       	adc	r31, r11
     2ba:	e5 cf       	rjmp	.-54     	; 0x286 <scanForObjects+0x11c>
		objects[i].location = 0;
	}
	return objects;
     2bc:	c5 01       	movw	r24, r10
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	8f 90       	pop	r8
     2d6:	7f 90       	pop	r7
     2d8:	6f 90       	pop	r6
     2da:	5f 90       	pop	r5
     2dc:	4f 90       	pop	r4
     2de:	3f 90       	pop	r3
     2e0:	2f 90       	pop	r2
     2e2:	08 95       	ret

000002e4 <getCommand>:
		//TODO:: Please write your application code 
    }
}

void getCommand(oi_t *sensor_data)
{
     2e4:	2f 92       	push	r2
     2e6:	3f 92       	push	r3
     2e8:	4f 92       	push	r4
     2ea:	5f 92       	push	r5
     2ec:	6f 92       	push	r6
     2ee:	7f 92       	push	r7
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	a5 97       	sbiw	r28, 0x25	; 37
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     31a:	07 d4       	rcall	.+2062   	; 0xb2a <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     31c:	82 37       	cpi	r24, 0x72	; 114
     31e:	39 f0       	breq	.+14     	; 0x32e <getCommand+0x4a>
     320:	83 37       	cpi	r24, 0x73	; 115
     322:	09 f4       	brne	.+2      	; 0x326 <getCommand+0x42>
     324:	3a c0       	rjmp	.+116    	; 0x39a <getCommand+0xb6>
     326:	8d 36       	cpi	r24, 0x6D	; 109
     328:	09 f0       	breq	.+2      	; 0x32c <getCommand+0x48>
     32a:	95 c0       	rjmp	.+298    	; 0x456 <getCommand+0x172>
     32c:	1c c0       	rjmp	.+56     	; 0x366 <getCommand+0x82>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     32e:	fd d3       	rcall	.+2042   	; 0xb2a <USART_Receive>
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	fb d3       	rcall	.+2038   	; 0xb2a <USART_Receive>
     334:	8a 83       	std	Y+2, r24	; 0x02
     336:	f9 d3       	rcall	.+2034   	; 0xb2a <USART_Receive>
     338:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <atoi>
     342:	e8 2e       	mov	r14, r24
     344:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	26 e0       	ldi	r18, 0x06	; 6
     34c:	31 e0       	ldi	r19, 0x01	; 1
     34e:	3f 93       	push	r19
     350:	2f 93       	push	r18
     352:	1d d1       	rcall	.+570    	; 0x58e <lprintf>
				turn_clockwise(sensor_data, degrees);
     354:	6e 2d       	mov	r22, r14
     356:	7f 2d       	mov	r23, r15
     358:	c8 01       	movw	r24, r16
     35a:	bc d1       	rcall	.+888    	; 0x6d4 <turn_clockwise>
				commandRecieved = 1;
				break;
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	7a c0       	rjmp	.+244    	; 0x45a <getCommand+0x176>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     366:	e1 d3       	rcall	.+1986   	; 0xb2a <USART_Receive>
     368:	8d 83       	std	Y+5, r24	; 0x05
     36a:	df d3       	rcall	.+1982   	; 0xb2a <USART_Receive>
     36c:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     36e:	ce 01       	movw	r24, r28
     370:	05 96       	adiw	r24, 0x05	; 5
     372:	0e 94 c8 0b 	call	0x1790	; 0x1790 <atoi>
     376:	e8 2e       	mov	r14, r24
     378:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	22 e1       	ldi	r18, 0x12	; 18
     380:	31 e0       	ldi	r19, 0x01	; 1
     382:	3f 93       	push	r19
     384:	2f 93       	push	r18
     386:	03 d1       	rcall	.+518    	; 0x58e <lprintf>
				move_forward(sensor_data, distance);
     388:	6e 2d       	mov	r22, r14
     38a:	7f 2d       	mov	r23, r15
     38c:	c8 01       	movw	r24, r16
     38e:	ec d1       	rcall	.+984    	; 0x768 <move_forward>
				commandRecieved = 1;
				break;
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	60 c0       	rjmp	.+192    	; 0x45a <getCommand+0x176>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     39a:	e7 de       	rcall	.-562    	; 0x16a <scanForObjects>
     39c:	2c 01       	movw	r4, r24
				commandRecieved = 1;
				for (int i = 0; i < 10; i++) {
					if (foundObjects[i].diameter == 0 || foundObjects[i].location == 0) {
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	e9 f5       	brne	.+122    	; 0x422 <getCommand+0x13e>
     3a8:	52 c0       	rjmp	.+164    	; 0x44e <getCommand+0x16a>
     3aa:	f5 01       	movw	r30, r10
     3ac:	84 81       	ldd	r24, Z+4	; 0x04
     3ae:	95 81       	ldd	r25, Z+5	; 0x05
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <getCommand+0xd2>
     3b4:	4c c0       	rjmp	.+152    	; 0x44e <getCommand+0x16a>
     3b6:	f4 e0       	ldi	r31, 0x04	; 4
     3b8:	af 0e       	add	r10, r31
     3ba:	b1 1c       	adc	r11, r1
     3bc:	f5 01       	movw	r30, r10
     3be:	22 81       	ldd	r18, Z+2	; 0x02
     3c0:	33 81       	ldd	r19, Z+3	; 0x03
     3c2:	21 15       	cp	r18, r1
     3c4:	31 05       	cpc	r19, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <getCommand+0xe6>
     3c8:	42 c0       	rjmp	.+132    	; 0x44e <getCommand+0x16a>
						break;
					}
					char output[30];
					sprintf(output, "Diameter: %2d Angle: %3d\r\n", foundObjects[i].diameter, foundObjects[i].location);
     3ca:	3f 93       	push	r19
     3cc:	2f 93       	push	r18
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	7f 92       	push	r7
     3d4:	6f 92       	push	r6
     3d6:	ff 92       	push	r15
     3d8:	ef 92       	push	r14
     3da:	0e 94 04 0c 	call	0x1808	; 0x1808 <sprintf>
     3de:	c2 2c       	mov	r12, r2
     3e0:	d3 2c       	mov	r13, r3
					
					for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	06 c0       	rjmp	.+12     	; 0x3fe <getCommand+0x11a>
						USART_Transmit(output[i]);
     3f2:	f6 01       	movw	r30, r12
     3f4:	81 91       	ld	r24, Z+
     3f6:	6f 01       	movw	r12, r30
     3f8:	9c d3       	rcall	.+1848   	; 0xb32 <USART_Transmit>
						break;
					}
					char output[30];
					sprintf(output, "Diameter: %2d Angle: %3d\r\n", foundObjects[i].diameter, foundObjects[i].location);
					
					for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     3fa:	0f 5f       	subi	r16, 0xFF	; 255
     3fc:	1f 4f       	sbci	r17, 0xFF	; 255
     3fe:	f7 01       	movw	r30, r14
     400:	01 90       	ld	r0, Z+
     402:	00 20       	and	r0, r0
     404:	e9 f7       	brne	.-6      	; 0x400 <getCommand+0x11c>
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	ee 19       	sub	r30, r14
     40a:	ff 09       	sbc	r31, r15
     40c:	0e 17       	cp	r16, r30
     40e:	1f 07       	cpc	r17, r31
     410:	80 f3       	brcs	.-32     	; 0x3f2 <getCommand+0x10e>
				commandRecieved = 1;
				break;
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
				commandRecieved = 1;
				for (int i = 0; i < 10; i++) {
     412:	ff ef       	ldi	r31, 0xFF	; 255
     414:	8f 1a       	sub	r8, r31
     416:	9f 0a       	sbc	r9, r31
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	82 16       	cp	r8, r18
     41c:	91 04       	cpc	r9, r1
     41e:	29 f6       	brne	.-118    	; 0x3aa <getCommand+0xc6>
     420:	16 c0       	rjmp	.+44     	; 0x44e <getCommand+0x16a>
					if (foundObjects[i].diameter == 0 || foundObjects[i].location == 0) {
     422:	f2 01       	movw	r30, r4
     424:	22 81       	ldd	r18, Z+2	; 0x02
     426:	33 81       	ldd	r19, Z+3	; 0x03
     428:	21 15       	cp	r18, r1
     42a:	31 05       	cpc	r19, r1
     42c:	81 f0       	breq	.+32     	; 0x44e <getCommand+0x16a>
     42e:	52 01       	movw	r10, r4
				commandRecieved = 1;
				break;
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
				commandRecieved = 1;
				for (int i = 0; i < 10; i++) {
     430:	81 2c       	mov	r8, r1
     432:	91 2c       	mov	r9, r1
					if (foundObjects[i].diameter == 0 || foundObjects[i].location == 0) {
						break;
					}
					char output[30];
					sprintf(output, "Diameter: %2d Angle: %3d\r\n", foundObjects[i].diameter, foundObjects[i].location);
     434:	0f 2e       	mov	r0, r31
     436:	ff e1       	ldi	r31, 0x1F	; 31
     438:	6f 2e       	mov	r6, r31
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	7f 2e       	mov	r7, r31
     43e:	f0 2d       	mov	r31, r0
     440:	7e 01       	movw	r14, r28
     442:	f8 e0       	ldi	r31, 0x08	; 8
     444:	ef 0e       	add	r14, r31
     446:	f1 1c       	adc	r15, r1
     448:	2e 2c       	mov	r2, r14
     44a:	3f 2c       	mov	r3, r15
     44c:	be cf       	rjmp	.-132    	; 0x3ca <getCommand+0xe6>
					
					for(int i = 0; i < strlen(output); i++){		//  Transmit object data
						USART_Transmit(output[i]);
					}
				}
				free(foundObjects);
     44e:	c2 01       	movw	r24, r4
     450:	0e 94 39 0b 	call	0x1672	; 0x1672 <free>
				break;
     454:	02 c0       	rjmp	.+4      	; 0x45a <getCommand+0x176>
			default:
				command = USART_Receive();
     456:	69 d3       	rcall	.+1746   	; 0xb2a <USART_Receive>
     458:	61 cf       	rjmp	.-318    	; 0x31c <getCommand+0x38>
		}	
	}
}
     45a:	a5 96       	adiw	r28, 0x25	; 37
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	9f 90       	pop	r9
     47c:	8f 90       	pop	r8
     47e:	7f 90       	pop	r7
     480:	6f 90       	pop	r6
     482:	5f 90       	pop	r5
     484:	4f 90       	pop	r4
     486:	3f 90       	pop	r3
     488:	2f 90       	pop	r2
     48a:	08 95       	ret

0000048c <main>:

unsigned long time_diff;

int main(void)
{
    lcd_init();
     48c:	2f d0       	rcall	.+94     	; 0x4ec <lcd_init>
    ADC_init();
     48e:	f3 d3       	rcall	.+2022   	; 0xc76 <ADC_init>
    pinginit();
     490:	be d3       	rcall	.+1916   	; 0xc0e <pinginit>
    timer3_init();
     492:	61 d3       	rcall	.+1730   	; 0xb56 <timer3_init>
	USART_init();
     494:	3e d3       	rcall	.+1660   	; 0xb12 <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     496:	c4 d1       	rcall	.+904    	; 0x820 <oi_alloc>
     498:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
     49a:	c6 d2       	rcall	.+1420   	; 0xa28 <oi_init>
	
	while(1)
    {
		getCommand(sensor_data);
     49c:	ce 01       	movw	r24, r28
     49e:	22 df       	rcall	.-444    	; 0x2e4 <getCommand>
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <main+0x10>

000004a2 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     4a2:	de 9a       	sbi	0x1b, 6	; 27
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	08 d3       	rcall	.+1552   	; 0xab8 <wait_ms>
     4a8:	de 98       	cbi	0x1b, 6	; 27
     4aa:	8b b3       	in	r24, 0x1b	; 27
     4ac:	80 7f       	andi	r24, 0xF0	; 240
     4ae:	8b bb       	out	0x1b, r24	; 27
     4b0:	08 95       	ret

000004b2 <lcd_command>:
     4b2:	cf 93       	push	r28
     4b4:	c8 2f       	mov	r28, r24
     4b6:	dc 98       	cbi	0x1b, 4	; 27
     4b8:	8b b3       	in	r24, 0x1b	; 27
     4ba:	9c 2f       	mov	r25, r28
     4bc:	92 95       	swap	r25
     4be:	9f 70       	andi	r25, 0x0F	; 15
     4c0:	89 2b       	or	r24, r25
     4c2:	8b bb       	out	0x1b, r24	; 27
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	ed df       	rcall	.-38     	; 0x4a2 <lcd_toggle_clear>
     4c8:	8b b3       	in	r24, 0x1b	; 27
     4ca:	cf 70       	andi	r28, 0x0F	; 15
     4cc:	c8 2b       	or	r28, r24
     4ce:	cb bb       	out	0x1b, r28	; 27
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	e7 df       	rcall	.-50     	; 0x4a2 <lcd_toggle_clear>
     4d4:	dc 9a       	sbi	0x1b, 4	; 27
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <lcd_clear>:
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	ea df       	rcall	.-44     	; 0x4b2 <lcd_command>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	ea c2       	rjmp	.+1492   	; 0xab8 <wait_ms>
     4e4:	08 95       	ret

000004e6 <lcd_home_line1>:
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	e4 cf       	rjmp	.-56     	; 0x4b2 <lcd_command>
     4ea:	08 95       	ret

000004ec <lcd_init>:
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	8a bb       	out	0x1a, r24	; 26
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	8b bb       	out	0x1b, r24	; 27
     4f4:	de 9a       	sbi	0x1b, 6	; 27
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	de d2       	rcall	.+1468   	; 0xab8 <wait_ms>
     4fc:	de 98       	cbi	0x1b, 6	; 27
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	da d2       	rcall	.+1460   	; 0xab8 <wait_ms>
     504:	de 9a       	sbi	0x1b, 6	; 27
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	d6 d2       	rcall	.+1452   	; 0xab8 <wait_ms>
     50c:	de 98       	cbi	0x1b, 6	; 27
     50e:	de 9a       	sbi	0x1b, 6	; 27
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	d1 d2       	rcall	.+1442   	; 0xab8 <wait_ms>
     516:	de 98       	cbi	0x1b, 6	; 27
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	8b bb       	out	0x1b, r24	; 27
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	c1 df       	rcall	.-126    	; 0x4a2 <lcd_toggle_clear>
     520:	8b b3       	in	r24, 0x1b	; 27
     522:	8b bb       	out	0x1b, r24	; 27
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	bd df       	rcall	.-134    	; 0x4a2 <lcd_toggle_clear>
     528:	8b b3       	in	r24, 0x1b	; 27
     52a:	8e 60       	ori	r24, 0x0E	; 14
     52c:	8b bb       	out	0x1b, r24	; 27
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	b8 df       	rcall	.-144    	; 0x4a2 <lcd_toggle_clear>
     532:	8b b3       	in	r24, 0x1b	; 27
     534:	8b bb       	out	0x1b, r24	; 27
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	b4 df       	rcall	.-152    	; 0x4a2 <lcd_toggle_clear>
     53a:	8b b3       	in	r24, 0x1b	; 27
     53c:	86 60       	ori	r24, 0x06	; 6
     53e:	8b bb       	out	0x1b, r24	; 27
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	af df       	rcall	.-162    	; 0x4a2 <lcd_toggle_clear>
     544:	8b b3       	in	r24, 0x1b	; 27
     546:	8b bb       	out	0x1b, r24	; 27
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	ab df       	rcall	.-170    	; 0x4a2 <lcd_toggle_clear>
     54c:	d8 9a       	sbi	0x1b, 0	; 27
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	a8 df       	rcall	.-176    	; 0x4a2 <lcd_toggle_clear>
     552:	dc 9a       	sbi	0x1b, 4	; 27
     554:	c8 cf       	rjmp	.-112    	; 0x4e6 <lcd_home_line1>
     556:	08 95       	ret

00000558 <lcd_home_line2>:
     558:	80 ec       	ldi	r24, 0xC0	; 192
     55a:	ab cf       	rjmp	.-170    	; 0x4b2 <lcd_command>
     55c:	08 95       	ret

0000055e <lcd_home_line3>:
     55e:	84 e9       	ldi	r24, 0x94	; 148
     560:	a8 cf       	rjmp	.-176    	; 0x4b2 <lcd_command>
     562:	08 95       	ret

00000564 <lcd_home_line4>:
     564:	84 ed       	ldi	r24, 0xD4	; 212
     566:	a5 cf       	rjmp	.-182    	; 0x4b2 <lcd_command>
     568:	08 95       	ret

0000056a <lcd_putc>:
     56a:	cf 93       	push	r28
     56c:	c8 2f       	mov	r28, r24
     56e:	8b b3       	in	r24, 0x1b	; 27
     570:	9c 2f       	mov	r25, r28
     572:	92 95       	swap	r25
     574:	9f 70       	andi	r25, 0x0F	; 15
     576:	89 2b       	or	r24, r25
     578:	8b bb       	out	0x1b, r24	; 27
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	92 df       	rcall	.-220    	; 0x4a2 <lcd_toggle_clear>
     57e:	8b b3       	in	r24, 0x1b	; 27
     580:	cf 70       	andi	r28, 0x0F	; 15
     582:	c8 2b       	or	r28, r24
     584:	cb bb       	out	0x1b, r28	; 27
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	8c df       	rcall	.-232    	; 0x4a2 <lcd_toggle_clear>
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	c1 55       	subi	r28, 0x51	; 81
     5a4:	d1 09       	sbc	r29, r1
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	fe 01       	movw	r30, r28
     5b2:	e4 5a       	subi	r30, 0xA4	; 164
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	41 91       	ld	r20, Z+
     5b8:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     5ba:	9f 01       	movw	r18, r30
     5bc:	61 e5       	ldi	r22, 0x51	; 81
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	ce 01       	movw	r24, r28
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	0e 94 32 0c 	call	0x1864	; 0x1864 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	8a e3       	ldi	r24, 0x3A	; 58
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <strcmp>
     5d6:	89 2b       	or	r24, r25
     5d8:	09 f4       	brne	.+2      	; 0x5dc <lprintf+0x4e>
     5da:	40 c0       	rjmp	.+128    	; 0x65c <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     5dc:	be 01       	movw	r22, r28
     5de:	6f 5f       	subi	r22, 0xFF	; 255
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	8a e3       	ldi	r24, 0x3A	; 58
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <strcpy>
	lcd_clear();
     5ea:	77 df       	rcall	.-274    	; 0x4da <lcd_clear>
     5ec:	9e 01       	movw	r18, r28
     5ee:	2f 5f       	subi	r18, 0xFF	; 255
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f4 e1       	ldi	r31, 0x14	; 20
     5fc:	ef 2e       	mov	r14, r31
     5fe:	f1 2c       	mov	r15, r1
     600:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     602:	24 c0       	rjmp	.+72     	; 0x64c <lprintf+0xbe>
		if (*str == '\n') {
     604:	8a 30       	cpi	r24, 0x0A	; 10
     606:	49 f4       	brne	.+18     	; 0x61a <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     608:	c8 01       	movw	r24, r16
     60a:	b7 01       	movw	r22, r14
     60c:	59 d7       	rcall	.+3762   	; 0x14c0 <__divmodhi4>
     60e:	f7 01       	movw	r30, r14
     610:	e8 1b       	sub	r30, r24
     612:	f9 0b       	sbc	r31, r25
     614:	0e 0f       	add	r16, r30
     616:	1f 1f       	adc	r17, r31
     618:	03 c0       	rjmp	.+6      	; 0x620 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     61a:	a7 df       	rcall	.-178    	; 0x56a <lcd_putc>
			charnum++;
     61c:	0f 5f       	subi	r16, 0xFF	; 255
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     620:	c8 01       	movw	r24, r16
     622:	b7 01       	movw	r22, r14
     624:	4d d7       	rcall	.+3738   	; 0x14c0 <__divmodhi4>
     626:	89 2b       	or	r24, r25
     628:	89 f4       	brne	.+34     	; 0x64c <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     62a:	c8 01       	movw	r24, r16
     62c:	b7 01       	movw	r22, r14
     62e:	48 d7       	rcall	.+3728   	; 0x14c0 <__divmodhi4>
     630:	62 30       	cpi	r22, 0x02	; 2
     632:	71 05       	cpc	r23, r1
     634:	41 f0       	breq	.+16     	; 0x646 <lprintf+0xb8>
     636:	63 30       	cpi	r22, 0x03	; 3
     638:	71 05       	cpc	r23, r1
     63a:	39 f0       	breq	.+14     	; 0x64a <lprintf+0xbc>
     63c:	61 30       	cpi	r22, 0x01	; 1
     63e:	71 05       	cpc	r23, r1
     640:	29 f4       	brne	.+10     	; 0x64c <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     642:	8a df       	rcall	.-236    	; 0x558 <lcd_home_line2>
				break;
     644:	03 c0       	rjmp	.+6      	; 0x64c <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     646:	8b df       	rcall	.-234    	; 0x55e <lcd_home_line3>
				break;
     648:	01 c0       	rjmp	.+2      	; 0x64c <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     64a:	8c df       	rcall	.-232    	; 0x564 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     64c:	f6 01       	movw	r30, r12
     64e:	81 91       	ld	r24, Z+
     650:	6f 01       	movw	r12, r30
     652:	88 23       	and	r24, r24
     654:	19 f0       	breq	.+6      	; 0x65c <lprintf+0xce>
     656:	00 35       	cpi	r16, 0x50	; 80
     658:	11 05       	cpc	r17, r1
     65a:	a4 f2       	brlt	.-88     	; 0x604 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     65c:	cf 5a       	subi	r28, 0xAF	; 175
     65e:	df 4f       	sbci	r29, 0xFF	; 255
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <move_backward>:
		sum += sensor->distance;
	}
}

void move_backward(oi_t *sensor, int centimeters)
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     686:	eb 01       	movw	r28, r22
     688:	cc 0f       	add	r28, r28
     68a:	dd 1f       	adc	r29, r29
     68c:	66 0f       	add	r22, r22
     68e:	77 1f       	adc	r23, r23
     690:	66 0f       	add	r22, r22
     692:	77 1f       	adc	r23, r23
     694:	66 0f       	add	r22, r22
     696:	77 1f       	adc	r23, r23
     698:	c6 0f       	add	r28, r22
     69a:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     69c:	68 e3       	ldi	r22, 0x38	; 56
     69e:	7f ef       	ldi	r23, 0xFF	; 255
     6a0:	88 e3       	ldi	r24, 0x38	; 56
     6a2:	9f ef       	ldi	r25, 0xFF	; 255
     6a4:	e7 d0       	rcall	.+462    	; 0x874 <oi_set_wheels>
	while (sum > 0) {
     6a6:	1c 16       	cp	r1, r28
     6a8:	1d 06       	cpc	r1, r29
     6aa:	54 f4       	brge	.+20     	; 0x6c0 <move_backward+0x44>
		oi_update(sensor);
     6ac:	c8 01       	movw	r24, r16
     6ae:	01 d1       	rcall	.+514    	; 0x8b2 <oi_update>
		sum += sensor->distance;
     6b0:	f8 01       	movw	r30, r16
     6b2:	84 85       	ldd	r24, Z+12	; 0x0c
     6b4:	95 85       	ldd	r25, Z+13	; 0x0d
     6b6:	c8 0f       	add	r28, r24
     6b8:	d9 1f       	adc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     6ba:	1c 16       	cp	r1, r28
     6bc:	1d 06       	cpc	r1, r29
     6be:	b4 f3       	brlt	.-20     	; 0x6ac <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	d5 d0       	rcall	.+426    	; 0x874 <oi_set_wheels>
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	8c 01       	movw	r16, r24
     6de:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     6e0:	66 e9       	ldi	r22, 0x96	; 150
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	8a e6       	ldi	r24, 0x6A	; 106
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	c5 d0       	rcall	.+394    	; 0x874 <oi_set_wheels>
	while (sum > 0) {
     6ea:	1c 16       	cp	r1, r28
     6ec:	1d 06       	cpc	r1, r29
     6ee:	54 f4       	brge	.+20     	; 0x704 <turn_clockwise+0x30>
		oi_update(sensor);
     6f0:	c8 01       	movw	r24, r16
     6f2:	df d0       	rcall	.+446    	; 0x8b2 <oi_update>
		sum += sensor->angle;
     6f4:	f8 01       	movw	r30, r16
     6f6:	86 85       	ldd	r24, Z+14	; 0x0e
     6f8:	97 85       	ldd	r25, Z+15	; 0x0f
     6fa:	c8 0f       	add	r28, r24
     6fc:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     6fe:	1c 16       	cp	r1, r28
     700:	1d 06       	cpc	r1, r29
     702:	b4 f3       	brlt	.-20     	; 0x6f0 <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	b3 d0       	rcall	.+358    	; 0x874 <oi_set_wheels>
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <turn_counterClockwise>:

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	8c 01       	movw	r16, r24
     726:	7b 01       	movw	r14, r22
	int sum = 0;
	oi_set_wheels(150, -150);  // start turning
     728:	6a e6       	ldi	r22, 0x6A	; 106
     72a:	7f ef       	ldi	r23, 0xFF	; 255
     72c:	86 e9       	ldi	r24, 0x96	; 150
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a1 d0       	rcall	.+322    	; 0x874 <oi_set_wheels>
	while (sum < degrees) {
     732:	1e 14       	cp	r1, r14
     734:	1f 04       	cpc	r1, r15
     736:	64 f4       	brge	.+24     	; 0x750 <turn_counterClockwise+0x38>
	oi_set_wheels(0, 0);		// stop turning
}

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
	int sum = 0;
     738:	c0 e0       	ldi	r28, 0x00	; 0
     73a:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(150, -150);  // start turning
	while (sum < degrees) {
		oi_update(sensor);
     73c:	c8 01       	movw	r24, r16
     73e:	b9 d0       	rcall	.+370    	; 0x8b2 <oi_update>
		sum += sensor->angle;
     740:	f8 01       	movw	r30, r16
     742:	86 85       	ldd	r24, Z+14	; 0x0e
     744:	97 85       	ldd	r25, Z+15	; 0x0f
     746:	c8 0f       	add	r28, r24
     748:	d9 1f       	adc	r29, r25

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
	int sum = 0;
	oi_set_wheels(150, -150);  // start turning
	while (sum < degrees) {
     74a:	ce 15       	cp	r28, r14
     74c:	df 05       	cpc	r29, r15
     74e:	b4 f3       	brlt	.-20     	; 0x73c <turn_counterClockwise+0x24>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	8d d0       	rcall	.+282    	; 0x874 <oi_set_wheels>
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	08 95       	ret

00000768 <move_forward>:
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
     77a:	6b 01       	movw	r12, r22
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
     77c:	68 ec       	ldi	r22, 0xC8	; 200
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	88 ec       	ldi	r24, 0xC8	; 200
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	77 d0       	rcall	.+238    	; 0x874 <oi_set_wheels>
	while (sum < centimeters * 10) {
     786:	76 01       	movw	r14, r12
     788:	ee 0c       	add	r14, r14
     78a:	ff 1c       	adc	r15, r15
     78c:	c6 01       	movw	r24, r12
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	e8 0e       	add	r14, r24
     79c:	f9 1e       	adc	r15, r25
     79e:	1e 14       	cp	r1, r14
     7a0:	1f 04       	cpc	r1, r15
     7a2:	84 f5       	brge	.+96     	; 0x804 <move_forward+0x9c>
		if (sensor->bumper_left || sensor->bumper_right) {
     7a4:	88 81       	ld	r24, Y
     7a6:	83 70       	andi	r24, 0x03	; 3
     7a8:	11 f1       	breq	.+68     	; 0x7ee <move_forward+0x86>
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <move_forward+0x4c>
     7ac:	88 81       	ld	r24, Y
     7ae:	83 70       	andi	r24, 0x03	; 3
     7b0:	01 f1       	breq	.+64     	; 0x7f2 <move_forward+0x8a>
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <move_forward+0x50>
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	10 e0       	ldi	r17, 0x00	; 0
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
		if (sensor->bumper_left || sensor->bumper_right) {
			move_backward(sensor, 15);
     7b8:	6f e0       	ldi	r22, 0x0F	; 15
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	ce 01       	movw	r24, r28
     7be:	5e df       	rcall	.-324    	; 0x67c <move_backward>
			turn_clockwise(sensor, 87);
     7c0:	67 e5       	ldi	r22, 0x57	; 87
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	ce 01       	movw	r24, r28
     7c6:	86 df       	rcall	.-244    	; 0x6d4 <turn_clockwise>
			move_forward(sensor, 25);
     7c8:	69 e1       	ldi	r22, 0x19	; 25
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	ce 01       	movw	r24, r28
     7ce:	cc df       	rcall	.-104    	; 0x768 <move_forward>
			turn_counterClockwise(sensor, 87);
     7d0:	67 e5       	ldi	r22, 0x57	; 87
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	a0 df       	rcall	.-192    	; 0x718 <turn_counterClockwise>
			move_forward(sensor, (centimeters - (sum / 10)));
     7d8:	c8 01       	movw	r24, r16
     7da:	6a e0       	ldi	r22, 0x0A	; 10
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	70 d6       	rcall	.+3296   	; 0x14c0 <__divmodhi4>
     7e0:	c6 01       	movw	r24, r12
     7e2:	86 1b       	sub	r24, r22
     7e4:	97 0b       	sbc	r25, r23
     7e6:	bc 01       	movw	r22, r24
     7e8:	ce 01       	movw	r24, r28
     7ea:	be df       	rcall	.-132    	; 0x768 <move_forward>
			break;
     7ec:	0b c0       	rjmp	.+22     	; 0x804 <move_forward+0x9c>
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     7ee:	00 e0       	ldi	r16, 0x00	; 0
     7f0:	10 e0       	ldi	r17, 0x00	; 0
			move_forward(sensor, 25);
			turn_counterClockwise(sensor, 87);
			move_forward(sensor, (centimeters - (sum / 10)));
			break;
		}
		oi_update(sensor);
     7f2:	ce 01       	movw	r24, r28
     7f4:	5e d0       	rcall	.+188    	; 0x8b2 <oi_update>
		sum += sensor->distance;
     7f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7fa:	08 0f       	add	r16, r24
     7fc:	19 1f       	adc	r17, r25

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     7fe:	0e 15       	cp	r16, r14
     800:	1f 05       	cpc	r17, r15
     802:	a4 f2       	brlt	.-88     	; 0x7ac <move_forward+0x44>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	33 d0       	rcall	.+102    	; 0x874 <oi_set_wheels>
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     820:	64 e3       	ldi	r22, 0x34	; 52
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	72 c6       	rjmp	.+3300   	; 0x150e <calloc>
     82a:	08 95       	ret

0000082c <oi_byte_tx>:
     82c:	eb e9       	ldi	r30, 0x9B	; 155
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	90 81       	ld	r25, Z
     832:	95 ff       	sbrs	r25, 5
     834:	fd cf       	rjmp	.-6      	; 0x830 <oi_byte_tx+0x4>
     836:	80 93 9c 00 	sts	0x009C, r24
     83a:	08 95       	ret

0000083c <oi_set_leds>:
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	08 2f       	mov	r16, r24
     846:	16 2f       	mov	r17, r22
     848:	d4 2f       	mov	r29, r20
     84a:	c2 2f       	mov	r28, r18
     84c:	8b e8       	ldi	r24, 0x8B	; 139
     84e:	ee df       	rcall	.-36     	; 0x82c <oi_byte_tx>
     850:	11 23       	and	r17, r17
     852:	29 f0       	breq	.+10     	; 0x85e <oi_set_leds+0x22>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	01 11       	cpse	r16, r1
     858:	03 c0       	rjmp	.+6      	; 0x860 <oi_set_leds+0x24>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	01 c0       	rjmp	.+2      	; 0x860 <oi_set_leds+0x24>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	e5 df       	rcall	.-54     	; 0x82c <oi_byte_tx>
     862:	8d 2f       	mov	r24, r29
     864:	e3 df       	rcall	.-58     	; 0x82c <oi_byte_tx>
     866:	8c 2f       	mov	r24, r28
     868:	e1 df       	rcall	.-62     	; 0x82c <oi_byte_tx>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	08 95       	ret

00000874 <oi_set_wheels>:
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	18 2f       	mov	r17, r24
     87e:	09 2f       	mov	r16, r25
     880:	c6 2f       	mov	r28, r22
     882:	d7 2f       	mov	r29, r23
     884:	81 e9       	ldi	r24, 0x91	; 145
     886:	d2 df       	rcall	.-92     	; 0x82c <oi_byte_tx>
     888:	80 2f       	mov	r24, r16
     88a:	d0 df       	rcall	.-96     	; 0x82c <oi_byte_tx>
     88c:	81 2f       	mov	r24, r17
     88e:	ce df       	rcall	.-100    	; 0x82c <oi_byte_tx>
     890:	8d 2f       	mov	r24, r29
     892:	cc df       	rcall	.-104    	; 0x82c <oi_byte_tx>
     894:	8c 2f       	mov	r24, r28
     896:	ca df       	rcall	.-108    	; 0x82c <oi_byte_tx>
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret

000008a2 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     8a2:	eb e9       	ldi	r30, 0x9B	; 155
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	88 23       	and	r24, r24
     8aa:	ec f7       	brge	.-6      	; 0x8a6 <oi_byte_rx+0x4>

	return UDR1;
     8ac:	80 91 9c 00 	lds	r24, 0x009C
}
     8b0:	08 95       	ret

000008b2 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     8c0:	80 91 9b 00 	lds	r24, 0x009B
     8c4:	88 23       	and	r24, r24
     8c6:	44 f4       	brge	.+16     	; 0x8d8 <oi_update+0x26>
		i = UDR1;
     8c8:	ac e9       	ldi	r26, 0x9C	; 156
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     8cc:	eb e9       	ldi	r30, 0x9B	; 155
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     8d0:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     8d2:	80 81       	ld	r24, Z
     8d4:	88 23       	and	r24, r24
     8d6:	e4 f3       	brlt	.-8      	; 0x8d0 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     8d8:	8e e8       	ldi	r24, 0x8E	; 142
     8da:	a8 df       	rcall	.-176    	; 0x82c <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	a6 df       	rcall	.-180    	; 0x82c <oi_byte_tx>
     8e0:	e7 01       	movw	r28, r14
     8e2:	87 01       	movw	r16, r14
     8e4:	0c 5c       	subi	r16, 0xCC	; 204
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     8e8:	dc df       	rcall	.-72     	; 0x8a2 <oi_byte_rx>
     8ea:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     8ec:	c0 17       	cp	r28, r16
     8ee:	d1 07       	cpc	r29, r17
     8f0:	d9 f7       	brne	.-10     	; 0x8e8 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     8f2:	f7 01       	movw	r30, r14
     8f4:	84 85       	ldd	r24, Z+12	; 0x0c
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	98 2f       	mov	r25, r24
     8fa:	88 27       	eor	r24, r24
     8fc:	25 85       	ldd	r18, Z+13	; 0x0d
     8fe:	82 0f       	add	r24, r18
     900:	91 1d       	adc	r25, r1
     902:	95 87       	std	Z+13, r25	; 0x0d
     904:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     906:	86 85       	ldd	r24, Z+14	; 0x0e
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	98 2f       	mov	r25, r24
     90c:	88 27       	eor	r24, r24
     90e:	27 85       	ldd	r18, Z+15	; 0x0f
     910:	82 0f       	add	r24, r18
     912:	91 1d       	adc	r25, r1
     914:	97 87       	std	Z+15, r25	; 0x0f
     916:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     918:	81 89       	ldd	r24, Z+17	; 0x11
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	98 2f       	mov	r25, r24
     91e:	88 27       	eor	r24, r24
     920:	22 89       	ldd	r18, Z+18	; 0x12
     922:	82 0f       	add	r24, r18
     924:	91 1d       	adc	r25, r1
     926:	92 8b       	std	Z+18, r25	; 0x12
     928:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     92a:	83 89       	ldd	r24, Z+19	; 0x13
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	98 2f       	mov	r25, r24
     930:	88 27       	eor	r24, r24
     932:	24 89       	ldd	r18, Z+20	; 0x14
     934:	82 0f       	add	r24, r18
     936:	91 1d       	adc	r25, r1
     938:	94 8b       	std	Z+20, r25	; 0x14
     93a:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     93c:	86 89       	ldd	r24, Z+22	; 0x16
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	98 2f       	mov	r25, r24
     942:	88 27       	eor	r24, r24
     944:	27 89       	ldd	r18, Z+23	; 0x17
     946:	82 0f       	add	r24, r18
     948:	91 1d       	adc	r25, r1
     94a:	97 8b       	std	Z+23, r25	; 0x17
     94c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     94e:	80 8d       	ldd	r24, Z+24	; 0x18
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	98 2f       	mov	r25, r24
     954:	88 27       	eor	r24, r24
     956:	21 8d       	ldd	r18, Z+25	; 0x19
     958:	82 0f       	add	r24, r18
     95a:	91 1d       	adc	r25, r1
     95c:	91 8f       	std	Z+25, r25	; 0x19
     95e:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     960:	82 8d       	ldd	r24, Z+26	; 0x1a
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	98 2f       	mov	r25, r24
     966:	88 27       	eor	r24, r24
     968:	23 8d       	ldd	r18, Z+27	; 0x1b
     96a:	82 0f       	add	r24, r18
     96c:	91 1d       	adc	r25, r1
     96e:	93 8f       	std	Z+27, r25	; 0x1b
     970:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     972:	84 8d       	ldd	r24, Z+28	; 0x1c
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	98 2f       	mov	r25, r24
     978:	88 27       	eor	r24, r24
     97a:	25 8d       	ldd	r18, Z+29	; 0x1d
     97c:	82 0f       	add	r24, r18
     97e:	91 1d       	adc	r25, r1
     980:	95 8f       	std	Z+29, r25	; 0x1d
     982:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     984:	86 8d       	ldd	r24, Z+30	; 0x1e
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	98 2f       	mov	r25, r24
     98a:	88 27       	eor	r24, r24
     98c:	27 8d       	ldd	r18, Z+31	; 0x1f
     98e:	82 0f       	add	r24, r18
     990:	91 1d       	adc	r25, r1
     992:	97 8f       	std	Z+31, r25	; 0x1f
     994:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     996:	80 a1       	ldd	r24, Z+32	; 0x20
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	98 2f       	mov	r25, r24
     99c:	88 27       	eor	r24, r24
     99e:	21 a1       	ldd	r18, Z+33	; 0x21
     9a0:	82 0f       	add	r24, r18
     9a2:	91 1d       	adc	r25, r1
     9a4:	91 a3       	std	Z+33, r25	; 0x21
     9a6:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     9a8:	82 a1       	ldd	r24, Z+34	; 0x22
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	98 2f       	mov	r25, r24
     9ae:	88 27       	eor	r24, r24
     9b0:	23 a1       	ldd	r18, Z+35	; 0x23
     9b2:	82 0f       	add	r24, r18
     9b4:	91 1d       	adc	r25, r1
     9b6:	93 a3       	std	Z+35, r25	; 0x23
     9b8:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     9ba:	82 a5       	ldd	r24, Z+42	; 0x2a
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	21 a5       	ldd	r18, Z+41	; 0x29
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	32 2f       	mov	r19, r18
     9c4:	22 27       	eor	r18, r18
     9c6:	28 0f       	add	r18, r24
     9c8:	39 1f       	adc	r19, r25
     9ca:	36 a3       	std	Z+38, r19	; 0x26
     9cc:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     9ce:	20 a9       	ldd	r18, Z+48	; 0x30
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	32 2f       	mov	r19, r18
     9d4:	22 27       	eor	r18, r18
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	95 a7       	std	Z+45, r25	; 0x2d
     9dc:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     9de:	82 a9       	ldd	r24, Z+50	; 0x32
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	98 2f       	mov	r25, r24
     9e4:	88 27       	eor	r24, r24
     9e6:	23 a9       	ldd	r18, Z+51	; 0x33
     9e8:	82 0f       	add	r24, r18
     9ea:	91 1d       	adc	r25, r1
     9ec:	97 a7       	std	Z+47, r25	; 0x2f
     9ee:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     9f0:	84 a9       	ldd	r24, Z+52	; 0x34
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	98 2f       	mov	r25, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	25 a9       	ldd	r18, Z+53	; 0x35
     9fa:	82 0f       	add	r24, r18
     9fc:	91 1d       	adc	r25, r1
     9fe:	91 ab       	std	Z+49, r25	; 0x31
     a00:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     a02:	86 a9       	ldd	r24, Z+54	; 0x36
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	98 2f       	mov	r25, r24
     a08:	88 27       	eor	r24, r24
     a0a:	27 a9       	ldd	r18, Z+55	; 0x37
     a0c:	82 0f       	add	r24, r18
     a0e:	91 1d       	adc	r25, r1
     a10:	93 ab       	std	Z+51, r25	; 0x33
     a12:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     a14:	83 e2       	ldi	r24, 0x23	; 35
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	4f d0       	rcall	.+158    	; 0xab8 <wait_ms>
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	08 95       	ret

00000a28 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     a32:	09 e9       	ldi	r16, 0x99	; 153
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	80 e1       	ldi	r24, 0x10	; 16
     a38:	f8 01       	movw	r30, r16
     a3a:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     a3c:	88 e1       	ldi	r24, 0x18	; 24
     a3e:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     a42:	86 e0       	ldi	r24, 0x06	; 6
     a44:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	f0 de       	rcall	.-544    	; 0x82c <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     a4c:	81 e8       	ldi	r24, 0x81	; 129
     a4e:	ee de       	rcall	.-548    	; 0x82c <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	ec de       	rcall	.-552    	; 0x82c <oi_byte_tx>
	wait_ms(100);
     a54:	84 e6       	ldi	r24, 0x64	; 100
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	2f d0       	rcall	.+94     	; 0xab8 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     a5a:	81 e2       	ldi	r24, 0x21	; 33
     a5c:	f8 01       	movw	r30, r16
     a5e:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     a60:	84 e8       	ldi	r24, 0x84	; 132
     a62:	e4 de       	rcall	.-568    	; 0x82c <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     a64:	2f ef       	ldi	r18, 0xFF	; 255
     a66:	47 e0       	ldi	r20, 0x07	; 7
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	e7 de       	rcall	.-562    	; 0x83c <oi_set_leds>
	
	oi_update(self);
     a6e:	ce 01       	movw	r24, r28
     a70:	20 df       	rcall	.-448    	; 0x8b2 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     a72:	ce 01       	movw	r24, r28
     a74:	1e df       	rcall	.-452    	; 0x8b2 <oi_update>
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <timer2_start>:
 * -1 = CCW rotation
 */
char read_shaft_encoder(void) 
{
	return 0;
}
     a80:	10 92 99 01 	sts	0x0199, r1
     a84:	10 92 98 01 	sts	0x0198, r1
     a88:	81 11       	cpse	r24, r1
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <timer2_start+0x18>
     a8c:	8b e0       	ldi	r24, 0x0B	; 11
     a8e:	85 bd       	out	0x25, r24	; 37
     a90:	87 b7       	in	r24, 0x37	; 55
     a92:	80 68       	ori	r24, 0x80	; 128
     a94:	87 bf       	out	0x37, r24	; 55
     a96:	07 c0       	rjmp	.+14     	; 0xaa6 <timer2_start+0x26>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	29 f4       	brne	.+10     	; 0xaa6 <timer2_start+0x26>
     a9c:	89 e0       	ldi	r24, 0x09	; 9
     a9e:	85 bd       	out	0x25, r24	; 37
     aa0:	87 b7       	in	r24, 0x37	; 55
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	87 bf       	out	0x37, r24	; 55
     aa6:	78 94       	sei
     aa8:	08 95       	ret

00000aaa <timer2_stop>:
     aaa:	87 b7       	in	r24, 0x37	; 55
     aac:	8f 77       	andi	r24, 0x7F	; 127
     aae:	87 bf       	out	0x37, r24	; 55
     ab0:	85 b5       	in	r24, 0x25	; 37
     ab2:	8f 77       	andi	r24, 0x7F	; 127
     ab4:	85 bd       	out	0x25, r24	; 37
     ab6:	08 95       	ret

00000ab8 <wait_ms>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	8a ef       	ldi	r24, 0xFA	; 250
     ac0:	83 bd       	out	0x23, r24	; 35
     ac2:	10 92 99 01 	sts	0x0199, r1
     ac6:	10 92 98 01 	sts	0x0198, r1
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	d9 df       	rcall	.-78     	; 0xa80 <timer2_start>
     ace:	20 91 98 01 	lds	r18, 0x0198
     ad2:	30 91 99 01 	lds	r19, 0x0199
     ad6:	2c 17       	cp	r18, r28
     ad8:	3d 07       	cpc	r19, r29
     ada:	c8 f3       	brcs	.-14     	; 0xace <wait_ms+0x16>
     adc:	e6 df       	rcall	.-52     	; 0xaaa <timer2_stop>
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <__vector_9>:
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	80 91 98 01 	lds	r24, 0x0198
     af6:	90 91 99 01 	lds	r25, 0x0199
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	90 93 99 01 	sts	0x0199, r25
     b00:	80 93 98 01 	sts	0x0198, r24
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <USART_init>:

void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
     b12:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
     b16:	82 e2       	ldi	r24, 0x22	; 34
     b18:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
     b1e:	8e e0       	ldi	r24, 0x0E	; 14
     b20:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
     b24:	88 e1       	ldi	r24, 0x18	; 24
     b26:	8a b9       	out	0x0a, r24	; 10
     b28:	08 95       	ret

00000b2a <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
     b2a:	5f 9b       	sbis	0x0b, 7	; 11
     b2c:	fe cf       	rjmp	.-4      	; 0xb2a <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     b2e:	8c b1       	in	r24, 0x0c	; 12
}
     b30:	08 95       	ret

00000b32 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
     b32:	5d 9b       	sbis	0x0b, 5	; 11
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     b36:	8c b9       	out	0x0c, r24	; 12
     b38:	08 95       	ret

00000b3a <move_servo>:
}
		
int move_servo(int degree)
{
	int conv = 20*degree+800;
     b3a:	24 e1       	ldi	r18, 0x14	; 20
     b3c:	ac 01       	movw	r20, r24
     b3e:	24 9f       	mul	r18, r20
     b40:	c0 01       	movw	r24, r0
     b42:	25 9f       	mul	r18, r21
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	80 5e       	subi	r24, 0xE0	; 224
     b4a:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
     b4c:	90 93 85 00 	sts	0x0085, r25
     b50:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
     b54:	08 95       	ret

00000b56 <timer3_init>:

void timer3_init(void)
{
	TCCR3A = 0b00100011;
     b56:	83 e2       	ldi	r24, 0x23	; 35
     b58:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
     b5c:	8a e1       	ldi	r24, 0x1A	; 26
     b5e:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
     b62:	88 ef       	ldi	r24, 0xF8	; 248
     b64:	97 ea       	ldi	r25, 0xA7	; 167
     b66:	90 93 87 00 	sts	0x0087, r25
     b6a:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	//4250=180d //3500= 135d //2600=90d //1700 = 45d //0800 = 0d
     b6e:	80 e2       	ldi	r24, 0x20	; 32
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	90 93 85 00 	sts	0x0085, r25
     b76:	80 93 84 00 	sts	0x0084, r24
	//wait_ms(2000);
	//OCR3B = 0b0000011111010000;
	DDRE = 0b00010000;
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	82 b9       	out	0x02, r24	; 2
     b7e:	08 95       	ret

00000b80 <send_pulse>:
}

void send_pulse(void)
{
	DDRD |=0x10;
     b80:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     b82:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	97 df       	rcall	.-210    	; 0xab8 <wait_ms>
	PORTD &=0xEF;
     b8a:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
     b8c:	8c 98       	cbi	0x11, 4	; 17
     b8e:	08 95       	ret

00000b90 <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
	if(State==RISING){
     ba2:	80 91 97 01 	lds	r24, 0x0197
     ba6:	81 11       	cpse	r24, r1
     ba8:	13 c0       	rjmp	.+38     	; 0xbd0 <__vector_11+0x40>
		rising_time=ICR1;
     baa:	86 b5       	in	r24, 0x26	; 38
     bac:	97 b5       	in	r25, 0x27	; 39
     bae:	a0 e0       	ldi	r26, 0x00	; 0
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	80 93 93 01 	sts	0x0193, r24
     bb6:	90 93 94 01 	sts	0x0194, r25
     bba:	a0 93 95 01 	sts	0x0195, r26
     bbe:	b0 93 96 01 	sts	0x0196, r27
		State = FALLING;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 97 01 	sts	0x0197, r24
		TCCR1B &= 0b10111111;
     bc8:	8e b5       	in	r24, 0x2e	; 46
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	8e bd       	out	0x2e, r24	; 46
     bce:	16 c0       	rjmp	.+44     	; 0xbfc <__vector_11+0x6c>
	}
	else if(State==FALLING){
     bd0:	80 91 97 01 	lds	r24, 0x0197
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 f4       	brne	.+36     	; 0xbfc <__vector_11+0x6c>
		falling_time=ICR1;
     bd8:	86 b5       	in	r24, 0x26	; 38
     bda:	97 b5       	in	r25, 0x27	; 39
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	80 93 8f 01 	sts	0x018F, r24
     be4:	90 93 90 01 	sts	0x0190, r25
     be8:	a0 93 91 01 	sts	0x0191, r26
     bec:	b0 93 92 01 	sts	0x0192, r27
		State = DONE;
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	80 93 97 01 	sts	0x0197, r24
		TCCR1B |= 0b01000000;
     bf6:	8e b5       	in	r24, 0x2e	; 46
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8e bd       	out	0x2e, r24	; 46
	}
}
     bfc:	bf 91       	pop	r27
     bfe:	af 91       	pop	r26
     c00:	9f 91       	pop	r25
     c02:	8f 91       	pop	r24
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <pinginit>:

void pinginit(void)
{
	TIFR = 0b00000000;
     c0e:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
     c10:	83 ec       	ldi	r24, 0xC3	; 195
     c12:	8e bd       	out	0x2e, r24	; 46
     c14:	08 95       	ret

00000c16 <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
     c16:	10 92 97 01 	sts	0x0197, r1
	TIMSK &= 0b11011111;
     c1a:	87 b7       	in	r24, 0x37	; 55
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	87 bf       	out	0x37, r24	; 55
	send_pulse();
     c20:	af df       	rcall	.-162    	; 0xb80 <send_pulse>
	TIFR |= 0b00100000;
     c22:	86 b7       	in	r24, 0x36	; 54
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
     c28:	87 b7       	in	r24, 0x37	; 55
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
     c2e:	80 91 97 01 	lds	r24, 0x0197
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	e1 f7       	brne	.-8      	; 0xc2e <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
     c36:	40 91 8f 01 	lds	r20, 0x018F
     c3a:	50 91 90 01 	lds	r21, 0x0190
     c3e:	60 91 91 01 	lds	r22, 0x0191
     c42:	70 91 92 01 	lds	r23, 0x0192
     c46:	80 91 93 01 	lds	r24, 0x0193
     c4a:	90 91 94 01 	lds	r25, 0x0194
     c4e:	a0 91 95 01 	lds	r26, 0x0195
     c52:	b0 91 96 01 	lds	r27, 0x0196
     c56:	ba 01       	movw	r22, r20
     c58:	68 1b       	sub	r22, r24
     c5a:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
     c5c:	88 27       	eor	r24, r24
     c5e:	77 fd       	sbrc	r23, 7
     c60:	80 95       	com	r24
     c62:	98 2f       	mov	r25, r24
     c64:	46 d1       	rcall	.+652    	; 0xef2 <__floatsisf>
     c66:	29 e4       	ldi	r18, 0x49	; 73
     c68:	3b e4       	ldi	r19, 0x4B	; 75
     c6a:	4b e6       	ldi	r20, 0x6B	; 107
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	a6 d0       	rcall	.+332    	; 0xdbc <__divsf3>
     c70:	0d d1       	rcall	.+538    	; 0xe8c <__fixsfsi>
	
	return centimeters;
}
     c72:	cb 01       	movw	r24, r22
     c74:	08 95       	ret

00000c76 <ADC_init>:

void ADC_init(void)
{
	ADMUX=0b11000010;
     c76:	82 ec       	ldi	r24, 0xC2	; 194
     c78:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
     c7a:	87 e8       	ldi	r24, 0x87	; 135
     c7c:	86 b9       	out	0x06, r24	; 6
     c7e:	08 95       	ret

00000c80 <ADC_read>:
}

int ADC_read(void)
{
	ADCSRA |= 0b01000000;
     c80:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
     c82:	36 99       	sbic	0x06, 6	; 6
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <ADC_read+0x2>
	return ADC;
     c86:	84 b1       	in	r24, 0x04	; 4
     c88:	95 b1       	in	r25, 0x05	; 5
}
     c8a:	08 95       	ret

00000c8c <getIrDistance>:

int distance=0;
int value1=0;

int getIrDistance(void)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	c5 e0       	ldi	r28, 0x05	; 5
     c96:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
     c9c:	f1 df       	rcall	.-30     	; 0xc80 <ADC_read>
     c9e:	08 0f       	add	r16, r24
     ca0:	19 1f       	adc	r17, r25
     ca2:	21 97       	sbiw	r28, 0x01	; 1
int value1=0;

int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
     ca4:	20 97       	sbiw	r28, 0x00	; 0
     ca6:	d1 f7       	brne	.-12     	; 0xc9c <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
     ca8:	c8 01       	movw	r24, r16
     caa:	65 e0       	ldi	r22, 0x05	; 5
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	08 d4       	rcall	.+2064   	; 0x14c0 <__divmodhi4>
     cb0:	70 93 8c 01 	sts	0x018C, r23
     cb4:	60 93 8b 01 	sts	0x018B, r22
	distance = 24443*pow(value1,(-1.156));
     cb8:	88 27       	eor	r24, r24
     cba:	77 fd       	sbrc	r23, 7
     cbc:	80 95       	com	r24
     cbe:	98 2f       	mov	r25, r24
     cc0:	18 d1       	rcall	.+560    	; 0xef2 <__floatsisf>
     cc2:	2f ec       	ldi	r18, 0xCF	; 207
     cc4:	37 ef       	ldi	r19, 0xF7	; 247
     cc6:	43 e9       	ldi	r20, 0x93	; 147
     cc8:	5f eb       	ldi	r21, 0xBF	; 191
     cca:	3b d2       	rcall	.+1142   	; 0x1142 <pow>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	36 ef       	ldi	r19, 0xF6	; 246
     cd0:	4e eb       	ldi	r20, 0xBE	; 190
     cd2:	56 e4       	ldi	r21, 0x46	; 70
     cd4:	d3 d1       	rcall	.+934    	; 0x107c <__mulsf3>
     cd6:	da d0       	rcall	.+436    	; 0xe8c <__fixsfsi>
     cd8:	70 93 8e 01 	sts	0x018E, r23
     cdc:	60 93 8d 01 	sts	0x018D, r22
	return distance;
     ce0:	cb 01       	movw	r24, r22
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <__subsf3>:
     cec:	50 58       	subi	r21, 0x80	; 128

00000cee <__addsf3>:
     cee:	bb 27       	eor	r27, r27
     cf0:	aa 27       	eor	r26, r26
     cf2:	0e d0       	rcall	.+28     	; 0xd10 <__addsf3x>
     cf4:	78 c1       	rjmp	.+752    	; 0xfe6 <__fp_round>
     cf6:	41 d1       	rcall	.+642    	; 0xf7a <__fp_pscA>
     cf8:	30 f0       	brcs	.+12     	; 0xd06 <__addsf3+0x18>
     cfa:	46 d1       	rcall	.+652    	; 0xf88 <__fp_pscB>
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__addsf3+0x18>
     cfe:	31 f4       	brne	.+12     	; 0xd0c <__addsf3+0x1e>
     d00:	9f 3f       	cpi	r25, 0xFF	; 255
     d02:	11 f4       	brne	.+4      	; 0xd08 <__addsf3+0x1a>
     d04:	1e f4       	brtc	.+6      	; 0xd0c <__addsf3+0x1e>
     d06:	36 c1       	rjmp	.+620    	; 0xf74 <__fp_nan>
     d08:	0e f4       	brtc	.+2      	; 0xd0c <__addsf3+0x1e>
     d0a:	e0 95       	com	r30
     d0c:	e7 fb       	bst	r30, 7
     d0e:	2c c1       	rjmp	.+600    	; 0xf68 <__fp_inf>

00000d10 <__addsf3x>:
     d10:	e9 2f       	mov	r30, r25
     d12:	8b d1       	rcall	.+790    	; 0x102a <__fp_split3>
     d14:	80 f3       	brcs	.-32     	; 0xcf6 <__addsf3+0x8>
     d16:	ba 17       	cp	r27, r26
     d18:	62 07       	cpc	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	95 07       	cpc	r25, r21
     d20:	18 f0       	brcs	.+6      	; 0xd28 <__addsf3x+0x18>
     d22:	71 f4       	brne	.+28     	; 0xd40 <__addsf3x+0x30>
     d24:	9e f5       	brtc	.+102    	; 0xd8c <__addsf3x+0x7c>
     d26:	a3 c1       	rjmp	.+838    	; 0x106e <__fp_zero>
     d28:	0e f4       	brtc	.+2      	; 0xd2c <__addsf3x+0x1c>
     d2a:	e0 95       	com	r30
     d2c:	0b 2e       	mov	r0, r27
     d2e:	ba 2f       	mov	r27, r26
     d30:	a0 2d       	mov	r26, r0
     d32:	0b 01       	movw	r0, r22
     d34:	b9 01       	movw	r22, r18
     d36:	90 01       	movw	r18, r0
     d38:	0c 01       	movw	r0, r24
     d3a:	ca 01       	movw	r24, r20
     d3c:	a0 01       	movw	r20, r0
     d3e:	11 24       	eor	r1, r1
     d40:	ff 27       	eor	r31, r31
     d42:	59 1b       	sub	r21, r25
     d44:	99 f0       	breq	.+38     	; 0xd6c <__addsf3x+0x5c>
     d46:	59 3f       	cpi	r21, 0xF9	; 249
     d48:	50 f4       	brcc	.+20     	; 0xd5e <__addsf3x+0x4e>
     d4a:	50 3e       	cpi	r21, 0xE0	; 224
     d4c:	68 f1       	brcs	.+90     	; 0xda8 <__addsf3x+0x98>
     d4e:	1a 16       	cp	r1, r26
     d50:	f0 40       	sbci	r31, 0x00	; 0
     d52:	a2 2f       	mov	r26, r18
     d54:	23 2f       	mov	r18, r19
     d56:	34 2f       	mov	r19, r20
     d58:	44 27       	eor	r20, r20
     d5a:	58 5f       	subi	r21, 0xF8	; 248
     d5c:	f3 cf       	rjmp	.-26     	; 0xd44 <__addsf3x+0x34>
     d5e:	46 95       	lsr	r20
     d60:	37 95       	ror	r19
     d62:	27 95       	ror	r18
     d64:	a7 95       	ror	r26
     d66:	f0 40       	sbci	r31, 0x00	; 0
     d68:	53 95       	inc	r21
     d6a:	c9 f7       	brne	.-14     	; 0xd5e <__addsf3x+0x4e>
     d6c:	7e f4       	brtc	.+30     	; 0xd8c <__addsf3x+0x7c>
     d6e:	1f 16       	cp	r1, r31
     d70:	ba 0b       	sbc	r27, r26
     d72:	62 0b       	sbc	r22, r18
     d74:	73 0b       	sbc	r23, r19
     d76:	84 0b       	sbc	r24, r20
     d78:	ba f0       	brmi	.+46     	; 0xda8 <__addsf3x+0x98>
     d7a:	91 50       	subi	r25, 0x01	; 1
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <__addsf3x+0x96>
     d7e:	ff 0f       	add	r31, r31
     d80:	bb 1f       	adc	r27, r27
     d82:	66 1f       	adc	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	c2 f7       	brpl	.-16     	; 0xd7a <__addsf3x+0x6a>
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <__addsf3x+0x98>
     d8c:	ba 0f       	add	r27, r26
     d8e:	62 1f       	adc	r22, r18
     d90:	73 1f       	adc	r23, r19
     d92:	84 1f       	adc	r24, r20
     d94:	48 f4       	brcc	.+18     	; 0xda8 <__addsf3x+0x98>
     d96:	87 95       	ror	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	b7 95       	ror	r27
     d9e:	f7 95       	ror	r31
     da0:	9e 3f       	cpi	r25, 0xFE	; 254
     da2:	08 f0       	brcs	.+2      	; 0xda6 <__addsf3x+0x96>
     da4:	b3 cf       	rjmp	.-154    	; 0xd0c <__addsf3+0x1e>
     da6:	93 95       	inc	r25
     da8:	88 0f       	add	r24, r24
     daa:	08 f0       	brcs	.+2      	; 0xdae <__addsf3x+0x9e>
     dac:	99 27       	eor	r25, r25
     dae:	ee 0f       	add	r30, r30
     db0:	97 95       	ror	r25
     db2:	87 95       	ror	r24
     db4:	08 95       	ret

00000db6 <cos>:
     db6:	f0 d0       	rcall	.+480    	; 0xf98 <__fp_rempio2>
     db8:	e3 95       	inc	r30
     dba:	26 c1       	rjmp	.+588    	; 0x1008 <__fp_sinus>

00000dbc <__divsf3>:
     dbc:	0c d0       	rcall	.+24     	; 0xdd6 <__divsf3x>
     dbe:	13 c1       	rjmp	.+550    	; 0xfe6 <__fp_round>
     dc0:	e3 d0       	rcall	.+454    	; 0xf88 <__fp_pscB>
     dc2:	40 f0       	brcs	.+16     	; 0xdd4 <__divsf3+0x18>
     dc4:	da d0       	rcall	.+436    	; 0xf7a <__fp_pscA>
     dc6:	30 f0       	brcs	.+12     	; 0xdd4 <__divsf3+0x18>
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <__divsf3+0x16>
     dca:	5f 3f       	cpi	r21, 0xFF	; 255
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <__divsf3+0x18>
     dce:	cc c0       	rjmp	.+408    	; 0xf68 <__fp_inf>
     dd0:	51 11       	cpse	r21, r1
     dd2:	4e c1       	rjmp	.+668    	; 0x1070 <__fp_szero>
     dd4:	cf c0       	rjmp	.+414    	; 0xf74 <__fp_nan>

00000dd6 <__divsf3x>:
     dd6:	29 d1       	rcall	.+594    	; 0x102a <__fp_split3>
     dd8:	98 f3       	brcs	.-26     	; 0xdc0 <__divsf3+0x4>

00000dda <__divsf3_pse>:
     dda:	99 23       	and	r25, r25
     ddc:	c9 f3       	breq	.-14     	; 0xdd0 <__divsf3+0x14>
     dde:	55 23       	and	r21, r21
     de0:	b1 f3       	breq	.-20     	; 0xdce <__divsf3+0x12>
     de2:	95 1b       	sub	r25, r21
     de4:	55 0b       	sbc	r21, r21
     de6:	bb 27       	eor	r27, r27
     de8:	aa 27       	eor	r26, r26
     dea:	62 17       	cp	r22, r18
     dec:	73 07       	cpc	r23, r19
     dee:	84 07       	cpc	r24, r20
     df0:	38 f0       	brcs	.+14     	; 0xe00 <__divsf3_pse+0x26>
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	44 1f       	adc	r20, r20
     dfc:	aa 1f       	adc	r26, r26
     dfe:	a9 f3       	breq	.-22     	; 0xdea <__divsf3_pse+0x10>
     e00:	33 d0       	rcall	.+102    	; 0xe68 <__divsf3_pse+0x8e>
     e02:	0e 2e       	mov	r0, r30
     e04:	3a f0       	brmi	.+14     	; 0xe14 <__divsf3_pse+0x3a>
     e06:	e0 e8       	ldi	r30, 0x80	; 128
     e08:	30 d0       	rcall	.+96     	; 0xe6a <__divsf3_pse+0x90>
     e0a:	91 50       	subi	r25, 0x01	; 1
     e0c:	50 40       	sbci	r21, 0x00	; 0
     e0e:	e6 95       	lsr	r30
     e10:	00 1c       	adc	r0, r0
     e12:	ca f7       	brpl	.-14     	; 0xe06 <__divsf3_pse+0x2c>
     e14:	29 d0       	rcall	.+82     	; 0xe68 <__divsf3_pse+0x8e>
     e16:	fe 2f       	mov	r31, r30
     e18:	27 d0       	rcall	.+78     	; 0xe68 <__divsf3_pse+0x8e>
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	bb 1f       	adc	r27, r27
     e22:	26 17       	cp	r18, r22
     e24:	37 07       	cpc	r19, r23
     e26:	48 07       	cpc	r20, r24
     e28:	ab 07       	cpc	r26, r27
     e2a:	b0 e8       	ldi	r27, 0x80	; 128
     e2c:	09 f0       	breq	.+2      	; 0xe30 <__divsf3_pse+0x56>
     e2e:	bb 0b       	sbc	r27, r27
     e30:	80 2d       	mov	r24, r0
     e32:	bf 01       	movw	r22, r30
     e34:	ff 27       	eor	r31, r31
     e36:	93 58       	subi	r25, 0x83	; 131
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	2a f0       	brmi	.+10     	; 0xe46 <__divsf3_pse+0x6c>
     e3c:	9e 3f       	cpi	r25, 0xFE	; 254
     e3e:	51 05       	cpc	r21, r1
     e40:	68 f0       	brcs	.+26     	; 0xe5c <__divsf3_pse+0x82>
     e42:	92 c0       	rjmp	.+292    	; 0xf68 <__fp_inf>
     e44:	15 c1       	rjmp	.+554    	; 0x1070 <__fp_szero>
     e46:	5f 3f       	cpi	r21, 0xFF	; 255
     e48:	ec f3       	brlt	.-6      	; 0xe44 <__divsf3_pse+0x6a>
     e4a:	98 3e       	cpi	r25, 0xE8	; 232
     e4c:	dc f3       	brlt	.-10     	; 0xe44 <__divsf3_pse+0x6a>
     e4e:	86 95       	lsr	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b7 95       	ror	r27
     e56:	f7 95       	ror	r31
     e58:	9f 5f       	subi	r25, 0xFF	; 255
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__divsf3_pse+0x74>
     e5c:	88 0f       	add	r24, r24
     e5e:	91 1d       	adc	r25, r1
     e60:	96 95       	lsr	r25
     e62:	87 95       	ror	r24
     e64:	97 f9       	bld	r25, 7
     e66:	08 95       	ret
     e68:	e1 e0       	ldi	r30, 0x01	; 1
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	bb 1f       	adc	r27, r27
     e72:	62 17       	cp	r22, r18
     e74:	73 07       	cpc	r23, r19
     e76:	84 07       	cpc	r24, r20
     e78:	ba 07       	cpc	r27, r26
     e7a:	20 f0       	brcs	.+8      	; 0xe84 <__divsf3_pse+0xaa>
     e7c:	62 1b       	sub	r22, r18
     e7e:	73 0b       	sbc	r23, r19
     e80:	84 0b       	sbc	r24, r20
     e82:	ba 0b       	sbc	r27, r26
     e84:	ee 1f       	adc	r30, r30
     e86:	88 f7       	brcc	.-30     	; 0xe6a <__divsf3_pse+0x90>
     e88:	e0 95       	com	r30
     e8a:	08 95       	ret

00000e8c <__fixsfsi>:
     e8c:	04 d0       	rcall	.+8      	; 0xe96 <__fixunssfsi>
     e8e:	68 94       	set
     e90:	b1 11       	cpse	r27, r1
     e92:	ee c0       	rjmp	.+476    	; 0x1070 <__fp_szero>
     e94:	08 95       	ret

00000e96 <__fixunssfsi>:
     e96:	d1 d0       	rcall	.+418    	; 0x103a <__fp_splitA>
     e98:	88 f0       	brcs	.+34     	; 0xebc <__fixunssfsi+0x26>
     e9a:	9f 57       	subi	r25, 0x7F	; 127
     e9c:	90 f0       	brcs	.+36     	; 0xec2 <__fixunssfsi+0x2c>
     e9e:	b9 2f       	mov	r27, r25
     ea0:	99 27       	eor	r25, r25
     ea2:	b7 51       	subi	r27, 0x17	; 23
     ea4:	a0 f0       	brcs	.+40     	; 0xece <__fixunssfsi+0x38>
     ea6:	d1 f0       	breq	.+52     	; 0xedc <__fixunssfsi+0x46>
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	1a f0       	brmi	.+6      	; 0xeb8 <__fixunssfsi+0x22>
     eb2:	ba 95       	dec	r27
     eb4:	c9 f7       	brne	.-14     	; 0xea8 <__fixunssfsi+0x12>
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <__fixunssfsi+0x46>
     eb8:	b1 30       	cpi	r27, 0x01	; 1
     eba:	81 f0       	breq	.+32     	; 0xedc <__fixunssfsi+0x46>
     ebc:	d8 d0       	rcall	.+432    	; 0x106e <__fp_zero>
     ebe:	b1 e0       	ldi	r27, 0x01	; 1
     ec0:	08 95       	ret
     ec2:	d5 c0       	rjmp	.+426    	; 0x106e <__fp_zero>
     ec4:	67 2f       	mov	r22, r23
     ec6:	78 2f       	mov	r23, r24
     ec8:	88 27       	eor	r24, r24
     eca:	b8 5f       	subi	r27, 0xF8	; 248
     ecc:	39 f0       	breq	.+14     	; 0xedc <__fixunssfsi+0x46>
     ece:	b9 3f       	cpi	r27, 0xF9	; 249
     ed0:	cc f3       	brlt	.-14     	; 0xec4 <__fixunssfsi+0x2e>
     ed2:	86 95       	lsr	r24
     ed4:	77 95       	ror	r23
     ed6:	67 95       	ror	r22
     ed8:	b3 95       	inc	r27
     eda:	d9 f7       	brne	.-10     	; 0xed2 <__fixunssfsi+0x3c>
     edc:	3e f4       	brtc	.+14     	; 0xeec <__fixunssfsi+0x56>
     ede:	90 95       	com	r25
     ee0:	80 95       	com	r24
     ee2:	70 95       	com	r23
     ee4:	61 95       	neg	r22
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	8f 4f       	sbci	r24, 0xFF	; 255
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	08 95       	ret

00000eee <__floatunsisf>:
     eee:	e8 94       	clt
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <__floatsisf+0x12>

00000ef2 <__floatsisf>:
     ef2:	97 fb       	bst	r25, 7
     ef4:	3e f4       	brtc	.+14     	; 0xf04 <__floatsisf+0x12>
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	61 95       	neg	r22
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	99 23       	and	r25, r25
     f06:	a9 f0       	breq	.+42     	; 0xf32 <__floatsisf+0x40>
     f08:	f9 2f       	mov	r31, r25
     f0a:	96 e9       	ldi	r25, 0x96	; 150
     f0c:	bb 27       	eor	r27, r27
     f0e:	93 95       	inc	r25
     f10:	f6 95       	lsr	r31
     f12:	87 95       	ror	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f1 11       	cpse	r31, r1
     f1c:	f8 cf       	rjmp	.-16     	; 0xf0e <__floatsisf+0x1c>
     f1e:	fa f4       	brpl	.+62     	; 0xf5e <__floatsisf+0x6c>
     f20:	bb 0f       	add	r27, r27
     f22:	11 f4       	brne	.+4      	; 0xf28 <__floatsisf+0x36>
     f24:	60 ff       	sbrs	r22, 0
     f26:	1b c0       	rjmp	.+54     	; 0xf5e <__floatsisf+0x6c>
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <__floatsisf+0x6c>
     f32:	88 23       	and	r24, r24
     f34:	11 f0       	breq	.+4      	; 0xf3a <__floatsisf+0x48>
     f36:	96 e9       	ldi	r25, 0x96	; 150
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <__floatsisf+0x6a>
     f3a:	77 23       	and	r23, r23
     f3c:	21 f0       	breq	.+8      	; 0xf46 <__floatsisf+0x54>
     f3e:	9e e8       	ldi	r25, 0x8E	; 142
     f40:	87 2f       	mov	r24, r23
     f42:	76 2f       	mov	r23, r22
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <__floatsisf+0x5e>
     f46:	66 23       	and	r22, r22
     f48:	71 f0       	breq	.+28     	; 0xf66 <__floatsisf+0x74>
     f4a:	96 e8       	ldi	r25, 0x86	; 134
     f4c:	86 2f       	mov	r24, r22
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	2a f0       	brmi	.+10     	; 0xf5e <__floatsisf+0x6c>
     f54:	9a 95       	dec	r25
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	da f7       	brpl	.-10     	; 0xf54 <__floatsisf+0x62>
     f5e:	88 0f       	add	r24, r24
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	97 f9       	bld	r25, 7
     f66:	08 95       	ret

00000f68 <__fp_inf>:
     f68:	97 f9       	bld	r25, 7
     f6a:	9f 67       	ori	r25, 0x7F	; 127
     f6c:	80 e8       	ldi	r24, 0x80	; 128
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	08 95       	ret

00000f74 <__fp_nan>:
     f74:	9f ef       	ldi	r25, 0xFF	; 255
     f76:	80 ec       	ldi	r24, 0xC0	; 192
     f78:	08 95       	ret

00000f7a <__fp_pscA>:
     f7a:	00 24       	eor	r0, r0
     f7c:	0a 94       	dec	r0
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	18 06       	cpc	r1, r24
     f84:	09 06       	cpc	r0, r25
     f86:	08 95       	ret

00000f88 <__fp_pscB>:
     f88:	00 24       	eor	r0, r0
     f8a:	0a 94       	dec	r0
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	14 06       	cpc	r1, r20
     f92:	05 06       	cpc	r0, r21
     f94:	08 95       	ret
     f96:	ee cf       	rjmp	.-36     	; 0xf74 <__fp_nan>

00000f98 <__fp_rempio2>:
     f98:	50 d0       	rcall	.+160    	; 0x103a <__fp_splitA>
     f9a:	e8 f3       	brcs	.-6      	; 0xf96 <__fp_pscB+0xe>
     f9c:	e8 94       	clt
     f9e:	e0 e0       	ldi	r30, 0x00	; 0
     fa0:	bb 27       	eor	r27, r27
     fa2:	9f 57       	subi	r25, 0x7F	; 127
     fa4:	f0 f0       	brcs	.+60     	; 0xfe2 <__fp_rempio2+0x4a>
     fa6:	2a ed       	ldi	r18, 0xDA	; 218
     fa8:	3f e0       	ldi	r19, 0x0F	; 15
     faa:	49 ec       	ldi	r20, 0xC9	; 201
     fac:	06 c0       	rjmp	.+12     	; 0xfba <__fp_rempio2+0x22>
     fae:	ee 0f       	add	r30, r30
     fb0:	bb 0f       	add	r27, r27
     fb2:	66 1f       	adc	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	28 f0       	brcs	.+10     	; 0xfc4 <__fp_rempio2+0x2c>
     fba:	b2 3a       	cpi	r27, 0xA2	; 162
     fbc:	62 07       	cpc	r22, r18
     fbe:	73 07       	cpc	r23, r19
     fc0:	84 07       	cpc	r24, r20
     fc2:	28 f0       	brcs	.+10     	; 0xfce <__fp_rempio2+0x36>
     fc4:	b2 5a       	subi	r27, 0xA2	; 162
     fc6:	62 0b       	sbc	r22, r18
     fc8:	73 0b       	sbc	r23, r19
     fca:	84 0b       	sbc	r24, r20
     fcc:	e3 95       	inc	r30
     fce:	9a 95       	dec	r25
     fd0:	72 f7       	brpl	.-36     	; 0xfae <__fp_rempio2+0x16>
     fd2:	80 38       	cpi	r24, 0x80	; 128
     fd4:	30 f4       	brcc	.+12     	; 0xfe2 <__fp_rempio2+0x4a>
     fd6:	9a 95       	dec	r25
     fd8:	bb 0f       	add	r27, r27
     fda:	66 1f       	adc	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	d2 f7       	brpl	.-12     	; 0xfd6 <__fp_rempio2+0x3e>
     fe2:	90 48       	sbci	r25, 0x80	; 128
     fe4:	6f c1       	rjmp	.+734    	; 0x12c4 <__fp_mpack_finite>

00000fe6 <__fp_round>:
     fe6:	09 2e       	mov	r0, r25
     fe8:	03 94       	inc	r0
     fea:	00 0c       	add	r0, r0
     fec:	11 f4       	brne	.+4      	; 0xff2 <__fp_round+0xc>
     fee:	88 23       	and	r24, r24
     ff0:	52 f0       	brmi	.+20     	; 0x1006 <__fp_round+0x20>
     ff2:	bb 0f       	add	r27, r27
     ff4:	40 f4       	brcc	.+16     	; 0x1006 <__fp_round+0x20>
     ff6:	bf 2b       	or	r27, r31
     ff8:	11 f4       	brne	.+4      	; 0xffe <__fp_round+0x18>
     ffa:	60 ff       	sbrs	r22, 0
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__fp_round+0x20>
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__fp_sinus>:
    1008:	ef 93       	push	r30
    100a:	e0 ff       	sbrs	r30, 0
    100c:	06 c0       	rjmp	.+12     	; 0x101a <__fp_sinus+0x12>
    100e:	a2 ea       	ldi	r26, 0xA2	; 162
    1010:	2a ed       	ldi	r18, 0xDA	; 218
    1012:	3f e0       	ldi	r19, 0x0F	; 15
    1014:	49 ec       	ldi	r20, 0xC9	; 201
    1016:	5f eb       	ldi	r21, 0xBF	; 191
    1018:	7b de       	rcall	.-778    	; 0xd10 <__addsf3x>
    101a:	e5 df       	rcall	.-54     	; 0xfe6 <__fp_round>
    101c:	0f 90       	pop	r0
    101e:	03 94       	inc	r0
    1020:	01 fc       	sbrc	r0, 1
    1022:	90 58       	subi	r25, 0x80	; 128
    1024:	ec e8       	ldi	r30, 0x8C	; 140
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	85 c1       	rjmp	.+778    	; 0x1334 <__fp_powsodd>

0000102a <__fp_split3>:
    102a:	57 fd       	sbrc	r21, 7
    102c:	90 58       	subi	r25, 0x80	; 128
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	59 f0       	breq	.+22     	; 0x104a <__fp_splitA+0x10>
    1034:	5f 3f       	cpi	r21, 0xFF	; 255
    1036:	71 f0       	breq	.+28     	; 0x1054 <__fp_splitA+0x1a>
    1038:	47 95       	ror	r20

0000103a <__fp_splitA>:
    103a:	88 0f       	add	r24, r24
    103c:	97 fb       	bst	r25, 7
    103e:	99 1f       	adc	r25, r25
    1040:	61 f0       	breq	.+24     	; 0x105a <__fp_splitA+0x20>
    1042:	9f 3f       	cpi	r25, 0xFF	; 255
    1044:	79 f0       	breq	.+30     	; 0x1064 <__fp_splitA+0x2a>
    1046:	87 95       	ror	r24
    1048:	08 95       	ret
    104a:	12 16       	cp	r1, r18
    104c:	13 06       	cpc	r1, r19
    104e:	14 06       	cpc	r1, r20
    1050:	55 1f       	adc	r21, r21
    1052:	f2 cf       	rjmp	.-28     	; 0x1038 <__fp_split3+0xe>
    1054:	46 95       	lsr	r20
    1056:	f1 df       	rcall	.-30     	; 0x103a <__fp_splitA>
    1058:	08 c0       	rjmp	.+16     	; 0x106a <__fp_splitA+0x30>
    105a:	16 16       	cp	r1, r22
    105c:	17 06       	cpc	r1, r23
    105e:	18 06       	cpc	r1, r24
    1060:	99 1f       	adc	r25, r25
    1062:	f1 cf       	rjmp	.-30     	; 0x1046 <__fp_splitA+0xc>
    1064:	86 95       	lsr	r24
    1066:	71 05       	cpc	r23, r1
    1068:	61 05       	cpc	r22, r1
    106a:	08 94       	sec
    106c:	08 95       	ret

0000106e <__fp_zero>:
    106e:	e8 94       	clt

00001070 <__fp_szero>:
    1070:	bb 27       	eor	r27, r27
    1072:	66 27       	eor	r22, r22
    1074:	77 27       	eor	r23, r23
    1076:	cb 01       	movw	r24, r22
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret

0000107c <__mulsf3>:
    107c:	0b d0       	rcall	.+22     	; 0x1094 <__mulsf3x>
    107e:	b3 cf       	rjmp	.-154    	; 0xfe6 <__fp_round>
    1080:	7c df       	rcall	.-264    	; 0xf7a <__fp_pscA>
    1082:	28 f0       	brcs	.+10     	; 0x108e <__mulsf3+0x12>
    1084:	81 df       	rcall	.-254    	; 0xf88 <__fp_pscB>
    1086:	18 f0       	brcs	.+6      	; 0x108e <__mulsf3+0x12>
    1088:	95 23       	and	r25, r21
    108a:	09 f0       	breq	.+2      	; 0x108e <__mulsf3+0x12>
    108c:	6d cf       	rjmp	.-294    	; 0xf68 <__fp_inf>
    108e:	72 cf       	rjmp	.-284    	; 0xf74 <__fp_nan>
    1090:	11 24       	eor	r1, r1
    1092:	ee cf       	rjmp	.-36     	; 0x1070 <__fp_szero>

00001094 <__mulsf3x>:
    1094:	ca df       	rcall	.-108    	; 0x102a <__fp_split3>
    1096:	a0 f3       	brcs	.-24     	; 0x1080 <__mulsf3+0x4>

00001098 <__mulsf3_pse>:
    1098:	95 9f       	mul	r25, r21
    109a:	d1 f3       	breq	.-12     	; 0x1090 <__mulsf3+0x14>
    109c:	95 0f       	add	r25, r21
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	55 1f       	adc	r21, r21
    10a2:	62 9f       	mul	r22, r18
    10a4:	f0 01       	movw	r30, r0
    10a6:	72 9f       	mul	r23, r18
    10a8:	bb 27       	eor	r27, r27
    10aa:	f0 0d       	add	r31, r0
    10ac:	b1 1d       	adc	r27, r1
    10ae:	63 9f       	mul	r22, r19
    10b0:	aa 27       	eor	r26, r26
    10b2:	f0 0d       	add	r31, r0
    10b4:	b1 1d       	adc	r27, r1
    10b6:	aa 1f       	adc	r26, r26
    10b8:	64 9f       	mul	r22, r20
    10ba:	66 27       	eor	r22, r22
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	66 1f       	adc	r22, r22
    10c2:	82 9f       	mul	r24, r18
    10c4:	22 27       	eor	r18, r18
    10c6:	b0 0d       	add	r27, r0
    10c8:	a1 1d       	adc	r26, r1
    10ca:	62 1f       	adc	r22, r18
    10cc:	73 9f       	mul	r23, r19
    10ce:	b0 0d       	add	r27, r0
    10d0:	a1 1d       	adc	r26, r1
    10d2:	62 1f       	adc	r22, r18
    10d4:	83 9f       	mul	r24, r19
    10d6:	a0 0d       	add	r26, r0
    10d8:	61 1d       	adc	r22, r1
    10da:	22 1f       	adc	r18, r18
    10dc:	74 9f       	mul	r23, r20
    10de:	33 27       	eor	r19, r19
    10e0:	a0 0d       	add	r26, r0
    10e2:	61 1d       	adc	r22, r1
    10e4:	23 1f       	adc	r18, r19
    10e6:	84 9f       	mul	r24, r20
    10e8:	60 0d       	add	r22, r0
    10ea:	21 1d       	adc	r18, r1
    10ec:	82 2f       	mov	r24, r18
    10ee:	76 2f       	mov	r23, r22
    10f0:	6a 2f       	mov	r22, r26
    10f2:	11 24       	eor	r1, r1
    10f4:	9f 57       	subi	r25, 0x7F	; 127
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	8a f0       	brmi	.+34     	; 0x111c <__stack+0x1d>
    10fa:	e1 f0       	breq	.+56     	; 0x1134 <__stack+0x35>
    10fc:	88 23       	and	r24, r24
    10fe:	4a f0       	brmi	.+18     	; 0x1112 <__stack+0x13>
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	a9 f7       	brne	.-22     	; 0x10fc <__mulsf3_pse+0x64>
    1112:	9e 3f       	cpi	r25, 0xFE	; 254
    1114:	51 05       	cpc	r21, r1
    1116:	70 f0       	brcs	.+28     	; 0x1134 <__stack+0x35>
    1118:	27 cf       	rjmp	.-434    	; 0xf68 <__fp_inf>
    111a:	aa cf       	rjmp	.-172    	; 0x1070 <__fp_szero>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	ec f3       	brlt	.-6      	; 0x111a <__stack+0x1b>
    1120:	98 3e       	cpi	r25, 0xE8	; 232
    1122:	dc f3       	brlt	.-10     	; 0x111a <__stack+0x1b>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	e7 95       	ror	r30
    1130:	9f 5f       	subi	r25, 0xFF	; 255
    1132:	c1 f7       	brne	.-16     	; 0x1124 <__stack+0x25>
    1134:	fe 2b       	or	r31, r30
    1136:	88 0f       	add	r24, r24
    1138:	91 1d       	adc	r25, r1
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	97 f9       	bld	r25, 7
    1140:	08 95       	ret

00001142 <pow>:
    1142:	fa 01       	movw	r30, r20
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	30 96       	adiw	r30, 0x00	; 0
    114a:	21 05       	cpc	r18, r1
    114c:	31 05       	cpc	r19, r1
    114e:	99 f1       	breq	.+102    	; 0x11b6 <pow+0x74>
    1150:	61 15       	cp	r22, r1
    1152:	71 05       	cpc	r23, r1
    1154:	61 f4       	brne	.+24     	; 0x116e <pow+0x2c>
    1156:	80 38       	cpi	r24, 0x80	; 128
    1158:	bf e3       	ldi	r27, 0x3F	; 63
    115a:	9b 07       	cpc	r25, r27
    115c:	49 f1       	breq	.+82     	; 0x11b0 <pow+0x6e>
    115e:	68 94       	set
    1160:	90 38       	cpi	r25, 0x80	; 128
    1162:	81 05       	cpc	r24, r1
    1164:	61 f0       	breq	.+24     	; 0x117e <pow+0x3c>
    1166:	80 38       	cpi	r24, 0x80	; 128
    1168:	bf ef       	ldi	r27, 0xFF	; 255
    116a:	9b 07       	cpc	r25, r27
    116c:	41 f0       	breq	.+16     	; 0x117e <pow+0x3c>
    116e:	99 23       	and	r25, r25
    1170:	42 f5       	brpl	.+80     	; 0x11c2 <pow+0x80>
    1172:	ff 3f       	cpi	r31, 0xFF	; 255
    1174:	e1 05       	cpc	r30, r1
    1176:	31 05       	cpc	r19, r1
    1178:	21 05       	cpc	r18, r1
    117a:	11 f1       	breq	.+68     	; 0x11c0 <pow+0x7e>
    117c:	e8 94       	clt
    117e:	08 94       	sec
    1180:	e7 95       	ror	r30
    1182:	d9 01       	movw	r26, r18
    1184:	aa 23       	and	r26, r26
    1186:	29 f4       	brne	.+10     	; 0x1192 <pow+0x50>
    1188:	ab 2f       	mov	r26, r27
    118a:	be 2f       	mov	r27, r30
    118c:	f8 5f       	subi	r31, 0xF8	; 248
    118e:	d0 f3       	brcs	.-12     	; 0x1184 <pow+0x42>
    1190:	10 c0       	rjmp	.+32     	; 0x11b2 <pow+0x70>
    1192:	ff 5f       	subi	r31, 0xFF	; 255
    1194:	70 f4       	brcc	.+28     	; 0x11b2 <pow+0x70>
    1196:	a6 95       	lsr	r26
    1198:	e0 f7       	brcc	.-8      	; 0x1192 <pow+0x50>
    119a:	f7 39       	cpi	r31, 0x97	; 151
    119c:	50 f0       	brcs	.+20     	; 0x11b2 <pow+0x70>
    119e:	19 f0       	breq	.+6      	; 0x11a6 <pow+0x64>
    11a0:	ff 3a       	cpi	r31, 0xAF	; 175
    11a2:	38 f4       	brcc	.+14     	; 0x11b2 <pow+0x70>
    11a4:	9f 77       	andi	r25, 0x7F	; 127
    11a6:	9f 93       	push	r25
    11a8:	0c d0       	rcall	.+24     	; 0x11c2 <pow+0x80>
    11aa:	0f 90       	pop	r0
    11ac:	07 fc       	sbrc	r0, 7
    11ae:	90 58       	subi	r25, 0x80	; 128
    11b0:	08 95       	ret
    11b2:	3e f0       	brts	.+14     	; 0x11c2 <pow+0x80>
    11b4:	df ce       	rjmp	.-578    	; 0xf74 <__fp_nan>
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e8       	ldi	r24, 0x80	; 128
    11bc:	9f e3       	ldi	r25, 0x3F	; 63
    11be:	08 95       	ret
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	9f 77       	andi	r25, 0x7F	; 127
    11c4:	5f 93       	push	r21
    11c6:	4f 93       	push	r20
    11c8:	3f 93       	push	r19
    11ca:	2f 93       	push	r18
    11cc:	06 d1       	rcall	.+524    	; 0x13da <log>
    11ce:	2f 91       	pop	r18
    11d0:	3f 91       	pop	r19
    11d2:	4f 91       	pop	r20
    11d4:	5f 91       	pop	r21
    11d6:	52 df       	rcall	.-348    	; 0x107c <__mulsf3>
    11d8:	47 c0       	rjmp	.+142    	; 0x1268 <exp>
    11da:	11 f4       	brne	.+4      	; 0x11e0 <pow+0x9e>
    11dc:	0e f4       	brtc	.+2      	; 0x11e0 <pow+0x9e>
    11de:	ca ce       	rjmp	.-620    	; 0xf74 <__fp_nan>
    11e0:	6f c0       	rjmp	.+222    	; 0x12c0 <__fp_mpack>

000011e2 <sqrt>:
    11e2:	2b df       	rcall	.-426    	; 0x103a <__fp_splitA>
    11e4:	d0 f3       	brcs	.-12     	; 0x11da <pow+0x98>
    11e6:	99 23       	and	r25, r25
    11e8:	d9 f3       	breq	.-10     	; 0x11e0 <pow+0x9e>
    11ea:	ce f3       	brts	.-14     	; 0x11de <pow+0x9c>
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	55 0b       	sbc	r21, r21
    11f0:	87 ff       	sbrs	r24, 7
    11f2:	74 d0       	rcall	.+232    	; 0x12dc <__fp_norm2>
    11f4:	00 24       	eor	r0, r0
    11f6:	a0 e6       	ldi	r26, 0x60	; 96
    11f8:	40 ea       	ldi	r20, 0xA0	; 160
    11fa:	90 01       	movw	r18, r0
    11fc:	80 58       	subi	r24, 0x80	; 128
    11fe:	56 95       	lsr	r21
    1200:	97 95       	ror	r25
    1202:	28 f4       	brcc	.+10     	; 0x120e <sqrt+0x2c>
    1204:	80 5c       	subi	r24, 0xC0	; 192
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	20 f0       	brcs	.+8      	; 0x1216 <sqrt+0x34>
    120e:	26 17       	cp	r18, r22
    1210:	37 07       	cpc	r19, r23
    1212:	48 07       	cpc	r20, r24
    1214:	30 f4       	brcc	.+12     	; 0x1222 <sqrt+0x40>
    1216:	62 1b       	sub	r22, r18
    1218:	73 0b       	sbc	r23, r19
    121a:	84 0b       	sbc	r24, r20
    121c:	20 29       	or	r18, r0
    121e:	31 29       	or	r19, r1
    1220:	4a 2b       	or	r20, r26
    1222:	a6 95       	lsr	r26
    1224:	17 94       	ror	r1
    1226:	07 94       	ror	r0
    1228:	20 25       	eor	r18, r0
    122a:	31 25       	eor	r19, r1
    122c:	4a 27       	eor	r20, r26
    122e:	58 f7       	brcc	.-42     	; 0x1206 <sqrt+0x24>
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	20 f0       	brcs	.+8      	; 0x1240 <sqrt+0x5e>
    1238:	26 17       	cp	r18, r22
    123a:	37 07       	cpc	r19, r23
    123c:	48 07       	cpc	r20, r24
    123e:	30 f4       	brcc	.+12     	; 0x124c <sqrt+0x6a>
    1240:	62 0b       	sbc	r22, r18
    1242:	73 0b       	sbc	r23, r19
    1244:	84 0b       	sbc	r24, r20
    1246:	20 0d       	add	r18, r0
    1248:	31 1d       	adc	r19, r1
    124a:	41 1d       	adc	r20, r1
    124c:	a0 95       	com	r26
    124e:	81 f7       	brne	.-32     	; 0x1230 <sqrt+0x4e>
    1250:	b9 01       	movw	r22, r18
    1252:	84 2f       	mov	r24, r20
    1254:	91 58       	subi	r25, 0x81	; 129
    1256:	88 0f       	add	r24, r24
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	08 95       	ret
    125e:	19 f4       	brne	.+6      	; 0x1266 <sqrt+0x84>
    1260:	0e f0       	brts	.+2      	; 0x1264 <sqrt+0x82>
    1262:	82 ce       	rjmp	.-764    	; 0xf68 <__fp_inf>
    1264:	04 cf       	rjmp	.-504    	; 0x106e <__fp_zero>
    1266:	86 ce       	rjmp	.-756    	; 0xf74 <__fp_nan>

00001268 <exp>:
    1268:	e8 de       	rcall	.-560    	; 0x103a <__fp_splitA>
    126a:	c8 f3       	brcs	.-14     	; 0x125e <sqrt+0x7c>
    126c:	96 38       	cpi	r25, 0x86	; 134
    126e:	c0 f7       	brcc	.-16     	; 0x1260 <sqrt+0x7e>
    1270:	07 f8       	bld	r0, 7
    1272:	0f 92       	push	r0
    1274:	e8 94       	clt
    1276:	2b e3       	ldi	r18, 0x3B	; 59
    1278:	3a ea       	ldi	r19, 0xAA	; 170
    127a:	48 eb       	ldi	r20, 0xB8	; 184
    127c:	5f e7       	ldi	r21, 0x7F	; 127
    127e:	0c df       	rcall	.-488    	; 0x1098 <__mulsf3_pse>
    1280:	0f 92       	push	r0
    1282:	0f 92       	push	r0
    1284:	0f 92       	push	r0
    1286:	4d b7       	in	r20, 0x3d	; 61
    1288:	5e b7       	in	r21, 0x3e	; 62
    128a:	0f 92       	push	r0
    128c:	e6 d0       	rcall	.+460    	; 0x145a <modf>
    128e:	ea ea       	ldi	r30, 0xAA	; 170
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	2b d0       	rcall	.+86     	; 0x12ea <__fp_powser>
    1294:	4f 91       	pop	r20
    1296:	5f 91       	pop	r21
    1298:	ef 91       	pop	r30
    129a:	ff 91       	pop	r31
    129c:	e5 95       	asr	r30
    129e:	ee 1f       	adc	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	49 f0       	breq	.+18     	; 0x12b6 <exp+0x4e>
    12a4:	fe 57       	subi	r31, 0x7E	; 126
    12a6:	e0 68       	ori	r30, 0x80	; 128
    12a8:	44 27       	eor	r20, r20
    12aa:	ee 0f       	add	r30, r30
    12ac:	44 1f       	adc	r20, r20
    12ae:	fa 95       	dec	r31
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <exp+0x42>
    12b2:	41 95       	neg	r20
    12b4:	55 0b       	sbc	r21, r21
    12b6:	58 d0       	rcall	.+176    	; 0x1368 <ldexp>
    12b8:	0f 90       	pop	r0
    12ba:	07 fe       	sbrs	r0, 7
    12bc:	4c c0       	rjmp	.+152    	; 0x1356 <inverse>
    12be:	08 95       	ret

000012c0 <__fp_mpack>:
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <__fp_mpack_finite+0xc>

000012c4 <__fp_mpack_finite>:
    12c4:	91 50       	subi	r25, 0x01	; 1
    12c6:	20 f4       	brcc	.+8      	; 0x12d0 <__fp_mpack_finite+0xc>
    12c8:	87 95       	ror	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	b7 95       	ror	r27
    12d0:	88 0f       	add	r24, r24
    12d2:	91 1d       	adc	r25, r1
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	97 f9       	bld	r25, 7
    12da:	08 95       	ret

000012dc <__fp_norm2>:
    12dc:	91 50       	subi	r25, 0x01	; 1
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	d2 f7       	brpl	.-12     	; 0x12dc <__fp_norm2>
    12e8:	08 95       	ret

000012ea <__fp_powser>:
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	1f 93       	push	r17
    12f0:	0f 93       	push	r16
    12f2:	ff 92       	push	r15
    12f4:	ef 92       	push	r14
    12f6:	df 92       	push	r13
    12f8:	7b 01       	movw	r14, r22
    12fa:	8c 01       	movw	r16, r24
    12fc:	68 94       	set
    12fe:	05 c0       	rjmp	.+10     	; 0x130a <__fp_powser+0x20>
    1300:	da 2e       	mov	r13, r26
    1302:	ef 01       	movw	r28, r30
    1304:	c7 de       	rcall	.-626    	; 0x1094 <__mulsf3x>
    1306:	fe 01       	movw	r30, r28
    1308:	e8 94       	clt
    130a:	a5 91       	lpm	r26, Z+
    130c:	25 91       	lpm	r18, Z+
    130e:	35 91       	lpm	r19, Z+
    1310:	45 91       	lpm	r20, Z+
    1312:	55 91       	lpm	r21, Z+
    1314:	ae f3       	brts	.-22     	; 0x1300 <__fp_powser+0x16>
    1316:	ef 01       	movw	r28, r30
    1318:	fb dc       	rcall	.-1546   	; 0xd10 <__addsf3x>
    131a:	fe 01       	movw	r30, r28
    131c:	97 01       	movw	r18, r14
    131e:	a8 01       	movw	r20, r16
    1320:	da 94       	dec	r13
    1322:	79 f7       	brne	.-34     	; 0x1302 <__fp_powser+0x18>
    1324:	df 90       	pop	r13
    1326:	ef 90       	pop	r14
    1328:	ff 90       	pop	r15
    132a:	0f 91       	pop	r16
    132c:	1f 91       	pop	r17
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <__fp_powsodd>:
    1334:	9f 93       	push	r25
    1336:	8f 93       	push	r24
    1338:	7f 93       	push	r23
    133a:	6f 93       	push	r22
    133c:	ff 93       	push	r31
    133e:	ef 93       	push	r30
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	9b de       	rcall	.-714    	; 0x107c <__mulsf3>
    1346:	ef 91       	pop	r30
    1348:	ff 91       	pop	r31
    134a:	cf df       	rcall	.-98     	; 0x12ea <__fp_powser>
    134c:	2f 91       	pop	r18
    134e:	3f 91       	pop	r19
    1350:	4f 91       	pop	r20
    1352:	5f 91       	pop	r21
    1354:	93 ce       	rjmp	.-730    	; 0x107c <__mulsf3>

00001356 <inverse>:
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	9f e3       	ldi	r25, 0x3F	; 63
    1362:	2c cd       	rjmp	.-1448   	; 0xdbc <__divsf3>
    1364:	01 ce       	rjmp	.-1022   	; 0xf68 <__fp_inf>
    1366:	ac cf       	rjmp	.-168    	; 0x12c0 <__fp_mpack>

00001368 <ldexp>:
    1368:	68 de       	rcall	.-816    	; 0x103a <__fp_splitA>
    136a:	e8 f3       	brcs	.-6      	; 0x1366 <inverse+0x10>
    136c:	99 23       	and	r25, r25
    136e:	d9 f3       	breq	.-10     	; 0x1366 <inverse+0x10>
    1370:	94 0f       	add	r25, r20
    1372:	51 1d       	adc	r21, r1
    1374:	bb f3       	brvs	.-18     	; 0x1364 <inverse+0xe>
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	50 40       	sbci	r21, 0x00	; 0
    137a:	94 f0       	brlt	.+36     	; 0x13a0 <ldexp+0x38>
    137c:	59 f0       	breq	.+22     	; 0x1394 <ldexp+0x2c>
    137e:	88 23       	and	r24, r24
    1380:	32 f0       	brmi	.+12     	; 0x138e <ldexp+0x26>
    1382:	66 0f       	add	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	91 50       	subi	r25, 0x01	; 1
    138a:	50 40       	sbci	r21, 0x00	; 0
    138c:	c1 f7       	brne	.-16     	; 0x137e <ldexp+0x16>
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	51 05       	cpc	r21, r1
    1392:	44 f7       	brge	.-48     	; 0x1364 <inverse+0xe>
    1394:	88 0f       	add	r24, r24
    1396:	91 1d       	adc	r25, r1
    1398:	96 95       	lsr	r25
    139a:	87 95       	ror	r24
    139c:	97 f9       	bld	r25, 7
    139e:	08 95       	ret
    13a0:	5f 3f       	cpi	r21, 0xFF	; 255
    13a2:	ac f0       	brlt	.+42     	; 0x13ce <ldexp+0x66>
    13a4:	98 3e       	cpi	r25, 0xE8	; 232
    13a6:	9c f0       	brlt	.+38     	; 0x13ce <ldexp+0x66>
    13a8:	bb 27       	eor	r27, r27
    13aa:	86 95       	lsr	r24
    13ac:	77 95       	ror	r23
    13ae:	67 95       	ror	r22
    13b0:	b7 95       	ror	r27
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <ldexp+0x4e>
    13b4:	b1 60       	ori	r27, 0x01	; 1
    13b6:	93 95       	inc	r25
    13b8:	c1 f7       	brne	.-16     	; 0x13aa <ldexp+0x42>
    13ba:	bb 0f       	add	r27, r27
    13bc:	58 f7       	brcc	.-42     	; 0x1394 <ldexp+0x2c>
    13be:	11 f4       	brne	.+4      	; 0x13c4 <ldexp+0x5c>
    13c0:	60 ff       	sbrs	r22, 0
    13c2:	e8 cf       	rjmp	.-48     	; 0x1394 <ldexp+0x2c>
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	e3 cf       	rjmp	.-58     	; 0x1394 <ldexp+0x2c>
    13ce:	50 ce       	rjmp	.-864    	; 0x1070 <__fp_szero>
    13d0:	0e f0       	brts	.+2      	; 0x13d4 <ldexp+0x6c>
    13d2:	76 cf       	rjmp	.-276    	; 0x12c0 <__fp_mpack>
    13d4:	cf cd       	rjmp	.-1122   	; 0xf74 <__fp_nan>
    13d6:	68 94       	set
    13d8:	c7 cd       	rjmp	.-1138   	; 0xf68 <__fp_inf>

000013da <log>:
    13da:	2f de       	rcall	.-930    	; 0x103a <__fp_splitA>
    13dc:	c8 f3       	brcs	.-14     	; 0x13d0 <ldexp+0x68>
    13de:	99 23       	and	r25, r25
    13e0:	d1 f3       	breq	.-12     	; 0x13d6 <ldexp+0x6e>
    13e2:	c6 f3       	brts	.-16     	; 0x13d4 <ldexp+0x6c>
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	1f 93       	push	r17
    13ea:	0f 93       	push	r16
    13ec:	ff 92       	push	r15
    13ee:	c9 2f       	mov	r28, r25
    13f0:	dd 27       	eor	r29, r29
    13f2:	88 23       	and	r24, r24
    13f4:	2a f0       	brmi	.+10     	; 0x1400 <log+0x26>
    13f6:	21 97       	sbiw	r28, 0x01	; 1
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	da f7       	brpl	.-10     	; 0x13f6 <log+0x1c>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f eb       	ldi	r21, 0xBF	; 191
    1408:	9f e3       	ldi	r25, 0x3F	; 63
    140a:	88 39       	cpi	r24, 0x98	; 152
    140c:	20 f0       	brcs	.+8      	; 0x1416 <log+0x3c>
    140e:	80 3e       	cpi	r24, 0xE0	; 224
    1410:	30 f0       	brcs	.+12     	; 0x141e <log+0x44>
    1412:	21 96       	adiw	r28, 0x01	; 1
    1414:	8f 77       	andi	r24, 0x7F	; 127
    1416:	6b dc       	rcall	.-1834   	; 0xcee <__addsf3>
    1418:	e2 ed       	ldi	r30, 0xD2	; 210
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <log+0x4a>
    141e:	67 dc       	rcall	.-1842   	; 0xcee <__addsf3>
    1420:	ef ef       	ldi	r30, 0xFF	; 255
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	62 df       	rcall	.-316    	; 0x12ea <__fp_powser>
    1426:	8b 01       	movw	r16, r22
    1428:	be 01       	movw	r22, r28
    142a:	ec 01       	movw	r28, r24
    142c:	fb 2e       	mov	r15, r27
    142e:	6f 57       	subi	r22, 0x7F	; 127
    1430:	71 09       	sbc	r23, r1
    1432:	75 95       	asr	r23
    1434:	77 1f       	adc	r23, r23
    1436:	88 0b       	sbc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	5b dd       	rcall	.-1354   	; 0xef2 <__floatsisf>
    143c:	28 e1       	ldi	r18, 0x18	; 24
    143e:	32 e7       	ldi	r19, 0x72	; 114
    1440:	41 e3       	ldi	r20, 0x31	; 49
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	27 de       	rcall	.-946    	; 0x1094 <__mulsf3x>
    1446:	af 2d       	mov	r26, r15
    1448:	98 01       	movw	r18, r16
    144a:	ae 01       	movw	r20, r28
    144c:	ff 90       	pop	r15
    144e:	0f 91       	pop	r16
    1450:	1f 91       	pop	r17
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	5c dc       	rcall	.-1864   	; 0xd10 <__addsf3x>
    1458:	c6 cd       	rjmp	.-1140   	; 0xfe6 <__fp_round>

0000145a <modf>:
    145a:	fa 01       	movw	r30, r20
    145c:	dc 01       	movw	r26, r24
    145e:	aa 0f       	add	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	bf 57       	subi	r27, 0x7F	; 127
    1468:	28 f4       	brcc	.+10     	; 0x1474 <modf+0x1a>
    146a:	22 27       	eor	r18, r18
    146c:	33 27       	eor	r19, r19
    146e:	44 27       	eor	r20, r20
    1470:	50 78       	andi	r21, 0x80	; 128
    1472:	1f c0       	rjmp	.+62     	; 0x14b2 <modf+0x58>
    1474:	b7 51       	subi	r27, 0x17	; 23
    1476:	88 f4       	brcc	.+34     	; 0x149a <modf+0x40>
    1478:	ab 2f       	mov	r26, r27
    147a:	00 24       	eor	r0, r0
    147c:	46 95       	lsr	r20
    147e:	37 95       	ror	r19
    1480:	27 95       	ror	r18
    1482:	01 1c       	adc	r0, r1
    1484:	a3 95       	inc	r26
    1486:	d2 f3       	brmi	.-12     	; 0x147c <modf+0x22>
    1488:	00 20       	and	r0, r0
    148a:	69 f0       	breq	.+26     	; 0x14a6 <modf+0x4c>
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	44 1f       	adc	r20, r20
    1492:	b3 95       	inc	r27
    1494:	da f3       	brmi	.-10     	; 0x148c <modf+0x32>
    1496:	0d d0       	rcall	.+26     	; 0x14b2 <modf+0x58>
    1498:	29 cc       	rjmp	.-1966   	; 0xcec <__subsf3>
    149a:	61 30       	cpi	r22, 0x01	; 1
    149c:	71 05       	cpc	r23, r1
    149e:	a0 e8       	ldi	r26, 0x80	; 128
    14a0:	8a 07       	cpc	r24, r26
    14a2:	b9 46       	sbci	r27, 0x69	; 105
    14a4:	30 f4       	brcc	.+12     	; 0x14b2 <modf+0x58>
    14a6:	9b 01       	movw	r18, r22
    14a8:	ac 01       	movw	r20, r24
    14aa:	66 27       	eor	r22, r22
    14ac:	77 27       	eor	r23, r23
    14ae:	88 27       	eor	r24, r24
    14b0:	90 78       	andi	r25, 0x80	; 128
    14b2:	30 96       	adiw	r30, 0x00	; 0
    14b4:	21 f0       	breq	.+8      	; 0x14be <modf+0x64>
    14b6:	20 83       	st	Z, r18
    14b8:	31 83       	std	Z+1, r19	; 0x01
    14ba:	42 83       	std	Z+2, r20	; 0x02
    14bc:	53 83       	std	Z+3, r21	; 0x03
    14be:	08 95       	ret

000014c0 <__divmodhi4>:
    14c0:	97 fb       	bst	r25, 7
    14c2:	07 2e       	mov	r0, r23
    14c4:	16 f4       	brtc	.+4      	; 0x14ca <__divmodhi4+0xa>
    14c6:	00 94       	com	r0
    14c8:	06 d0       	rcall	.+12     	; 0x14d6 <__divmodhi4_neg1>
    14ca:	77 fd       	sbrc	r23, 7
    14cc:	08 d0       	rcall	.+16     	; 0x14de <__divmodhi4_neg2>
    14ce:	0b d0       	rcall	.+22     	; 0x14e6 <__udivmodhi4>
    14d0:	07 fc       	sbrc	r0, 7
    14d2:	05 d0       	rcall	.+10     	; 0x14de <__divmodhi4_neg2>
    14d4:	3e f4       	brtc	.+14     	; 0x14e4 <__divmodhi4_exit>

000014d6 <__divmodhi4_neg1>:
    14d6:	90 95       	com	r25
    14d8:	81 95       	neg	r24
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	08 95       	ret

000014de <__divmodhi4_neg2>:
    14de:	70 95       	com	r23
    14e0:	61 95       	neg	r22
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255

000014e4 <__divmodhi4_exit>:
    14e4:	08 95       	ret

000014e6 <__udivmodhi4>:
    14e6:	aa 1b       	sub	r26, r26
    14e8:	bb 1b       	sub	r27, r27
    14ea:	51 e1       	ldi	r21, 0x11	; 17
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <__udivmodhi4_ep>

000014ee <__udivmodhi4_loop>:
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	a6 17       	cp	r26, r22
    14f4:	b7 07       	cpc	r27, r23
    14f6:	10 f0       	brcs	.+4      	; 0x14fc <__udivmodhi4_ep>
    14f8:	a6 1b       	sub	r26, r22
    14fa:	b7 0b       	sbc	r27, r23

000014fc <__udivmodhi4_ep>:
    14fc:	88 1f       	adc	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	5a 95       	dec	r21
    1502:	a9 f7       	brne	.-22     	; 0x14ee <__udivmodhi4_loop>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	08 95       	ret

0000150e <calloc>:
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	86 9f       	mul	r24, r22
    1518:	80 01       	movw	r16, r0
    151a:	87 9f       	mul	r24, r23
    151c:	10 0d       	add	r17, r0
    151e:	96 9f       	mul	r25, r22
    1520:	10 0d       	add	r17, r0
    1522:	11 24       	eor	r1, r1
    1524:	c8 01       	movw	r24, r16
    1526:	0d d0       	rcall	.+26     	; 0x1542 <malloc>
    1528:	ec 01       	movw	r28, r24
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	21 f0       	breq	.+8      	; 0x1536 <calloc+0x28>
    152e:	a8 01       	movw	r20, r16
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	4a d1       	rcall	.+660    	; 0x17ca <memset>
    1536:	ce 01       	movw	r24, r28
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <malloc>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	10 f4       	brcc	.+4      	; 0x1550 <malloc+0xe>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	e0 91 9c 01 	lds	r30, 0x019C
    1554:	f0 91 9d 01 	lds	r31, 0x019D
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	30 97       	sbiw	r30, 0x00	; 0
    1562:	39 f1       	breq	.+78     	; 0x15b2 <malloc+0x70>
    1564:	40 81       	ld	r20, Z
    1566:	51 81       	ldd	r21, Z+1	; 0x01
    1568:	48 17       	cp	r20, r24
    156a:	59 07       	cpc	r21, r25
    156c:	b8 f0       	brcs	.+46     	; 0x159c <malloc+0x5a>
    156e:	48 17       	cp	r20, r24
    1570:	59 07       	cpc	r21, r25
    1572:	71 f4       	brne	.+28     	; 0x1590 <malloc+0x4e>
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	10 97       	sbiw	r26, 0x00	; 0
    157a:	29 f0       	breq	.+10     	; 0x1586 <malloc+0x44>
    157c:	13 96       	adiw	r26, 0x03	; 3
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
    1582:	12 97       	sbiw	r26, 0x02	; 2
    1584:	2c c0       	rjmp	.+88     	; 0x15de <malloc+0x9c>
    1586:	90 93 9d 01 	sts	0x019D, r25
    158a:	80 93 9c 01 	sts	0x019C, r24
    158e:	27 c0       	rjmp	.+78     	; 0x15de <malloc+0x9c>
    1590:	21 15       	cp	r18, r1
    1592:	31 05       	cpc	r19, r1
    1594:	31 f0       	breq	.+12     	; 0x15a2 <malloc+0x60>
    1596:	42 17       	cp	r20, r18
    1598:	53 07       	cpc	r21, r19
    159a:	18 f0       	brcs	.+6      	; 0x15a2 <malloc+0x60>
    159c:	a9 01       	movw	r20, r18
    159e:	db 01       	movw	r26, r22
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <malloc+0x62>
    15a2:	ef 01       	movw	r28, r30
    15a4:	9a 01       	movw	r18, r20
    15a6:	bd 01       	movw	r22, r26
    15a8:	df 01       	movw	r26, r30
    15aa:	02 80       	ldd	r0, Z+2	; 0x02
    15ac:	f3 81       	ldd	r31, Z+3	; 0x03
    15ae:	e0 2d       	mov	r30, r0
    15b0:	d7 cf       	rjmp	.-82     	; 0x1560 <malloc+0x1e>
    15b2:	21 15       	cp	r18, r1
    15b4:	31 05       	cpc	r19, r1
    15b6:	f9 f0       	breq	.+62     	; 0x15f6 <malloc+0xb4>
    15b8:	28 1b       	sub	r18, r24
    15ba:	39 0b       	sbc	r19, r25
    15bc:	24 30       	cpi	r18, 0x04	; 4
    15be:	31 05       	cpc	r19, r1
    15c0:	80 f4       	brcc	.+32     	; 0x15e2 <malloc+0xa0>
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	61 15       	cp	r22, r1
    15c8:	71 05       	cpc	r23, r1
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <malloc+0x92>
    15cc:	fb 01       	movw	r30, r22
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <malloc+0x9a>
    15d4:	90 93 9d 01 	sts	0x019D, r25
    15d8:	80 93 9c 01 	sts	0x019C, r24
    15dc:	fe 01       	movw	r30, r28
    15de:	32 96       	adiw	r30, 0x02	; 2
    15e0:	44 c0       	rjmp	.+136    	; 0x166a <malloc+0x128>
    15e2:	fe 01       	movw	r30, r28
    15e4:	e2 0f       	add	r30, r18
    15e6:	f3 1f       	adc	r31, r19
    15e8:	81 93       	st	Z+, r24
    15ea:	91 93       	st	Z+, r25
    15ec:	22 50       	subi	r18, 0x02	; 2
    15ee:	31 09       	sbc	r19, r1
    15f0:	39 83       	std	Y+1, r19	; 0x01
    15f2:	28 83       	st	Y, r18
    15f4:	3a c0       	rjmp	.+116    	; 0x166a <malloc+0x128>
    15f6:	20 91 9a 01 	lds	r18, 0x019A
    15fa:	30 91 9b 01 	lds	r19, 0x019B
    15fe:	23 2b       	or	r18, r19
    1600:	41 f4       	brne	.+16     	; 0x1612 <malloc+0xd0>
    1602:	20 91 02 01 	lds	r18, 0x0102
    1606:	30 91 03 01 	lds	r19, 0x0103
    160a:	30 93 9b 01 	sts	0x019B, r19
    160e:	20 93 9a 01 	sts	0x019A, r18
    1612:	20 91 00 01 	lds	r18, 0x0100
    1616:	30 91 01 01 	lds	r19, 0x0101
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	41 f4       	brne	.+16     	; 0x1630 <malloc+0xee>
    1620:	2d b7       	in	r18, 0x3d	; 61
    1622:	3e b7       	in	r19, 0x3e	; 62
    1624:	40 91 04 01 	lds	r20, 0x0104
    1628:	50 91 05 01 	lds	r21, 0x0105
    162c:	24 1b       	sub	r18, r20
    162e:	35 0b       	sbc	r19, r21
    1630:	e0 91 9a 01 	lds	r30, 0x019A
    1634:	f0 91 9b 01 	lds	r31, 0x019B
    1638:	e2 17       	cp	r30, r18
    163a:	f3 07       	cpc	r31, r19
    163c:	a0 f4       	brcc	.+40     	; 0x1666 <malloc+0x124>
    163e:	2e 1b       	sub	r18, r30
    1640:	3f 0b       	sbc	r19, r31
    1642:	28 17       	cp	r18, r24
    1644:	39 07       	cpc	r19, r25
    1646:	78 f0       	brcs	.+30     	; 0x1666 <malloc+0x124>
    1648:	ac 01       	movw	r20, r24
    164a:	4e 5f       	subi	r20, 0xFE	; 254
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	24 17       	cp	r18, r20
    1650:	35 07       	cpc	r19, r21
    1652:	48 f0       	brcs	.+18     	; 0x1666 <malloc+0x124>
    1654:	4e 0f       	add	r20, r30
    1656:	5f 1f       	adc	r21, r31
    1658:	50 93 9b 01 	sts	0x019B, r21
    165c:	40 93 9a 01 	sts	0x019A, r20
    1660:	81 93       	st	Z+, r24
    1662:	91 93       	st	Z+, r25
    1664:	02 c0       	rjmp	.+4      	; 0x166a <malloc+0x128>
    1666:	e0 e0       	ldi	r30, 0x00	; 0
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	cf 01       	movw	r24, r30
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <free>:
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	09 f4       	brne	.+2      	; 0x167c <free+0xa>
    167a:	87 c0       	rjmp	.+270    	; 0x178a <free+0x118>
    167c:	fc 01       	movw	r30, r24
    167e:	32 97       	sbiw	r30, 0x02	; 2
    1680:	13 82       	std	Z+3, r1	; 0x03
    1682:	12 82       	std	Z+2, r1	; 0x02
    1684:	c0 91 9c 01 	lds	r28, 0x019C
    1688:	d0 91 9d 01 	lds	r29, 0x019D
    168c:	20 97       	sbiw	r28, 0x00	; 0
    168e:	81 f4       	brne	.+32     	; 0x16b0 <free+0x3e>
    1690:	20 81       	ld	r18, Z
    1692:	31 81       	ldd	r19, Z+1	; 0x01
    1694:	28 0f       	add	r18, r24
    1696:	39 1f       	adc	r19, r25
    1698:	80 91 9a 01 	lds	r24, 0x019A
    169c:	90 91 9b 01 	lds	r25, 0x019B
    16a0:	82 17       	cp	r24, r18
    16a2:	93 07       	cpc	r25, r19
    16a4:	79 f5       	brne	.+94     	; 0x1704 <free+0x92>
    16a6:	f0 93 9b 01 	sts	0x019B, r31
    16aa:	e0 93 9a 01 	sts	0x019A, r30
    16ae:	6d c0       	rjmp	.+218    	; 0x178a <free+0x118>
    16b0:	de 01       	movw	r26, r28
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	ae 17       	cp	r26, r30
    16b8:	bf 07       	cpc	r27, r31
    16ba:	50 f4       	brcc	.+20     	; 0x16d0 <free+0x5e>
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	4d 91       	ld	r20, X+
    16c0:	5c 91       	ld	r21, X
    16c2:	13 97       	sbiw	r26, 0x03	; 3
    16c4:	9d 01       	movw	r18, r26
    16c6:	41 15       	cp	r20, r1
    16c8:	51 05       	cpc	r21, r1
    16ca:	09 f1       	breq	.+66     	; 0x170e <free+0x9c>
    16cc:	da 01       	movw	r26, r20
    16ce:	f3 cf       	rjmp	.-26     	; 0x16b6 <free+0x44>
    16d0:	b3 83       	std	Z+3, r27	; 0x03
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	84 0f       	add	r24, r20
    16da:	95 1f       	adc	r25, r21
    16dc:	8a 17       	cp	r24, r26
    16de:	9b 07       	cpc	r25, r27
    16e0:	71 f4       	brne	.+28     	; 0x16fe <free+0x8c>
    16e2:	8d 91       	ld	r24, X+
    16e4:	9c 91       	ld	r25, X
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	84 0f       	add	r24, r20
    16ea:	95 1f       	adc	r25, r21
    16ec:	02 96       	adiw	r24, 0x02	; 2
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	12 96       	adiw	r26, 0x02	; 2
    16f4:	8d 91       	ld	r24, X+
    16f6:	9c 91       	ld	r25, X
    16f8:	13 97       	sbiw	r26, 0x03	; 3
    16fa:	93 83       	std	Z+3, r25	; 0x03
    16fc:	82 83       	std	Z+2, r24	; 0x02
    16fe:	21 15       	cp	r18, r1
    1700:	31 05       	cpc	r19, r1
    1702:	29 f4       	brne	.+10     	; 0x170e <free+0x9c>
    1704:	f0 93 9d 01 	sts	0x019D, r31
    1708:	e0 93 9c 01 	sts	0x019C, r30
    170c:	3e c0       	rjmp	.+124    	; 0x178a <free+0x118>
    170e:	d9 01       	movw	r26, r18
    1710:	13 96       	adiw	r26, 0x03	; 3
    1712:	fc 93       	st	X, r31
    1714:	ee 93       	st	-X, r30
    1716:	12 97       	sbiw	r26, 0x02	; 2
    1718:	4d 91       	ld	r20, X+
    171a:	5d 91       	ld	r21, X+
    171c:	a4 0f       	add	r26, r20
    171e:	b5 1f       	adc	r27, r21
    1720:	ea 17       	cp	r30, r26
    1722:	fb 07       	cpc	r31, r27
    1724:	79 f4       	brne	.+30     	; 0x1744 <free+0xd2>
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	84 0f       	add	r24, r20
    172c:	95 1f       	adc	r25, r21
    172e:	02 96       	adiw	r24, 0x02	; 2
    1730:	d9 01       	movw	r26, r18
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	13 96       	adiw	r26, 0x03	; 3
    173e:	9c 93       	st	X, r25
    1740:	8e 93       	st	-X, r24
    1742:	12 97       	sbiw	r26, 0x02	; 2
    1744:	e0 e0       	ldi	r30, 0x00	; 0
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	19 f0       	breq	.+6      	; 0x1756 <free+0xe4>
    1750:	fe 01       	movw	r30, r28
    1752:	ec 01       	movw	r28, r24
    1754:	f9 cf       	rjmp	.-14     	; 0x1748 <free+0xd6>
    1756:	ce 01       	movw	r24, r28
    1758:	02 96       	adiw	r24, 0x02	; 2
    175a:	28 81       	ld	r18, Y
    175c:	39 81       	ldd	r19, Y+1	; 0x01
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	20 91 9a 01 	lds	r18, 0x019A
    1766:	30 91 9b 01 	lds	r19, 0x019B
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	69 f4       	brne	.+26     	; 0x178a <free+0x118>
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	29 f4       	brne	.+10     	; 0x177e <free+0x10c>
    1774:	10 92 9d 01 	sts	0x019D, r1
    1778:	10 92 9c 01 	sts	0x019C, r1
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <free+0x110>
    177e:	13 82       	std	Z+3, r1	; 0x03
    1780:	12 82       	std	Z+2, r1	; 0x02
    1782:	d0 93 9b 01 	sts	0x019B, r29
    1786:	c0 93 9a 01 	sts	0x019A, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <atoi>:
    1790:	fc 01       	movw	r30, r24
    1792:	88 27       	eor	r24, r24
    1794:	99 27       	eor	r25, r25
    1796:	e8 94       	clt
    1798:	21 91       	ld	r18, Z+
    179a:	20 32       	cpi	r18, 0x20	; 32
    179c:	e9 f3       	breq	.-6      	; 0x1798 <atoi+0x8>
    179e:	29 30       	cpi	r18, 0x09	; 9
    17a0:	10 f0       	brcs	.+4      	; 0x17a6 <atoi+0x16>
    17a2:	2e 30       	cpi	r18, 0x0E	; 14
    17a4:	c8 f3       	brcs	.-14     	; 0x1798 <atoi+0x8>
    17a6:	2b 32       	cpi	r18, 0x2B	; 43
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <atoi+0x28>
    17aa:	2d 32       	cpi	r18, 0x2D	; 45
    17ac:	31 f4       	brne	.+12     	; 0x17ba <atoi+0x2a>
    17ae:	68 94       	set
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <atoi+0x28>
    17b2:	22 d0       	rcall	.+68     	; 0x17f8 <__mulhi_const_10>
    17b4:	82 0f       	add	r24, r18
    17b6:	91 1d       	adc	r25, r1
    17b8:	21 91       	ld	r18, Z+
    17ba:	20 53       	subi	r18, 0x30	; 48
    17bc:	2a 30       	cpi	r18, 0x0A	; 10
    17be:	c8 f3       	brcs	.-14     	; 0x17b2 <atoi+0x22>
    17c0:	1e f4       	brtc	.+6      	; 0x17c8 <atoi+0x38>
    17c2:	90 95       	com	r25
    17c4:	81 95       	neg	r24
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	08 95       	ret

000017ca <memset>:
    17ca:	dc 01       	movw	r26, r24
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <memset+0x6>
    17ce:	6d 93       	st	X+, r22
    17d0:	41 50       	subi	r20, 0x01	; 1
    17d2:	50 40       	sbci	r21, 0x00	; 0
    17d4:	e0 f7       	brcc	.-8      	; 0x17ce <memset+0x4>
    17d6:	08 95       	ret

000017d8 <strcmp>:
    17d8:	fb 01       	movw	r30, r22
    17da:	dc 01       	movw	r26, r24
    17dc:	8d 91       	ld	r24, X+
    17de:	01 90       	ld	r0, Z+
    17e0:	80 19       	sub	r24, r0
    17e2:	01 10       	cpse	r0, r1
    17e4:	d9 f3       	breq	.-10     	; 0x17dc <strcmp+0x4>
    17e6:	99 0b       	sbc	r25, r25
    17e8:	08 95       	ret

000017ea <strcpy>:
    17ea:	fb 01       	movw	r30, r22
    17ec:	dc 01       	movw	r26, r24
    17ee:	01 90       	ld	r0, Z+
    17f0:	0d 92       	st	X+, r0
    17f2:	00 20       	and	r0, r0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <strcpy+0x4>
    17f6:	08 95       	ret

000017f8 <__mulhi_const_10>:
    17f8:	7a e0       	ldi	r23, 0x0A	; 10
    17fa:	97 9f       	mul	r25, r23
    17fc:	90 2d       	mov	r25, r0
    17fe:	87 9f       	mul	r24, r23
    1800:	80 2d       	mov	r24, r0
    1802:	91 0d       	add	r25, r1
    1804:	11 24       	eor	r1, r1
    1806:	08 95       	ret

00001808 <sprintf>:
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	2e 97       	sbiw	r28, 0x0e	; 14
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	0d 89       	ldd	r16, Y+21	; 0x15
    1822:	1e 89       	ldd	r17, Y+22	; 0x16
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	8c 83       	std	Y+4, r24	; 0x04
    1828:	1a 83       	std	Y+2, r17	; 0x02
    182a:	09 83       	std	Y+1, r16	; 0x01
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	9f e7       	ldi	r25, 0x7F	; 127
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	ae 01       	movw	r20, r28
    1836:	47 5e       	subi	r20, 0xE7	; 231
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	6f 89       	ldd	r22, Y+23	; 0x17
    183c:	78 8d       	ldd	r23, Y+24	; 0x18
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	48 d0       	rcall	.+144    	; 0x18d4 <vfprintf>
    1844:	ef 81       	ldd	r30, Y+7	; 0x07
    1846:	f8 85       	ldd	r31, Y+8	; 0x08
    1848:	e0 0f       	add	r30, r16
    184a:	f1 1f       	adc	r31, r17
    184c:	10 82       	st	Z, r1
    184e:	2e 96       	adiw	r28, 0x0e	; 14
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <vsnprintf>:
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	2e 97       	sbiw	r28, 0x0e	; 14
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	8c 01       	movw	r16, r24
    187e:	ca 01       	movw	r24, r20
    1880:	46 e0       	ldi	r20, 0x06	; 6
    1882:	4c 83       	std	Y+4, r20	; 0x04
    1884:	1a 83       	std	Y+2, r17	; 0x02
    1886:	09 83       	std	Y+1, r16	; 0x01
    1888:	77 ff       	sbrs	r23, 7
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <vsnprintf+0x2c>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e8       	ldi	r23, 0x80	; 128
    1890:	61 50       	subi	r22, 0x01	; 1
    1892:	71 09       	sbc	r23, r1
    1894:	7e 83       	std	Y+6, r23	; 0x06
    1896:	6d 83       	std	Y+5, r22	; 0x05
    1898:	a9 01       	movw	r20, r18
    189a:	bc 01       	movw	r22, r24
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	19 d0       	rcall	.+50     	; 0x18d4 <vfprintf>
    18a2:	4d 81       	ldd	r20, Y+5	; 0x05
    18a4:	5e 81       	ldd	r21, Y+6	; 0x06
    18a6:	57 fd       	sbrc	r21, 7
    18a8:	0a c0       	rjmp	.+20     	; 0x18be <vsnprintf+0x5a>
    18aa:	2f 81       	ldd	r18, Y+7	; 0x07
    18ac:	38 85       	ldd	r19, Y+8	; 0x08
    18ae:	42 17       	cp	r20, r18
    18b0:	53 07       	cpc	r21, r19
    18b2:	0c f4       	brge	.+2      	; 0x18b6 <vsnprintf+0x52>
    18b4:	9a 01       	movw	r18, r20
    18b6:	f8 01       	movw	r30, r16
    18b8:	e2 0f       	add	r30, r18
    18ba:	f3 1f       	adc	r31, r19
    18bc:	10 82       	st	Z, r1
    18be:	2e 96       	adiw	r28, 0x0e	; 14
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <vfprintf>:
    18d4:	2f 92       	push	r2
    18d6:	3f 92       	push	r3
    18d8:	4f 92       	push	r4
    18da:	5f 92       	push	r5
    18dc:	6f 92       	push	r6
    18de:	7f 92       	push	r7
    18e0:	8f 92       	push	r8
    18e2:	9f 92       	push	r9
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	2c 97       	sbiw	r28, 0x0c	; 12
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	7c 01       	movw	r14, r24
    190a:	6b 01       	movw	r12, r22
    190c:	8a 01       	movw	r16, r20
    190e:	fc 01       	movw	r30, r24
    1910:	17 82       	std	Z+7, r1	; 0x07
    1912:	16 82       	std	Z+6, r1	; 0x06
    1914:	83 81       	ldd	r24, Z+3	; 0x03
    1916:	81 ff       	sbrs	r24, 1
    1918:	b0 c1       	rjmp	.+864    	; 0x1c7a <vfprintf+0x3a6>
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	4c 01       	movw	r8, r24
    1920:	f7 01       	movw	r30, r14
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	f6 01       	movw	r30, r12
    1926:	93 fd       	sbrc	r25, 3
    1928:	85 91       	lpm	r24, Z+
    192a:	93 ff       	sbrs	r25, 3
    192c:	81 91       	ld	r24, Z+
    192e:	6f 01       	movw	r12, r30
    1930:	88 23       	and	r24, r24
    1932:	09 f4       	brne	.+2      	; 0x1936 <vfprintf+0x62>
    1934:	9e c1       	rjmp	.+828    	; 0x1c72 <vfprintf+0x39e>
    1936:	85 32       	cpi	r24, 0x25	; 37
    1938:	39 f4       	brne	.+14     	; 0x1948 <vfprintf+0x74>
    193a:	93 fd       	sbrc	r25, 3
    193c:	85 91       	lpm	r24, Z+
    193e:	93 ff       	sbrs	r25, 3
    1940:	81 91       	ld	r24, Z+
    1942:	6f 01       	movw	r12, r30
    1944:	85 32       	cpi	r24, 0x25	; 37
    1946:	21 f4       	brne	.+8      	; 0x1950 <vfprintf+0x7c>
    1948:	b7 01       	movw	r22, r14
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	c7 d1       	rcall	.+910    	; 0x1cdc <fputc>
    194e:	e8 cf       	rjmp	.-48     	; 0x1920 <vfprintf+0x4c>
    1950:	51 2c       	mov	r5, r1
    1952:	31 2c       	mov	r3, r1
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	20 32       	cpi	r18, 0x20	; 32
    1958:	a0 f4       	brcc	.+40     	; 0x1982 <vfprintf+0xae>
    195a:	8b 32       	cpi	r24, 0x2B	; 43
    195c:	69 f0       	breq	.+26     	; 0x1978 <vfprintf+0xa4>
    195e:	30 f4       	brcc	.+12     	; 0x196c <vfprintf+0x98>
    1960:	80 32       	cpi	r24, 0x20	; 32
    1962:	59 f0       	breq	.+22     	; 0x197a <vfprintf+0xa6>
    1964:	83 32       	cpi	r24, 0x23	; 35
    1966:	69 f4       	brne	.+26     	; 0x1982 <vfprintf+0xae>
    1968:	20 61       	ori	r18, 0x10	; 16
    196a:	2c c0       	rjmp	.+88     	; 0x19c4 <vfprintf+0xf0>
    196c:	8d 32       	cpi	r24, 0x2D	; 45
    196e:	39 f0       	breq	.+14     	; 0x197e <vfprintf+0xaa>
    1970:	80 33       	cpi	r24, 0x30	; 48
    1972:	39 f4       	brne	.+14     	; 0x1982 <vfprintf+0xae>
    1974:	21 60       	ori	r18, 0x01	; 1
    1976:	26 c0       	rjmp	.+76     	; 0x19c4 <vfprintf+0xf0>
    1978:	22 60       	ori	r18, 0x02	; 2
    197a:	24 60       	ori	r18, 0x04	; 4
    197c:	23 c0       	rjmp	.+70     	; 0x19c4 <vfprintf+0xf0>
    197e:	28 60       	ori	r18, 0x08	; 8
    1980:	21 c0       	rjmp	.+66     	; 0x19c4 <vfprintf+0xf0>
    1982:	27 fd       	sbrc	r18, 7
    1984:	27 c0       	rjmp	.+78     	; 0x19d4 <vfprintf+0x100>
    1986:	30 ed       	ldi	r19, 0xD0	; 208
    1988:	38 0f       	add	r19, r24
    198a:	3a 30       	cpi	r19, 0x0A	; 10
    198c:	78 f4       	brcc	.+30     	; 0x19ac <vfprintf+0xd8>
    198e:	26 ff       	sbrs	r18, 6
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0xca>
    1992:	fa e0       	ldi	r31, 0x0A	; 10
    1994:	5f 9e       	mul	r5, r31
    1996:	30 0d       	add	r19, r0
    1998:	11 24       	eor	r1, r1
    199a:	53 2e       	mov	r5, r19
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <vfprintf+0xf0>
    199e:	8a e0       	ldi	r24, 0x0A	; 10
    19a0:	38 9e       	mul	r3, r24
    19a2:	30 0d       	add	r19, r0
    19a4:	11 24       	eor	r1, r1
    19a6:	33 2e       	mov	r3, r19
    19a8:	20 62       	ori	r18, 0x20	; 32
    19aa:	0c c0       	rjmp	.+24     	; 0x19c4 <vfprintf+0xf0>
    19ac:	8e 32       	cpi	r24, 0x2E	; 46
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <vfprintf+0xe4>
    19b0:	26 fd       	sbrc	r18, 6
    19b2:	5f c1       	rjmp	.+702    	; 0x1c72 <vfprintf+0x39e>
    19b4:	20 64       	ori	r18, 0x40	; 64
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <vfprintf+0xf0>
    19b8:	8c 36       	cpi	r24, 0x6C	; 108
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <vfprintf+0xec>
    19bc:	20 68       	ori	r18, 0x80	; 128
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <vfprintf+0xf0>
    19c0:	88 36       	cpi	r24, 0x68	; 104
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <vfprintf+0x100>
    19c4:	f6 01       	movw	r30, r12
    19c6:	93 fd       	sbrc	r25, 3
    19c8:	85 91       	lpm	r24, Z+
    19ca:	93 ff       	sbrs	r25, 3
    19cc:	81 91       	ld	r24, Z+
    19ce:	6f 01       	movw	r12, r30
    19d0:	81 11       	cpse	r24, r1
    19d2:	c1 cf       	rjmp	.-126    	; 0x1956 <vfprintf+0x82>
    19d4:	98 2f       	mov	r25, r24
    19d6:	9f 7d       	andi	r25, 0xDF	; 223
    19d8:	95 54       	subi	r25, 0x45	; 69
    19da:	93 30       	cpi	r25, 0x03	; 3
    19dc:	28 f4       	brcc	.+10     	; 0x19e8 <vfprintf+0x114>
    19de:	0c 5f       	subi	r16, 0xFC	; 252
    19e0:	1f 4f       	sbci	r17, 0xFF	; 255
    19e2:	ff e3       	ldi	r31, 0x3F	; 63
    19e4:	f9 83       	std	Y+1, r31	; 0x01
    19e6:	0d c0       	rjmp	.+26     	; 0x1a02 <vfprintf+0x12e>
    19e8:	83 36       	cpi	r24, 0x63	; 99
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <vfprintf+0x124>
    19ec:	83 37       	cpi	r24, 0x73	; 115
    19ee:	71 f0       	breq	.+28     	; 0x1a0c <vfprintf+0x138>
    19f0:	83 35       	cpi	r24, 0x53	; 83
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <vfprintf+0x122>
    19f4:	57 c0       	rjmp	.+174    	; 0x1aa4 <vfprintf+0x1d0>
    19f6:	21 c0       	rjmp	.+66     	; 0x1a3a <vfprintf+0x166>
    19f8:	f8 01       	movw	r30, r16
    19fa:	80 81       	ld	r24, Z
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	0e 5f       	subi	r16, 0xFE	; 254
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	44 24       	eor	r4, r4
    1a04:	43 94       	inc	r4
    1a06:	51 2c       	mov	r5, r1
    1a08:	54 01       	movw	r10, r8
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <vfprintf+0x160>
    1a0c:	38 01       	movw	r6, r16
    1a0e:	f2 e0       	ldi	r31, 0x02	; 2
    1a10:	6f 0e       	add	r6, r31
    1a12:	71 1c       	adc	r7, r1
    1a14:	f8 01       	movw	r30, r16
    1a16:	a0 80       	ld	r10, Z
    1a18:	b1 80       	ldd	r11, Z+1	; 0x01
    1a1a:	26 ff       	sbrs	r18, 6
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <vfprintf+0x150>
    1a1e:	65 2d       	mov	r22, r5
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0x154>
    1a24:	6f ef       	ldi	r22, 0xFF	; 255
    1a26:	7f ef       	ldi	r23, 0xFF	; 255
    1a28:	c5 01       	movw	r24, r10
    1a2a:	2c 87       	std	Y+12, r18	; 0x0c
    1a2c:	4c d1       	rcall	.+664    	; 0x1cc6 <strnlen>
    1a2e:	2c 01       	movw	r4, r24
    1a30:	83 01       	movw	r16, r6
    1a32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a34:	2f 77       	andi	r18, 0x7F	; 127
    1a36:	22 2e       	mov	r2, r18
    1a38:	16 c0       	rjmp	.+44     	; 0x1a66 <vfprintf+0x192>
    1a3a:	38 01       	movw	r6, r16
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	6f 0e       	add	r6, r31
    1a40:	71 1c       	adc	r7, r1
    1a42:	f8 01       	movw	r30, r16
    1a44:	a0 80       	ld	r10, Z
    1a46:	b1 80       	ldd	r11, Z+1	; 0x01
    1a48:	26 ff       	sbrs	r18, 6
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <vfprintf+0x17e>
    1a4c:	65 2d       	mov	r22, r5
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <vfprintf+0x182>
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	7f ef       	ldi	r23, 0xFF	; 255
    1a56:	c5 01       	movw	r24, r10
    1a58:	2c 87       	std	Y+12, r18	; 0x0c
    1a5a:	2a d1       	rcall	.+596    	; 0x1cb0 <strnlen_P>
    1a5c:	2c 01       	movw	r4, r24
    1a5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a60:	20 68       	ori	r18, 0x80	; 128
    1a62:	22 2e       	mov	r2, r18
    1a64:	83 01       	movw	r16, r6
    1a66:	23 fc       	sbrc	r2, 3
    1a68:	19 c0       	rjmp	.+50     	; 0x1a9c <vfprintf+0x1c8>
    1a6a:	83 2d       	mov	r24, r3
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	48 16       	cp	r4, r24
    1a70:	59 06       	cpc	r5, r25
    1a72:	a0 f4       	brcc	.+40     	; 0x1a9c <vfprintf+0x1c8>
    1a74:	b7 01       	movw	r22, r14
    1a76:	80 e2       	ldi	r24, 0x20	; 32
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	30 d1       	rcall	.+608    	; 0x1cdc <fputc>
    1a7c:	3a 94       	dec	r3
    1a7e:	f5 cf       	rjmp	.-22     	; 0x1a6a <vfprintf+0x196>
    1a80:	f5 01       	movw	r30, r10
    1a82:	27 fc       	sbrc	r2, 7
    1a84:	85 91       	lpm	r24, Z+
    1a86:	27 fe       	sbrs	r2, 7
    1a88:	81 91       	ld	r24, Z+
    1a8a:	5f 01       	movw	r10, r30
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	25 d1       	rcall	.+586    	; 0x1cdc <fputc>
    1a92:	31 10       	cpse	r3, r1
    1a94:	3a 94       	dec	r3
    1a96:	f1 e0       	ldi	r31, 0x01	; 1
    1a98:	4f 1a       	sub	r4, r31
    1a9a:	51 08       	sbc	r5, r1
    1a9c:	41 14       	cp	r4, r1
    1a9e:	51 04       	cpc	r5, r1
    1aa0:	79 f7       	brne	.-34     	; 0x1a80 <vfprintf+0x1ac>
    1aa2:	de c0       	rjmp	.+444    	; 0x1c60 <vfprintf+0x38c>
    1aa4:	84 36       	cpi	r24, 0x64	; 100
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <vfprintf+0x1d8>
    1aa8:	89 36       	cpi	r24, 0x69	; 105
    1aaa:	31 f5       	brne	.+76     	; 0x1af8 <vfprintf+0x224>
    1aac:	f8 01       	movw	r30, r16
    1aae:	27 ff       	sbrs	r18, 7
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <vfprintf+0x1ec>
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	0c 5f       	subi	r16, 0xFC	; 252
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	08 c0       	rjmp	.+16     	; 0x1ad0 <vfprintf+0x1fc>
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	88 27       	eor	r24, r24
    1ac6:	77 fd       	sbrc	r23, 7
    1ac8:	80 95       	com	r24
    1aca:	98 2f       	mov	r25, r24
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	2f 76       	andi	r18, 0x6F	; 111
    1ad2:	b2 2e       	mov	r11, r18
    1ad4:	97 ff       	sbrs	r25, 7
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <vfprintf+0x216>
    1ad8:	90 95       	com	r25
    1ada:	80 95       	com	r24
    1adc:	70 95       	com	r23
    1ade:	61 95       	neg	r22
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	20 68       	ori	r18, 0x80	; 128
    1ae8:	b2 2e       	mov	r11, r18
    1aea:	2a e0       	ldi	r18, 0x0A	; 10
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	a4 01       	movw	r20, r8
    1af0:	27 d1       	rcall	.+590    	; 0x1d40 <__ultoa_invert>
    1af2:	a8 2e       	mov	r10, r24
    1af4:	a8 18       	sub	r10, r8
    1af6:	43 c0       	rjmp	.+134    	; 0x1b7e <vfprintf+0x2aa>
    1af8:	85 37       	cpi	r24, 0x75	; 117
    1afa:	29 f4       	brne	.+10     	; 0x1b06 <vfprintf+0x232>
    1afc:	2f 7e       	andi	r18, 0xEF	; 239
    1afe:	b2 2e       	mov	r11, r18
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	25 c0       	rjmp	.+74     	; 0x1b50 <vfprintf+0x27c>
    1b06:	f2 2f       	mov	r31, r18
    1b08:	f9 7f       	andi	r31, 0xF9	; 249
    1b0a:	bf 2e       	mov	r11, r31
    1b0c:	8f 36       	cpi	r24, 0x6F	; 111
    1b0e:	c1 f0       	breq	.+48     	; 0x1b40 <vfprintf+0x26c>
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <vfprintf+0x244>
    1b12:	88 35       	cpi	r24, 0x58	; 88
    1b14:	79 f0       	breq	.+30     	; 0x1b34 <vfprintf+0x260>
    1b16:	ad c0       	rjmp	.+346    	; 0x1c72 <vfprintf+0x39e>
    1b18:	80 37       	cpi	r24, 0x70	; 112
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <vfprintf+0x24e>
    1b1c:	88 37       	cpi	r24, 0x78	; 120
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <vfprintf+0x254>
    1b20:	a8 c0       	rjmp	.+336    	; 0x1c72 <vfprintf+0x39e>
    1b22:	2f 2f       	mov	r18, r31
    1b24:	20 61       	ori	r18, 0x10	; 16
    1b26:	b2 2e       	mov	r11, r18
    1b28:	b4 fe       	sbrs	r11, 4
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <vfprintf+0x272>
    1b2c:	8b 2d       	mov	r24, r11
    1b2e:	84 60       	ori	r24, 0x04	; 4
    1b30:	b8 2e       	mov	r11, r24
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <vfprintf+0x272>
    1b34:	24 ff       	sbrs	r18, 4
    1b36:	0a c0       	rjmp	.+20     	; 0x1b4c <vfprintf+0x278>
    1b38:	9f 2f       	mov	r25, r31
    1b3a:	96 60       	ori	r25, 0x06	; 6
    1b3c:	b9 2e       	mov	r11, r25
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <vfprintf+0x278>
    1b40:	28 e0       	ldi	r18, 0x08	; 8
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <vfprintf+0x27c>
    1b46:	20 e1       	ldi	r18, 0x10	; 16
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0x27c>
    1b4c:	20 e1       	ldi	r18, 0x10	; 16
    1b4e:	32 e0       	ldi	r19, 0x02	; 2
    1b50:	f8 01       	movw	r30, r16
    1b52:	b7 fe       	sbrs	r11, 7
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <vfprintf+0x290>
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	0c 5f       	subi	r16, 0xFC	; 252
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x29c>
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 5f       	subi	r16, 0xFE	; 254
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	a4 01       	movw	r20, r8
    1b72:	e6 d0       	rcall	.+460    	; 0x1d40 <__ultoa_invert>
    1b74:	a8 2e       	mov	r10, r24
    1b76:	a8 18       	sub	r10, r8
    1b78:	fb 2d       	mov	r31, r11
    1b7a:	ff 77       	andi	r31, 0x7F	; 127
    1b7c:	bf 2e       	mov	r11, r31
    1b7e:	b6 fe       	sbrs	r11, 6
    1b80:	0b c0       	rjmp	.+22     	; 0x1b98 <vfprintf+0x2c4>
    1b82:	2b 2d       	mov	r18, r11
    1b84:	2e 7f       	andi	r18, 0xFE	; 254
    1b86:	a5 14       	cp	r10, r5
    1b88:	50 f4       	brcc	.+20     	; 0x1b9e <vfprintf+0x2ca>
    1b8a:	b4 fe       	sbrs	r11, 4
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <vfprintf+0x2ce>
    1b8e:	b2 fc       	sbrc	r11, 2
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <vfprintf+0x2ce>
    1b92:	2b 2d       	mov	r18, r11
    1b94:	2e 7e       	andi	r18, 0xEE	; 238
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <vfprintf+0x2ce>
    1b98:	7a 2c       	mov	r7, r10
    1b9a:	2b 2d       	mov	r18, r11
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <vfprintf+0x2d0>
    1b9e:	7a 2c       	mov	r7, r10
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <vfprintf+0x2d0>
    1ba2:	75 2c       	mov	r7, r5
    1ba4:	24 ff       	sbrs	r18, 4
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <vfprintf+0x2ee>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ea 0d       	add	r30, r10
    1bac:	f1 1d       	adc	r31, r1
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 33       	cpi	r24, 0x30	; 48
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <vfprintf+0x2e4>
    1bb4:	29 7e       	andi	r18, 0xE9	; 233
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <vfprintf+0x2f6>
    1bb8:	22 ff       	sbrs	r18, 2
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <vfprintf+0x2f4>
    1bbc:	73 94       	inc	r7
    1bbe:	73 94       	inc	r7
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <vfprintf+0x2f6>
    1bc2:	82 2f       	mov	r24, r18
    1bc4:	86 78       	andi	r24, 0x86	; 134
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <vfprintf+0x2f6>
    1bc8:	73 94       	inc	r7
    1bca:	23 fd       	sbrc	r18, 3
    1bcc:	12 c0       	rjmp	.+36     	; 0x1bf2 <vfprintf+0x31e>
    1bce:	20 ff       	sbrs	r18, 0
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <vfprintf+0x30a>
    1bd2:	5a 2c       	mov	r5, r10
    1bd4:	73 14       	cp	r7, r3
    1bd6:	18 f4       	brcc	.+6      	; 0x1bde <vfprintf+0x30a>
    1bd8:	53 0c       	add	r5, r3
    1bda:	57 18       	sub	r5, r7
    1bdc:	73 2c       	mov	r7, r3
    1bde:	73 14       	cp	r7, r3
    1be0:	60 f4       	brcc	.+24     	; 0x1bfa <vfprintf+0x326>
    1be2:	b7 01       	movw	r22, r14
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	2c 87       	std	Y+12, r18	; 0x0c
    1bea:	78 d0       	rcall	.+240    	; 0x1cdc <fputc>
    1bec:	73 94       	inc	r7
    1bee:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf0:	f6 cf       	rjmp	.-20     	; 0x1bde <vfprintf+0x30a>
    1bf2:	73 14       	cp	r7, r3
    1bf4:	10 f4       	brcc	.+4      	; 0x1bfa <vfprintf+0x326>
    1bf6:	37 18       	sub	r3, r7
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <vfprintf+0x328>
    1bfa:	31 2c       	mov	r3, r1
    1bfc:	24 ff       	sbrs	r18, 4
    1bfe:	11 c0       	rjmp	.+34     	; 0x1c22 <vfprintf+0x34e>
    1c00:	b7 01       	movw	r22, r14
    1c02:	80 e3       	ldi	r24, 0x30	; 48
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	2c 87       	std	Y+12, r18	; 0x0c
    1c08:	69 d0       	rcall	.+210    	; 0x1cdc <fputc>
    1c0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c0c:	22 ff       	sbrs	r18, 2
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <vfprintf+0x368>
    1c10:	21 ff       	sbrs	r18, 1
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <vfprintf+0x346>
    1c14:	88 e5       	ldi	r24, 0x58	; 88
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x34a>
    1c1a:	88 e7       	ldi	r24, 0x78	; 120
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	b7 01       	movw	r22, r14
    1c20:	0c c0       	rjmp	.+24     	; 0x1c3a <vfprintf+0x366>
    1c22:	82 2f       	mov	r24, r18
    1c24:	86 78       	andi	r24, 0x86	; 134
    1c26:	51 f0       	breq	.+20     	; 0x1c3c <vfprintf+0x368>
    1c28:	21 fd       	sbrc	r18, 1
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x35c>
    1c2c:	80 e2       	ldi	r24, 0x20	; 32
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <vfprintf+0x35e>
    1c30:	8b e2       	ldi	r24, 0x2B	; 43
    1c32:	27 fd       	sbrc	r18, 7
    1c34:	8d e2       	ldi	r24, 0x2D	; 45
    1c36:	b7 01       	movw	r22, r14
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	50 d0       	rcall	.+160    	; 0x1cdc <fputc>
    1c3c:	a5 14       	cp	r10, r5
    1c3e:	30 f4       	brcc	.+12     	; 0x1c4c <vfprintf+0x378>
    1c40:	b7 01       	movw	r22, r14
    1c42:	80 e3       	ldi	r24, 0x30	; 48
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	4a d0       	rcall	.+148    	; 0x1cdc <fputc>
    1c48:	5a 94       	dec	r5
    1c4a:	f8 cf       	rjmp	.-16     	; 0x1c3c <vfprintf+0x368>
    1c4c:	aa 94       	dec	r10
    1c4e:	f4 01       	movw	r30, r8
    1c50:	ea 0d       	add	r30, r10
    1c52:	f1 1d       	adc	r31, r1
    1c54:	80 81       	ld	r24, Z
    1c56:	b7 01       	movw	r22, r14
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	40 d0       	rcall	.+128    	; 0x1cdc <fputc>
    1c5c:	a1 10       	cpse	r10, r1
    1c5e:	f6 cf       	rjmp	.-20     	; 0x1c4c <vfprintf+0x378>
    1c60:	33 20       	and	r3, r3
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <vfprintf+0x392>
    1c64:	5d ce       	rjmp	.-838    	; 0x1920 <vfprintf+0x4c>
    1c66:	b7 01       	movw	r22, r14
    1c68:	80 e2       	ldi	r24, 0x20	; 32
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	37 d0       	rcall	.+110    	; 0x1cdc <fputc>
    1c6e:	3a 94       	dec	r3
    1c70:	f7 cf       	rjmp	.-18     	; 0x1c60 <vfprintf+0x38c>
    1c72:	f7 01       	movw	r30, r14
    1c74:	86 81       	ldd	r24, Z+6	; 0x06
    1c76:	97 81       	ldd	r25, Z+7	; 0x07
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0x3aa>
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	2c 96       	adiw	r28, 0x0c	; 12
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <strnlen_P>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	05 90       	lpm	r0, Z+
    1cb4:	61 50       	subi	r22, 0x01	; 1
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	01 10       	cpse	r0, r1
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <strnlen_P+0x2>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	8e 0f       	add	r24, r30
    1cc2:	9f 1f       	adc	r25, r31
    1cc4:	08 95       	ret

00001cc6 <strnlen>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	61 50       	subi	r22, 0x01	; 1
    1cca:	70 40       	sbci	r23, 0x00	; 0
    1ccc:	01 90       	ld	r0, Z+
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <fputc>:
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	18 2f       	mov	r17, r24
    1ce6:	09 2f       	mov	r16, r25
    1ce8:	eb 01       	movw	r28, r22
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	81 fd       	sbrc	r24, 1
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <fputc+0x1a>
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255
    1cf4:	20 c0       	rjmp	.+64     	; 0x1d36 <fputc+0x5a>
    1cf6:	82 ff       	sbrs	r24, 2
    1cf8:	10 c0       	rjmp	.+32     	; 0x1d1a <fputc+0x3e>
    1cfa:	4e 81       	ldd	r20, Y+6	; 0x06
    1cfc:	5f 81       	ldd	r21, Y+7	; 0x07
    1cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1d00:	3d 81       	ldd	r19, Y+5	; 0x05
    1d02:	42 17       	cp	r20, r18
    1d04:	53 07       	cpc	r21, r19
    1d06:	7c f4       	brge	.+30     	; 0x1d26 <fputc+0x4a>
    1d08:	e8 81       	ld	r30, Y
    1d0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0c:	9f 01       	movw	r18, r30
    1d0e:	2f 5f       	subi	r18, 0xFF	; 255
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	39 83       	std	Y+1, r19	; 0x01
    1d14:	28 83       	st	Y, r18
    1d16:	10 83       	st	Z, r17
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <fputc+0x4a>
    1d1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1d1c:	f9 85       	ldd	r31, Y+9	; 0x09
    1d1e:	81 2f       	mov	r24, r17
    1d20:	09 95       	icall
    1d22:	89 2b       	or	r24, r25
    1d24:	29 f7       	brne	.-54     	; 0x1cf0 <fputc+0x14>
    1d26:	2e 81       	ldd	r18, Y+6	; 0x06
    1d28:	3f 81       	ldd	r19, Y+7	; 0x07
    1d2a:	2f 5f       	subi	r18, 0xFF	; 255
    1d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2e:	3f 83       	std	Y+7, r19	; 0x07
    1d30:	2e 83       	std	Y+6, r18	; 0x06
    1d32:	81 2f       	mov	r24, r17
    1d34:	90 2f       	mov	r25, r16
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <__ultoa_invert>:
    1d40:	fa 01       	movw	r30, r20
    1d42:	aa 27       	eor	r26, r26
    1d44:	28 30       	cpi	r18, 0x08	; 8
    1d46:	51 f1       	breq	.+84     	; 0x1d9c <__ultoa_invert+0x5c>
    1d48:	20 31       	cpi	r18, 0x10	; 16
    1d4a:	81 f1       	breq	.+96     	; 0x1dac <__ultoa_invert+0x6c>
    1d4c:	e8 94       	clt
    1d4e:	6f 93       	push	r22
    1d50:	6e 7f       	andi	r22, 0xFE	; 254
    1d52:	6e 5f       	subi	r22, 0xFE	; 254
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	8f 4f       	sbci	r24, 0xFF	; 255
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	af 4f       	sbci	r26, 0xFF	; 255
    1d5c:	b1 e0       	ldi	r27, 0x01	; 1
    1d5e:	3e d0       	rcall	.+124    	; 0x1ddc <__ultoa_invert+0x9c>
    1d60:	b4 e0       	ldi	r27, 0x04	; 4
    1d62:	3c d0       	rcall	.+120    	; 0x1ddc <__ultoa_invert+0x9c>
    1d64:	67 0f       	add	r22, r23
    1d66:	78 1f       	adc	r23, r24
    1d68:	89 1f       	adc	r24, r25
    1d6a:	9a 1f       	adc	r25, r26
    1d6c:	a1 1d       	adc	r26, r1
    1d6e:	68 0f       	add	r22, r24
    1d70:	79 1f       	adc	r23, r25
    1d72:	8a 1f       	adc	r24, r26
    1d74:	91 1d       	adc	r25, r1
    1d76:	a1 1d       	adc	r26, r1
    1d78:	6a 0f       	add	r22, r26
    1d7a:	71 1d       	adc	r23, r1
    1d7c:	81 1d       	adc	r24, r1
    1d7e:	91 1d       	adc	r25, r1
    1d80:	a1 1d       	adc	r26, r1
    1d82:	20 d0       	rcall	.+64     	; 0x1dc4 <__ultoa_invert+0x84>
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <__ultoa_invert+0x48>
    1d86:	68 94       	set
    1d88:	3f 91       	pop	r19
    1d8a:	2a e0       	ldi	r18, 0x0A	; 10
    1d8c:	26 9f       	mul	r18, r22
    1d8e:	11 24       	eor	r1, r1
    1d90:	30 19       	sub	r19, r0
    1d92:	30 5d       	subi	r19, 0xD0	; 208
    1d94:	31 93       	st	Z+, r19
    1d96:	de f6       	brtc	.-74     	; 0x1d4e <__ultoa_invert+0xe>
    1d98:	cf 01       	movw	r24, r30
    1d9a:	08 95       	ret
    1d9c:	46 2f       	mov	r20, r22
    1d9e:	47 70       	andi	r20, 0x07	; 7
    1da0:	40 5d       	subi	r20, 0xD0	; 208
    1da2:	41 93       	st	Z+, r20
    1da4:	b3 e0       	ldi	r27, 0x03	; 3
    1da6:	0f d0       	rcall	.+30     	; 0x1dc6 <__ultoa_invert+0x86>
    1da8:	c9 f7       	brne	.-14     	; 0x1d9c <__ultoa_invert+0x5c>
    1daa:	f6 cf       	rjmp	.-20     	; 0x1d98 <__ultoa_invert+0x58>
    1dac:	46 2f       	mov	r20, r22
    1dae:	4f 70       	andi	r20, 0x0F	; 15
    1db0:	40 5d       	subi	r20, 0xD0	; 208
    1db2:	4a 33       	cpi	r20, 0x3A	; 58
    1db4:	18 f0       	brcs	.+6      	; 0x1dbc <__ultoa_invert+0x7c>
    1db6:	49 5d       	subi	r20, 0xD9	; 217
    1db8:	31 fd       	sbrc	r19, 1
    1dba:	40 52       	subi	r20, 0x20	; 32
    1dbc:	41 93       	st	Z+, r20
    1dbe:	02 d0       	rcall	.+4      	; 0x1dc4 <__ultoa_invert+0x84>
    1dc0:	a9 f7       	brne	.-22     	; 0x1dac <__ultoa_invert+0x6c>
    1dc2:	ea cf       	rjmp	.-44     	; 0x1d98 <__ultoa_invert+0x58>
    1dc4:	b4 e0       	ldi	r27, 0x04	; 4
    1dc6:	a6 95       	lsr	r26
    1dc8:	97 95       	ror	r25
    1dca:	87 95       	ror	r24
    1dcc:	77 95       	ror	r23
    1dce:	67 95       	ror	r22
    1dd0:	ba 95       	dec	r27
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__ultoa_invert+0x86>
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	61 05       	cpc	r22, r1
    1dd8:	71 05       	cpc	r23, r1
    1dda:	08 95       	ret
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	0a 2e       	mov	r0, r26
    1de2:	06 94       	lsr	r0
    1de4:	57 95       	ror	r21
    1de6:	47 95       	ror	r20
    1de8:	37 95       	ror	r19
    1dea:	27 95       	ror	r18
    1dec:	ba 95       	dec	r27
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__ultoa_invert+0xa2>
    1df0:	62 0f       	add	r22, r18
    1df2:	73 1f       	adc	r23, r19
    1df4:	84 1f       	adc	r24, r20
    1df6:	95 1f       	adc	r25, r21
    1df8:	a0 1d       	adc	r26, r0
    1dfa:	08 95       	ret

00001dfc <_exit>:
    1dfc:	f8 94       	cli

00001dfe <__stop_program>:
    1dfe:	ff cf       	rjmp	.-2      	; 0x1dfe <__stop_program>
