
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  0000241c  000024b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000241c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008002e6  008002e6  00002696  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002beb  00000000  00000000  000028f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  000054dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001407  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000618  00000000  00000000  000071b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000971  00000000  00000000  000077cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018f8  00000000  00000000  0000813d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00009a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_9>
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_11>
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <move_forward+0x5a>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <enter_lz+0x98>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ec e1       	ldi	r30, 0x1C	; 28
     140:	f4 e2       	ldi	r31, 0x24	; 36
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a6 3e       	cpi	r26, 0xE6	; 230
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	23 e0       	ldi	r18, 0x03	; 3
     154:	a6 ee       	ldi	r26, 0xE6	; 230
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	aa 34       	cpi	r26, 0x4A	; 74
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	40 d2       	rcall	.+1152   	; 0x5e4 <main>
     164:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <transmitSensorData>:
 *  Transmits the values of the bump sensors, cliff sensors, and cliff signals to the GUI
 *
 *  @param sensor_data struct containing all the sensor data for the Create
 */
void transmitSensorData(oi_t *sensor_data)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	ca 5f       	subi	r28, 0xFA	; 250
     180:	d1 09       	sbc	r29, r1
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	8c 01       	movw	r16, r24
	oi_update(sensor_data);
     18e:	9f d6       	rcall	.+3390   	; 0xece <oi_update>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
     190:	f8 01       	movw	r30, r16
     192:	80 81       	ld	r24, Z
     194:	86 95       	lsr	r24
     196:	81 70       	andi	r24, 0x01	; 1
     198:	1f 92       	push	r1
     19a:	8f 93       	push	r24
     19c:	80 81       	ld	r24, Z
     19e:	81 70       	andi	r24, 0x01	; 1
     1a0:	1f 92       	push	r1
     1a2:	8f 93       	push	r24
     1a4:	86 e0       	ldi	r24, 0x06	; 6
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	9f 93       	push	r25
     1aa:	8f 93       	push	r24
     1ac:	ce 01       	movw	r24, r28
     1ae:	01 96       	adiw	r24, 0x01	; 1
     1b0:	6c 01       	movw	r12, r24
     1b2:	df 92       	push	r13
     1b4:	8f 93       	push	r24
     1b6:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
     1ba:	f8 01       	movw	r30, r16
     1bc:	85 81       	ldd	r24, Z+5	; 0x05
     1be:	1f 92       	push	r1
     1c0:	8f 93       	push	r24
     1c2:	84 81       	ldd	r24, Z+4	; 0x04
     1c4:	1f 92       	push	r1
     1c6:	8f 93       	push	r24
     1c8:	83 81       	ldd	r24, Z+3	; 0x03
     1ca:	1f 92       	push	r1
     1cc:	8f 93       	push	r24
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	1f 92       	push	r1
     1d2:	8f 93       	push	r24
     1d4:	82 e3       	ldi	r24, 0x32	; 50
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	ce 01       	movw	r24, r28
     1de:	c3 96       	adiw	r24, 0x33	; 51
     1e0:	9f 93       	push	r25
     1e2:	8f 93       	push	r24
     1e4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
     1e8:	f8 01       	movw	r30, r16
     1ea:	83 a1       	ldd	r24, Z+35	; 0x23
     1ec:	8f 93       	push	r24
     1ee:	82 a1       	ldd	r24, Z+34	; 0x22
     1f0:	8f 93       	push	r24
     1f2:	81 a1       	ldd	r24, Z+33	; 0x21
     1f4:	8f 93       	push	r24
     1f6:	80 a1       	ldd	r24, Z+32	; 0x20
     1f8:	8f 93       	push	r24
     1fa:	87 8d       	ldd	r24, Z+31	; 0x1f
     1fc:	8f 93       	push	r24
     1fe:	86 8d       	ldd	r24, Z+30	; 0x1e
     200:	8f 93       	push	r24
     202:	85 8d       	ldd	r24, Z+29	; 0x1d
     204:	8f 93       	push	r24
     206:	84 8d       	ldd	r24, Z+28	; 0x1c
     208:	8f 93       	push	r24
     20a:	85 e7       	ldi	r24, 0x75	; 117
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	9f 93       	push	r25
     210:	8f 93       	push	r24
     212:	ce 01       	movw	r24, r28
     214:	89 56       	subi	r24, 0x69	; 105
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	76 01       	movw	r14, r12
     230:	06 c0       	rjmp	.+12     	; 0x23e <transmitSensorData+0xd4>
		USART_Transmit(bumpSensors[i]);
     232:	f6 01       	movw	r30, r12
     234:	81 91       	ld	r24, Z+
     236:	6f 01       	movw	r12, r30
     238:	8a d7       	rcall	.+3860   	; 0x114e <USART_Transmit>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     23a:	0f 5f       	subi	r16, 0xFF	; 255
     23c:	1f 4f       	sbci	r17, 0xFF	; 255
     23e:	f7 01       	movw	r30, r14
     240:	01 90       	ld	r0, Z+
     242:	00 20       	and	r0, r0
     244:	e9 f7       	brne	.-6      	; 0x240 <transmitSensorData+0xd6>
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	ee 19       	sub	r30, r14
     24a:	ff 09       	sbc	r31, r15
     24c:	0e 17       	cp	r16, r30
     24e:	1f 07       	cpc	r17, r31
     250:	80 f3       	brcs	.-32     	; 0x232 <transmitSensorData+0xc8>
     252:	6e 01       	movw	r12, r28
     254:	f3 e3       	ldi	r31, 0x33	; 51
     256:	cf 0e       	add	r12, r31
     258:	d1 1c       	adc	r13, r1
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     25e:	76 01       	movw	r14, r12
     260:	06 c0       	rjmp	.+12     	; 0x26e <transmitSensorData+0x104>
		USART_Transmit(cliffSensors[i]); 
     262:	f6 01       	movw	r30, r12
     264:	81 91       	ld	r24, Z+
     266:	6f 01       	movw	r12, r30
     268:	72 d7       	rcall	.+3812   	; 0x114e <USART_Transmit>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     26a:	0f 5f       	subi	r16, 0xFF	; 255
     26c:	1f 4f       	sbci	r17, 0xFF	; 255
     26e:	f7 01       	movw	r30, r14
     270:	01 90       	ld	r0, Z+
     272:	00 20       	and	r0, r0
     274:	e9 f7       	brne	.-6      	; 0x270 <transmitSensorData+0x106>
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	ee 19       	sub	r30, r14
     27a:	ff 09       	sbc	r31, r15
     27c:	0e 17       	cp	r16, r30
     27e:	1f 07       	cpc	r17, r31
     280:	80 f3       	brcs	.-32     	; 0x262 <transmitSensorData+0xf8>
     282:	6e 01       	movw	r12, r28
     284:	f7 e9       	ldi	r31, 0x97	; 151
     286:	cf 0e       	add	r12, r31
     288:	d1 1c       	adc	r13, r1
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     28e:	76 01       	movw	r14, r12
     290:	06 c0       	rjmp	.+12     	; 0x29e <transmitSensorData+0x134>
		USART_Transmit(cliffSignals[i]);
     292:	f6 01       	movw	r30, r12
     294:	81 91       	ld	r24, Z+
     296:	6f 01       	movw	r12, r30
     298:	5a d7       	rcall	.+3764   	; 0x114e <USART_Transmit>
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	f7 01       	movw	r30, r14
     2a0:	01 90       	ld	r0, Z+
     2a2:	00 20       	and	r0, r0
     2a4:	e9 f7       	brne	.-6      	; 0x2a0 <transmitSensorData+0x136>
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	ee 19       	sub	r30, r14
     2aa:	ff 09       	sbc	r31, r15
     2ac:	0e 17       	cp	r16, r30
     2ae:	1f 07       	cpc	r17, r31
     2b0:	80 f3       	brcs	.-32     	; 0x292 <transmitSensorData+0x128>
		USART_Transmit(cliffSignals[i]);
	}
}
     2b2:	c6 50       	subi	r28, 0x06	; 6
     2b4:	df 4f       	sbci	r29, 0xFF	; 255
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <scanForObjects>:
 *  the found objects. Each object contains a diameter, distance from the Create, and an angle.
 *
 *  @return the found objects
 */
object_t * scanForObjects()
{
     2d2:	2f 92       	push	r2
     2d4:	3f 92       	push	r3
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	c6 54       	subi	r28, 0x46	; 70
     2fc:	d1 09       	sbc	r29, r1
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     308:	8c e3       	ldi	r24, 0x3C	; 60
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <malloc>
     310:	3c 01       	movw	r6, r24

	while(degrees <= 180)
    {	
		move_servo(degrees);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	1f d7       	rcall	.+3646   	; 0x1156 <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	db d6       	rcall	.+3510   	; 0x10d4 <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	10 e0       	ldi	r17, 0x00	; 0
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     322:	a1 2c       	mov	r10, r1
     324:	b1 2c       	mov	r11, r1
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     326:	81 2c       	mov	r8, r1
     328:	91 2c       	mov	r9, r1
object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
     32a:	e1 2c       	mov	r14, r1
     32c:	f1 2c       	mov	r15, r1
 */
object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
     32e:	cc 24       	eor	r12, r12
     330:	ca 94       	dec	r12
     332:	dc 2c       	mov	r13, r12
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     334:	c8 01       	movw	r24, r16
     336:	0f d7       	rcall	.+3614   	; 0x1156 <move_servo>
			sonarDistance = getPingDistance();
     338:	7c d7       	rcall	.+3832   	; 0x1232 <getPingDistance>
     33a:	48 2e       	mov	r4, r24
     33c:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     33e:	b4 d7       	rcall	.+3944   	; 0x12a8 <getIrDistance>
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     340:	85 36       	cpi	r24, 0x65	; 101
     342:	91 05       	cpc	r25, r1
     344:	0c f0       	brlt	.+2      	; 0x348 <scanForObjects+0x76>
     346:	9c c0       	rjmp	.+312    	; 0x480 <scanForObjects+0x1ae>
     348:	e1 14       	cp	r14, r1
     34a:	f1 04       	cpc	r15, r1
     34c:	09 f0       	breq	.+2      	; 0x350 <scanForObjects+0x7e>
     34e:	5a c0       	rjmp	.+180    	; 0x404 <scanForObjects+0x132>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	c8 1a       	sub	r12, r24
     354:	d8 0a       	sbc	r13, r24
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     356:	a4 2c       	mov	r10, r4
     358:	b5 2c       	mov	r11, r5
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     35a:	48 01       	movw	r8, r16
			move_servo(degrees);
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     35c:	ee 24       	eor	r14, r14
     35e:	e3 94       	inc	r14
     360:	f1 2c       	mov	r15, r1
     362:	50 c0       	rjmp	.+160    	; 0x404 <scanForObjects+0x132>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     364:	76 01       	movw	r14, r12
     366:	ee 0c       	add	r14, r14
     368:	ff 1c       	adc	r15, r15
     36a:	ec 0c       	add	r14, r12
     36c:	fd 1c       	adc	r15, r13
     36e:	ee 0c       	add	r14, r14
     370:	ff 1c       	adc	r15, r15
     372:	e6 0c       	add	r14, r6
     374:	f7 1c       	adc	r15, r7
     376:	c4 01       	movw	r24, r8
     378:	80 0f       	add	r24, r16
     37a:	91 1f       	adc	r25, r17
     37c:	99 23       	and	r25, r25
     37e:	0c f4       	brge	.+2      	; 0x382 <scanForObjects+0xb0>
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	95 95       	asr	r25
     384:	87 95       	ror	r24
     386:	f7 01       	movw	r30, r14
     388:	93 83       	std	Z+3, r25	; 0x03
     38a:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     38c:	b5 01       	movw	r22, r10
     38e:	88 27       	eor	r24, r24
     390:	77 fd       	sbrc	r23, 7
     392:	80 95       	com	r24
     394:	98 2f       	mov	r25, r24
     396:	0e 94 87 0a 	call	0x150e	; 0x150e <__floatsisf>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	b1 d7       	rcall	.+3938   	; 0x130a <__addsf3>
     3a8:	1b 01       	movw	r2, r22
     3aa:	2c 01       	movw	r4, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     3ac:	c4 01       	movw	r24, r8
     3ae:	80 1b       	sub	r24, r16
     3b0:	91 0b       	sbc	r25, r17
     3b2:	bc 01       	movw	r22, r24
     3b4:	22 f4       	brpl	.+8      	; 0x3be <scanForObjects+0xec>
     3b6:	66 27       	eor	r22, r22
     3b8:	77 27       	eor	r23, r23
     3ba:	68 1b       	sub	r22, r24
     3bc:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     3be:	88 27       	eor	r24, r24
     3c0:	77 fd       	sbrc	r23, 7
     3c2:	80 95       	com	r24
     3c4:	98 2f       	mov	r25, r24
     3c6:	0e 94 87 0a 	call	0x150e	; 0x150e <__floatsisf>
     3ca:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <cos>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c2 01       	movw	r24, r4
     3d4:	b1 01       	movw	r22, r2
     3d6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	c2 01       	movw	r24, r4
     3e0:	b1 01       	movw	r22, r2
     3e2:	92 d7       	rcall	.+3876   	; 0x1308 <__subsf3>
     3e4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sqrt>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 eb       	ldi	r20, 0xB0	; 176
     3ee:	50 e4       	ldi	r21, 0x40	; 64
     3f0:	f3 d7       	rcall	.+4070   	; 0x13d8 <__divsf3>
     3f2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixsfsi>
     3f6:	f7 01       	movw	r30, r14
     3f8:	71 83       	std	Z+1, r23	; 0x01
     3fa:	60 83       	st	Z, r22
				objects[currObjectIndex].distance = lastSonarDistance;					
     3fc:	b5 82       	std	Z+5, r11	; 0x05
     3fe:	a4 82       	std	Z+4, r10	; 0x04
				inObject = 0;											//Sensor is no longer on an object
     400:	e1 2c       	mov	r14, r1
     402:	f1 2c       	mov	r15, r1
			}	
		
			degrees += 2;
     404:	0e 5f       	subi	r16, 0xFE	; 254
     406:	1f 4f       	sbci	r17, 0xFF	; 255
			wait_ms(200);
     408:	88 ec       	ldi	r24, 0xC8	; 200
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	63 d6       	rcall	.+3270   	; 0x10d4 <wait_ms>

	while(degrees <= 180)
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     40e:	06 3b       	cpi	r16, 0xB6	; 182
     410:	11 05       	cpc	r17, r1
     412:	09 f0       	breq	.+2      	; 0x416 <scanForObjects+0x144>
     414:	8f cf       	rjmp	.-226    	; 0x334 <scanForObjects+0x62>
     416:	3a c0       	rjmp	.+116    	; 0x48c <scanForObjects+0x1ba>
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     418:	f5 01       	movw	r30, r10
     41a:	83 81       	ldd	r24, Z+3	; 0x03
     41c:	8f 93       	push	r24
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	8f 93       	push	r24
     422:	81 81       	ldd	r24, Z+1	; 0x01
     424:	8f 93       	push	r24
     426:	80 81       	ld	r24, Z
     428:	8f 93       	push	r24
     42a:	85 81       	ldd	r24, Z+5	; 0x05
     42c:	8f 93       	push	r24
     42e:	84 81       	ldd	r24, Z+4	; 0x04
     430:	8f 93       	push	r24
     432:	5f 92       	push	r5
     434:	4f 92       	push	r4
     436:	ff 92       	push	r15
     438:	ef 92       	push	r14
     43a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
     43e:	c2 2c       	mov	r12, r2
     440:	d3 2c       	mov	r13, r3
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	06 c0       	rjmp	.+12     	; 0x45e <scanForObjects+0x18c>
			USART_Transmit(output[i]);
     452:	f6 01       	movw	r30, r12
     454:	81 91       	ld	r24, Z+
     456:	6f 01       	movw	r12, r30
     458:	7a d6       	rcall	.+3316   	; 0x114e <USART_Transmit>
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     45a:	0f 5f       	subi	r16, 0xFF	; 255
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	f7 01       	movw	r30, r14
     460:	01 90       	ld	r0, Z+
     462:	00 20       	and	r0, r0
     464:	e9 f7       	brne	.-6      	; 0x460 <scanForObjects+0x18e>
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	ee 19       	sub	r30, r14
     46a:	ff 09       	sbc	r31, r15
     46c:	0e 17       	cp	r16, r30
     46e:	1f 07       	cpc	r17, r31
     470:	80 f3       	brcs	.-32     	; 0x452 <scanForObjects+0x180>
     472:	f6 e0       	ldi	r31, 0x06	; 6
     474:	af 0e       	add	r10, r31
     476:	b1 1c       	adc	r11, r1
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     478:	a8 14       	cp	r10, r8
     47a:	b9 04       	cpc	r11, r9
     47c:	69 f6       	brne	.-102    	; 0x418 <scanForObjects+0x146>
     47e:	20 c0       	rjmp	.+64     	; 0x4c0 <scanForObjects+0x1ee>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	e8 16       	cp	r14, r24
     484:	f1 04       	cpc	r15, r1
     486:	09 f0       	breq	.+2      	; 0x48a <scanForObjects+0x1b8>
     488:	bd cf       	rjmp	.-134    	; 0x404 <scanForObjects+0x132>
     48a:	6c cf       	rjmp	.-296    	; 0x364 <scanForObjects+0x92>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     48c:	1c 14       	cp	r1, r12
     48e:	1d 04       	cpc	r1, r13
     490:	bc f4       	brge	.+46     	; 0x4c0 <scanForObjects+0x1ee>
     492:	53 01       	movw	r10, r6
     494:	46 01       	movw	r8, r12
     496:	88 0c       	add	r8, r8
     498:	99 1c       	adc	r9, r9
     49a:	c8 0c       	add	r12, r8
     49c:	d9 1c       	adc	r13, r9
     49e:	46 01       	movw	r8, r12
     4a0:	88 0c       	add	r8, r8
     4a2:	99 1c       	adc	r9, r9
     4a4:	86 0c       	add	r8, r6
     4a6:	97 1c       	adc	r9, r7
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     4a8:	0f 2e       	mov	r0, r31
     4aa:	fa eb       	ldi	r31, 0xBA	; 186
     4ac:	4f 2e       	mov	r4, r31
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	5f 2e       	mov	r5, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	fe 01       	movw	r30, r28
     4b6:	31 96       	adiw	r30, 0x01	; 1
     4b8:	7f 01       	movw	r14, r30
     4ba:	2e 2e       	mov	r2, r30
     4bc:	3f 2c       	mov	r3, r15
     4be:	ac cf       	rjmp	.-168    	; 0x418 <scanForObjects+0x146>
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
			USART_Transmit(output[i]);
		}
	}
	return objects;
}
     4c0:	c3 01       	movw	r24, r6
     4c2:	ca 5b       	subi	r28, 0xBA	; 186
     4c4:	df 4f       	sbci	r29, 0xFF	; 255
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	bf 90       	pop	r11
     4e2:	af 90       	pop	r10
     4e4:	9f 90       	pop	r9
     4e6:	8f 90       	pop	r8
     4e8:	7f 90       	pop	r7
     4ea:	6f 90       	pop	r6
     4ec:	5f 90       	pop	r5
     4ee:	4f 90       	pop	r4
     4f0:	3f 90       	pop	r3
     4f2:	2f 90       	pop	r2
     4f4:	08 95       	ret

000004f6 <getCommand>:
*  Gets and parses the command from the GUI to control the iRobot Create
*
*  @param sensor_data struct containing all the sensor data for the Create
*/
void getCommand(oi_t *sensor_data)
{
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	27 97       	sbiw	r28, 0x07	; 7
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     514:	18 d6       	rcall	.+3120   	; 0x1146 <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     516:	82 37       	cpi	r24, 0x72	; 114
     518:	71 f0       	breq	.+28     	; 0x536 <getCommand+0x40>
     51a:	30 f4       	brcc	.+12     	; 0x528 <getCommand+0x32>
     51c:	8d 36       	cpi	r24, 0x6D	; 109
     51e:	49 f1       	breq	.+82     	; 0x572 <getCommand+0x7c>
     520:	80 37       	cpi	r24, 0x70	; 112
     522:	09 f4       	brne	.+2      	; 0x526 <getCommand+0x30>
     524:	4a c0       	rjmp	.+148    	; 0x5ba <getCommand+0xc4>
     526:	4f c0       	rjmp	.+158    	; 0x5c6 <getCommand+0xd0>
     528:	83 37       	cpi	r24, 0x73	; 115
     52a:	09 f4       	brne	.+2      	; 0x52e <getCommand+0x38>
     52c:	3e c0       	rjmp	.+124    	; 0x5aa <getCommand+0xb4>
     52e:	86 37       	cpi	r24, 0x76	; 118
     530:	09 f4       	brne	.+2      	; 0x534 <getCommand+0x3e>
     532:	46 c0       	rjmp	.+140    	; 0x5c0 <getCommand+0xca>
     534:	48 c0       	rjmp	.+144    	; 0x5c6 <getCommand+0xd0>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     536:	07 d6       	rcall	.+3086   	; 0x1146 <USART_Receive>
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	05 d6       	rcall	.+3082   	; 0x1146 <USART_Receive>
     53c:	8a 83       	std	Y+2, r24	; 0x02
     53e:	03 d6       	rcall	.+3078   	; 0x1146 <USART_Receive>
     540:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <atoi>
     54a:	e8 2e       	mov	r14, r24
     54c:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	24 ef       	ldi	r18, 0xF4	; 244
     554:	31 e0       	ldi	r19, 0x01	; 1
     556:	3f 93       	push	r19
     558:	2f 93       	push	r18
     55a:	1f d1       	rcall	.+574    	; 0x79a <lprintf>
				turn_clockwise(sensor_data, degrees);
     55c:	6e 2d       	mov	r22, r14
     55e:	7f 2d       	mov	r23, r15
     560:	c8 01       	movw	r24, r16
     562:	11 d4       	rcall	.+2082   	; 0xd86 <turn_clockwise>
				transmitSensorData(sensor_data);
     564:	c8 01       	movw	r24, r16
     566:	01 de       	rcall	.-1022   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	2c c0       	rjmp	.+88     	; 0x5ca <getCommand+0xd4>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     572:	e9 d5       	rcall	.+3026   	; 0x1146 <USART_Receive>
     574:	8d 83       	std	Y+5, r24	; 0x05
     576:	e7 d5       	rcall	.+3022   	; 0x1146 <USART_Receive>
     578:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     57a:	ce 01       	movw	r24, r28
     57c:	05 96       	adiw	r24, 0x05	; 5
     57e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <atoi>
     582:	e8 2e       	mov	r14, r24
     584:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	32 e0       	ldi	r19, 0x02	; 2
     58e:	3f 93       	push	r19
     590:	2f 93       	push	r18
     592:	03 d1       	rcall	.+518    	; 0x79a <lprintf>
				move_forward(sensor_data, distance);
     594:	6e 2d       	mov	r22, r14
     596:	7f 2d       	mov	r23, r15
     598:	c8 01       	movw	r24, r16
     59a:	00 d2       	rcall	.+1024   	; 0x99c <move_forward>
				transmitSensorData(sensor_data);
     59c:	c8 01       	movw	r24, r16
     59e:	e5 dd       	rcall	.-1078   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	10 c0       	rjmp	.+32     	; 0x5ca <getCommand+0xd4>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     5aa:	93 de       	rcall	.-730    	; 0x2d2 <scanForObjects>
     5ac:	7c 01       	movw	r14, r24
				transmitSensorData(sensor_data);
     5ae:	c8 01       	movw	r24, r16
     5b0:	dc dd       	rcall	.-1096   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				free(foundObjects);
     5b2:	c7 01       	movw	r24, r14
     5b4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <free>
				break;
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <getCommand+0xd4>
			case 'p':
				enter_lz(sensor_data);
     5ba:	c8 01       	movw	r24, r16
     5bc:	68 d1       	rcall	.+720    	; 0x88e <enter_lz>
				commandRecieved = 1;
				break;
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <getCommand+0xd4>
			case 'v':
				transmitSensorData(sensor_data);
     5c0:	c8 01       	movw	r24, r16
     5c2:	d3 dd       	rcall	.-1114   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <getCommand+0xd4>
			default:
				command = USART_Receive();
     5c6:	bf d5       	rcall	.+2942   	; 0x1146 <USART_Receive>
     5c8:	a6 cf       	rjmp	.-180    	; 0x516 <getCommand+0x20>
		}	
	}
}
     5ca:	27 96       	adiw	r28, 0x07	; 7
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	08 95       	ret

000005e4 <main>:

}
*/

int main(void)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	e4 97       	sbiw	r28, 0x34	; 52
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
    lcd_init();
     5f8:	7f d0       	rcall	.+254    	; 0x6f8 <lcd_init>
    ADC_init();
     5fa:	4b d6       	rcall	.+3222   	; 0x1292 <ADC_init>
    pinginit();
     5fc:	16 d6       	rcall	.+3116   	; 0x122a <pinginit>
    timer3_init();
     5fe:	b9 d5       	rcall	.+2930   	; 0x1172 <timer3_init>
	USART_init();
     600:	96 d5       	rcall	.+2860   	; 0x112e <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     602:	e3 d3       	rcall	.+1990   	; 0xdca <oi_alloc>
     604:	8c 01       	movw	r16, r24
	oi_init(sensor_data);
     606:	1e d5       	rcall	.+2620   	; 0x1044 <oi_init>
	oi_update(sensor_data);
     608:	c8 01       	movw	r24, r16
     60a:	61 d4       	rcall	.+2242   	; 0xece <oi_update>
	
	unsigned char notes[26]  = {72, 67, 69, 67,  0, 72, 67, 69, 67,  0, 72, 72, 72, 72,  0, 72, 72, 72, 72,  0, 72, 71, 72, 71, 72};
     60c:	6a e1       	ldi	r22, 0x1A	; 26
     60e:	ae 01       	movw	r20, r28
     610:	4f 5f       	subi	r20, 0xFF	; 255
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	fa 01       	movw	r30, r20
     616:	86 2f       	mov	r24, r22
     618:	11 92       	st	Z+, r1
     61a:	8a 95       	dec	r24
     61c:	e9 f7       	brne	.-6      	; 0x618 <main+0x34>
     61e:	88 e4       	ldi	r24, 0x48	; 72
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	93 e4       	ldi	r25, 0x43	; 67
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	25 e4       	ldi	r18, 0x45	; 69
     628:	2b 83       	std	Y+3, r18	; 0x03
     62a:	9c 83       	std	Y+4, r25	; 0x04
     62c:	8e 83       	std	Y+6, r24	; 0x06
     62e:	9f 83       	std	Y+7, r25	; 0x07
     630:	28 87       	std	Y+8, r18	; 0x08
     632:	99 87       	std	Y+9, r25	; 0x09
     634:	8b 87       	std	Y+11, r24	; 0x0b
     636:	8c 87       	std	Y+12, r24	; 0x0c
     638:	8d 87       	std	Y+13, r24	; 0x0d
     63a:	8e 87       	std	Y+14, r24	; 0x0e
     63c:	88 8b       	std	Y+16, r24	; 0x10
     63e:	89 8b       	std	Y+17, r24	; 0x11
     640:	8a 8b       	std	Y+18, r24	; 0x12
     642:	8b 8b       	std	Y+19, r24	; 0x13
     644:	8d 8b       	std	Y+21, r24	; 0x15
     646:	97 e4       	ldi	r25, 0x47	; 71
     648:	9e 8b       	std	Y+22, r25	; 0x16
     64a:	8f 8b       	std	Y+23, r24	; 0x17
     64c:	98 8f       	std	Y+24, r25	; 0x18
     64e:	89 8f       	std	Y+25, r24	; 0x19
	unsigned char duration[26]={64, 16, 16, 16, 40, 64, 16, 16, 16, 40, 8,   8, 16, 16, 16, 8,   8, 16, 16, 16, 20, 20, 32, 20, 96};
     650:	9e 01       	movw	r18, r28
     652:	25 5e       	subi	r18, 0xE5	; 229
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	f9 01       	movw	r30, r18
     658:	11 92       	st	Z+, r1
     65a:	6a 95       	dec	r22
     65c:	e9 f7       	brne	.-6      	; 0x658 <main+0x74>
     65e:	60 e4       	ldi	r22, 0x40	; 64
     660:	6b 8f       	std	Y+27, r22	; 0x1b
     662:	80 e1       	ldi	r24, 0x10	; 16
     664:	8c 8f       	std	Y+28, r24	; 0x1c
     666:	8d 8f       	std	Y+29, r24	; 0x1d
     668:	8e 8f       	std	Y+30, r24	; 0x1e
     66a:	98 e2       	ldi	r25, 0x28	; 40
     66c:	9f 8f       	std	Y+31, r25	; 0x1f
     66e:	68 a3       	std	Y+32, r22	; 0x20
     670:	89 a3       	std	Y+33, r24	; 0x21
     672:	8a a3       	std	Y+34, r24	; 0x22
     674:	8b a3       	std	Y+35, r24	; 0x23
     676:	9c a3       	std	Y+36, r25	; 0x24
     678:	98 e0       	ldi	r25, 0x08	; 8
     67a:	9d a3       	std	Y+37, r25	; 0x25
     67c:	9e a3       	std	Y+38, r25	; 0x26
     67e:	8f a3       	std	Y+39, r24	; 0x27
     680:	88 a7       	std	Y+40, r24	; 0x28
     682:	89 a7       	std	Y+41, r24	; 0x29
     684:	9a a7       	std	Y+42, r25	; 0x2a
     686:	9b a7       	std	Y+43, r25	; 0x2b
     688:	8c a7       	std	Y+44, r24	; 0x2c
     68a:	8d a7       	std	Y+45, r24	; 0x2d
     68c:	8e a7       	std	Y+46, r24	; 0x2e
     68e:	84 e1       	ldi	r24, 0x14	; 20
     690:	8f a7       	std	Y+47, r24	; 0x2f
     692:	88 ab       	std	Y+48, r24	; 0x30
     694:	90 e2       	ldi	r25, 0x20	; 32
     696:	99 ab       	std	Y+49, r25	; 0x31
     698:	8a ab       	std	Y+50, r24	; 0x32
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	8b ab       	std	Y+51, r24	; 0x33
 		
	oi_load_song(0, 26, notes, duration);
     69e:	6a e1       	ldi	r22, 0x1A	; 26
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	d2 d3       	rcall	.+1956   	; 0xe4c <oi_load_song>
	
	while(1)
    {
		getCommand(sensor_data);
     6a8:	c8 01       	movw	r24, r16
     6aa:	25 df       	rcall	.-438    	; 0x4f6 <getCommand>
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <main+0xc4>

000006ae <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     6ae:	de 9a       	sbi	0x1b, 6	; 27
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	10 d5       	rcall	.+2592   	; 0x10d4 <wait_ms>
     6b4:	de 98       	cbi	0x1b, 6	; 27
     6b6:	8b b3       	in	r24, 0x1b	; 27
     6b8:	80 7f       	andi	r24, 0xF0	; 240
     6ba:	8b bb       	out	0x1b, r24	; 27
     6bc:	08 95       	ret

000006be <lcd_command>:
     6be:	cf 93       	push	r28
     6c0:	c8 2f       	mov	r28, r24
     6c2:	dc 98       	cbi	0x1b, 4	; 27
     6c4:	8b b3       	in	r24, 0x1b	; 27
     6c6:	9c 2f       	mov	r25, r28
     6c8:	92 95       	swap	r25
     6ca:	9f 70       	andi	r25, 0x0F	; 15
     6cc:	89 2b       	or	r24, r25
     6ce:	8b bb       	out	0x1b, r24	; 27
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	ed df       	rcall	.-38     	; 0x6ae <lcd_toggle_clear>
     6d4:	8b b3       	in	r24, 0x1b	; 27
     6d6:	cf 70       	andi	r28, 0x0F	; 15
     6d8:	c8 2b       	or	r28, r24
     6da:	cb bb       	out	0x1b, r28	; 27
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	e7 df       	rcall	.-50     	; 0x6ae <lcd_toggle_clear>
     6e0:	dc 9a       	sbi	0x1b, 4	; 27
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <lcd_clear>:
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	ea df       	rcall	.-44     	; 0x6be <lcd_command>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	f2 c4       	rjmp	.+2532   	; 0x10d4 <wait_ms>
     6f0:	08 95       	ret

000006f2 <lcd_home_line1>:
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	e4 cf       	rjmp	.-56     	; 0x6be <lcd_command>
     6f6:	08 95       	ret

000006f8 <lcd_init>:
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	8a bb       	out	0x1a, r24	; 26
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	8b bb       	out	0x1b, r24	; 27
     700:	de 9a       	sbi	0x1b, 6	; 27
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	e6 d4       	rcall	.+2508   	; 0x10d4 <wait_ms>
     708:	de 98       	cbi	0x1b, 6	; 27
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	e2 d4       	rcall	.+2500   	; 0x10d4 <wait_ms>
     710:	de 9a       	sbi	0x1b, 6	; 27
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	de d4       	rcall	.+2492   	; 0x10d4 <wait_ms>
     718:	de 98       	cbi	0x1b, 6	; 27
     71a:	de 9a       	sbi	0x1b, 6	; 27
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	d9 d4       	rcall	.+2482   	; 0x10d4 <wait_ms>
     722:	de 98       	cbi	0x1b, 6	; 27
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	8b bb       	out	0x1b, r24	; 27
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	c1 df       	rcall	.-126    	; 0x6ae <lcd_toggle_clear>
     72c:	8b b3       	in	r24, 0x1b	; 27
     72e:	8b bb       	out	0x1b, r24	; 27
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	bd df       	rcall	.-134    	; 0x6ae <lcd_toggle_clear>
     734:	8b b3       	in	r24, 0x1b	; 27
     736:	8e 60       	ori	r24, 0x0E	; 14
     738:	8b bb       	out	0x1b, r24	; 27
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	b8 df       	rcall	.-144    	; 0x6ae <lcd_toggle_clear>
     73e:	8b b3       	in	r24, 0x1b	; 27
     740:	8b bb       	out	0x1b, r24	; 27
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	b4 df       	rcall	.-152    	; 0x6ae <lcd_toggle_clear>
     746:	8b b3       	in	r24, 0x1b	; 27
     748:	86 60       	ori	r24, 0x06	; 6
     74a:	8b bb       	out	0x1b, r24	; 27
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	af df       	rcall	.-162    	; 0x6ae <lcd_toggle_clear>
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	8b bb       	out	0x1b, r24	; 27
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	ab df       	rcall	.-170    	; 0x6ae <lcd_toggle_clear>
     758:	d8 9a       	sbi	0x1b, 0	; 27
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	a8 df       	rcall	.-176    	; 0x6ae <lcd_toggle_clear>
     75e:	dc 9a       	sbi	0x1b, 4	; 27
     760:	c8 cf       	rjmp	.-112    	; 0x6f2 <lcd_home_line1>
     762:	08 95       	ret

00000764 <lcd_home_line2>:
     764:	80 ec       	ldi	r24, 0xC0	; 192
     766:	ab cf       	rjmp	.-170    	; 0x6be <lcd_command>
     768:	08 95       	ret

0000076a <lcd_home_line3>:
     76a:	84 e9       	ldi	r24, 0x94	; 148
     76c:	a8 cf       	rjmp	.-176    	; 0x6be <lcd_command>
     76e:	08 95       	ret

00000770 <lcd_home_line4>:
     770:	84 ed       	ldi	r24, 0xD4	; 212
     772:	a5 cf       	rjmp	.-182    	; 0x6be <lcd_command>
     774:	08 95       	ret

00000776 <lcd_putc>:
     776:	cf 93       	push	r28
     778:	c8 2f       	mov	r28, r24
     77a:	8b b3       	in	r24, 0x1b	; 27
     77c:	9c 2f       	mov	r25, r28
     77e:	92 95       	swap	r25
     780:	9f 70       	andi	r25, 0x0F	; 15
     782:	89 2b       	or	r24, r25
     784:	8b bb       	out	0x1b, r24	; 27
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	92 df       	rcall	.-220    	; 0x6ae <lcd_toggle_clear>
     78a:	8b b3       	in	r24, 0x1b	; 27
     78c:	cf 70       	andi	r28, 0x0F	; 15
     78e:	c8 2b       	or	r28, r24
     790:	cb bb       	out	0x1b, r28	; 27
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	8c df       	rcall	.-232    	; 0x6ae <lcd_toggle_clear>
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	c1 55       	subi	r28, 0x51	; 81
     7b0:	d1 09       	sbc	r29, r1
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	fe 01       	movw	r30, r28
     7be:	e4 5a       	subi	r30, 0xA4	; 164
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	41 91       	ld	r20, Z+
     7c4:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     7c6:	9f 01       	movw	r18, r30
     7c8:	61 e5       	ldi	r22, 0x51	; 81
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	86 ee       	ldi	r24, 0xE6	; 230
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <strcmp>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <lprintf+0x4e>
     7e6:	43 c0       	rjmp	.+134    	; 0x86e <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	86 ee       	ldi	r24, 0xE6	; 230
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <strcpy>
	lcd_clear();
     7f6:	77 df       	rcall	.-274    	; 0x6e6 <lcd_clear>
     7f8:	9e 01       	movw	r18, r28
     7fa:	2f 5f       	subi	r18, 0xFF	; 255
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     800:	00 e0       	ldi	r16, 0x00	; 0
     802:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     804:	0f 2e       	mov	r0, r31
     806:	f4 e1       	ldi	r31, 0x14	; 20
     808:	ef 2e       	mov	r14, r31
     80a:	f1 2c       	mov	r15, r1
     80c:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     80e:	27 c0       	rjmp	.+78     	; 0x85e <lprintf+0xc4>
		if (*str == '\n') {
     810:	8a 30       	cpi	r24, 0x0A	; 10
     812:	51 f4       	brne	.+20     	; 0x828 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     814:	c8 01       	movw	r24, r16
     816:	b7 01       	movw	r22, r14
     818:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
     81c:	f7 01       	movw	r30, r14
     81e:	e8 1b       	sub	r30, r24
     820:	f9 0b       	sbc	r31, r25
     822:	0e 0f       	add	r16, r30
     824:	1f 1f       	adc	r17, r31
     826:	03 c0       	rjmp	.+6      	; 0x82e <lprintf+0x94>
		} else {
			lcd_putc(*str);
     828:	a6 df       	rcall	.-180    	; 0x776 <lcd_putc>
			charnum++;
     82a:	0f 5f       	subi	r16, 0xFF	; 255
     82c:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     82e:	c8 01       	movw	r24, r16
     830:	b7 01       	movw	r22, r14
     832:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
     836:	89 2b       	or	r24, r25
     838:	91 f4       	brne	.+36     	; 0x85e <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     83a:	c8 01       	movw	r24, r16
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
     842:	62 30       	cpi	r22, 0x02	; 2
     844:	71 05       	cpc	r23, r1
     846:	41 f0       	breq	.+16     	; 0x858 <lprintf+0xbe>
     848:	63 30       	cpi	r22, 0x03	; 3
     84a:	71 05       	cpc	r23, r1
     84c:	39 f0       	breq	.+14     	; 0x85c <lprintf+0xc2>
     84e:	61 30       	cpi	r22, 0x01	; 1
     850:	71 05       	cpc	r23, r1
     852:	29 f4       	brne	.+10     	; 0x85e <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     854:	87 df       	rcall	.-242    	; 0x764 <lcd_home_line2>
				break;
     856:	03 c0       	rjmp	.+6      	; 0x85e <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     858:	88 df       	rcall	.-240    	; 0x76a <lcd_home_line3>
				break;
     85a:	01 c0       	rjmp	.+2      	; 0x85e <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     85c:	89 df       	rcall	.-238    	; 0x770 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     85e:	f6 01       	movw	r30, r12
     860:	81 91       	ld	r24, Z+
     862:	6f 01       	movw	r12, r30
     864:	88 23       	and	r24, r24
     866:	19 f0       	breq	.+6      	; 0x86e <lprintf+0xd4>
     868:	00 35       	cpi	r16, 0x50	; 80
     86a:	11 05       	cpc	r17, r1
     86c:	8c f2       	brlt	.-94     	; 0x810 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     86e:	cf 5a       	subi	r28, 0xAF	; 175
     870:	df 4f       	sbci	r29, 0xFF	; 255
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <enter_lz>:
	}
	oi_set_wheels(0, 0); // stop
}

void enter_lz(oi_t *sensor)
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
	int sum = 0;
	oi_set_wheels(200, 200);
     898:	68 ec       	ldi	r22, 0xC8	; 200
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	88 ec       	ldi	r24, 0xC8	; 200
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	be d2       	rcall	.+1404   	; 0xe1e <oi_set_wheels>
	while (sum < 150) {
		if (sensor->bumper_left || sensor->bumper_right || sensor->cliff_left || sensor->cliff_right || sensor->cliff_frontleft || sensor->cliff_frontright) {
     8a2:	88 81       	ld	r24, Y
     8a4:	83 70       	andi	r24, 0x03	; 3
     8a6:	39 f5       	brne	.+78     	; 0x8f6 <enter_lz+0x68>
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	81 11       	cpse	r24, r1
     8ac:	24 c0       	rjmp	.+72     	; 0x8f6 <enter_lz+0x68>
     8ae:	8d 81       	ldd	r24, Y+5	; 0x05
     8b0:	81 11       	cpse	r24, r1
     8b2:	21 c0       	rjmp	.+66     	; 0x8f6 <enter_lz+0x68>
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	81 11       	cpse	r24, r1
     8b8:	1e c0       	rjmp	.+60     	; 0x8f6 <enter_lz+0x68>
     8ba:	8c 81       	ldd	r24, Y+4	; 0x04
     8bc:	81 11       	cpse	r24, r1
     8be:	1b c0       	rjmp	.+54     	; 0x8f6 <enter_lz+0x68>
	oi_set_wheels(0, 0); // stop
}

void enter_lz(oi_t *sensor)
{
	int sum = 0;
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <enter_lz+0x56>
	oi_set_wheels(200, 200);
	while (sum < 150) {
		if (sensor->bumper_left || sensor->bumper_right || sensor->cliff_left || sensor->cliff_right || sensor->cliff_frontleft || sensor->cliff_frontright) {
     8c6:	88 81       	ld	r24, Y
     8c8:	83 70       	andi	r24, 0x03	; 3
     8ca:	a9 f4       	brne	.+42     	; 0x8f6 <enter_lz+0x68>
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	81 11       	cpse	r24, r1
     8d0:	12 c0       	rjmp	.+36     	; 0x8f6 <enter_lz+0x68>
     8d2:	8d 81       	ldd	r24, Y+5	; 0x05
     8d4:	81 11       	cpse	r24, r1
     8d6:	0f c0       	rjmp	.+30     	; 0x8f6 <enter_lz+0x68>
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	81 11       	cpse	r24, r1
     8dc:	0c c0       	rjmp	.+24     	; 0x8f6 <enter_lz+0x68>
     8de:	8c 81       	ldd	r24, Y+4	; 0x04
     8e0:	81 11       	cpse	r24, r1
     8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <enter_lz+0x68>
			break;
		}
		oi_update(sensor);
     8e4:	ce 01       	movw	r24, r28
     8e6:	f3 d2       	rcall	.+1510   	; 0xece <oi_update>
		sum += sensor->distance;
     8e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ea:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ec:	08 0f       	add	r16, r24
     8ee:	19 1f       	adc	r17, r25

void enter_lz(oi_t *sensor)
{
	int sum = 0;
	oi_set_wheels(200, 200);
	while (sum < 150) {
     8f0:	06 39       	cpi	r16, 0x96	; 150
     8f2:	11 05       	cpc	r17, r1
     8f4:	44 f3       	brlt	.-48     	; 0x8c6 <enter_lz+0x38>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	8f d2       	rcall	.+1310   	; 0xe1e <oi_set_wheels>
     900:	c4 e0       	ldi	r28, 0x04	; 4
     902:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 4; i++)
	{
		oi_set_leds(1,1,255,255);
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	4f ef       	ldi	r20, 0xFF	; 255
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	6c d2       	rcall	.+1240   	; 0xde6 <oi_set_leds>
		wait_ms(200);
     90e:	88 ec       	ldi	r24, 0xC8	; 200
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	e0 d3       	rcall	.+1984   	; 0x10d4 <wait_ms>
		oi_set_leds(0,0,0,0);
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	64 d2       	rcall	.+1224   	; 0xde6 <oi_set_leds>
		wait_ms(200);
     91e:	88 ec       	ldi	r24, 0xC8	; 200
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	d8 d3       	rcall	.+1968   	; 0x10d4 <wait_ms>
     924:	21 97       	sbiw	r28, 0x01	; 1
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
	for (int i = 0; i < 4; i++)
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	69 f7       	brne	.-38     	; 0x904 <enter_lz+0x76>
		oi_set_leds(1,1,255,255);
		wait_ms(200);
		oi_set_leds(0,0,0,0);
		wait_ms(200);
	}
	oi_set_leds(1,1,0,0);
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	59 d2       	rcall	.+1202   	; 0xde6 <oi_set_leds>
	oi_play_song(0);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	ba d2       	rcall	.+1396   	; 0xeae <oi_play_song>
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <move_backward>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create backward
 */
void move_backward(oi_t *sensor, int centimeters)
{
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     94e:	eb 01       	movw	r28, r22
     950:	cc 0f       	add	r28, r28
     952:	dd 1f       	adc	r29, r29
     954:	66 0f       	add	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	66 0f       	add	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	c6 0f       	add	r28, r22
     962:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     964:	68 e3       	ldi	r22, 0x38	; 56
     966:	7f ef       	ldi	r23, 0xFF	; 255
     968:	88 e3       	ldi	r24, 0x38	; 56
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	58 d2       	rcall	.+1200   	; 0xe1e <oi_set_wheels>
	while (sum > 0) {
     96e:	1c 16       	cp	r1, r28
     970:	1d 06       	cpc	r1, r29
     972:	54 f4       	brge	.+20     	; 0x988 <move_backward+0x44>
		oi_update(sensor);
     974:	c8 01       	movw	r24, r16
     976:	ab d2       	rcall	.+1366   	; 0xece <oi_update>
		sum += sensor->distance;
     978:	f8 01       	movw	r30, r16
     97a:	84 85       	ldd	r24, Z+12	; 0x0c
     97c:	95 85       	ldd	r25, Z+13	; 0x0d
     97e:	c8 0f       	add	r28, r24
     980:	d9 1f       	adc	r29, r25
 */
void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     982:	1c 16       	cp	r1, r28
     984:	1d 06       	cpc	r1, r29
     986:	b4 f3       	brlt	.-20     	; 0x974 <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	46 d2       	rcall	.+1164   	; 0xe1e <oi_set_wheels>
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <move_forward>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create forward
 */
void move_forward(oi_t *sensor, int centimeters) 
{
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	a0 97       	sbiw	r28, 0x20	; 32
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	8c 01       	movw	r16, r24
     9c2:	7b 01       	movw	r14, r22
	int sum = 0;
	oi_update(sensor);
     9c4:	84 d2       	rcall	.+1288   	; 0xece <oi_update>
	oi_set_wheels(200, 200); // move forward
     9c6:	68 ec       	ldi	r22, 0xC8	; 200
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	88 ec       	ldi	r24, 0xC8	; 200
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	27 d2       	rcall	.+1102   	; 0xe1e <oi_set_wheels>
	while (sum < centimeters * 10) {
     9d0:	67 01       	movw	r12, r14
     9d2:	cc 0c       	add	r12, r12
     9d4:	dd 1c       	adc	r13, r13
     9d6:	ee 0c       	add	r14, r14
     9d8:	ff 1c       	adc	r15, r15
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	ee 0c       	add	r14, r14
     9e0:	ff 1c       	adc	r15, r15
     9e2:	ce 0c       	add	r12, r14
     9e4:	df 1c       	adc	r13, r15
     9e6:	1c 14       	cp	r1, r12
     9e8:	1d 04       	cpc	r1, r13
     9ea:	0c f0       	brlt	.+2      	; 0x9ee <move_forward+0x52>
     9ec:	b6 c1       	rjmp	.+876    	; 0xd5a <move_forward+0x3be>
			char message[]="RED DOT -> DONE!";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			//enter_lz(sensor);
			break;
		} */
		if (sensor->bumper_left==1){
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 81       	ld	r24, Z
     9f2:	81 fd       	sbrc	r24, 1
     9f4:	13 c0       	rjmp	.+38     	; 0xa1c <move_forward+0x80>
			char message[]="bumper_left";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->bumper_right==1){
     9f6:	80 fd       	sbrc	r24, 0
     9f8:	39 c0       	rjmp	.+114    	; 0xa6c <move_forward+0xd0>
			char message[]="bumper_right";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_left==1){
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f4       	brne	.+2      	; 0xa02 <move_forward+0x66>
     a00:	5f c0       	rjmp	.+190    	; 0xac0 <move_forward+0x124>
			char message[]="cliff_leftCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_frontleft==1){
     a02:	83 81       	ldd	r24, Z+3	; 0x03
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	09 f4       	brne	.+2      	; 0xa0a <move_forward+0x6e>
     a08:	85 c0       	rjmp	.+266    	; 0xb14 <move_forward+0x178>
			char message[]="cliff_frontleftCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
	    else if(sensor->cliff_right==1){
     a0a:	85 81       	ldd	r24, Z+5	; 0x05
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <move_forward+0x76>
     a10:	d1 c0       	rjmp	.+418    	; 0xbb4 <move_forward+0x218>
     a12:	aa c0       	rjmp	.+340    	; 0xb68 <move_forward+0x1cc>
			char message[]="RED DOT -> DONE!";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			//enter_lz(sensor);
			break;
		} */
		if (sensor->bumper_left==1){
     a14:	f8 01       	movw	r30, r16
     a16:	80 81       	ld	r24, Z
     a18:	81 ff       	sbrs	r24, 1
     a1a:	26 c0       	rjmp	.+76     	; 0xa68 <move_forward+0xcc>
			char message[]="bumper_left";
     a1c:	8c e0       	ldi	r24, 0x0C	; 12
     a1e:	ed e0       	ldi	r30, 0x0D	; 13
     a20:	f2 e0       	ldi	r31, 0x02	; 2
     a22:	de 01       	movw	r26, r28
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	01 90       	ld	r0, Z+
     a28:	0d 92       	st	X+, r0
     a2a:	8a 95       	dec	r24
     a2c:	e1 f7       	brne	.-8      	; 0xa26 <move_forward+0x8a>
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
     a38:	6c 01       	movw	r12, r24
     a3a:	07 c0       	rjmp	.+14     	; 0xa4a <move_forward+0xae>
     a3c:	f5 01       	movw	r30, r10
     a3e:	81 91       	ld	r24, Z+
     a40:	5f 01       	movw	r10, r30
     a42:	85 d3       	rcall	.+1802   	; 0x114e <USART_Transmit>
     a44:	ff ef       	ldi	r31, 0xFF	; 255
     a46:	ef 1a       	sub	r14, r31
     a48:	ff 0a       	sbc	r15, r31
     a4a:	f6 01       	movw	r30, r12
     a4c:	01 90       	ld	r0, Z+
     a4e:	00 20       	and	r0, r0
     a50:	e9 f7       	brne	.-6      	; 0xa4c <move_forward+0xb0>
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	ec 19       	sub	r30, r12
     a56:	fd 09       	sbc	r31, r13
     a58:	ee 16       	cp	r14, r30
     a5a:	ff 06       	cpc	r15, r31
     a5c:	78 f3       	brcs	.-34     	; 0xa3c <move_forward+0xa0>
			move_backward(sensor, 10);
     a5e:	6a e0       	ldi	r22, 0x0A	; 10
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	c8 01       	movw	r24, r16
     a64:	6f df       	rcall	.-290    	; 0x944 <move_backward>
     a66:	79 c1       	rjmp	.+754    	; 0xd5a <move_forward+0x3be>
			break;
		}
		else if(sensor->bumper_right==1){
     a68:	80 ff       	sbrs	r24, 0
     a6a:	26 c0       	rjmp	.+76     	; 0xab8 <move_forward+0x11c>
			char message[]="bumper_right";
     a6c:	8d e0       	ldi	r24, 0x0D	; 13
     a6e:	e9 e1       	ldi	r30, 0x19	; 25
     a70:	f2 e0       	ldi	r31, 0x02	; 2
     a72:	de 01       	movw	r26, r28
     a74:	11 96       	adiw	r26, 0x01	; 1
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	8a 95       	dec	r24
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <move_forward+0xda>
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     a84:	e1 2c       	mov	r14, r1
     a86:	f1 2c       	mov	r15, r1
     a88:	6c 01       	movw	r12, r24
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <move_forward+0xfe>
     a8c:	f5 01       	movw	r30, r10
     a8e:	81 91       	ld	r24, Z+
     a90:	5f 01       	movw	r10, r30
     a92:	5d d3       	rcall	.+1722   	; 0x114e <USART_Transmit>
     a94:	ff ef       	ldi	r31, 0xFF	; 255
     a96:	ef 1a       	sub	r14, r31
     a98:	ff 0a       	sbc	r15, r31
     a9a:	f6 01       	movw	r30, r12
     a9c:	01 90       	ld	r0, Z+
     a9e:	00 20       	and	r0, r0
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <move_forward+0x100>
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	ec 19       	sub	r30, r12
     aa6:	fd 09       	sbc	r31, r13
     aa8:	ee 16       	cp	r14, r30
     aaa:	ff 06       	cpc	r15, r31
     aac:	78 f3       	brcs	.-34     	; 0xa8c <move_forward+0xf0>
			move_backward(sensor, 10);
     aae:	6a e0       	ldi	r22, 0x0A	; 10
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	c8 01       	movw	r24, r16
     ab4:	47 df       	rcall	.-370    	; 0x944 <move_backward>
     ab6:	51 c1       	rjmp	.+674    	; 0xd5a <move_forward+0x3be>
			break;
		}
		else if(sensor->cliff_left==1){
     ab8:	f8 01       	movw	r30, r16
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	31 f5       	brne	.+76     	; 0xb0c <move_forward+0x170>
			char message[]="cliff_leftCLIFF";
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	e6 e2       	ldi	r30, 0x26	; 38
     ac4:	f2 e0       	ldi	r31, 0x02	; 2
     ac6:	de 01       	movw	r26, r28
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	8a 95       	dec	r24
     ad0:	e1 f7       	brne	.-8      	; 0xaca <move_forward+0x12e>
     ad2:	ce 01       	movw	r24, r28
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     ad8:	e1 2c       	mov	r14, r1
     ada:	f1 2c       	mov	r15, r1
     adc:	6c 01       	movw	r12, r24
     ade:	07 c0       	rjmp	.+14     	; 0xaee <move_forward+0x152>
     ae0:	f5 01       	movw	r30, r10
     ae2:	81 91       	ld	r24, Z+
     ae4:	5f 01       	movw	r10, r30
     ae6:	33 d3       	rcall	.+1638   	; 0x114e <USART_Transmit>
     ae8:	ff ef       	ldi	r31, 0xFF	; 255
     aea:	ef 1a       	sub	r14, r31
     aec:	ff 0a       	sbc	r15, r31
     aee:	f6 01       	movw	r30, r12
     af0:	01 90       	ld	r0, Z+
     af2:	00 20       	and	r0, r0
     af4:	e9 f7       	brne	.-6      	; 0xaf0 <move_forward+0x154>
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	ec 19       	sub	r30, r12
     afa:	fd 09       	sbc	r31, r13
     afc:	ee 16       	cp	r14, r30
     afe:	ff 06       	cpc	r15, r31
     b00:	78 f3       	brcs	.-34     	; 0xae0 <move_forward+0x144>
			move_backward(sensor, 10);
     b02:	6a e0       	ldi	r22, 0x0A	; 10
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	c8 01       	movw	r24, r16
     b08:	1d df       	rcall	.-454    	; 0x944 <move_backward>
     b0a:	27 c1       	rjmp	.+590    	; 0xd5a <move_forward+0x3be>
			break;
		}
		else if(sensor->cliff_frontleft==1){
     b0c:	f8 01       	movw	r30, r16
     b0e:	83 81       	ldd	r24, Z+3	; 0x03
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	31 f5       	brne	.+76     	; 0xb60 <move_forward+0x1c4>
			char message[]="cliff_frontleftCLIFF";
     b14:	85 e1       	ldi	r24, 0x15	; 21
     b16:	e6 e3       	ldi	r30, 0x36	; 54
     b18:	f2 e0       	ldi	r31, 0x02	; 2
     b1a:	de 01       	movw	r26, r28
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	8a 95       	dec	r24
     b24:	e1 f7       	brne	.-8      	; 0xb1e <move_forward+0x182>
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     b2c:	e1 2c       	mov	r14, r1
     b2e:	f1 2c       	mov	r15, r1
     b30:	6c 01       	movw	r12, r24
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <move_forward+0x1a6>
     b34:	f5 01       	movw	r30, r10
     b36:	81 91       	ld	r24, Z+
     b38:	5f 01       	movw	r10, r30
     b3a:	09 d3       	rcall	.+1554   	; 0x114e <USART_Transmit>
     b3c:	ff ef       	ldi	r31, 0xFF	; 255
     b3e:	ef 1a       	sub	r14, r31
     b40:	ff 0a       	sbc	r15, r31
     b42:	f6 01       	movw	r30, r12
     b44:	01 90       	ld	r0, Z+
     b46:	00 20       	and	r0, r0
     b48:	e9 f7       	brne	.-6      	; 0xb44 <move_forward+0x1a8>
     b4a:	31 97       	sbiw	r30, 0x01	; 1
     b4c:	ec 19       	sub	r30, r12
     b4e:	fd 09       	sbc	r31, r13
     b50:	ee 16       	cp	r14, r30
     b52:	ff 06       	cpc	r15, r31
     b54:	78 f3       	brcs	.-34     	; 0xb34 <move_forward+0x198>
			move_backward(sensor, 10);
     b56:	6a e0       	ldi	r22, 0x0A	; 10
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	c8 01       	movw	r24, r16
     b5c:	f3 de       	rcall	.-538    	; 0x944 <move_backward>
     b5e:	fd c0       	rjmp	.+506    	; 0xd5a <move_forward+0x3be>
			break;
		}
	    else if(sensor->cliff_right==1){
     b60:	f8 01       	movw	r30, r16
     b62:	85 81       	ldd	r24, Z+5	; 0x05
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	41 f5       	brne	.+80     	; 0xbb8 <move_forward+0x21c>
			char message[]="cliff_rightCLIFF";
     b68:	81 e1       	ldi	r24, 0x11	; 17
     b6a:	eb e4       	ldi	r30, 0x4B	; 75
     b6c:	f2 e0       	ldi	r31, 0x02	; 2
     b6e:	de 01       	movw	r26, r28
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	01 90       	ld	r0, Z+
     b74:	0d 92       	st	X+, r0
     b76:	8a 95       	dec	r24
     b78:	e1 f7       	brne	.-8      	; 0xb72 <move_forward+0x1d6>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     b80:	e1 2c       	mov	r14, r1
     b82:	f1 2c       	mov	r15, r1
     b84:	6c 01       	movw	r12, r24
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <move_forward+0x1fa>
     b88:	f5 01       	movw	r30, r10
     b8a:	81 91       	ld	r24, Z+
     b8c:	5f 01       	movw	r10, r30
     b8e:	df d2       	rcall	.+1470   	; 0x114e <USART_Transmit>
     b90:	ff ef       	ldi	r31, 0xFF	; 255
     b92:	ef 1a       	sub	r14, r31
     b94:	ff 0a       	sbc	r15, r31
     b96:	f6 01       	movw	r30, r12
     b98:	01 90       	ld	r0, Z+
     b9a:	00 20       	and	r0, r0
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <move_forward+0x1fc>
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	ec 19       	sub	r30, r12
     ba2:	fd 09       	sbc	r31, r13
     ba4:	ee 16       	cp	r14, r30
     ba6:	ff 06       	cpc	r15, r31
     ba8:	78 f3       	brcs	.-34     	; 0xb88 <move_forward+0x1ec>
			move_backward(sensor, 10);
     baa:	6a e0       	ldi	r22, 0x0A	; 10
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	c8 01       	movw	r24, r16
     bb0:	c9 de       	rcall	.-622    	; 0x944 <move_backward>
     bb2:	d3 c0       	rjmp	.+422    	; 0xd5a <move_forward+0x3be>
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create forward
 */
void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     bb4:	e1 2c       	mov	r14, r1
     bb6:	f1 2c       	mov	r15, r1
			char message[]="cliff_rightCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_frontright==1){
     bb8:	f8 01       	movw	r30, r16
     bba:	84 81       	ldd	r24, Z+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	31 f5       	brne	.+76     	; 0xc0c <move_forward+0x270>
			char message[]="cliff_frontrightCLIFF";
     bc0:	86 e1       	ldi	r24, 0x16	; 22
     bc2:	ec e5       	ldi	r30, 0x5C	; 92
     bc4:	f2 e0       	ldi	r31, 0x02	; 2
     bc6:	de 01       	movw	r26, r28
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	01 90       	ld	r0, Z+
     bcc:	0d 92       	st	X+, r0
     bce:	8a 95       	dec	r24
     bd0:	e1 f7       	brne	.-8      	; 0xbca <move_forward+0x22e>
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     bd8:	e1 2c       	mov	r14, r1
     bda:	f1 2c       	mov	r15, r1
     bdc:	6c 01       	movw	r12, r24
     bde:	07 c0       	rjmp	.+14     	; 0xbee <move_forward+0x252>
     be0:	f5 01       	movw	r30, r10
     be2:	81 91       	ld	r24, Z+
     be4:	5f 01       	movw	r10, r30
     be6:	b3 d2       	rcall	.+1382   	; 0x114e <USART_Transmit>
     be8:	ff ef       	ldi	r31, 0xFF	; 255
     bea:	ef 1a       	sub	r14, r31
     bec:	ff 0a       	sbc	r15, r31
     bee:	f6 01       	movw	r30, r12
     bf0:	01 90       	ld	r0, Z+
     bf2:	00 20       	and	r0, r0
     bf4:	e9 f7       	brne	.-6      	; 0xbf0 <move_forward+0x254>
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	ec 19       	sub	r30, r12
     bfa:	fd 09       	sbc	r31, r13
     bfc:	ee 16       	cp	r14, r30
     bfe:	ff 06       	cpc	r15, r31
     c00:	78 f3       	brcs	.-34     	; 0xbe0 <move_forward+0x244>
			move_backward(sensor, 10);
     c02:	6a e0       	ldi	r22, 0x0A	; 10
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	c8 01       	movw	r24, r16
     c08:	9d de       	rcall	.-710    	; 0x944 <move_backward>
     c0a:	a7 c0       	rjmp	.+334    	; 0xd5a <move_forward+0x3be>
			break;
		}
//		else if(sensor->cliff_left_signal>400 && sensor->cliff_left_signal<700){   robot 17
	else if(sensor->cliff_left_signal>700){
     c0c:	f8 01       	movw	r30, r16
     c0e:	84 8d       	ldd	r24, Z+28	; 0x1c
     c10:	95 8d       	ldd	r25, Z+29	; 0x1d
     c12:	8d 3b       	cpi	r24, 0xBD	; 189
     c14:	92 40       	sbci	r25, 0x02	; 2
     c16:	08 f1       	brcs	.+66     	; 0xc5a <move_forward+0x2be>
			char message[]="cliff_left_signal>600WALL";
     c18:	8a e1       	ldi	r24, 0x1A	; 26
     c1a:	e2 e7       	ldi	r30, 0x72	; 114
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	de 01       	movw	r26, r28
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	01 90       	ld	r0, Z+
     c24:	0d 92       	st	X+, r0
     c26:	8a 95       	dec	r24
     c28:	e1 f7       	brne	.-8      	; 0xc22 <move_forward+0x286>
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	7c 01       	movw	r14, r24
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <move_forward+0x2a8>
     c38:	f6 01       	movw	r30, r12
     c3a:	81 91       	ld	r24, Z+
     c3c:	6f 01       	movw	r12, r30
     c3e:	87 d2       	rcall	.+1294   	; 0x114e <USART_Transmit>
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	f7 01       	movw	r30, r14
     c46:	01 90       	ld	r0, Z+
     c48:	00 20       	and	r0, r0
     c4a:	e9 f7       	brne	.-6      	; 0xc46 <move_forward+0x2aa>
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	ee 19       	sub	r30, r14
     c50:	ff 09       	sbc	r31, r15
     c52:	0e 17       	cp	r16, r30
     c54:	1f 07       	cpc	r17, r31
     c56:	80 f3       	brcs	.-32     	; 0xc38 <move_forward+0x29c>
     c58:	80 c0       	rjmp	.+256    	; 0xd5a <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_frontleft_signal>700 && sensor->cliff_frontleft_signal<950){
		else if(sensor->cliff_frontleft_signal>700){
     c5a:	f8 01       	movw	r30, r16
     c5c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c5e:	97 8d       	ldd	r25, Z+31	; 0x1f
     c60:	8d 3b       	cpi	r24, 0xBD	; 189
     c62:	92 40       	sbci	r25, 0x02	; 2
     c64:	08 f1       	brcs	.+66     	; 0xca8 <move_forward+0x30c>
			char message[]="cliff_frontleft_signal>600WALL";
     c66:	8f e1       	ldi	r24, 0x1F	; 31
     c68:	ec e8       	ldi	r30, 0x8C	; 140
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	de 01       	movw	r26, r28
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	01 90       	ld	r0, Z+
     c72:	0d 92       	st	X+, r0
     c74:	8a 95       	dec	r24
     c76:	e1 f7       	brne	.-8      	; 0xc70 <move_forward+0x2d4>
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	7c 01       	movw	r14, r24
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <move_forward+0x2f6>
     c86:	f6 01       	movw	r30, r12
     c88:	81 91       	ld	r24, Z+
     c8a:	6f 01       	movw	r12, r30
     c8c:	60 d2       	rcall	.+1216   	; 0x114e <USART_Transmit>
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	f7 01       	movw	r30, r14
     c94:	01 90       	ld	r0, Z+
     c96:	00 20       	and	r0, r0
     c98:	e9 f7       	brne	.-6      	; 0xc94 <move_forward+0x2f8>
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	ee 19       	sub	r30, r14
     c9e:	ff 09       	sbc	r31, r15
     ca0:	0e 17       	cp	r16, r30
     ca2:	1f 07       	cpc	r17, r31
     ca4:	80 f3       	brcs	.-32     	; 0xc86 <move_forward+0x2ea>
     ca6:	59 c0       	rjmp	.+178    	; 0xd5a <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_right_signal>360 && sensor->cliff_right_signal<800){
		else if(sensor->cliff_right_signal>700){
     ca8:	f8 01       	movw	r30, r16
     caa:	82 a1       	ldd	r24, Z+34	; 0x22
     cac:	93 a1       	ldd	r25, Z+35	; 0x23
     cae:	8d 3b       	cpi	r24, 0xBD	; 189
     cb0:	92 40       	sbci	r25, 0x02	; 2
     cb2:	08 f1       	brcs	.+66     	; 0xcf6 <move_forward+0x35a>
			char message[]="cliff_right_signal>350WALL";
     cb4:	8b e1       	ldi	r24, 0x1B	; 27
     cb6:	eb ea       	ldi	r30, 0xAB	; 171
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	de 01       	movw	r26, r28
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	01 90       	ld	r0, Z+
     cc0:	0d 92       	st	X+, r0
     cc2:	8a 95       	dec	r24
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <move_forward+0x322>
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	7c 01       	movw	r14, r24
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <move_forward+0x344>
     cd4:	f6 01       	movw	r30, r12
     cd6:	81 91       	ld	r24, Z+
     cd8:	6f 01       	movw	r12, r30
     cda:	39 d2       	rcall	.+1138   	; 0x114e <USART_Transmit>
     cdc:	0f 5f       	subi	r16, 0xFF	; 255
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	f7 01       	movw	r30, r14
     ce2:	01 90       	ld	r0, Z+
     ce4:	00 20       	and	r0, r0
     ce6:	e9 f7       	brne	.-6      	; 0xce2 <move_forward+0x346>
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	ee 19       	sub	r30, r14
     cec:	ff 09       	sbc	r31, r15
     cee:	0e 17       	cp	r16, r30
     cf0:	1f 07       	cpc	r17, r31
     cf2:	80 f3       	brcs	.-32     	; 0xcd4 <move_forward+0x338>
     cf4:	32 c0       	rjmp	.+100    	; 0xd5a <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_frontright_signal>300 && sensor->cliff_frontright_signal<700){
		else if(sensor->cliff_frontright_signal>700){
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 a1       	ldd	r24, Z+32	; 0x20
     cfa:	91 a1       	ldd	r25, Z+33	; 0x21
     cfc:	8d 3b       	cpi	r24, 0xBD	; 189
     cfe:	92 40       	sbci	r25, 0x02	; 2
     d00:	08 f1       	brcs	.+66     	; 0xd44 <move_forward+0x3a8>
			char message[]="cliff_frontright_signal>350WALL";
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	e6 ec       	ldi	r30, 0xC6	; 198
     d06:	f2 e0       	ldi	r31, 0x02	; 2
     d08:	de 01       	movw	r26, r28
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	01 90       	ld	r0, Z+
     d0e:	0d 92       	st	X+, r0
     d10:	8a 95       	dec	r24
     d12:	e1 f7       	brne	.-8      	; 0xd0c <move_forward+0x370>
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	7c 01       	movw	r14, r24
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <move_forward+0x392>
     d22:	f6 01       	movw	r30, r12
     d24:	81 91       	ld	r24, Z+
     d26:	6f 01       	movw	r12, r30
     d28:	12 d2       	rcall	.+1060   	; 0x114e <USART_Transmit>
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	f7 01       	movw	r30, r14
     d30:	01 90       	ld	r0, Z+
     d32:	00 20       	and	r0, r0
     d34:	e9 f7       	brne	.-6      	; 0xd30 <move_forward+0x394>
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	ee 19       	sub	r30, r14
     d3a:	ff 09       	sbc	r31, r15
     d3c:	0e 17       	cp	r16, r30
     d3e:	1f 07       	cpc	r17, r31
     d40:	80 f3       	brcs	.-32     	; 0xd22 <move_forward+0x386>
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}		
		
		
		oi_update(sensor);
     d44:	c8 01       	movw	r24, r16
     d46:	c3 d0       	rcall	.+390    	; 0xece <oi_update>
		sum += sensor->distance;
     d48:	f8 01       	movw	r30, r16
     d4a:	84 85       	ldd	r24, Z+12	; 0x0c
     d4c:	95 85       	ldd	r25, Z+13	; 0x0d
     d4e:	e8 0e       	add	r14, r24
     d50:	f9 1e       	adc	r15, r25
void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_update(sensor);
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     d52:	ec 14       	cp	r14, r12
     d54:	fd 04       	cpc	r15, r13
     d56:	0c f4       	brge	.+2      	; 0xd5a <move_forward+0x3be>
     d58:	5d ce       	rjmp	.-838    	; 0xa14 <move_forward+0x78>
		
		
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	5d d0       	rcall	.+186    	; 0xe1e <oi_set_wheels>
}
     d64:	a0 96       	adiw	r28, 0x20	; 32
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	08 95       	ret

00000d86 <turn_clockwise>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param degrees the number of degrees to rotate the Create clockwise
 */
void turn_clockwise(oi_t *sensor, int degrees)
{
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	8c 01       	movw	r16, r24
     d90:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     d92:	66 e9       	ldi	r22, 0x96	; 150
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	8a e6       	ldi	r24, 0x6A	; 106
     d98:	9f ef       	ldi	r25, 0xFF	; 255
     d9a:	41 d0       	rcall	.+130    	; 0xe1e <oi_set_wheels>
	while (sum > 0) {
     d9c:	1c 16       	cp	r1, r28
     d9e:	1d 06       	cpc	r1, r29
     da0:	54 f4       	brge	.+20     	; 0xdb6 <turn_clockwise+0x30>
		oi_update(sensor);
     da2:	c8 01       	movw	r24, r16
     da4:	94 d0       	rcall	.+296    	; 0xece <oi_update>
		sum += sensor->angle;
     da6:	f8 01       	movw	r30, r16
     da8:	86 85       	ldd	r24, Z+14	; 0x0e
     daa:	97 85       	ldd	r25, Z+15	; 0x0f
     dac:	c8 0f       	add	r28, r24
     dae:	d9 1f       	adc	r29, r25
 */
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     db0:	1c 16       	cp	r1, r28
     db2:	1d 06       	cpc	r1, r29
     db4:	b4 f3       	brlt	.-20     	; 0xda2 <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	2f d0       	rcall	.+94     	; 0xe1e <oi_set_wheels>
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     dca:	64 e3       	ldi	r22, 0x34	; 52
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	ab c6       	rjmp	.+3414   	; 0x1b2a <calloc>
     dd4:	08 95       	ret

00000dd6 <oi_byte_tx>:
     dd6:	eb e9       	ldi	r30, 0x9B	; 155
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	90 81       	ld	r25, Z
     ddc:	95 ff       	sbrs	r25, 5
     dde:	fd cf       	rjmp	.-6      	; 0xdda <oi_byte_tx+0x4>
     de0:	80 93 9c 00 	sts	0x009C, r24
     de4:	08 95       	ret

00000de6 <oi_set_leds>:
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	08 2f       	mov	r16, r24
     df0:	16 2f       	mov	r17, r22
     df2:	d4 2f       	mov	r29, r20
     df4:	c2 2f       	mov	r28, r18
     df6:	8b e8       	ldi	r24, 0x8B	; 139
     df8:	ee df       	rcall	.-36     	; 0xdd6 <oi_byte_tx>
     dfa:	11 23       	and	r17, r17
     dfc:	29 f0       	breq	.+10     	; 0xe08 <oi_set_leds+0x22>
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	01 11       	cpse	r16, r1
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <oi_set_leds+0x24>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <oi_set_leds+0x24>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	e5 df       	rcall	.-54     	; 0xdd6 <oi_byte_tx>
     e0c:	8d 2f       	mov	r24, r29
     e0e:	e3 df       	rcall	.-58     	; 0xdd6 <oi_byte_tx>
     e10:	8c 2f       	mov	r24, r28
     e12:	e1 df       	rcall	.-62     	; 0xdd6 <oi_byte_tx>
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <oi_set_wheels>:
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	18 2f       	mov	r17, r24
     e28:	09 2f       	mov	r16, r25
     e2a:	c6 2f       	mov	r28, r22
     e2c:	d7 2f       	mov	r29, r23
     e2e:	81 e9       	ldi	r24, 0x91	; 145
     e30:	d2 df       	rcall	.-92     	; 0xdd6 <oi_byte_tx>
     e32:	80 2f       	mov	r24, r16
     e34:	d0 df       	rcall	.-96     	; 0xdd6 <oi_byte_tx>
     e36:	81 2f       	mov	r24, r17
     e38:	ce df       	rcall	.-100    	; 0xdd6 <oi_byte_tx>
     e3a:	8d 2f       	mov	r24, r29
     e3c:	cc df       	rcall	.-104    	; 0xdd6 <oi_byte_tx>
     e3e:	8c 2f       	mov	r24, r28
     e40:	ca df       	rcall	.-108    	; 0xdd6 <oi_byte_tx>
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <oi_load_song>:
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	c8 2f       	mov	r28, r24
     e62:	7b 01       	movw	r14, r22
     e64:	6a 01       	movw	r12, r20
     e66:	a2 2e       	mov	r10, r18
     e68:	b3 2e       	mov	r11, r19
     e6a:	8c e8       	ldi	r24, 0x8C	; 140
     e6c:	b4 df       	rcall	.-152    	; 0xdd6 <oi_byte_tx>
     e6e:	8c 2f       	mov	r24, r28
     e70:	b2 df       	rcall	.-156    	; 0xdd6 <oi_byte_tx>
     e72:	8e 2d       	mov	r24, r14
     e74:	b0 df       	rcall	.-160    	; 0xdd6 <oi_byte_tx>
     e76:	1e 14       	cp	r1, r14
     e78:	1f 04       	cpc	r1, r15
     e7a:	74 f4       	brge	.+28     	; 0xe98 <oi_load_song+0x4c>
     e7c:	e6 01       	movw	r28, r12
     e7e:	0a 2d       	mov	r16, r10
     e80:	1b 2d       	mov	r17, r11
     e82:	ec 0c       	add	r14, r12
     e84:	fd 1c       	adc	r15, r13
     e86:	89 91       	ld	r24, Y+
     e88:	a6 df       	rcall	.-180    	; 0xdd6 <oi_byte_tx>
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 91       	ld	r24, Z+
     e8e:	8f 01       	movw	r16, r30
     e90:	a2 df       	rcall	.-188    	; 0xdd6 <oi_byte_tx>
     e92:	ce 15       	cp	r28, r14
     e94:	df 05       	cpc	r29, r15
     e96:	b9 f7       	brne	.-18     	; 0xe86 <oi_load_song+0x3a>
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	08 95       	ret

00000eae <oi_play_song>:
     eae:	cf 93       	push	r28
     eb0:	c8 2f       	mov	r28, r24
     eb2:	8d e8       	ldi	r24, 0x8D	; 141
     eb4:	90 df       	rcall	.-224    	; 0xdd6 <oi_byte_tx>
     eb6:	8c 2f       	mov	r24, r28
     eb8:	8e df       	rcall	.-228    	; 0xdd6 <oi_byte_tx>
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     ebe:	eb e9       	ldi	r30, 0x9B	; 155
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	88 23       	and	r24, r24
     ec6:	ec f7       	brge	.-6      	; 0xec2 <oi_byte_rx+0x4>

	return UDR1;
     ec8:	80 91 9c 00 	lds	r24, 0x009C
}
     ecc:	08 95       	ret

00000ece <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     edc:	80 91 9b 00 	lds	r24, 0x009B
     ee0:	88 23       	and	r24, r24
     ee2:	44 f4       	brge	.+16     	; 0xef4 <oi_update+0x26>
		i = UDR1;
     ee4:	ac e9       	ldi	r26, 0x9C	; 156
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ee8:	eb e9       	ldi	r30, 0x9B	; 155
     eea:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     eec:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     eee:	80 81       	ld	r24, Z
     ef0:	88 23       	and	r24, r24
     ef2:	e4 f3       	brlt	.-8      	; 0xeec <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     ef4:	8e e8       	ldi	r24, 0x8E	; 142
     ef6:	6f df       	rcall	.-290    	; 0xdd6 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	6d df       	rcall	.-294    	; 0xdd6 <oi_byte_tx>
     efc:	e7 01       	movw	r28, r14
     efe:	87 01       	movw	r16, r14
     f00:	0c 5c       	subi	r16, 0xCC	; 204
     f02:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     f04:	dc df       	rcall	.-72     	; 0xebe <oi_byte_rx>
     f06:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     f08:	c0 17       	cp	r28, r16
     f0a:	d1 07       	cpc	r29, r17
     f0c:	d9 f7       	brne	.-10     	; 0xf04 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     f0e:	f7 01       	movw	r30, r14
     f10:	84 85       	ldd	r24, Z+12	; 0x0c
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	98 2f       	mov	r25, r24
     f16:	88 27       	eor	r24, r24
     f18:	25 85       	ldd	r18, Z+13	; 0x0d
     f1a:	82 0f       	add	r24, r18
     f1c:	91 1d       	adc	r25, r1
     f1e:	95 87       	std	Z+13, r25	; 0x0d
     f20:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     f22:	86 85       	ldd	r24, Z+14	; 0x0e
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	98 2f       	mov	r25, r24
     f28:	88 27       	eor	r24, r24
     f2a:	27 85       	ldd	r18, Z+15	; 0x0f
     f2c:	82 0f       	add	r24, r18
     f2e:	91 1d       	adc	r25, r1
     f30:	97 87       	std	Z+15, r25	; 0x0f
     f32:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     f34:	81 89       	ldd	r24, Z+17	; 0x11
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	98 2f       	mov	r25, r24
     f3a:	88 27       	eor	r24, r24
     f3c:	22 89       	ldd	r18, Z+18	; 0x12
     f3e:	82 0f       	add	r24, r18
     f40:	91 1d       	adc	r25, r1
     f42:	92 8b       	std	Z+18, r25	; 0x12
     f44:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     f46:	83 89       	ldd	r24, Z+19	; 0x13
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	98 2f       	mov	r25, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	24 89       	ldd	r18, Z+20	; 0x14
     f50:	82 0f       	add	r24, r18
     f52:	91 1d       	adc	r25, r1
     f54:	94 8b       	std	Z+20, r25	; 0x14
     f56:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     f58:	86 89       	ldd	r24, Z+22	; 0x16
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	98 2f       	mov	r25, r24
     f5e:	88 27       	eor	r24, r24
     f60:	27 89       	ldd	r18, Z+23	; 0x17
     f62:	82 0f       	add	r24, r18
     f64:	91 1d       	adc	r25, r1
     f66:	97 8b       	std	Z+23, r25	; 0x17
     f68:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     f6a:	80 8d       	ldd	r24, Z+24	; 0x18
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	98 2f       	mov	r25, r24
     f70:	88 27       	eor	r24, r24
     f72:	21 8d       	ldd	r18, Z+25	; 0x19
     f74:	82 0f       	add	r24, r18
     f76:	91 1d       	adc	r25, r1
     f78:	91 8f       	std	Z+25, r25	; 0x19
     f7a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     f7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	98 2f       	mov	r25, r24
     f82:	88 27       	eor	r24, r24
     f84:	23 8d       	ldd	r18, Z+27	; 0x1b
     f86:	82 0f       	add	r24, r18
     f88:	91 1d       	adc	r25, r1
     f8a:	93 8f       	std	Z+27, r25	; 0x1b
     f8c:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     f8e:	84 8d       	ldd	r24, Z+28	; 0x1c
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	98 2f       	mov	r25, r24
     f94:	88 27       	eor	r24, r24
     f96:	25 8d       	ldd	r18, Z+29	; 0x1d
     f98:	82 0f       	add	r24, r18
     f9a:	91 1d       	adc	r25, r1
     f9c:	95 8f       	std	Z+29, r25	; 0x1d
     f9e:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     fa0:	86 8d       	ldd	r24, Z+30	; 0x1e
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	98 2f       	mov	r25, r24
     fa6:	88 27       	eor	r24, r24
     fa8:	27 8d       	ldd	r18, Z+31	; 0x1f
     faa:	82 0f       	add	r24, r18
     fac:	91 1d       	adc	r25, r1
     fae:	97 8f       	std	Z+31, r25	; 0x1f
     fb0:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     fb2:	80 a1       	ldd	r24, Z+32	; 0x20
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	98 2f       	mov	r25, r24
     fb8:	88 27       	eor	r24, r24
     fba:	21 a1       	ldd	r18, Z+33	; 0x21
     fbc:	82 0f       	add	r24, r18
     fbe:	91 1d       	adc	r25, r1
     fc0:	91 a3       	std	Z+33, r25	; 0x21
     fc2:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     fc4:	82 a1       	ldd	r24, Z+34	; 0x22
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	98 2f       	mov	r25, r24
     fca:	88 27       	eor	r24, r24
     fcc:	23 a1       	ldd	r18, Z+35	; 0x23
     fce:	82 0f       	add	r24, r18
     fd0:	91 1d       	adc	r25, r1
     fd2:	93 a3       	std	Z+35, r25	; 0x23
     fd4:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     fd6:	82 a5       	ldd	r24, Z+42	; 0x2a
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	21 a5       	ldd	r18, Z+41	; 0x29
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	32 2f       	mov	r19, r18
     fe0:	22 27       	eor	r18, r18
     fe2:	28 0f       	add	r18, r24
     fe4:	39 1f       	adc	r19, r25
     fe6:	36 a3       	std	Z+38, r19	; 0x26
     fe8:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     fea:	20 a9       	ldd	r18, Z+48	; 0x30
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	32 2f       	mov	r19, r18
     ff0:	22 27       	eor	r18, r18
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	95 a7       	std	Z+45, r25	; 0x2d
     ff8:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     ffa:	82 a9       	ldd	r24, Z+50	; 0x32
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	98 2f       	mov	r25, r24
    1000:	88 27       	eor	r24, r24
    1002:	23 a9       	ldd	r18, Z+51	; 0x33
    1004:	82 0f       	add	r24, r18
    1006:	91 1d       	adc	r25, r1
    1008:	97 a7       	std	Z+47, r25	; 0x2f
    100a:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    100c:	84 a9       	ldd	r24, Z+52	; 0x34
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	98 2f       	mov	r25, r24
    1012:	88 27       	eor	r24, r24
    1014:	25 a9       	ldd	r18, Z+53	; 0x35
    1016:	82 0f       	add	r24, r18
    1018:	91 1d       	adc	r25, r1
    101a:	91 ab       	std	Z+49, r25	; 0x31
    101c:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    101e:	86 a9       	ldd	r24, Z+54	; 0x36
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	98 2f       	mov	r25, r24
    1024:	88 27       	eor	r24, r24
    1026:	27 a9       	ldd	r18, Z+55	; 0x37
    1028:	82 0f       	add	r24, r18
    102a:	91 1d       	adc	r25, r1
    102c:	93 ab       	std	Z+51, r25	; 0x33
    102e:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    1030:	83 e2       	ldi	r24, 0x23	; 35
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	4f d0       	rcall	.+158    	; 0x10d4 <wait_ms>
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	08 95       	ret

00001044 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    104e:	09 e9       	ldi	r16, 0x99	; 153
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	80 e1       	ldi	r24, 0x10	; 16
    1054:	f8 01       	movw	r30, r16
    1056:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    1058:	88 e1       	ldi	r24, 0x18	; 24
    105a:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	b7 de       	rcall	.-658    	; 0xdd6 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    1068:	81 e8       	ldi	r24, 0x81	; 129
    106a:	b5 de       	rcall	.-662    	; 0xdd6 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	b3 de       	rcall	.-666    	; 0xdd6 <oi_byte_tx>
	wait_ms(100);
    1070:	84 e6       	ldi	r24, 0x64	; 100
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	2f d0       	rcall	.+94     	; 0x10d4 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    1076:	81 e2       	ldi	r24, 0x21	; 33
    1078:	f8 01       	movw	r30, r16
    107a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    107c:	84 e8       	ldi	r24, 0x84	; 132
    107e:	ab de       	rcall	.-682    	; 0xdd6 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    1080:	2f ef       	ldi	r18, 0xFF	; 255
    1082:	47 e0       	ldi	r20, 0x07	; 7
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	ae de       	rcall	.-676    	; 0xde6 <oi_set_leds>
	
	oi_update(self);
    108a:	ce 01       	movw	r24, r28
    108c:	20 df       	rcall	.-448    	; 0xece <oi_update>
	oi_update(self); // call twice to clear distance/angle
    108e:	ce 01       	movw	r24, r28
    1090:	1e df       	rcall	.-452    	; 0xece <oi_update>
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <timer2_start>:
}

/// Start timer2
void timer2_start(char unit) 
{
	timer2_tick=0;
    109c:	10 92 45 03 	sts	0x0345, r1
    10a0:	10 92 44 03 	sts	0x0344, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    10a4:	81 11       	cpse	r24, r1
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    10a8:	8b e0       	ldi	r24, 0x0B	; 11
    10aa:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    10ac:	87 b7       	in	r24, 0x37	; 55
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	87 bf       	out	0x37, r24	; 55
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    10b8:	89 e0       	ldi	r24, 0x09	; 9
    10ba:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    10bc:	87 b7       	in	r24, 0x37	; 55
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    10c2:	78 94       	sei
    10c4:	08 95       	ret

000010c6 <timer2_stop>:
}

/// Stop timer2
void timer2_stop() 
{
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    10c6:	87 b7       	in	r24, 0x37	; 55
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    10cc:	85 b5       	in	r24, 0x25	; 37
    10ce:	8f 77       	andi	r24, 0x7F	; 127
    10d0:	85 bd       	out	0x25, r24	; 37
    10d2:	08 95       	ret

000010d4 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();

/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) 
{
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    10da:	8a ef       	ldi	r24, 0xFA	; 250
    10dc:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    10de:	10 92 45 03 	sts	0x0345, r1
    10e2:	10 92 44 03 	sts	0x0344, r1
	timer2_start(0);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	d9 df       	rcall	.-78     	; 0x109c <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    10ea:	20 91 44 03 	lds	r18, 0x0344
    10ee:	30 91 45 03 	lds	r19, 0x0345
    10f2:	2c 17       	cp	r18, r28
    10f4:	3d 07       	cpc	r19, r29
    10f6:	c8 f3       	brcs	.-14     	; 0x10ea <wait_ms+0x16>

	timer2_stop();
    10f8:	e6 df       	rcall	.-52     	; 0x10c6 <timer2_stop>
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}

/// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) 
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
	timer2_tick++;
    110e:	80 91 44 03 	lds	r24, 0x0344
    1112:	90 91 45 03 	lds	r25, 0x0345
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	90 93 45 03 	sts	0x0345, r25
    111c:	80 93 44 03 	sts	0x0344, r24
}
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <USART_init>:
/// Initalize USART registers
void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
    112e:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
    1132:	82 e2       	ldi	r24, 0x22	; 34
    1134:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
    113a:	8e e0       	ldi	r24, 0x0E	; 14
    113c:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
    1140:	88 e1       	ldi	r24, 0x18	; 24
    1142:	8a b9       	out	0x0a, r24	; 10
    1144:	08 95       	ret

00001146 <USART_Receive>:
 *  @return the recieved character 
 */
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
    1146:	5f 9b       	sbis	0x0b, 7	; 11
    1148:	fe cf       	rjmp	.-4      	; 0x1146 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
    114a:	8c b1       	in	r24, 0x0c	; 12
}
    114c:	08 95       	ret

0000114e <USART_Transmit>:
 *  @param data the character to be transmitted
 */
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
    114e:	5d 9b       	sbis	0x0b, 5	; 11
    1150:	fe cf       	rjmp	.-4      	; 0x114e <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
    1152:	8c b9       	out	0x0c, r24	; 12
    1154:	08 95       	ret

00001156 <move_servo>:
 *
 *  @param degree angle to rotate the servo to
 */		
int move_servo(int degree)
{
	int conv = 20*degree+800;
    1156:	24 e1       	ldi	r18, 0x14	; 20
    1158:	ac 01       	movw	r20, r24
    115a:	24 9f       	mul	r18, r20
    115c:	c0 01       	movw	r24, r0
    115e:	25 9f       	mul	r18, r21
    1160:	90 0d       	add	r25, r0
    1162:	11 24       	eor	r1, r1
    1164:	80 5e       	subi	r24, 0xE0	; 224
    1166:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
    1168:	90 93 85 00 	sts	0x0085, r25
    116c:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
    1170:	08 95       	ret

00001172 <timer3_init>:

/// Initalize Timer 3 registers
void timer3_init(void)
{
	TCCR3A = 0b00100011;
    1172:	83 e2       	ldi	r24, 0x23	; 35
    1174:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
    1178:	8a e1       	ldi	r24, 0x1A	; 26
    117a:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
    117e:	88 ef       	ldi	r24, 0xF8	; 248
    1180:	97 ea       	ldi	r25, 0xA7	; 167
    1182:	90 93 87 00 	sts	0x0087, r25
    1186:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	90 93 85 00 	sts	0x0085, r25
    1192:	80 93 84 00 	sts	0x0084, r24
	DDRE = 0b00010000;
    1196:	80 e1       	ldi	r24, 0x10	; 16
    1198:	82 b9       	out	0x02, r24	; 2
    119a:	08 95       	ret

0000119c <send_pulse>:
}

/// Send pulse on wire to control Ping sensor
void send_pulse(void)
{
	DDRD |=0x10;
    119c:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
    119e:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	97 df       	rcall	.-210    	; 0x10d4 <wait_ms>
	PORTD &=0xEF;
    11a6:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
    11a8:	8c 98       	cbi	0x11, 4	; 17
    11aa:	08 95       	ret

000011ac <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
	if(State==RISING){
    11be:	80 91 43 03 	lds	r24, 0x0343
    11c2:	81 11       	cpse	r24, r1
    11c4:	13 c0       	rjmp	.+38     	; 0x11ec <__vector_11+0x40>
		rising_time=ICR1;
    11c6:	86 b5       	in	r24, 0x26	; 38
    11c8:	97 b5       	in	r25, 0x27	; 39
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	80 93 3f 03 	sts	0x033F, r24
    11d2:	90 93 40 03 	sts	0x0340, r25
    11d6:	a0 93 41 03 	sts	0x0341, r26
    11da:	b0 93 42 03 	sts	0x0342, r27
		State = FALLING;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 43 03 	sts	0x0343, r24
		TCCR1B &= 0b10111111;
    11e4:	8e b5       	in	r24, 0x2e	; 46
    11e6:	8f 7b       	andi	r24, 0xBF	; 191
    11e8:	8e bd       	out	0x2e, r24	; 46
    11ea:	16 c0       	rjmp	.+44     	; 0x1218 <__vector_11+0x6c>
	}
	else if(State==FALLING){
    11ec:	80 91 43 03 	lds	r24, 0x0343
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 f4       	brne	.+36     	; 0x1218 <__vector_11+0x6c>
		falling_time=ICR1;
    11f4:	86 b5       	in	r24, 0x26	; 38
    11f6:	97 b5       	in	r25, 0x27	; 39
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	80 93 3b 03 	sts	0x033B, r24
    1200:	90 93 3c 03 	sts	0x033C, r25
    1204:	a0 93 3d 03 	sts	0x033D, r26
    1208:	b0 93 3e 03 	sts	0x033E, r27
		State = DONE;
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	80 93 43 03 	sts	0x0343, r24
		TCCR1B |= 0b01000000;
    1212:	8e b5       	in	r24, 0x2e	; 46
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	8e bd       	out	0x2e, r24	; 46
	}
}
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <pinginit>:

/// Initalize Ping sonar sensor
void pinginit(void)
{
	TIFR = 0b00000000;
    122a:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
    122c:	83 ec       	ldi	r24, 0xC3	; 195
    122e:	8e bd       	out	0x2e, r24	; 46
    1230:	08 95       	ret

00001232 <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
    1232:	10 92 43 03 	sts	0x0343, r1
	TIMSK &= 0b11011111;
    1236:	87 b7       	in	r24, 0x37	; 55
    1238:	8f 7d       	andi	r24, 0xDF	; 223
    123a:	87 bf       	out	0x37, r24	; 55
	send_pulse();
    123c:	af df       	rcall	.-162    	; 0x119c <send_pulse>
	TIFR |= 0b00100000;
    123e:	86 b7       	in	r24, 0x36	; 54
    1240:	80 62       	ori	r24, 0x20	; 32
    1242:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
    1244:	87 b7       	in	r24, 0x37	; 55
    1246:	80 62       	ori	r24, 0x20	; 32
    1248:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
    124a:	80 91 43 03 	lds	r24, 0x0343
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	e1 f7       	brne	.-8      	; 0x124a <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
    1252:	40 91 3b 03 	lds	r20, 0x033B
    1256:	50 91 3c 03 	lds	r21, 0x033C
    125a:	60 91 3d 03 	lds	r22, 0x033D
    125e:	70 91 3e 03 	lds	r23, 0x033E
    1262:	80 91 3f 03 	lds	r24, 0x033F
    1266:	90 91 40 03 	lds	r25, 0x0340
    126a:	a0 91 41 03 	lds	r26, 0x0341
    126e:	b0 91 42 03 	lds	r27, 0x0342
    1272:	ba 01       	movw	r22, r20
    1274:	68 1b       	sub	r22, r24
    1276:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
    1278:	88 27       	eor	r24, r24
    127a:	77 fd       	sbrc	r23, 7
    127c:	80 95       	com	r24
    127e:	98 2f       	mov	r25, r24
    1280:	46 d1       	rcall	.+652    	; 0x150e <__floatsisf>
    1282:	29 e4       	ldi	r18, 0x49	; 73
    1284:	3b e4       	ldi	r19, 0x4B	; 75
    1286:	4b e6       	ldi	r20, 0x6B	; 107
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	a6 d0       	rcall	.+332    	; 0x13d8 <__divsf3>
    128c:	0d d1       	rcall	.+538    	; 0x14a8 <__fixsfsi>
	
	return centimeters;
}
    128e:	cb 01       	movw	r24, r22
    1290:	08 95       	ret

00001292 <ADC_init>:

/// Initalize Analog-Digital Conversion registers
void ADC_init(void)
{
	ADMUX=0b11000010;
    1292:	82 ec       	ldi	r24, 0xC2	; 194
    1294:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
    1296:	87 e8       	ldi	r24, 0x87	; 135
    1298:	86 b9       	out	0x06, r24	; 6
    129a:	08 95       	ret

0000129c <ADC_read>:
 *
 *  @return digital integer value of the analog signal between 0-1023 
 */
int ADC_read(void)
{
	ADCSRA |= 0b01000000;
    129c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
    129e:	36 99       	sbic	0x06, 6	; 6
    12a0:	fe cf       	rjmp	.-4      	; 0x129e <ADC_read+0x2>
	return ADC;
    12a2:	84 b1       	in	r24, 0x04	; 4
    12a4:	95 b1       	in	r25, 0x05	; 5
}
    12a6:	08 95       	ret

000012a8 <getIrDistance>:
 *  Returns the distance of an object based on the IR sensor reaing 
 *
 *  @return distance in centimeters of detected object
 */
int getIrDistance(void)
{
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	c5 e0       	ldi	r28, 0x05	; 5
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
    12b8:	f1 df       	rcall	.-30     	; 0x129c <ADC_read>
    12ba:	08 0f       	add	r16, r24
    12bc:	19 1f       	adc	r17, r25
    12be:	21 97       	sbiw	r28, 0x01	; 1
 *  @return distance in centimeters of detected object
 */
int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
    12c0:	20 97       	sbiw	r28, 0x00	; 0
    12c2:	d1 f7       	brne	.-12     	; 0x12b8 <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
    12c4:	c8 01       	movw	r24, r16
    12c6:	65 e0       	ldi	r22, 0x05	; 5
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	08 d4       	rcall	.+2064   	; 0x1adc <__divmodhi4>
    12cc:	70 93 38 03 	sts	0x0338, r23
    12d0:	60 93 37 03 	sts	0x0337, r22
	distance = 24443*pow(value1,(-1.156));
    12d4:	88 27       	eor	r24, r24
    12d6:	77 fd       	sbrc	r23, 7
    12d8:	80 95       	com	r24
    12da:	98 2f       	mov	r25, r24
    12dc:	18 d1       	rcall	.+560    	; 0x150e <__floatsisf>
    12de:	2f ec       	ldi	r18, 0xCF	; 207
    12e0:	37 ef       	ldi	r19, 0xF7	; 247
    12e2:	43 e9       	ldi	r20, 0x93	; 147
    12e4:	5f eb       	ldi	r21, 0xBF	; 191
    12e6:	3b d2       	rcall	.+1142   	; 0x175e <pow>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	36 ef       	ldi	r19, 0xF6	; 246
    12ec:	4e eb       	ldi	r20, 0xBE	; 190
    12ee:	56 e4       	ldi	r21, 0x46	; 70
    12f0:	d3 d1       	rcall	.+934    	; 0x1698 <__mulsf3>
    12f2:	da d0       	rcall	.+436    	; 0x14a8 <__fixsfsi>
    12f4:	70 93 3a 03 	sts	0x033A, r23
    12f8:	60 93 39 03 	sts	0x0339, r22
	return distance;
    12fc:	cb 01       	movw	r24, r22
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <__subsf3>:
    1308:	50 58       	subi	r21, 0x80	; 128

0000130a <__addsf3>:
    130a:	bb 27       	eor	r27, r27
    130c:	aa 27       	eor	r26, r26
    130e:	0e d0       	rcall	.+28     	; 0x132c <__addsf3x>
    1310:	78 c1       	rjmp	.+752    	; 0x1602 <__fp_round>
    1312:	41 d1       	rcall	.+642    	; 0x1596 <__fp_pscA>
    1314:	30 f0       	brcs	.+12     	; 0x1322 <__addsf3+0x18>
    1316:	46 d1       	rcall	.+652    	; 0x15a4 <__fp_pscB>
    1318:	20 f0       	brcs	.+8      	; 0x1322 <__addsf3+0x18>
    131a:	31 f4       	brne	.+12     	; 0x1328 <__addsf3+0x1e>
    131c:	9f 3f       	cpi	r25, 0xFF	; 255
    131e:	11 f4       	brne	.+4      	; 0x1324 <__addsf3+0x1a>
    1320:	1e f4       	brtc	.+6      	; 0x1328 <__addsf3+0x1e>
    1322:	36 c1       	rjmp	.+620    	; 0x1590 <__fp_nan>
    1324:	0e f4       	brtc	.+2      	; 0x1328 <__addsf3+0x1e>
    1326:	e0 95       	com	r30
    1328:	e7 fb       	bst	r30, 7
    132a:	2c c1       	rjmp	.+600    	; 0x1584 <__fp_inf>

0000132c <__addsf3x>:
    132c:	e9 2f       	mov	r30, r25
    132e:	8b d1       	rcall	.+790    	; 0x1646 <__fp_split3>
    1330:	80 f3       	brcs	.-32     	; 0x1312 <__addsf3+0x8>
    1332:	ba 17       	cp	r27, r26
    1334:	62 07       	cpc	r22, r18
    1336:	73 07       	cpc	r23, r19
    1338:	84 07       	cpc	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	18 f0       	brcs	.+6      	; 0x1344 <__addsf3x+0x18>
    133e:	71 f4       	brne	.+28     	; 0x135c <__addsf3x+0x30>
    1340:	9e f5       	brtc	.+102    	; 0x13a8 <__addsf3x+0x7c>
    1342:	a3 c1       	rjmp	.+838    	; 0x168a <__fp_zero>
    1344:	0e f4       	brtc	.+2      	; 0x1348 <__addsf3x+0x1c>
    1346:	e0 95       	com	r30
    1348:	0b 2e       	mov	r0, r27
    134a:	ba 2f       	mov	r27, r26
    134c:	a0 2d       	mov	r26, r0
    134e:	0b 01       	movw	r0, r22
    1350:	b9 01       	movw	r22, r18
    1352:	90 01       	movw	r18, r0
    1354:	0c 01       	movw	r0, r24
    1356:	ca 01       	movw	r24, r20
    1358:	a0 01       	movw	r20, r0
    135a:	11 24       	eor	r1, r1
    135c:	ff 27       	eor	r31, r31
    135e:	59 1b       	sub	r21, r25
    1360:	99 f0       	breq	.+38     	; 0x1388 <__addsf3x+0x5c>
    1362:	59 3f       	cpi	r21, 0xF9	; 249
    1364:	50 f4       	brcc	.+20     	; 0x137a <__addsf3x+0x4e>
    1366:	50 3e       	cpi	r21, 0xE0	; 224
    1368:	68 f1       	brcs	.+90     	; 0x13c4 <__addsf3x+0x98>
    136a:	1a 16       	cp	r1, r26
    136c:	f0 40       	sbci	r31, 0x00	; 0
    136e:	a2 2f       	mov	r26, r18
    1370:	23 2f       	mov	r18, r19
    1372:	34 2f       	mov	r19, r20
    1374:	44 27       	eor	r20, r20
    1376:	58 5f       	subi	r21, 0xF8	; 248
    1378:	f3 cf       	rjmp	.-26     	; 0x1360 <__addsf3x+0x34>
    137a:	46 95       	lsr	r20
    137c:	37 95       	ror	r19
    137e:	27 95       	ror	r18
    1380:	a7 95       	ror	r26
    1382:	f0 40       	sbci	r31, 0x00	; 0
    1384:	53 95       	inc	r21
    1386:	c9 f7       	brne	.-14     	; 0x137a <__addsf3x+0x4e>
    1388:	7e f4       	brtc	.+30     	; 0x13a8 <__addsf3x+0x7c>
    138a:	1f 16       	cp	r1, r31
    138c:	ba 0b       	sbc	r27, r26
    138e:	62 0b       	sbc	r22, r18
    1390:	73 0b       	sbc	r23, r19
    1392:	84 0b       	sbc	r24, r20
    1394:	ba f0       	brmi	.+46     	; 0x13c4 <__addsf3x+0x98>
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	a1 f0       	breq	.+40     	; 0x13c2 <__addsf3x+0x96>
    139a:	ff 0f       	add	r31, r31
    139c:	bb 1f       	adc	r27, r27
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	c2 f7       	brpl	.-16     	; 0x1396 <__addsf3x+0x6a>
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <__addsf3x+0x98>
    13a8:	ba 0f       	add	r27, r26
    13aa:	62 1f       	adc	r22, r18
    13ac:	73 1f       	adc	r23, r19
    13ae:	84 1f       	adc	r24, r20
    13b0:	48 f4       	brcc	.+18     	; 0x13c4 <__addsf3x+0x98>
    13b2:	87 95       	ror	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	9e 3f       	cpi	r25, 0xFE	; 254
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__addsf3x+0x96>
    13c0:	b3 cf       	rjmp	.-154    	; 0x1328 <__addsf3+0x1e>
    13c2:	93 95       	inc	r25
    13c4:	88 0f       	add	r24, r24
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <__addsf3x+0x9e>
    13c8:	99 27       	eor	r25, r25
    13ca:	ee 0f       	add	r30, r30
    13cc:	97 95       	ror	r25
    13ce:	87 95       	ror	r24
    13d0:	08 95       	ret

000013d2 <cos>:
    13d2:	f0 d0       	rcall	.+480    	; 0x15b4 <__fp_rempio2>
    13d4:	e3 95       	inc	r30
    13d6:	26 c1       	rjmp	.+588    	; 0x1624 <__fp_sinus>

000013d8 <__divsf3>:
    13d8:	0c d0       	rcall	.+24     	; 0x13f2 <__divsf3x>
    13da:	13 c1       	rjmp	.+550    	; 0x1602 <__fp_round>
    13dc:	e3 d0       	rcall	.+454    	; 0x15a4 <__fp_pscB>
    13de:	40 f0       	brcs	.+16     	; 0x13f0 <__divsf3+0x18>
    13e0:	da d0       	rcall	.+436    	; 0x1596 <__fp_pscA>
    13e2:	30 f0       	brcs	.+12     	; 0x13f0 <__divsf3+0x18>
    13e4:	21 f4       	brne	.+8      	; 0x13ee <__divsf3+0x16>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <__divsf3+0x18>
    13ea:	cc c0       	rjmp	.+408    	; 0x1584 <__fp_inf>
    13ec:	51 11       	cpse	r21, r1
    13ee:	4e c1       	rjmp	.+668    	; 0x168c <__fp_szero>
    13f0:	cf c0       	rjmp	.+414    	; 0x1590 <__fp_nan>

000013f2 <__divsf3x>:
    13f2:	29 d1       	rcall	.+594    	; 0x1646 <__fp_split3>
    13f4:	98 f3       	brcs	.-26     	; 0x13dc <__divsf3+0x4>

000013f6 <__divsf3_pse>:
    13f6:	99 23       	and	r25, r25
    13f8:	c9 f3       	breq	.-14     	; 0x13ec <__divsf3+0x14>
    13fa:	55 23       	and	r21, r21
    13fc:	b1 f3       	breq	.-20     	; 0x13ea <__divsf3+0x12>
    13fe:	95 1b       	sub	r25, r21
    1400:	55 0b       	sbc	r21, r21
    1402:	bb 27       	eor	r27, r27
    1404:	aa 27       	eor	r26, r26
    1406:	62 17       	cp	r22, r18
    1408:	73 07       	cpc	r23, r19
    140a:	84 07       	cpc	r24, r20
    140c:	38 f0       	brcs	.+14     	; 0x141c <__divsf3_pse+0x26>
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	44 1f       	adc	r20, r20
    1418:	aa 1f       	adc	r26, r26
    141a:	a9 f3       	breq	.-22     	; 0x1406 <__divsf3_pse+0x10>
    141c:	33 d0       	rcall	.+102    	; 0x1484 <__divsf3_pse+0x8e>
    141e:	0e 2e       	mov	r0, r30
    1420:	3a f0       	brmi	.+14     	; 0x1430 <__divsf3_pse+0x3a>
    1422:	e0 e8       	ldi	r30, 0x80	; 128
    1424:	30 d0       	rcall	.+96     	; 0x1486 <__divsf3_pse+0x90>
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	50 40       	sbci	r21, 0x00	; 0
    142a:	e6 95       	lsr	r30
    142c:	00 1c       	adc	r0, r0
    142e:	ca f7       	brpl	.-14     	; 0x1422 <__divsf3_pse+0x2c>
    1430:	29 d0       	rcall	.+82     	; 0x1484 <__divsf3_pse+0x8e>
    1432:	fe 2f       	mov	r31, r30
    1434:	27 d0       	rcall	.+78     	; 0x1484 <__divsf3_pse+0x8e>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	bb 1f       	adc	r27, r27
    143e:	26 17       	cp	r18, r22
    1440:	37 07       	cpc	r19, r23
    1442:	48 07       	cpc	r20, r24
    1444:	ab 07       	cpc	r26, r27
    1446:	b0 e8       	ldi	r27, 0x80	; 128
    1448:	09 f0       	breq	.+2      	; 0x144c <__divsf3_pse+0x56>
    144a:	bb 0b       	sbc	r27, r27
    144c:	80 2d       	mov	r24, r0
    144e:	bf 01       	movw	r22, r30
    1450:	ff 27       	eor	r31, r31
    1452:	93 58       	subi	r25, 0x83	; 131
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	2a f0       	brmi	.+10     	; 0x1462 <__divsf3_pse+0x6c>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	68 f0       	brcs	.+26     	; 0x1478 <__divsf3_pse+0x82>
    145e:	92 c0       	rjmp	.+292    	; 0x1584 <__fp_inf>
    1460:	15 c1       	rjmp	.+554    	; 0x168c <__fp_szero>
    1462:	5f 3f       	cpi	r21, 0xFF	; 255
    1464:	ec f3       	brlt	.-6      	; 0x1460 <__divsf3_pse+0x6a>
    1466:	98 3e       	cpi	r25, 0xE8	; 232
    1468:	dc f3       	brlt	.-10     	; 0x1460 <__divsf3_pse+0x6a>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b7 95       	ror	r27
    1472:	f7 95       	ror	r31
    1474:	9f 5f       	subi	r25, 0xFF	; 255
    1476:	c9 f7       	brne	.-14     	; 0x146a <__divsf3_pse+0x74>
    1478:	88 0f       	add	r24, r24
    147a:	91 1d       	adc	r25, r1
    147c:	96 95       	lsr	r25
    147e:	87 95       	ror	r24
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret
    1484:	e1 e0       	ldi	r30, 0x01	; 1
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	bb 1f       	adc	r27, r27
    148e:	62 17       	cp	r22, r18
    1490:	73 07       	cpc	r23, r19
    1492:	84 07       	cpc	r24, r20
    1494:	ba 07       	cpc	r27, r26
    1496:	20 f0       	brcs	.+8      	; 0x14a0 <__divsf3_pse+0xaa>
    1498:	62 1b       	sub	r22, r18
    149a:	73 0b       	sbc	r23, r19
    149c:	84 0b       	sbc	r24, r20
    149e:	ba 0b       	sbc	r27, r26
    14a0:	ee 1f       	adc	r30, r30
    14a2:	88 f7       	brcc	.-30     	; 0x1486 <__divsf3_pse+0x90>
    14a4:	e0 95       	com	r30
    14a6:	08 95       	ret

000014a8 <__fixsfsi>:
    14a8:	04 d0       	rcall	.+8      	; 0x14b2 <__fixunssfsi>
    14aa:	68 94       	set
    14ac:	b1 11       	cpse	r27, r1
    14ae:	ee c0       	rjmp	.+476    	; 0x168c <__fp_szero>
    14b0:	08 95       	ret

000014b2 <__fixunssfsi>:
    14b2:	d1 d0       	rcall	.+418    	; 0x1656 <__fp_splitA>
    14b4:	88 f0       	brcs	.+34     	; 0x14d8 <__fixunssfsi+0x26>
    14b6:	9f 57       	subi	r25, 0x7F	; 127
    14b8:	90 f0       	brcs	.+36     	; 0x14de <__fixunssfsi+0x2c>
    14ba:	b9 2f       	mov	r27, r25
    14bc:	99 27       	eor	r25, r25
    14be:	b7 51       	subi	r27, 0x17	; 23
    14c0:	a0 f0       	brcs	.+40     	; 0x14ea <__fixunssfsi+0x38>
    14c2:	d1 f0       	breq	.+52     	; 0x14f8 <__fixunssfsi+0x46>
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	1a f0       	brmi	.+6      	; 0x14d4 <__fixunssfsi+0x22>
    14ce:	ba 95       	dec	r27
    14d0:	c9 f7       	brne	.-14     	; 0x14c4 <__fixunssfsi+0x12>
    14d2:	12 c0       	rjmp	.+36     	; 0x14f8 <__fixunssfsi+0x46>
    14d4:	b1 30       	cpi	r27, 0x01	; 1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <__fixunssfsi+0x46>
    14d8:	d8 d0       	rcall	.+432    	; 0x168a <__fp_zero>
    14da:	b1 e0       	ldi	r27, 0x01	; 1
    14dc:	08 95       	ret
    14de:	d5 c0       	rjmp	.+426    	; 0x168a <__fp_zero>
    14e0:	67 2f       	mov	r22, r23
    14e2:	78 2f       	mov	r23, r24
    14e4:	88 27       	eor	r24, r24
    14e6:	b8 5f       	subi	r27, 0xF8	; 248
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <__fixunssfsi+0x46>
    14ea:	b9 3f       	cpi	r27, 0xF9	; 249
    14ec:	cc f3       	brlt	.-14     	; 0x14e0 <__fixunssfsi+0x2e>
    14ee:	86 95       	lsr	r24
    14f0:	77 95       	ror	r23
    14f2:	67 95       	ror	r22
    14f4:	b3 95       	inc	r27
    14f6:	d9 f7       	brne	.-10     	; 0x14ee <__fixunssfsi+0x3c>
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__fixunssfsi+0x56>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <__floatunsisf>:
    150a:	e8 94       	clt
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <__floatsisf+0x12>

0000150e <__floatsisf>:
    150e:	97 fb       	bst	r25, 7
    1510:	3e f4       	brtc	.+14     	; 0x1520 <__floatsisf+0x12>
    1512:	90 95       	com	r25
    1514:	80 95       	com	r24
    1516:	70 95       	com	r23
    1518:	61 95       	neg	r22
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	99 23       	and	r25, r25
    1522:	a9 f0       	breq	.+42     	; 0x154e <__floatsisf+0x40>
    1524:	f9 2f       	mov	r31, r25
    1526:	96 e9       	ldi	r25, 0x96	; 150
    1528:	bb 27       	eor	r27, r27
    152a:	93 95       	inc	r25
    152c:	f6 95       	lsr	r31
    152e:	87 95       	ror	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b7 95       	ror	r27
    1536:	f1 11       	cpse	r31, r1
    1538:	f8 cf       	rjmp	.-16     	; 0x152a <__floatsisf+0x1c>
    153a:	fa f4       	brpl	.+62     	; 0x157a <__floatsisf+0x6c>
    153c:	bb 0f       	add	r27, r27
    153e:	11 f4       	brne	.+4      	; 0x1544 <__floatsisf+0x36>
    1540:	60 ff       	sbrs	r22, 0
    1542:	1b c0       	rjmp	.+54     	; 0x157a <__floatsisf+0x6c>
    1544:	6f 5f       	subi	r22, 0xFF	; 255
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	16 c0       	rjmp	.+44     	; 0x157a <__floatsisf+0x6c>
    154e:	88 23       	and	r24, r24
    1550:	11 f0       	breq	.+4      	; 0x1556 <__floatsisf+0x48>
    1552:	96 e9       	ldi	r25, 0x96	; 150
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <__floatsisf+0x6a>
    1556:	77 23       	and	r23, r23
    1558:	21 f0       	breq	.+8      	; 0x1562 <__floatsisf+0x54>
    155a:	9e e8       	ldi	r25, 0x8E	; 142
    155c:	87 2f       	mov	r24, r23
    155e:	76 2f       	mov	r23, r22
    1560:	05 c0       	rjmp	.+10     	; 0x156c <__floatsisf+0x5e>
    1562:	66 23       	and	r22, r22
    1564:	71 f0       	breq	.+28     	; 0x1582 <__floatsisf+0x74>
    1566:	96 e8       	ldi	r25, 0x86	; 134
    1568:	86 2f       	mov	r24, r22
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	2a f0       	brmi	.+10     	; 0x157a <__floatsisf+0x6c>
    1570:	9a 95       	dec	r25
    1572:	66 0f       	add	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	da f7       	brpl	.-10     	; 0x1570 <__floatsisf+0x62>
    157a:	88 0f       	add	r24, r24
    157c:	96 95       	lsr	r25
    157e:	87 95       	ror	r24
    1580:	97 f9       	bld	r25, 7
    1582:	08 95       	ret

00001584 <__fp_inf>:
    1584:	97 f9       	bld	r25, 7
    1586:	9f 67       	ori	r25, 0x7F	; 127
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	08 95       	ret

00001590 <__fp_nan>:
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	80 ec       	ldi	r24, 0xC0	; 192
    1594:	08 95       	ret

00001596 <__fp_pscA>:
    1596:	00 24       	eor	r0, r0
    1598:	0a 94       	dec	r0
    159a:	16 16       	cp	r1, r22
    159c:	17 06       	cpc	r1, r23
    159e:	18 06       	cpc	r1, r24
    15a0:	09 06       	cpc	r0, r25
    15a2:	08 95       	ret

000015a4 <__fp_pscB>:
    15a4:	00 24       	eor	r0, r0
    15a6:	0a 94       	dec	r0
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	14 06       	cpc	r1, r20
    15ae:	05 06       	cpc	r0, r21
    15b0:	08 95       	ret
    15b2:	ee cf       	rjmp	.-36     	; 0x1590 <__fp_nan>

000015b4 <__fp_rempio2>:
    15b4:	50 d0       	rcall	.+160    	; 0x1656 <__fp_splitA>
    15b6:	e8 f3       	brcs	.-6      	; 0x15b2 <__fp_pscB+0xe>
    15b8:	e8 94       	clt
    15ba:	e0 e0       	ldi	r30, 0x00	; 0
    15bc:	bb 27       	eor	r27, r27
    15be:	9f 57       	subi	r25, 0x7F	; 127
    15c0:	f0 f0       	brcs	.+60     	; 0x15fe <__fp_rempio2+0x4a>
    15c2:	2a ed       	ldi	r18, 0xDA	; 218
    15c4:	3f e0       	ldi	r19, 0x0F	; 15
    15c6:	49 ec       	ldi	r20, 0xC9	; 201
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <__fp_rempio2+0x22>
    15ca:	ee 0f       	add	r30, r30
    15cc:	bb 0f       	add	r27, r27
    15ce:	66 1f       	adc	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	28 f0       	brcs	.+10     	; 0x15e0 <__fp_rempio2+0x2c>
    15d6:	b2 3a       	cpi	r27, 0xA2	; 162
    15d8:	62 07       	cpc	r22, r18
    15da:	73 07       	cpc	r23, r19
    15dc:	84 07       	cpc	r24, r20
    15de:	28 f0       	brcs	.+10     	; 0x15ea <__fp_rempio2+0x36>
    15e0:	b2 5a       	subi	r27, 0xA2	; 162
    15e2:	62 0b       	sbc	r22, r18
    15e4:	73 0b       	sbc	r23, r19
    15e6:	84 0b       	sbc	r24, r20
    15e8:	e3 95       	inc	r30
    15ea:	9a 95       	dec	r25
    15ec:	72 f7       	brpl	.-36     	; 0x15ca <__fp_rempio2+0x16>
    15ee:	80 38       	cpi	r24, 0x80	; 128
    15f0:	30 f4       	brcc	.+12     	; 0x15fe <__fp_rempio2+0x4a>
    15f2:	9a 95       	dec	r25
    15f4:	bb 0f       	add	r27, r27
    15f6:	66 1f       	adc	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	d2 f7       	brpl	.-12     	; 0x15f2 <__fp_rempio2+0x3e>
    15fe:	90 48       	sbci	r25, 0x80	; 128
    1600:	6f c1       	rjmp	.+734    	; 0x18e0 <__fp_mpack_finite>

00001602 <__fp_round>:
    1602:	09 2e       	mov	r0, r25
    1604:	03 94       	inc	r0
    1606:	00 0c       	add	r0, r0
    1608:	11 f4       	brne	.+4      	; 0x160e <__fp_round+0xc>
    160a:	88 23       	and	r24, r24
    160c:	52 f0       	brmi	.+20     	; 0x1622 <__fp_round+0x20>
    160e:	bb 0f       	add	r27, r27
    1610:	40 f4       	brcc	.+16     	; 0x1622 <__fp_round+0x20>
    1612:	bf 2b       	or	r27, r31
    1614:	11 f4       	brne	.+4      	; 0x161a <__fp_round+0x18>
    1616:	60 ff       	sbrs	r22, 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__fp_round+0x20>
    161a:	6f 5f       	subi	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	08 95       	ret

00001624 <__fp_sinus>:
    1624:	ef 93       	push	r30
    1626:	e0 ff       	sbrs	r30, 0
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <__fp_sinus+0x12>
    162a:	a2 ea       	ldi	r26, 0xA2	; 162
    162c:	2a ed       	ldi	r18, 0xDA	; 218
    162e:	3f e0       	ldi	r19, 0x0F	; 15
    1630:	49 ec       	ldi	r20, 0xC9	; 201
    1632:	5f eb       	ldi	r21, 0xBF	; 191
    1634:	7b de       	rcall	.-778    	; 0x132c <__addsf3x>
    1636:	e5 df       	rcall	.-54     	; 0x1602 <__fp_round>
    1638:	0f 90       	pop	r0
    163a:	03 94       	inc	r0
    163c:	01 fc       	sbrc	r0, 1
    163e:	90 58       	subi	r25, 0x80	; 128
    1640:	ec e8       	ldi	r30, 0x8C	; 140
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	85 c1       	rjmp	.+778    	; 0x1950 <__fp_powsodd>

00001646 <__fp_split3>:
    1646:	57 fd       	sbrc	r21, 7
    1648:	90 58       	subi	r25, 0x80	; 128
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	59 f0       	breq	.+22     	; 0x1666 <__fp_splitA+0x10>
    1650:	5f 3f       	cpi	r21, 0xFF	; 255
    1652:	71 f0       	breq	.+28     	; 0x1670 <__fp_splitA+0x1a>
    1654:	47 95       	ror	r20

00001656 <__fp_splitA>:
    1656:	88 0f       	add	r24, r24
    1658:	97 fb       	bst	r25, 7
    165a:	99 1f       	adc	r25, r25
    165c:	61 f0       	breq	.+24     	; 0x1676 <__fp_splitA+0x20>
    165e:	9f 3f       	cpi	r25, 0xFF	; 255
    1660:	79 f0       	breq	.+30     	; 0x1680 <__fp_splitA+0x2a>
    1662:	87 95       	ror	r24
    1664:	08 95       	ret
    1666:	12 16       	cp	r1, r18
    1668:	13 06       	cpc	r1, r19
    166a:	14 06       	cpc	r1, r20
    166c:	55 1f       	adc	r21, r21
    166e:	f2 cf       	rjmp	.-28     	; 0x1654 <__fp_split3+0xe>
    1670:	46 95       	lsr	r20
    1672:	f1 df       	rcall	.-30     	; 0x1656 <__fp_splitA>
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <__fp_splitA+0x30>
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	99 1f       	adc	r25, r25
    167e:	f1 cf       	rjmp	.-30     	; 0x1662 <__fp_splitA+0xc>
    1680:	86 95       	lsr	r24
    1682:	71 05       	cpc	r23, r1
    1684:	61 05       	cpc	r22, r1
    1686:	08 94       	sec
    1688:	08 95       	ret

0000168a <__fp_zero>:
    168a:	e8 94       	clt

0000168c <__fp_szero>:
    168c:	bb 27       	eor	r27, r27
    168e:	66 27       	eor	r22, r22
    1690:	77 27       	eor	r23, r23
    1692:	cb 01       	movw	r24, r22
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret

00001698 <__mulsf3>:
    1698:	0b d0       	rcall	.+22     	; 0x16b0 <__mulsf3x>
    169a:	b3 cf       	rjmp	.-154    	; 0x1602 <__fp_round>
    169c:	7c df       	rcall	.-264    	; 0x1596 <__fp_pscA>
    169e:	28 f0       	brcs	.+10     	; 0x16aa <__mulsf3+0x12>
    16a0:	81 df       	rcall	.-254    	; 0x15a4 <__fp_pscB>
    16a2:	18 f0       	brcs	.+6      	; 0x16aa <__mulsf3+0x12>
    16a4:	95 23       	and	r25, r21
    16a6:	09 f0       	breq	.+2      	; 0x16aa <__mulsf3+0x12>
    16a8:	6d cf       	rjmp	.-294    	; 0x1584 <__fp_inf>
    16aa:	72 cf       	rjmp	.-284    	; 0x1590 <__fp_nan>
    16ac:	11 24       	eor	r1, r1
    16ae:	ee cf       	rjmp	.-36     	; 0x168c <__fp_szero>

000016b0 <__mulsf3x>:
    16b0:	ca df       	rcall	.-108    	; 0x1646 <__fp_split3>
    16b2:	a0 f3       	brcs	.-24     	; 0x169c <__mulsf3+0x4>

000016b4 <__mulsf3_pse>:
    16b4:	95 9f       	mul	r25, r21
    16b6:	d1 f3       	breq	.-12     	; 0x16ac <__mulsf3+0x14>
    16b8:	95 0f       	add	r25, r21
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	55 1f       	adc	r21, r21
    16be:	62 9f       	mul	r22, r18
    16c0:	f0 01       	movw	r30, r0
    16c2:	72 9f       	mul	r23, r18
    16c4:	bb 27       	eor	r27, r27
    16c6:	f0 0d       	add	r31, r0
    16c8:	b1 1d       	adc	r27, r1
    16ca:	63 9f       	mul	r22, r19
    16cc:	aa 27       	eor	r26, r26
    16ce:	f0 0d       	add	r31, r0
    16d0:	b1 1d       	adc	r27, r1
    16d2:	aa 1f       	adc	r26, r26
    16d4:	64 9f       	mul	r22, r20
    16d6:	66 27       	eor	r22, r22
    16d8:	b0 0d       	add	r27, r0
    16da:	a1 1d       	adc	r26, r1
    16dc:	66 1f       	adc	r22, r22
    16de:	82 9f       	mul	r24, r18
    16e0:	22 27       	eor	r18, r18
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	62 1f       	adc	r22, r18
    16e8:	73 9f       	mul	r23, r19
    16ea:	b0 0d       	add	r27, r0
    16ec:	a1 1d       	adc	r26, r1
    16ee:	62 1f       	adc	r22, r18
    16f0:	83 9f       	mul	r24, r19
    16f2:	a0 0d       	add	r26, r0
    16f4:	61 1d       	adc	r22, r1
    16f6:	22 1f       	adc	r18, r18
    16f8:	74 9f       	mul	r23, r20
    16fa:	33 27       	eor	r19, r19
    16fc:	a0 0d       	add	r26, r0
    16fe:	61 1d       	adc	r22, r1
    1700:	23 1f       	adc	r18, r19
    1702:	84 9f       	mul	r24, r20
    1704:	60 0d       	add	r22, r0
    1706:	21 1d       	adc	r18, r1
    1708:	82 2f       	mov	r24, r18
    170a:	76 2f       	mov	r23, r22
    170c:	6a 2f       	mov	r22, r26
    170e:	11 24       	eor	r1, r1
    1710:	9f 57       	subi	r25, 0x7F	; 127
    1712:	50 40       	sbci	r21, 0x00	; 0
    1714:	8a f0       	brmi	.+34     	; 0x1738 <__mulsf3_pse+0x84>
    1716:	e1 f0       	breq	.+56     	; 0x1750 <__mulsf3_pse+0x9c>
    1718:	88 23       	and	r24, r24
    171a:	4a f0       	brmi	.+18     	; 0x172e <__mulsf3_pse+0x7a>
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	bb 1f       	adc	r27, r27
    1722:	66 1f       	adc	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	88 1f       	adc	r24, r24
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	50 40       	sbci	r21, 0x00	; 0
    172c:	a9 f7       	brne	.-22     	; 0x1718 <__mulsf3_pse+0x64>
    172e:	9e 3f       	cpi	r25, 0xFE	; 254
    1730:	51 05       	cpc	r21, r1
    1732:	70 f0       	brcs	.+28     	; 0x1750 <__mulsf3_pse+0x9c>
    1734:	27 cf       	rjmp	.-434    	; 0x1584 <__fp_inf>
    1736:	aa cf       	rjmp	.-172    	; 0x168c <__fp_szero>
    1738:	5f 3f       	cpi	r21, 0xFF	; 255
    173a:	ec f3       	brlt	.-6      	; 0x1736 <__mulsf3_pse+0x82>
    173c:	98 3e       	cpi	r25, 0xE8	; 232
    173e:	dc f3       	brlt	.-10     	; 0x1736 <__mulsf3_pse+0x82>
    1740:	86 95       	lsr	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f7 95       	ror	r31
    174a:	e7 95       	ror	r30
    174c:	9f 5f       	subi	r25, 0xFF	; 255
    174e:	c1 f7       	brne	.-16     	; 0x1740 <__mulsf3_pse+0x8c>
    1750:	fe 2b       	or	r31, r30
    1752:	88 0f       	add	r24, r24
    1754:	91 1d       	adc	r25, r1
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <pow>:
    175e:	fa 01       	movw	r30, r20
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	30 96       	adiw	r30, 0x00	; 0
    1766:	21 05       	cpc	r18, r1
    1768:	31 05       	cpc	r19, r1
    176a:	99 f1       	breq	.+102    	; 0x17d2 <pow+0x74>
    176c:	61 15       	cp	r22, r1
    176e:	71 05       	cpc	r23, r1
    1770:	61 f4       	brne	.+24     	; 0x178a <pow+0x2c>
    1772:	80 38       	cpi	r24, 0x80	; 128
    1774:	bf e3       	ldi	r27, 0x3F	; 63
    1776:	9b 07       	cpc	r25, r27
    1778:	49 f1       	breq	.+82     	; 0x17cc <pow+0x6e>
    177a:	68 94       	set
    177c:	90 38       	cpi	r25, 0x80	; 128
    177e:	81 05       	cpc	r24, r1
    1780:	61 f0       	breq	.+24     	; 0x179a <pow+0x3c>
    1782:	80 38       	cpi	r24, 0x80	; 128
    1784:	bf ef       	ldi	r27, 0xFF	; 255
    1786:	9b 07       	cpc	r25, r27
    1788:	41 f0       	breq	.+16     	; 0x179a <pow+0x3c>
    178a:	99 23       	and	r25, r25
    178c:	42 f5       	brpl	.+80     	; 0x17de <pow+0x80>
    178e:	ff 3f       	cpi	r31, 0xFF	; 255
    1790:	e1 05       	cpc	r30, r1
    1792:	31 05       	cpc	r19, r1
    1794:	21 05       	cpc	r18, r1
    1796:	11 f1       	breq	.+68     	; 0x17dc <pow+0x7e>
    1798:	e8 94       	clt
    179a:	08 94       	sec
    179c:	e7 95       	ror	r30
    179e:	d9 01       	movw	r26, r18
    17a0:	aa 23       	and	r26, r26
    17a2:	29 f4       	brne	.+10     	; 0x17ae <pow+0x50>
    17a4:	ab 2f       	mov	r26, r27
    17a6:	be 2f       	mov	r27, r30
    17a8:	f8 5f       	subi	r31, 0xF8	; 248
    17aa:	d0 f3       	brcs	.-12     	; 0x17a0 <pow+0x42>
    17ac:	10 c0       	rjmp	.+32     	; 0x17ce <pow+0x70>
    17ae:	ff 5f       	subi	r31, 0xFF	; 255
    17b0:	70 f4       	brcc	.+28     	; 0x17ce <pow+0x70>
    17b2:	a6 95       	lsr	r26
    17b4:	e0 f7       	brcc	.-8      	; 0x17ae <pow+0x50>
    17b6:	f7 39       	cpi	r31, 0x97	; 151
    17b8:	50 f0       	brcs	.+20     	; 0x17ce <pow+0x70>
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <pow+0x64>
    17bc:	ff 3a       	cpi	r31, 0xAF	; 175
    17be:	38 f4       	brcc	.+14     	; 0x17ce <pow+0x70>
    17c0:	9f 77       	andi	r25, 0x7F	; 127
    17c2:	9f 93       	push	r25
    17c4:	0c d0       	rcall	.+24     	; 0x17de <pow+0x80>
    17c6:	0f 90       	pop	r0
    17c8:	07 fc       	sbrc	r0, 7
    17ca:	90 58       	subi	r25, 0x80	; 128
    17cc:	08 95       	ret
    17ce:	3e f0       	brts	.+14     	; 0x17de <pow+0x80>
    17d0:	df ce       	rjmp	.-578    	; 0x1590 <__fp_nan>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	80 e8       	ldi	r24, 0x80	; 128
    17d8:	9f e3       	ldi	r25, 0x3F	; 63
    17da:	08 95       	ret
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	9f 77       	andi	r25, 0x7F	; 127
    17e0:	5f 93       	push	r21
    17e2:	4f 93       	push	r20
    17e4:	3f 93       	push	r19
    17e6:	2f 93       	push	r18
    17e8:	06 d1       	rcall	.+524    	; 0x19f6 <log>
    17ea:	2f 91       	pop	r18
    17ec:	3f 91       	pop	r19
    17ee:	4f 91       	pop	r20
    17f0:	5f 91       	pop	r21
    17f2:	52 df       	rcall	.-348    	; 0x1698 <__mulsf3>
    17f4:	47 c0       	rjmp	.+142    	; 0x1884 <exp>
    17f6:	11 f4       	brne	.+4      	; 0x17fc <pow+0x9e>
    17f8:	0e f4       	brtc	.+2      	; 0x17fc <pow+0x9e>
    17fa:	ca ce       	rjmp	.-620    	; 0x1590 <__fp_nan>
    17fc:	6f c0       	rjmp	.+222    	; 0x18dc <__fp_mpack>

000017fe <sqrt>:
    17fe:	2b df       	rcall	.-426    	; 0x1656 <__fp_splitA>
    1800:	d0 f3       	brcs	.-12     	; 0x17f6 <pow+0x98>
    1802:	99 23       	and	r25, r25
    1804:	d9 f3       	breq	.-10     	; 0x17fc <pow+0x9e>
    1806:	ce f3       	brts	.-14     	; 0x17fa <pow+0x9c>
    1808:	9f 57       	subi	r25, 0x7F	; 127
    180a:	55 0b       	sbc	r21, r21
    180c:	87 ff       	sbrs	r24, 7
    180e:	74 d0       	rcall	.+232    	; 0x18f8 <__fp_norm2>
    1810:	00 24       	eor	r0, r0
    1812:	a0 e6       	ldi	r26, 0x60	; 96
    1814:	40 ea       	ldi	r20, 0xA0	; 160
    1816:	90 01       	movw	r18, r0
    1818:	80 58       	subi	r24, 0x80	; 128
    181a:	56 95       	lsr	r21
    181c:	97 95       	ror	r25
    181e:	28 f4       	brcc	.+10     	; 0x182a <sqrt+0x2c>
    1820:	80 5c       	subi	r24, 0xC0	; 192
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	20 f0       	brcs	.+8      	; 0x1832 <sqrt+0x34>
    182a:	26 17       	cp	r18, r22
    182c:	37 07       	cpc	r19, r23
    182e:	48 07       	cpc	r20, r24
    1830:	30 f4       	brcc	.+12     	; 0x183e <sqrt+0x40>
    1832:	62 1b       	sub	r22, r18
    1834:	73 0b       	sbc	r23, r19
    1836:	84 0b       	sbc	r24, r20
    1838:	20 29       	or	r18, r0
    183a:	31 29       	or	r19, r1
    183c:	4a 2b       	or	r20, r26
    183e:	a6 95       	lsr	r26
    1840:	17 94       	ror	r1
    1842:	07 94       	ror	r0
    1844:	20 25       	eor	r18, r0
    1846:	31 25       	eor	r19, r1
    1848:	4a 27       	eor	r20, r26
    184a:	58 f7       	brcc	.-42     	; 0x1822 <sqrt+0x24>
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	20 f0       	brcs	.+8      	; 0x185c <sqrt+0x5e>
    1854:	26 17       	cp	r18, r22
    1856:	37 07       	cpc	r19, r23
    1858:	48 07       	cpc	r20, r24
    185a:	30 f4       	brcc	.+12     	; 0x1868 <sqrt+0x6a>
    185c:	62 0b       	sbc	r22, r18
    185e:	73 0b       	sbc	r23, r19
    1860:	84 0b       	sbc	r24, r20
    1862:	20 0d       	add	r18, r0
    1864:	31 1d       	adc	r19, r1
    1866:	41 1d       	adc	r20, r1
    1868:	a0 95       	com	r26
    186a:	81 f7       	brne	.-32     	; 0x184c <sqrt+0x4e>
    186c:	b9 01       	movw	r22, r18
    186e:	84 2f       	mov	r24, r20
    1870:	91 58       	subi	r25, 0x81	; 129
    1872:	88 0f       	add	r24, r24
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	08 95       	ret
    187a:	19 f4       	brne	.+6      	; 0x1882 <sqrt+0x84>
    187c:	0e f0       	brts	.+2      	; 0x1880 <sqrt+0x82>
    187e:	82 ce       	rjmp	.-764    	; 0x1584 <__fp_inf>
    1880:	04 cf       	rjmp	.-504    	; 0x168a <__fp_zero>
    1882:	86 ce       	rjmp	.-756    	; 0x1590 <__fp_nan>

00001884 <exp>:
    1884:	e8 de       	rcall	.-560    	; 0x1656 <__fp_splitA>
    1886:	c8 f3       	brcs	.-14     	; 0x187a <sqrt+0x7c>
    1888:	96 38       	cpi	r25, 0x86	; 134
    188a:	c0 f7       	brcc	.-16     	; 0x187c <sqrt+0x7e>
    188c:	07 f8       	bld	r0, 7
    188e:	0f 92       	push	r0
    1890:	e8 94       	clt
    1892:	2b e3       	ldi	r18, 0x3B	; 59
    1894:	3a ea       	ldi	r19, 0xAA	; 170
    1896:	48 eb       	ldi	r20, 0xB8	; 184
    1898:	5f e7       	ldi	r21, 0x7F	; 127
    189a:	0c df       	rcall	.-488    	; 0x16b4 <__mulsf3_pse>
    189c:	0f 92       	push	r0
    189e:	0f 92       	push	r0
    18a0:	0f 92       	push	r0
    18a2:	4d b7       	in	r20, 0x3d	; 61
    18a4:	5e b7       	in	r21, 0x3e	; 62
    18a6:	0f 92       	push	r0
    18a8:	e6 d0       	rcall	.+460    	; 0x1a76 <modf>
    18aa:	ea ea       	ldi	r30, 0xAA	; 170
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	2b d0       	rcall	.+86     	; 0x1906 <__fp_powser>
    18b0:	4f 91       	pop	r20
    18b2:	5f 91       	pop	r21
    18b4:	ef 91       	pop	r30
    18b6:	ff 91       	pop	r31
    18b8:	e5 95       	asr	r30
    18ba:	ee 1f       	adc	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	49 f0       	breq	.+18     	; 0x18d2 <exp+0x4e>
    18c0:	fe 57       	subi	r31, 0x7E	; 126
    18c2:	e0 68       	ori	r30, 0x80	; 128
    18c4:	44 27       	eor	r20, r20
    18c6:	ee 0f       	add	r30, r30
    18c8:	44 1f       	adc	r20, r20
    18ca:	fa 95       	dec	r31
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <exp+0x42>
    18ce:	41 95       	neg	r20
    18d0:	55 0b       	sbc	r21, r21
    18d2:	58 d0       	rcall	.+176    	; 0x1984 <ldexp>
    18d4:	0f 90       	pop	r0
    18d6:	07 fe       	sbrs	r0, 7
    18d8:	4c c0       	rjmp	.+152    	; 0x1972 <inverse>
    18da:	08 95       	ret

000018dc <__fp_mpack>:
    18dc:	9f 3f       	cpi	r25, 0xFF	; 255
    18de:	31 f0       	breq	.+12     	; 0x18ec <__fp_mpack_finite+0xc>

000018e0 <__fp_mpack_finite>:
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	20 f4       	brcc	.+8      	; 0x18ec <__fp_mpack_finite+0xc>
    18e4:	87 95       	ror	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	b7 95       	ror	r27
    18ec:	88 0f       	add	r24, r24
    18ee:	91 1d       	adc	r25, r1
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret

000018f8 <__fp_norm2>:
    18f8:	91 50       	subi	r25, 0x01	; 1
    18fa:	50 40       	sbci	r21, 0x00	; 0
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	d2 f7       	brpl	.-12     	; 0x18f8 <__fp_norm2>
    1904:	08 95       	ret

00001906 <__fp_powser>:
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	1f 93       	push	r17
    190c:	0f 93       	push	r16
    190e:	ff 92       	push	r15
    1910:	ef 92       	push	r14
    1912:	df 92       	push	r13
    1914:	7b 01       	movw	r14, r22
    1916:	8c 01       	movw	r16, r24
    1918:	68 94       	set
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <__fp_powser+0x20>
    191c:	da 2e       	mov	r13, r26
    191e:	ef 01       	movw	r28, r30
    1920:	c7 de       	rcall	.-626    	; 0x16b0 <__mulsf3x>
    1922:	fe 01       	movw	r30, r28
    1924:	e8 94       	clt
    1926:	a5 91       	lpm	r26, Z+
    1928:	25 91       	lpm	r18, Z+
    192a:	35 91       	lpm	r19, Z+
    192c:	45 91       	lpm	r20, Z+
    192e:	55 91       	lpm	r21, Z+
    1930:	ae f3       	brts	.-22     	; 0x191c <__fp_powser+0x16>
    1932:	ef 01       	movw	r28, r30
    1934:	fb dc       	rcall	.-1546   	; 0x132c <__addsf3x>
    1936:	fe 01       	movw	r30, r28
    1938:	97 01       	movw	r18, r14
    193a:	a8 01       	movw	r20, r16
    193c:	da 94       	dec	r13
    193e:	79 f7       	brne	.-34     	; 0x191e <__fp_powser+0x18>
    1940:	df 90       	pop	r13
    1942:	ef 90       	pop	r14
    1944:	ff 90       	pop	r15
    1946:	0f 91       	pop	r16
    1948:	1f 91       	pop	r17
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <__fp_powsodd>:
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	7f 93       	push	r23
    1956:	6f 93       	push	r22
    1958:	ff 93       	push	r31
    195a:	ef 93       	push	r30
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	9b de       	rcall	.-714    	; 0x1698 <__mulsf3>
    1962:	ef 91       	pop	r30
    1964:	ff 91       	pop	r31
    1966:	cf df       	rcall	.-98     	; 0x1906 <__fp_powser>
    1968:	2f 91       	pop	r18
    196a:	3f 91       	pop	r19
    196c:	4f 91       	pop	r20
    196e:	5f 91       	pop	r21
    1970:	93 ce       	rjmp	.-730    	; 0x1698 <__mulsf3>

00001972 <inverse>:
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e8       	ldi	r24, 0x80	; 128
    197c:	9f e3       	ldi	r25, 0x3F	; 63
    197e:	2c cd       	rjmp	.-1448   	; 0x13d8 <__divsf3>
    1980:	01 ce       	rjmp	.-1022   	; 0x1584 <__fp_inf>
    1982:	ac cf       	rjmp	.-168    	; 0x18dc <__fp_mpack>

00001984 <ldexp>:
    1984:	68 de       	rcall	.-816    	; 0x1656 <__fp_splitA>
    1986:	e8 f3       	brcs	.-6      	; 0x1982 <inverse+0x10>
    1988:	99 23       	and	r25, r25
    198a:	d9 f3       	breq	.-10     	; 0x1982 <inverse+0x10>
    198c:	94 0f       	add	r25, r20
    198e:	51 1d       	adc	r21, r1
    1990:	bb f3       	brvs	.-18     	; 0x1980 <inverse+0xe>
    1992:	91 50       	subi	r25, 0x01	; 1
    1994:	50 40       	sbci	r21, 0x00	; 0
    1996:	94 f0       	brlt	.+36     	; 0x19bc <ldexp+0x38>
    1998:	59 f0       	breq	.+22     	; 0x19b0 <ldexp+0x2c>
    199a:	88 23       	and	r24, r24
    199c:	32 f0       	brmi	.+12     	; 0x19aa <ldexp+0x26>
    199e:	66 0f       	add	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	88 1f       	adc	r24, r24
    19a4:	91 50       	subi	r25, 0x01	; 1
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	c1 f7       	brne	.-16     	; 0x199a <ldexp+0x16>
    19aa:	9e 3f       	cpi	r25, 0xFE	; 254
    19ac:	51 05       	cpc	r21, r1
    19ae:	44 f7       	brge	.-48     	; 0x1980 <inverse+0xe>
    19b0:	88 0f       	add	r24, r24
    19b2:	91 1d       	adc	r25, r1
    19b4:	96 95       	lsr	r25
    19b6:	87 95       	ror	r24
    19b8:	97 f9       	bld	r25, 7
    19ba:	08 95       	ret
    19bc:	5f 3f       	cpi	r21, 0xFF	; 255
    19be:	ac f0       	brlt	.+42     	; 0x19ea <ldexp+0x66>
    19c0:	98 3e       	cpi	r25, 0xE8	; 232
    19c2:	9c f0       	brlt	.+38     	; 0x19ea <ldexp+0x66>
    19c4:	bb 27       	eor	r27, r27
    19c6:	86 95       	lsr	r24
    19c8:	77 95       	ror	r23
    19ca:	67 95       	ror	r22
    19cc:	b7 95       	ror	r27
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <ldexp+0x4e>
    19d0:	b1 60       	ori	r27, 0x01	; 1
    19d2:	93 95       	inc	r25
    19d4:	c1 f7       	brne	.-16     	; 0x19c6 <ldexp+0x42>
    19d6:	bb 0f       	add	r27, r27
    19d8:	58 f7       	brcc	.-42     	; 0x19b0 <ldexp+0x2c>
    19da:	11 f4       	brne	.+4      	; 0x19e0 <ldexp+0x5c>
    19dc:	60 ff       	sbrs	r22, 0
    19de:	e8 cf       	rjmp	.-48     	; 0x19b0 <ldexp+0x2c>
    19e0:	6f 5f       	subi	r22, 0xFF	; 255
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	8f 4f       	sbci	r24, 0xFF	; 255
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	e3 cf       	rjmp	.-58     	; 0x19b0 <ldexp+0x2c>
    19ea:	50 ce       	rjmp	.-864    	; 0x168c <__fp_szero>
    19ec:	0e f0       	brts	.+2      	; 0x19f0 <ldexp+0x6c>
    19ee:	76 cf       	rjmp	.-276    	; 0x18dc <__fp_mpack>
    19f0:	cf cd       	rjmp	.-1122   	; 0x1590 <__fp_nan>
    19f2:	68 94       	set
    19f4:	c7 cd       	rjmp	.-1138   	; 0x1584 <__fp_inf>

000019f6 <log>:
    19f6:	2f de       	rcall	.-930    	; 0x1656 <__fp_splitA>
    19f8:	c8 f3       	brcs	.-14     	; 0x19ec <ldexp+0x68>
    19fa:	99 23       	and	r25, r25
    19fc:	d1 f3       	breq	.-12     	; 0x19f2 <ldexp+0x6e>
    19fe:	c6 f3       	brts	.-16     	; 0x19f0 <ldexp+0x6c>
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	1f 93       	push	r17
    1a06:	0f 93       	push	r16
    1a08:	ff 92       	push	r15
    1a0a:	c9 2f       	mov	r28, r25
    1a0c:	dd 27       	eor	r29, r29
    1a0e:	88 23       	and	r24, r24
    1a10:	2a f0       	brmi	.+10     	; 0x1a1c <log+0x26>
    1a12:	21 97       	sbiw	r28, 0x01	; 1
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	da f7       	brpl	.-10     	; 0x1a12 <log+0x1c>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f eb       	ldi	r21, 0xBF	; 191
    1a24:	9f e3       	ldi	r25, 0x3F	; 63
    1a26:	88 39       	cpi	r24, 0x98	; 152
    1a28:	20 f0       	brcs	.+8      	; 0x1a32 <log+0x3c>
    1a2a:	80 3e       	cpi	r24, 0xE0	; 224
    1a2c:	30 f0       	brcs	.+12     	; 0x1a3a <log+0x44>
    1a2e:	21 96       	adiw	r28, 0x01	; 1
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	6b dc       	rcall	.-1834   	; 0x130a <__addsf3>
    1a34:	e2 ed       	ldi	r30, 0xD2	; 210
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <log+0x4a>
    1a3a:	67 dc       	rcall	.-1842   	; 0x130a <__addsf3>
    1a3c:	ef ef       	ldi	r30, 0xFF	; 255
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	62 df       	rcall	.-316    	; 0x1906 <__fp_powser>
    1a42:	8b 01       	movw	r16, r22
    1a44:	be 01       	movw	r22, r28
    1a46:	ec 01       	movw	r28, r24
    1a48:	fb 2e       	mov	r15, r27
    1a4a:	6f 57       	subi	r22, 0x7F	; 127
    1a4c:	71 09       	sbc	r23, r1
    1a4e:	75 95       	asr	r23
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 0b       	sbc	r24, r24
    1a54:	99 0b       	sbc	r25, r25
    1a56:	5b dd       	rcall	.-1354   	; 0x150e <__floatsisf>
    1a58:	28 e1       	ldi	r18, 0x18	; 24
    1a5a:	32 e7       	ldi	r19, 0x72	; 114
    1a5c:	41 e3       	ldi	r20, 0x31	; 49
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	27 de       	rcall	.-946    	; 0x16b0 <__mulsf3x>
    1a62:	af 2d       	mov	r26, r15
    1a64:	98 01       	movw	r18, r16
    1a66:	ae 01       	movw	r20, r28
    1a68:	ff 90       	pop	r15
    1a6a:	0f 91       	pop	r16
    1a6c:	1f 91       	pop	r17
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	5c dc       	rcall	.-1864   	; 0x132c <__addsf3x>
    1a74:	c6 cd       	rjmp	.-1140   	; 0x1602 <__fp_round>

00001a76 <modf>:
    1a76:	fa 01       	movw	r30, r20
    1a78:	dc 01       	movw	r26, r24
    1a7a:	aa 0f       	add	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	bf 57       	subi	r27, 0x7F	; 127
    1a84:	28 f4       	brcc	.+10     	; 0x1a90 <modf+0x1a>
    1a86:	22 27       	eor	r18, r18
    1a88:	33 27       	eor	r19, r19
    1a8a:	44 27       	eor	r20, r20
    1a8c:	50 78       	andi	r21, 0x80	; 128
    1a8e:	1f c0       	rjmp	.+62     	; 0x1ace <modf+0x58>
    1a90:	b7 51       	subi	r27, 0x17	; 23
    1a92:	88 f4       	brcc	.+34     	; 0x1ab6 <modf+0x40>
    1a94:	ab 2f       	mov	r26, r27
    1a96:	00 24       	eor	r0, r0
    1a98:	46 95       	lsr	r20
    1a9a:	37 95       	ror	r19
    1a9c:	27 95       	ror	r18
    1a9e:	01 1c       	adc	r0, r1
    1aa0:	a3 95       	inc	r26
    1aa2:	d2 f3       	brmi	.-12     	; 0x1a98 <modf+0x22>
    1aa4:	00 20       	and	r0, r0
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <modf+0x4c>
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	44 1f       	adc	r20, r20
    1aae:	b3 95       	inc	r27
    1ab0:	da f3       	brmi	.-10     	; 0x1aa8 <modf+0x32>
    1ab2:	0d d0       	rcall	.+26     	; 0x1ace <modf+0x58>
    1ab4:	29 cc       	rjmp	.-1966   	; 0x1308 <__subsf3>
    1ab6:	61 30       	cpi	r22, 0x01	; 1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	a0 e8       	ldi	r26, 0x80	; 128
    1abc:	8a 07       	cpc	r24, r26
    1abe:	b9 46       	sbci	r27, 0x69	; 105
    1ac0:	30 f4       	brcc	.+12     	; 0x1ace <modf+0x58>
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	66 27       	eor	r22, r22
    1ac8:	77 27       	eor	r23, r23
    1aca:	88 27       	eor	r24, r24
    1acc:	90 78       	andi	r25, 0x80	; 128
    1ace:	30 96       	adiw	r30, 0x00	; 0
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <modf+0x64>
    1ad2:	20 83       	st	Z, r18
    1ad4:	31 83       	std	Z+1, r19	; 0x01
    1ad6:	42 83       	std	Z+2, r20	; 0x02
    1ad8:	53 83       	std	Z+3, r21	; 0x03
    1ada:	08 95       	ret

00001adc <__divmodhi4>:
    1adc:	97 fb       	bst	r25, 7
    1ade:	07 2e       	mov	r0, r23
    1ae0:	16 f4       	brtc	.+4      	; 0x1ae6 <__divmodhi4+0xa>
    1ae2:	00 94       	com	r0
    1ae4:	06 d0       	rcall	.+12     	; 0x1af2 <__divmodhi4_neg1>
    1ae6:	77 fd       	sbrc	r23, 7
    1ae8:	08 d0       	rcall	.+16     	; 0x1afa <__divmodhi4_neg2>
    1aea:	0b d0       	rcall	.+22     	; 0x1b02 <__udivmodhi4>
    1aec:	07 fc       	sbrc	r0, 7
    1aee:	05 d0       	rcall	.+10     	; 0x1afa <__divmodhi4_neg2>
    1af0:	3e f4       	brtc	.+14     	; 0x1b00 <__divmodhi4_exit>

00001af2 <__divmodhi4_neg1>:
    1af2:	90 95       	com	r25
    1af4:	81 95       	neg	r24
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	08 95       	ret

00001afa <__divmodhi4_neg2>:
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255

00001b00 <__divmodhi4_exit>:
    1b00:	08 95       	ret

00001b02 <__udivmodhi4>:
    1b02:	aa 1b       	sub	r26, r26
    1b04:	bb 1b       	sub	r27, r27
    1b06:	51 e1       	ldi	r21, 0x11	; 17
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <__udivmodhi4_ep>

00001b0a <__udivmodhi4_loop>:
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	a6 17       	cp	r26, r22
    1b10:	b7 07       	cpc	r27, r23
    1b12:	10 f0       	brcs	.+4      	; 0x1b18 <__udivmodhi4_ep>
    1b14:	a6 1b       	sub	r26, r22
    1b16:	b7 0b       	sbc	r27, r23

00001b18 <__udivmodhi4_ep>:
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	5a 95       	dec	r21
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__udivmodhi4_loop>
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	08 95       	ret

00001b2a <calloc>:
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	86 9f       	mul	r24, r22
    1b34:	80 01       	movw	r16, r0
    1b36:	87 9f       	mul	r24, r23
    1b38:	10 0d       	add	r17, r0
    1b3a:	96 9f       	mul	r25, r22
    1b3c:	10 0d       	add	r17, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	c8 01       	movw	r24, r16
    1b42:	0d d0       	rcall	.+26     	; 0x1b5e <malloc>
    1b44:	ec 01       	movw	r28, r24
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	21 f0       	breq	.+8      	; 0x1b52 <calloc+0x28>
    1b4a:	a8 01       	movw	r20, r16
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	4a d1       	rcall	.+660    	; 0x1de6 <memset>
    1b52:	ce 01       	movw	r24, r28
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	08 95       	ret

00001b5e <malloc>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	91 05       	cpc	r25, r1
    1b66:	10 f4       	brcc	.+4      	; 0x1b6c <malloc+0xe>
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	e0 91 48 03 	lds	r30, 0x0348
    1b70:	f0 91 49 03 	lds	r31, 0x0349
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	39 f1       	breq	.+78     	; 0x1bce <malloc+0x70>
    1b80:	40 81       	ld	r20, Z
    1b82:	51 81       	ldd	r21, Z+1	; 0x01
    1b84:	48 17       	cp	r20, r24
    1b86:	59 07       	cpc	r21, r25
    1b88:	b8 f0       	brcs	.+46     	; 0x1bb8 <malloc+0x5a>
    1b8a:	48 17       	cp	r20, r24
    1b8c:	59 07       	cpc	r21, r25
    1b8e:	71 f4       	brne	.+28     	; 0x1bac <malloc+0x4e>
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	10 97       	sbiw	r26, 0x00	; 0
    1b96:	29 f0       	breq	.+10     	; 0x1ba2 <malloc+0x44>
    1b98:	13 96       	adiw	r26, 0x03	; 3
    1b9a:	9c 93       	st	X, r25
    1b9c:	8e 93       	st	-X, r24
    1b9e:	12 97       	sbiw	r26, 0x02	; 2
    1ba0:	2c c0       	rjmp	.+88     	; 0x1bfa <malloc+0x9c>
    1ba2:	90 93 49 03 	sts	0x0349, r25
    1ba6:	80 93 48 03 	sts	0x0348, r24
    1baa:	27 c0       	rjmp	.+78     	; 0x1bfa <malloc+0x9c>
    1bac:	21 15       	cp	r18, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <malloc+0x60>
    1bb2:	42 17       	cp	r20, r18
    1bb4:	53 07       	cpc	r21, r19
    1bb6:	18 f0       	brcs	.+6      	; 0x1bbe <malloc+0x60>
    1bb8:	a9 01       	movw	r20, r18
    1bba:	db 01       	movw	r26, r22
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <malloc+0x62>
    1bbe:	ef 01       	movw	r28, r30
    1bc0:	9a 01       	movw	r18, r20
    1bc2:	bd 01       	movw	r22, r26
    1bc4:	df 01       	movw	r26, r30
    1bc6:	02 80       	ldd	r0, Z+2	; 0x02
    1bc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1bca:	e0 2d       	mov	r30, r0
    1bcc:	d7 cf       	rjmp	.-82     	; 0x1b7c <malloc+0x1e>
    1bce:	21 15       	cp	r18, r1
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	f9 f0       	breq	.+62     	; 0x1c12 <malloc+0xb4>
    1bd4:	28 1b       	sub	r18, r24
    1bd6:	39 0b       	sbc	r19, r25
    1bd8:	24 30       	cpi	r18, 0x04	; 4
    1bda:	31 05       	cpc	r19, r1
    1bdc:	80 f4       	brcc	.+32     	; 0x1bfe <malloc+0xa0>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	61 15       	cp	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <malloc+0x92>
    1be8:	fb 01       	movw	r30, r22
    1bea:	93 83       	std	Z+3, r25	; 0x03
    1bec:	82 83       	std	Z+2, r24	; 0x02
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <malloc+0x9a>
    1bf0:	90 93 49 03 	sts	0x0349, r25
    1bf4:	80 93 48 03 	sts	0x0348, r24
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	32 96       	adiw	r30, 0x02	; 2
    1bfc:	44 c0       	rjmp	.+136    	; 0x1c86 <malloc+0x128>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e2 0f       	add	r30, r18
    1c02:	f3 1f       	adc	r31, r19
    1c04:	81 93       	st	Z+, r24
    1c06:	91 93       	st	Z+, r25
    1c08:	22 50       	subi	r18, 0x02	; 2
    1c0a:	31 09       	sbc	r19, r1
    1c0c:	39 83       	std	Y+1, r19	; 0x01
    1c0e:	28 83       	st	Y, r18
    1c10:	3a c0       	rjmp	.+116    	; 0x1c86 <malloc+0x128>
    1c12:	20 91 46 03 	lds	r18, 0x0346
    1c16:	30 91 47 03 	lds	r19, 0x0347
    1c1a:	23 2b       	or	r18, r19
    1c1c:	41 f4       	brne	.+16     	; 0x1c2e <malloc+0xd0>
    1c1e:	20 91 02 01 	lds	r18, 0x0102
    1c22:	30 91 03 01 	lds	r19, 0x0103
    1c26:	30 93 47 03 	sts	0x0347, r19
    1c2a:	20 93 46 03 	sts	0x0346, r18
    1c2e:	20 91 00 01 	lds	r18, 0x0100
    1c32:	30 91 01 01 	lds	r19, 0x0101
    1c36:	21 15       	cp	r18, r1
    1c38:	31 05       	cpc	r19, r1
    1c3a:	41 f4       	brne	.+16     	; 0x1c4c <malloc+0xee>
    1c3c:	2d b7       	in	r18, 0x3d	; 61
    1c3e:	3e b7       	in	r19, 0x3e	; 62
    1c40:	40 91 04 01 	lds	r20, 0x0104
    1c44:	50 91 05 01 	lds	r21, 0x0105
    1c48:	24 1b       	sub	r18, r20
    1c4a:	35 0b       	sbc	r19, r21
    1c4c:	e0 91 46 03 	lds	r30, 0x0346
    1c50:	f0 91 47 03 	lds	r31, 0x0347
    1c54:	e2 17       	cp	r30, r18
    1c56:	f3 07       	cpc	r31, r19
    1c58:	a0 f4       	brcc	.+40     	; 0x1c82 <malloc+0x124>
    1c5a:	2e 1b       	sub	r18, r30
    1c5c:	3f 0b       	sbc	r19, r31
    1c5e:	28 17       	cp	r18, r24
    1c60:	39 07       	cpc	r19, r25
    1c62:	78 f0       	brcs	.+30     	; 0x1c82 <malloc+0x124>
    1c64:	ac 01       	movw	r20, r24
    1c66:	4e 5f       	subi	r20, 0xFE	; 254
    1c68:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6a:	24 17       	cp	r18, r20
    1c6c:	35 07       	cpc	r19, r21
    1c6e:	48 f0       	brcs	.+18     	; 0x1c82 <malloc+0x124>
    1c70:	4e 0f       	add	r20, r30
    1c72:	5f 1f       	adc	r21, r31
    1c74:	50 93 47 03 	sts	0x0347, r21
    1c78:	40 93 46 03 	sts	0x0346, r20
    1c7c:	81 93       	st	Z+, r24
    1c7e:	91 93       	st	Z+, r25
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <malloc+0x128>
    1c82:	e0 e0       	ldi	r30, 0x00	; 0
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	cf 01       	movw	r24, r30
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <free>:
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <free+0xa>
    1c96:	87 c0       	rjmp	.+270    	; 0x1da6 <free+0x118>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	32 97       	sbiw	r30, 0x02	; 2
    1c9c:	13 82       	std	Z+3, r1	; 0x03
    1c9e:	12 82       	std	Z+2, r1	; 0x02
    1ca0:	c0 91 48 03 	lds	r28, 0x0348
    1ca4:	d0 91 49 03 	lds	r29, 0x0349
    1ca8:	20 97       	sbiw	r28, 0x00	; 0
    1caa:	81 f4       	brne	.+32     	; 0x1ccc <free+0x3e>
    1cac:	20 81       	ld	r18, Z
    1cae:	31 81       	ldd	r19, Z+1	; 0x01
    1cb0:	28 0f       	add	r18, r24
    1cb2:	39 1f       	adc	r19, r25
    1cb4:	80 91 46 03 	lds	r24, 0x0346
    1cb8:	90 91 47 03 	lds	r25, 0x0347
    1cbc:	82 17       	cp	r24, r18
    1cbe:	93 07       	cpc	r25, r19
    1cc0:	79 f5       	brne	.+94     	; 0x1d20 <free+0x92>
    1cc2:	f0 93 47 03 	sts	0x0347, r31
    1cc6:	e0 93 46 03 	sts	0x0346, r30
    1cca:	6d c0       	rjmp	.+218    	; 0x1da6 <free+0x118>
    1ccc:	de 01       	movw	r26, r28
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	ae 17       	cp	r26, r30
    1cd4:	bf 07       	cpc	r27, r31
    1cd6:	50 f4       	brcc	.+20     	; 0x1cec <free+0x5e>
    1cd8:	12 96       	adiw	r26, 0x02	; 2
    1cda:	4d 91       	ld	r20, X+
    1cdc:	5c 91       	ld	r21, X
    1cde:	13 97       	sbiw	r26, 0x03	; 3
    1ce0:	9d 01       	movw	r18, r26
    1ce2:	41 15       	cp	r20, r1
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	09 f1       	breq	.+66     	; 0x1d2a <free+0x9c>
    1ce8:	da 01       	movw	r26, r20
    1cea:	f3 cf       	rjmp	.-26     	; 0x1cd2 <free+0x44>
    1cec:	b3 83       	std	Z+3, r27	; 0x03
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	40 81       	ld	r20, Z
    1cf2:	51 81       	ldd	r21, Z+1	; 0x01
    1cf4:	84 0f       	add	r24, r20
    1cf6:	95 1f       	adc	r25, r21
    1cf8:	8a 17       	cp	r24, r26
    1cfa:	9b 07       	cpc	r25, r27
    1cfc:	71 f4       	brne	.+28     	; 0x1d1a <free+0x8c>
    1cfe:	8d 91       	ld	r24, X+
    1d00:	9c 91       	ld	r25, X
    1d02:	11 97       	sbiw	r26, 0x01	; 1
    1d04:	84 0f       	add	r24, r20
    1d06:	95 1f       	adc	r25, r21
    1d08:	02 96       	adiw	r24, 0x02	; 2
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	12 96       	adiw	r26, 0x02	; 2
    1d10:	8d 91       	ld	r24, X+
    1d12:	9c 91       	ld	r25, X
    1d14:	13 97       	sbiw	r26, 0x03	; 3
    1d16:	93 83       	std	Z+3, r25	; 0x03
    1d18:	82 83       	std	Z+2, r24	; 0x02
    1d1a:	21 15       	cp	r18, r1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	29 f4       	brne	.+10     	; 0x1d2a <free+0x9c>
    1d20:	f0 93 49 03 	sts	0x0349, r31
    1d24:	e0 93 48 03 	sts	0x0348, r30
    1d28:	3e c0       	rjmp	.+124    	; 0x1da6 <free+0x118>
    1d2a:	d9 01       	movw	r26, r18
    1d2c:	13 96       	adiw	r26, 0x03	; 3
    1d2e:	fc 93       	st	X, r31
    1d30:	ee 93       	st	-X, r30
    1d32:	12 97       	sbiw	r26, 0x02	; 2
    1d34:	4d 91       	ld	r20, X+
    1d36:	5d 91       	ld	r21, X+
    1d38:	a4 0f       	add	r26, r20
    1d3a:	b5 1f       	adc	r27, r21
    1d3c:	ea 17       	cp	r30, r26
    1d3e:	fb 07       	cpc	r31, r27
    1d40:	79 f4       	brne	.+30     	; 0x1d60 <free+0xd2>
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	84 0f       	add	r24, r20
    1d48:	95 1f       	adc	r25, r21
    1d4a:	02 96       	adiw	r24, 0x02	; 2
    1d4c:	d9 01       	movw	r26, r18
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	9c 93       	st	X, r25
    1d52:	8e 93       	st	-X, r24
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	13 96       	adiw	r26, 0x03	; 3
    1d5a:	9c 93       	st	X, r25
    1d5c:	8e 93       	st	-X, r24
    1d5e:	12 97       	sbiw	r26, 0x02	; 2
    1d60:	e0 e0       	ldi	r30, 0x00	; 0
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <free+0xe4>
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ec 01       	movw	r28, r24
    1d70:	f9 cf       	rjmp	.-14     	; 0x1d64 <free+0xd6>
    1d72:	ce 01       	movw	r24, r28
    1d74:	02 96       	adiw	r24, 0x02	; 2
    1d76:	28 81       	ld	r18, Y
    1d78:	39 81       	ldd	r19, Y+1	; 0x01
    1d7a:	82 0f       	add	r24, r18
    1d7c:	93 1f       	adc	r25, r19
    1d7e:	20 91 46 03 	lds	r18, 0x0346
    1d82:	30 91 47 03 	lds	r19, 0x0347
    1d86:	28 17       	cp	r18, r24
    1d88:	39 07       	cpc	r19, r25
    1d8a:	69 f4       	brne	.+26     	; 0x1da6 <free+0x118>
    1d8c:	30 97       	sbiw	r30, 0x00	; 0
    1d8e:	29 f4       	brne	.+10     	; 0x1d9a <free+0x10c>
    1d90:	10 92 49 03 	sts	0x0349, r1
    1d94:	10 92 48 03 	sts	0x0348, r1
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <free+0x110>
    1d9a:	13 82       	std	Z+3, r1	; 0x03
    1d9c:	12 82       	std	Z+2, r1	; 0x02
    1d9e:	d0 93 47 03 	sts	0x0347, r29
    1da2:	c0 93 46 03 	sts	0x0346, r28
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <atoi>:
    1dac:	fc 01       	movw	r30, r24
    1dae:	88 27       	eor	r24, r24
    1db0:	99 27       	eor	r25, r25
    1db2:	e8 94       	clt
    1db4:	21 91       	ld	r18, Z+
    1db6:	20 32       	cpi	r18, 0x20	; 32
    1db8:	e9 f3       	breq	.-6      	; 0x1db4 <atoi+0x8>
    1dba:	29 30       	cpi	r18, 0x09	; 9
    1dbc:	10 f0       	brcs	.+4      	; 0x1dc2 <atoi+0x16>
    1dbe:	2e 30       	cpi	r18, 0x0E	; 14
    1dc0:	c8 f3       	brcs	.-14     	; 0x1db4 <atoi+0x8>
    1dc2:	2b 32       	cpi	r18, 0x2B	; 43
    1dc4:	39 f0       	breq	.+14     	; 0x1dd4 <atoi+0x28>
    1dc6:	2d 32       	cpi	r18, 0x2D	; 45
    1dc8:	31 f4       	brne	.+12     	; 0x1dd6 <atoi+0x2a>
    1dca:	68 94       	set
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <atoi+0x28>
    1dce:	22 d0       	rcall	.+68     	; 0x1e14 <__mulhi_const_10>
    1dd0:	82 0f       	add	r24, r18
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	21 91       	ld	r18, Z+
    1dd6:	20 53       	subi	r18, 0x30	; 48
    1dd8:	2a 30       	cpi	r18, 0x0A	; 10
    1dda:	c8 f3       	brcs	.-14     	; 0x1dce <atoi+0x22>
    1ddc:	1e f4       	brtc	.+6      	; 0x1de4 <atoi+0x38>
    1dde:	90 95       	com	r25
    1de0:	81 95       	neg	r24
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	08 95       	ret

00001de6 <memset>:
    1de6:	dc 01       	movw	r26, r24
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <memset+0x6>
    1dea:	6d 93       	st	X+, r22
    1dec:	41 50       	subi	r20, 0x01	; 1
    1dee:	50 40       	sbci	r21, 0x00	; 0
    1df0:	e0 f7       	brcc	.-8      	; 0x1dea <memset+0x4>
    1df2:	08 95       	ret

00001df4 <strcmp>:
    1df4:	fb 01       	movw	r30, r22
    1df6:	dc 01       	movw	r26, r24
    1df8:	8d 91       	ld	r24, X+
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	80 19       	sub	r24, r0
    1dfe:	01 10       	cpse	r0, r1
    1e00:	d9 f3       	breq	.-10     	; 0x1df8 <strcmp+0x4>
    1e02:	99 0b       	sbc	r25, r25
    1e04:	08 95       	ret

00001e06 <strcpy>:
    1e06:	fb 01       	movw	r30, r22
    1e08:	dc 01       	movw	r26, r24
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	00 20       	and	r0, r0
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <strcpy+0x4>
    1e12:	08 95       	ret

00001e14 <__mulhi_const_10>:
    1e14:	7a e0       	ldi	r23, 0x0A	; 10
    1e16:	97 9f       	mul	r25, r23
    1e18:	90 2d       	mov	r25, r0
    1e1a:	87 9f       	mul	r24, r23
    1e1c:	80 2d       	mov	r24, r0
    1e1e:	91 0d       	add	r25, r1
    1e20:	11 24       	eor	r1, r1
    1e22:	08 95       	ret

00001e24 <sprintf>:
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2e 97       	sbiw	r28, 0x0e	; 14
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	0d 89       	ldd	r16, Y+21	; 0x15
    1e3e:	1e 89       	ldd	r17, Y+22	; 0x16
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	8c 83       	std	Y+4, r24	; 0x04
    1e44:	1a 83       	std	Y+2, r17	; 0x02
    1e46:	09 83       	std	Y+1, r16	; 0x01
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f e7       	ldi	r25, 0x7F	; 127
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	ae 01       	movw	r20, r28
    1e52:	47 5e       	subi	r20, 0xE7	; 231
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	6f 89       	ldd	r22, Y+23	; 0x17
    1e58:	78 8d       	ldd	r23, Y+24	; 0x18
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	48 d0       	rcall	.+144    	; 0x1ef0 <vfprintf>
    1e60:	ef 81       	ldd	r30, Y+7	; 0x07
    1e62:	f8 85       	ldd	r31, Y+8	; 0x08
    1e64:	e0 0f       	add	r30, r16
    1e66:	f1 1f       	adc	r31, r17
    1e68:	10 82       	st	Z, r1
    1e6a:	2e 96       	adiw	r28, 0x0e	; 14
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	08 95       	ret

00001e80 <vsnprintf>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	8c 01       	movw	r16, r24
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	46 e0       	ldi	r20, 0x06	; 6
    1e9e:	4c 83       	std	Y+4, r20	; 0x04
    1ea0:	1a 83       	std	Y+2, r17	; 0x02
    1ea2:	09 83       	std	Y+1, r16	; 0x01
    1ea4:	77 ff       	sbrs	r23, 7
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <vsnprintf+0x2c>
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e8       	ldi	r23, 0x80	; 128
    1eac:	61 50       	subi	r22, 0x01	; 1
    1eae:	71 09       	sbc	r23, r1
    1eb0:	7e 83       	std	Y+6, r23	; 0x06
    1eb2:	6d 83       	std	Y+5, r22	; 0x05
    1eb4:	a9 01       	movw	r20, r18
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	ce 01       	movw	r24, r28
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	19 d0       	rcall	.+50     	; 0x1ef0 <vfprintf>
    1ebe:	4d 81       	ldd	r20, Y+5	; 0x05
    1ec0:	5e 81       	ldd	r21, Y+6	; 0x06
    1ec2:	57 fd       	sbrc	r21, 7
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <vsnprintf+0x5a>
    1ec6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ec8:	38 85       	ldd	r19, Y+8	; 0x08
    1eca:	42 17       	cp	r20, r18
    1ecc:	53 07       	cpc	r21, r19
    1ece:	0c f4       	brge	.+2      	; 0x1ed2 <vsnprintf+0x52>
    1ed0:	9a 01       	movw	r18, r20
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	e2 0f       	add	r30, r18
    1ed6:	f3 1f       	adc	r31, r19
    1ed8:	10 82       	st	Z, r1
    1eda:	2e 96       	adiw	r28, 0x0e	; 14
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <vfprintf>:
    1ef0:	2f 92       	push	r2
    1ef2:	3f 92       	push	r3
    1ef4:	4f 92       	push	r4
    1ef6:	5f 92       	push	r5
    1ef8:	6f 92       	push	r6
    1efa:	7f 92       	push	r7
    1efc:	8f 92       	push	r8
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	2c 97       	sbiw	r28, 0x0c	; 12
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	7c 01       	movw	r14, r24
    1f26:	6b 01       	movw	r12, r22
    1f28:	8a 01       	movw	r16, r20
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	17 82       	std	Z+7, r1	; 0x07
    1f2e:	16 82       	std	Z+6, r1	; 0x06
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	81 ff       	sbrs	r24, 1
    1f34:	b0 c1       	rjmp	.+864    	; 0x2296 <vfprintf+0x3a6>
    1f36:	ce 01       	movw	r24, r28
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	4c 01       	movw	r8, r24
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	f6 01       	movw	r30, r12
    1f42:	93 fd       	sbrc	r25, 3
    1f44:	85 91       	lpm	r24, Z+
    1f46:	93 ff       	sbrs	r25, 3
    1f48:	81 91       	ld	r24, Z+
    1f4a:	6f 01       	movw	r12, r30
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <vfprintf+0x62>
    1f50:	9e c1       	rjmp	.+828    	; 0x228e <vfprintf+0x39e>
    1f52:	85 32       	cpi	r24, 0x25	; 37
    1f54:	39 f4       	brne	.+14     	; 0x1f64 <vfprintf+0x74>
    1f56:	93 fd       	sbrc	r25, 3
    1f58:	85 91       	lpm	r24, Z+
    1f5a:	93 ff       	sbrs	r25, 3
    1f5c:	81 91       	ld	r24, Z+
    1f5e:	6f 01       	movw	r12, r30
    1f60:	85 32       	cpi	r24, 0x25	; 37
    1f62:	21 f4       	brne	.+8      	; 0x1f6c <vfprintf+0x7c>
    1f64:	b7 01       	movw	r22, r14
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	c7 d1       	rcall	.+910    	; 0x22f8 <fputc>
    1f6a:	e8 cf       	rjmp	.-48     	; 0x1f3c <vfprintf+0x4c>
    1f6c:	51 2c       	mov	r5, r1
    1f6e:	31 2c       	mov	r3, r1
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	20 32       	cpi	r18, 0x20	; 32
    1f74:	a0 f4       	brcc	.+40     	; 0x1f9e <vfprintf+0xae>
    1f76:	8b 32       	cpi	r24, 0x2B	; 43
    1f78:	69 f0       	breq	.+26     	; 0x1f94 <vfprintf+0xa4>
    1f7a:	30 f4       	brcc	.+12     	; 0x1f88 <vfprintf+0x98>
    1f7c:	80 32       	cpi	r24, 0x20	; 32
    1f7e:	59 f0       	breq	.+22     	; 0x1f96 <vfprintf+0xa6>
    1f80:	83 32       	cpi	r24, 0x23	; 35
    1f82:	69 f4       	brne	.+26     	; 0x1f9e <vfprintf+0xae>
    1f84:	20 61       	ori	r18, 0x10	; 16
    1f86:	2c c0       	rjmp	.+88     	; 0x1fe0 <vfprintf+0xf0>
    1f88:	8d 32       	cpi	r24, 0x2D	; 45
    1f8a:	39 f0       	breq	.+14     	; 0x1f9a <vfprintf+0xaa>
    1f8c:	80 33       	cpi	r24, 0x30	; 48
    1f8e:	39 f4       	brne	.+14     	; 0x1f9e <vfprintf+0xae>
    1f90:	21 60       	ori	r18, 0x01	; 1
    1f92:	26 c0       	rjmp	.+76     	; 0x1fe0 <vfprintf+0xf0>
    1f94:	22 60       	ori	r18, 0x02	; 2
    1f96:	24 60       	ori	r18, 0x04	; 4
    1f98:	23 c0       	rjmp	.+70     	; 0x1fe0 <vfprintf+0xf0>
    1f9a:	28 60       	ori	r18, 0x08	; 8
    1f9c:	21 c0       	rjmp	.+66     	; 0x1fe0 <vfprintf+0xf0>
    1f9e:	27 fd       	sbrc	r18, 7
    1fa0:	27 c0       	rjmp	.+78     	; 0x1ff0 <vfprintf+0x100>
    1fa2:	30 ed       	ldi	r19, 0xD0	; 208
    1fa4:	38 0f       	add	r19, r24
    1fa6:	3a 30       	cpi	r19, 0x0A	; 10
    1fa8:	78 f4       	brcc	.+30     	; 0x1fc8 <vfprintf+0xd8>
    1faa:	26 ff       	sbrs	r18, 6
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0xca>
    1fae:	fa e0       	ldi	r31, 0x0A	; 10
    1fb0:	5f 9e       	mul	r5, r31
    1fb2:	30 0d       	add	r19, r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	53 2e       	mov	r5, r19
    1fb8:	13 c0       	rjmp	.+38     	; 0x1fe0 <vfprintf+0xf0>
    1fba:	8a e0       	ldi	r24, 0x0A	; 10
    1fbc:	38 9e       	mul	r3, r24
    1fbe:	30 0d       	add	r19, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	33 2e       	mov	r3, r19
    1fc4:	20 62       	ori	r18, 0x20	; 32
    1fc6:	0c c0       	rjmp	.+24     	; 0x1fe0 <vfprintf+0xf0>
    1fc8:	8e 32       	cpi	r24, 0x2E	; 46
    1fca:	21 f4       	brne	.+8      	; 0x1fd4 <vfprintf+0xe4>
    1fcc:	26 fd       	sbrc	r18, 6
    1fce:	5f c1       	rjmp	.+702    	; 0x228e <vfprintf+0x39e>
    1fd0:	20 64       	ori	r18, 0x40	; 64
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <vfprintf+0xf0>
    1fd4:	8c 36       	cpi	r24, 0x6C	; 108
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <vfprintf+0xec>
    1fd8:	20 68       	ori	r18, 0x80	; 128
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0xf0>
    1fdc:	88 36       	cpi	r24, 0x68	; 104
    1fde:	41 f4       	brne	.+16     	; 0x1ff0 <vfprintf+0x100>
    1fe0:	f6 01       	movw	r30, r12
    1fe2:	93 fd       	sbrc	r25, 3
    1fe4:	85 91       	lpm	r24, Z+
    1fe6:	93 ff       	sbrs	r25, 3
    1fe8:	81 91       	ld	r24, Z+
    1fea:	6f 01       	movw	r12, r30
    1fec:	81 11       	cpse	r24, r1
    1fee:	c1 cf       	rjmp	.-126    	; 0x1f72 <vfprintf+0x82>
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	9f 7d       	andi	r25, 0xDF	; 223
    1ff4:	95 54       	subi	r25, 0x45	; 69
    1ff6:	93 30       	cpi	r25, 0x03	; 3
    1ff8:	28 f4       	brcc	.+10     	; 0x2004 <vfprintf+0x114>
    1ffa:	0c 5f       	subi	r16, 0xFC	; 252
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	ff e3       	ldi	r31, 0x3F	; 63
    2000:	f9 83       	std	Y+1, r31	; 0x01
    2002:	0d c0       	rjmp	.+26     	; 0x201e <vfprintf+0x12e>
    2004:	83 36       	cpi	r24, 0x63	; 99
    2006:	31 f0       	breq	.+12     	; 0x2014 <vfprintf+0x124>
    2008:	83 37       	cpi	r24, 0x73	; 115
    200a:	71 f0       	breq	.+28     	; 0x2028 <vfprintf+0x138>
    200c:	83 35       	cpi	r24, 0x53	; 83
    200e:	09 f0       	breq	.+2      	; 0x2012 <vfprintf+0x122>
    2010:	57 c0       	rjmp	.+174    	; 0x20c0 <vfprintf+0x1d0>
    2012:	21 c0       	rjmp	.+66     	; 0x2056 <vfprintf+0x166>
    2014:	f8 01       	movw	r30, r16
    2016:	80 81       	ld	r24, Z
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	0e 5f       	subi	r16, 0xFE	; 254
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	44 24       	eor	r4, r4
    2020:	43 94       	inc	r4
    2022:	51 2c       	mov	r5, r1
    2024:	54 01       	movw	r10, r8
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <vfprintf+0x160>
    2028:	38 01       	movw	r6, r16
    202a:	f2 e0       	ldi	r31, 0x02	; 2
    202c:	6f 0e       	add	r6, r31
    202e:	71 1c       	adc	r7, r1
    2030:	f8 01       	movw	r30, r16
    2032:	a0 80       	ld	r10, Z
    2034:	b1 80       	ldd	r11, Z+1	; 0x01
    2036:	26 ff       	sbrs	r18, 6
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <vfprintf+0x150>
    203a:	65 2d       	mov	r22, r5
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <vfprintf+0x154>
    2040:	6f ef       	ldi	r22, 0xFF	; 255
    2042:	7f ef       	ldi	r23, 0xFF	; 255
    2044:	c5 01       	movw	r24, r10
    2046:	2c 87       	std	Y+12, r18	; 0x0c
    2048:	4c d1       	rcall	.+664    	; 0x22e2 <strnlen>
    204a:	2c 01       	movw	r4, r24
    204c:	83 01       	movw	r16, r6
    204e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2050:	2f 77       	andi	r18, 0x7F	; 127
    2052:	22 2e       	mov	r2, r18
    2054:	16 c0       	rjmp	.+44     	; 0x2082 <vfprintf+0x192>
    2056:	38 01       	movw	r6, r16
    2058:	f2 e0       	ldi	r31, 0x02	; 2
    205a:	6f 0e       	add	r6, r31
    205c:	71 1c       	adc	r7, r1
    205e:	f8 01       	movw	r30, r16
    2060:	a0 80       	ld	r10, Z
    2062:	b1 80       	ldd	r11, Z+1	; 0x01
    2064:	26 ff       	sbrs	r18, 6
    2066:	03 c0       	rjmp	.+6      	; 0x206e <vfprintf+0x17e>
    2068:	65 2d       	mov	r22, r5
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <vfprintf+0x182>
    206e:	6f ef       	ldi	r22, 0xFF	; 255
    2070:	7f ef       	ldi	r23, 0xFF	; 255
    2072:	c5 01       	movw	r24, r10
    2074:	2c 87       	std	Y+12, r18	; 0x0c
    2076:	2a d1       	rcall	.+596    	; 0x22cc <strnlen_P>
    2078:	2c 01       	movw	r4, r24
    207a:	2c 85       	ldd	r18, Y+12	; 0x0c
    207c:	20 68       	ori	r18, 0x80	; 128
    207e:	22 2e       	mov	r2, r18
    2080:	83 01       	movw	r16, r6
    2082:	23 fc       	sbrc	r2, 3
    2084:	19 c0       	rjmp	.+50     	; 0x20b8 <vfprintf+0x1c8>
    2086:	83 2d       	mov	r24, r3
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	48 16       	cp	r4, r24
    208c:	59 06       	cpc	r5, r25
    208e:	a0 f4       	brcc	.+40     	; 0x20b8 <vfprintf+0x1c8>
    2090:	b7 01       	movw	r22, r14
    2092:	80 e2       	ldi	r24, 0x20	; 32
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	30 d1       	rcall	.+608    	; 0x22f8 <fputc>
    2098:	3a 94       	dec	r3
    209a:	f5 cf       	rjmp	.-22     	; 0x2086 <vfprintf+0x196>
    209c:	f5 01       	movw	r30, r10
    209e:	27 fc       	sbrc	r2, 7
    20a0:	85 91       	lpm	r24, Z+
    20a2:	27 fe       	sbrs	r2, 7
    20a4:	81 91       	ld	r24, Z+
    20a6:	5f 01       	movw	r10, r30
    20a8:	b7 01       	movw	r22, r14
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	25 d1       	rcall	.+586    	; 0x22f8 <fputc>
    20ae:	31 10       	cpse	r3, r1
    20b0:	3a 94       	dec	r3
    20b2:	f1 e0       	ldi	r31, 0x01	; 1
    20b4:	4f 1a       	sub	r4, r31
    20b6:	51 08       	sbc	r5, r1
    20b8:	41 14       	cp	r4, r1
    20ba:	51 04       	cpc	r5, r1
    20bc:	79 f7       	brne	.-34     	; 0x209c <vfprintf+0x1ac>
    20be:	de c0       	rjmp	.+444    	; 0x227c <vfprintf+0x38c>
    20c0:	84 36       	cpi	r24, 0x64	; 100
    20c2:	11 f0       	breq	.+4      	; 0x20c8 <vfprintf+0x1d8>
    20c4:	89 36       	cpi	r24, 0x69	; 105
    20c6:	31 f5       	brne	.+76     	; 0x2114 <vfprintf+0x224>
    20c8:	f8 01       	movw	r30, r16
    20ca:	27 ff       	sbrs	r18, 7
    20cc:	07 c0       	rjmp	.+14     	; 0x20dc <vfprintf+0x1ec>
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	0c 5f       	subi	r16, 0xFC	; 252
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	08 c0       	rjmp	.+16     	; 0x20ec <vfprintf+0x1fc>
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	88 27       	eor	r24, r24
    20e2:	77 fd       	sbrc	r23, 7
    20e4:	80 95       	com	r24
    20e6:	98 2f       	mov	r25, r24
    20e8:	0e 5f       	subi	r16, 0xFE	; 254
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	2f 76       	andi	r18, 0x6F	; 111
    20ee:	b2 2e       	mov	r11, r18
    20f0:	97 ff       	sbrs	r25, 7
    20f2:	09 c0       	rjmp	.+18     	; 0x2106 <vfprintf+0x216>
    20f4:	90 95       	com	r25
    20f6:	80 95       	com	r24
    20f8:	70 95       	com	r23
    20fa:	61 95       	neg	r22
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	20 68       	ori	r18, 0x80	; 128
    2104:	b2 2e       	mov	r11, r18
    2106:	2a e0       	ldi	r18, 0x0A	; 10
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	a4 01       	movw	r20, r8
    210c:	27 d1       	rcall	.+590    	; 0x235c <__ultoa_invert>
    210e:	a8 2e       	mov	r10, r24
    2110:	a8 18       	sub	r10, r8
    2112:	43 c0       	rjmp	.+134    	; 0x219a <vfprintf+0x2aa>
    2114:	85 37       	cpi	r24, 0x75	; 117
    2116:	29 f4       	brne	.+10     	; 0x2122 <vfprintf+0x232>
    2118:	2f 7e       	andi	r18, 0xEF	; 239
    211a:	b2 2e       	mov	r11, r18
    211c:	2a e0       	ldi	r18, 0x0A	; 10
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	25 c0       	rjmp	.+74     	; 0x216c <vfprintf+0x27c>
    2122:	f2 2f       	mov	r31, r18
    2124:	f9 7f       	andi	r31, 0xF9	; 249
    2126:	bf 2e       	mov	r11, r31
    2128:	8f 36       	cpi	r24, 0x6F	; 111
    212a:	c1 f0       	breq	.+48     	; 0x215c <vfprintf+0x26c>
    212c:	18 f4       	brcc	.+6      	; 0x2134 <vfprintf+0x244>
    212e:	88 35       	cpi	r24, 0x58	; 88
    2130:	79 f0       	breq	.+30     	; 0x2150 <vfprintf+0x260>
    2132:	ad c0       	rjmp	.+346    	; 0x228e <vfprintf+0x39e>
    2134:	80 37       	cpi	r24, 0x70	; 112
    2136:	19 f0       	breq	.+6      	; 0x213e <vfprintf+0x24e>
    2138:	88 37       	cpi	r24, 0x78	; 120
    213a:	21 f0       	breq	.+8      	; 0x2144 <vfprintf+0x254>
    213c:	a8 c0       	rjmp	.+336    	; 0x228e <vfprintf+0x39e>
    213e:	2f 2f       	mov	r18, r31
    2140:	20 61       	ori	r18, 0x10	; 16
    2142:	b2 2e       	mov	r11, r18
    2144:	b4 fe       	sbrs	r11, 4
    2146:	0d c0       	rjmp	.+26     	; 0x2162 <vfprintf+0x272>
    2148:	8b 2d       	mov	r24, r11
    214a:	84 60       	ori	r24, 0x04	; 4
    214c:	b8 2e       	mov	r11, r24
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <vfprintf+0x272>
    2150:	24 ff       	sbrs	r18, 4
    2152:	0a c0       	rjmp	.+20     	; 0x2168 <vfprintf+0x278>
    2154:	9f 2f       	mov	r25, r31
    2156:	96 60       	ori	r25, 0x06	; 6
    2158:	b9 2e       	mov	r11, r25
    215a:	06 c0       	rjmp	.+12     	; 0x2168 <vfprintf+0x278>
    215c:	28 e0       	ldi	r18, 0x08	; 8
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	05 c0       	rjmp	.+10     	; 0x216c <vfprintf+0x27c>
    2162:	20 e1       	ldi	r18, 0x10	; 16
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	02 c0       	rjmp	.+4      	; 0x216c <vfprintf+0x27c>
    2168:	20 e1       	ldi	r18, 0x10	; 16
    216a:	32 e0       	ldi	r19, 0x02	; 2
    216c:	f8 01       	movw	r30, r16
    216e:	b7 fe       	sbrs	r11, 7
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <vfprintf+0x290>
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	0c 5f       	subi	r16, 0xFC	; 252
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	06 c0       	rjmp	.+12     	; 0x218c <vfprintf+0x29c>
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 5f       	subi	r16, 0xFE	; 254
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	a4 01       	movw	r20, r8
    218e:	e6 d0       	rcall	.+460    	; 0x235c <__ultoa_invert>
    2190:	a8 2e       	mov	r10, r24
    2192:	a8 18       	sub	r10, r8
    2194:	fb 2d       	mov	r31, r11
    2196:	ff 77       	andi	r31, 0x7F	; 127
    2198:	bf 2e       	mov	r11, r31
    219a:	b6 fe       	sbrs	r11, 6
    219c:	0b c0       	rjmp	.+22     	; 0x21b4 <vfprintf+0x2c4>
    219e:	2b 2d       	mov	r18, r11
    21a0:	2e 7f       	andi	r18, 0xFE	; 254
    21a2:	a5 14       	cp	r10, r5
    21a4:	50 f4       	brcc	.+20     	; 0x21ba <vfprintf+0x2ca>
    21a6:	b4 fe       	sbrs	r11, 4
    21a8:	0a c0       	rjmp	.+20     	; 0x21be <vfprintf+0x2ce>
    21aa:	b2 fc       	sbrc	r11, 2
    21ac:	08 c0       	rjmp	.+16     	; 0x21be <vfprintf+0x2ce>
    21ae:	2b 2d       	mov	r18, r11
    21b0:	2e 7e       	andi	r18, 0xEE	; 238
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <vfprintf+0x2ce>
    21b4:	7a 2c       	mov	r7, r10
    21b6:	2b 2d       	mov	r18, r11
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <vfprintf+0x2d0>
    21ba:	7a 2c       	mov	r7, r10
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <vfprintf+0x2d0>
    21be:	75 2c       	mov	r7, r5
    21c0:	24 ff       	sbrs	r18, 4
    21c2:	0d c0       	rjmp	.+26     	; 0x21de <vfprintf+0x2ee>
    21c4:	fe 01       	movw	r30, r28
    21c6:	ea 0d       	add	r30, r10
    21c8:	f1 1d       	adc	r31, r1
    21ca:	80 81       	ld	r24, Z
    21cc:	80 33       	cpi	r24, 0x30	; 48
    21ce:	11 f4       	brne	.+4      	; 0x21d4 <vfprintf+0x2e4>
    21d0:	29 7e       	andi	r18, 0xE9	; 233
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <vfprintf+0x2f6>
    21d4:	22 ff       	sbrs	r18, 2
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <vfprintf+0x2f4>
    21d8:	73 94       	inc	r7
    21da:	73 94       	inc	r7
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <vfprintf+0x2f6>
    21de:	82 2f       	mov	r24, r18
    21e0:	86 78       	andi	r24, 0x86	; 134
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <vfprintf+0x2f6>
    21e4:	73 94       	inc	r7
    21e6:	23 fd       	sbrc	r18, 3
    21e8:	12 c0       	rjmp	.+36     	; 0x220e <vfprintf+0x31e>
    21ea:	20 ff       	sbrs	r18, 0
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <vfprintf+0x30a>
    21ee:	5a 2c       	mov	r5, r10
    21f0:	73 14       	cp	r7, r3
    21f2:	18 f4       	brcc	.+6      	; 0x21fa <vfprintf+0x30a>
    21f4:	53 0c       	add	r5, r3
    21f6:	57 18       	sub	r5, r7
    21f8:	73 2c       	mov	r7, r3
    21fa:	73 14       	cp	r7, r3
    21fc:	60 f4       	brcc	.+24     	; 0x2216 <vfprintf+0x326>
    21fe:	b7 01       	movw	r22, r14
    2200:	80 e2       	ldi	r24, 0x20	; 32
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	2c 87       	std	Y+12, r18	; 0x0c
    2206:	78 d0       	rcall	.+240    	; 0x22f8 <fputc>
    2208:	73 94       	inc	r7
    220a:	2c 85       	ldd	r18, Y+12	; 0x0c
    220c:	f6 cf       	rjmp	.-20     	; 0x21fa <vfprintf+0x30a>
    220e:	73 14       	cp	r7, r3
    2210:	10 f4       	brcc	.+4      	; 0x2216 <vfprintf+0x326>
    2212:	37 18       	sub	r3, r7
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <vfprintf+0x328>
    2216:	31 2c       	mov	r3, r1
    2218:	24 ff       	sbrs	r18, 4
    221a:	11 c0       	rjmp	.+34     	; 0x223e <vfprintf+0x34e>
    221c:	b7 01       	movw	r22, r14
    221e:	80 e3       	ldi	r24, 0x30	; 48
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	2c 87       	std	Y+12, r18	; 0x0c
    2224:	69 d0       	rcall	.+210    	; 0x22f8 <fputc>
    2226:	2c 85       	ldd	r18, Y+12	; 0x0c
    2228:	22 ff       	sbrs	r18, 2
    222a:	16 c0       	rjmp	.+44     	; 0x2258 <vfprintf+0x368>
    222c:	21 ff       	sbrs	r18, 1
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <vfprintf+0x346>
    2230:	88 e5       	ldi	r24, 0x58	; 88
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 c0       	rjmp	.+4      	; 0x223a <vfprintf+0x34a>
    2236:	88 e7       	ldi	r24, 0x78	; 120
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b7 01       	movw	r22, r14
    223c:	0c c0       	rjmp	.+24     	; 0x2256 <vfprintf+0x366>
    223e:	82 2f       	mov	r24, r18
    2240:	86 78       	andi	r24, 0x86	; 134
    2242:	51 f0       	breq	.+20     	; 0x2258 <vfprintf+0x368>
    2244:	21 fd       	sbrc	r18, 1
    2246:	02 c0       	rjmp	.+4      	; 0x224c <vfprintf+0x35c>
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	01 c0       	rjmp	.+2      	; 0x224e <vfprintf+0x35e>
    224c:	8b e2       	ldi	r24, 0x2B	; 43
    224e:	27 fd       	sbrc	r18, 7
    2250:	8d e2       	ldi	r24, 0x2D	; 45
    2252:	b7 01       	movw	r22, r14
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	50 d0       	rcall	.+160    	; 0x22f8 <fputc>
    2258:	a5 14       	cp	r10, r5
    225a:	30 f4       	brcc	.+12     	; 0x2268 <vfprintf+0x378>
    225c:	b7 01       	movw	r22, r14
    225e:	80 e3       	ldi	r24, 0x30	; 48
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	4a d0       	rcall	.+148    	; 0x22f8 <fputc>
    2264:	5a 94       	dec	r5
    2266:	f8 cf       	rjmp	.-16     	; 0x2258 <vfprintf+0x368>
    2268:	aa 94       	dec	r10
    226a:	f4 01       	movw	r30, r8
    226c:	ea 0d       	add	r30, r10
    226e:	f1 1d       	adc	r31, r1
    2270:	80 81       	ld	r24, Z
    2272:	b7 01       	movw	r22, r14
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	40 d0       	rcall	.+128    	; 0x22f8 <fputc>
    2278:	a1 10       	cpse	r10, r1
    227a:	f6 cf       	rjmp	.-20     	; 0x2268 <vfprintf+0x378>
    227c:	33 20       	and	r3, r3
    227e:	09 f4       	brne	.+2      	; 0x2282 <vfprintf+0x392>
    2280:	5d ce       	rjmp	.-838    	; 0x1f3c <vfprintf+0x4c>
    2282:	b7 01       	movw	r22, r14
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	37 d0       	rcall	.+110    	; 0x22f8 <fputc>
    228a:	3a 94       	dec	r3
    228c:	f7 cf       	rjmp	.-18     	; 0x227c <vfprintf+0x38c>
    228e:	f7 01       	movw	r30, r14
    2290:	86 81       	ldd	r24, Z+6	; 0x06
    2292:	97 81       	ldd	r25, Z+7	; 0x07
    2294:	02 c0       	rjmp	.+4      	; 0x229a <vfprintf+0x3aa>
    2296:	8f ef       	ldi	r24, 0xFF	; 255
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	2c 96       	adiw	r28, 0x0c	; 12
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	df 90       	pop	r13
    22b4:	cf 90       	pop	r12
    22b6:	bf 90       	pop	r11
    22b8:	af 90       	pop	r10
    22ba:	9f 90       	pop	r9
    22bc:	8f 90       	pop	r8
    22be:	7f 90       	pop	r7
    22c0:	6f 90       	pop	r6
    22c2:	5f 90       	pop	r5
    22c4:	4f 90       	pop	r4
    22c6:	3f 90       	pop	r3
    22c8:	2f 90       	pop	r2
    22ca:	08 95       	ret

000022cc <strnlen_P>:
    22cc:	fc 01       	movw	r30, r24
    22ce:	05 90       	lpm	r0, Z+
    22d0:	61 50       	subi	r22, 0x01	; 1
    22d2:	70 40       	sbci	r23, 0x00	; 0
    22d4:	01 10       	cpse	r0, r1
    22d6:	d8 f7       	brcc	.-10     	; 0x22ce <strnlen_P+0x2>
    22d8:	80 95       	com	r24
    22da:	90 95       	com	r25
    22dc:	8e 0f       	add	r24, r30
    22de:	9f 1f       	adc	r25, r31
    22e0:	08 95       	ret

000022e2 <strnlen>:
    22e2:	fc 01       	movw	r30, r24
    22e4:	61 50       	subi	r22, 0x01	; 1
    22e6:	70 40       	sbci	r23, 0x00	; 0
    22e8:	01 90       	ld	r0, Z+
    22ea:	01 10       	cpse	r0, r1
    22ec:	d8 f7       	brcc	.-10     	; 0x22e4 <strnlen+0x2>
    22ee:	80 95       	com	r24
    22f0:	90 95       	com	r25
    22f2:	8e 0f       	add	r24, r30
    22f4:	9f 1f       	adc	r25, r31
    22f6:	08 95       	ret

000022f8 <fputc>:
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	18 2f       	mov	r17, r24
    2302:	09 2f       	mov	r16, r25
    2304:	eb 01       	movw	r28, r22
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	81 fd       	sbrc	r24, 1
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <fputc+0x1a>
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	9f ef       	ldi	r25, 0xFF	; 255
    2310:	20 c0       	rjmp	.+64     	; 0x2352 <fputc+0x5a>
    2312:	82 ff       	sbrs	r24, 2
    2314:	10 c0       	rjmp	.+32     	; 0x2336 <fputc+0x3e>
    2316:	4e 81       	ldd	r20, Y+6	; 0x06
    2318:	5f 81       	ldd	r21, Y+7	; 0x07
    231a:	2c 81       	ldd	r18, Y+4	; 0x04
    231c:	3d 81       	ldd	r19, Y+5	; 0x05
    231e:	42 17       	cp	r20, r18
    2320:	53 07       	cpc	r21, r19
    2322:	7c f4       	brge	.+30     	; 0x2342 <fputc+0x4a>
    2324:	e8 81       	ld	r30, Y
    2326:	f9 81       	ldd	r31, Y+1	; 0x01
    2328:	9f 01       	movw	r18, r30
    232a:	2f 5f       	subi	r18, 0xFF	; 255
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	39 83       	std	Y+1, r19	; 0x01
    2330:	28 83       	st	Y, r18
    2332:	10 83       	st	Z, r17
    2334:	06 c0       	rjmp	.+12     	; 0x2342 <fputc+0x4a>
    2336:	e8 85       	ldd	r30, Y+8	; 0x08
    2338:	f9 85       	ldd	r31, Y+9	; 0x09
    233a:	81 2f       	mov	r24, r17
    233c:	09 95       	icall
    233e:	89 2b       	or	r24, r25
    2340:	29 f7       	brne	.-54     	; 0x230c <fputc+0x14>
    2342:	2e 81       	ldd	r18, Y+6	; 0x06
    2344:	3f 81       	ldd	r19, Y+7	; 0x07
    2346:	2f 5f       	subi	r18, 0xFF	; 255
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	3f 83       	std	Y+7, r19	; 0x07
    234c:	2e 83       	std	Y+6, r18	; 0x06
    234e:	81 2f       	mov	r24, r17
    2350:	90 2f       	mov	r25, r16
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <__ultoa_invert>:
    235c:	fa 01       	movw	r30, r20
    235e:	aa 27       	eor	r26, r26
    2360:	28 30       	cpi	r18, 0x08	; 8
    2362:	51 f1       	breq	.+84     	; 0x23b8 <__ultoa_invert+0x5c>
    2364:	20 31       	cpi	r18, 0x10	; 16
    2366:	81 f1       	breq	.+96     	; 0x23c8 <__ultoa_invert+0x6c>
    2368:	e8 94       	clt
    236a:	6f 93       	push	r22
    236c:	6e 7f       	andi	r22, 0xFE	; 254
    236e:	6e 5f       	subi	r22, 0xFE	; 254
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	8f 4f       	sbci	r24, 0xFF	; 255
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	af 4f       	sbci	r26, 0xFF	; 255
    2378:	b1 e0       	ldi	r27, 0x01	; 1
    237a:	3e d0       	rcall	.+124    	; 0x23f8 <__ultoa_invert+0x9c>
    237c:	b4 e0       	ldi	r27, 0x04	; 4
    237e:	3c d0       	rcall	.+120    	; 0x23f8 <__ultoa_invert+0x9c>
    2380:	67 0f       	add	r22, r23
    2382:	78 1f       	adc	r23, r24
    2384:	89 1f       	adc	r24, r25
    2386:	9a 1f       	adc	r25, r26
    2388:	a1 1d       	adc	r26, r1
    238a:	68 0f       	add	r22, r24
    238c:	79 1f       	adc	r23, r25
    238e:	8a 1f       	adc	r24, r26
    2390:	91 1d       	adc	r25, r1
    2392:	a1 1d       	adc	r26, r1
    2394:	6a 0f       	add	r22, r26
    2396:	71 1d       	adc	r23, r1
    2398:	81 1d       	adc	r24, r1
    239a:	91 1d       	adc	r25, r1
    239c:	a1 1d       	adc	r26, r1
    239e:	20 d0       	rcall	.+64     	; 0x23e0 <__ultoa_invert+0x84>
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__ultoa_invert+0x48>
    23a2:	68 94       	set
    23a4:	3f 91       	pop	r19
    23a6:	2a e0       	ldi	r18, 0x0A	; 10
    23a8:	26 9f       	mul	r18, r22
    23aa:	11 24       	eor	r1, r1
    23ac:	30 19       	sub	r19, r0
    23ae:	30 5d       	subi	r19, 0xD0	; 208
    23b0:	31 93       	st	Z+, r19
    23b2:	de f6       	brtc	.-74     	; 0x236a <__ultoa_invert+0xe>
    23b4:	cf 01       	movw	r24, r30
    23b6:	08 95       	ret
    23b8:	46 2f       	mov	r20, r22
    23ba:	47 70       	andi	r20, 0x07	; 7
    23bc:	40 5d       	subi	r20, 0xD0	; 208
    23be:	41 93       	st	Z+, r20
    23c0:	b3 e0       	ldi	r27, 0x03	; 3
    23c2:	0f d0       	rcall	.+30     	; 0x23e2 <__ultoa_invert+0x86>
    23c4:	c9 f7       	brne	.-14     	; 0x23b8 <__ultoa_invert+0x5c>
    23c6:	f6 cf       	rjmp	.-20     	; 0x23b4 <__ultoa_invert+0x58>
    23c8:	46 2f       	mov	r20, r22
    23ca:	4f 70       	andi	r20, 0x0F	; 15
    23cc:	40 5d       	subi	r20, 0xD0	; 208
    23ce:	4a 33       	cpi	r20, 0x3A	; 58
    23d0:	18 f0       	brcs	.+6      	; 0x23d8 <__ultoa_invert+0x7c>
    23d2:	49 5d       	subi	r20, 0xD9	; 217
    23d4:	31 fd       	sbrc	r19, 1
    23d6:	40 52       	subi	r20, 0x20	; 32
    23d8:	41 93       	st	Z+, r20
    23da:	02 d0       	rcall	.+4      	; 0x23e0 <__ultoa_invert+0x84>
    23dc:	a9 f7       	brne	.-22     	; 0x23c8 <__ultoa_invert+0x6c>
    23de:	ea cf       	rjmp	.-44     	; 0x23b4 <__ultoa_invert+0x58>
    23e0:	b4 e0       	ldi	r27, 0x04	; 4
    23e2:	a6 95       	lsr	r26
    23e4:	97 95       	ror	r25
    23e6:	87 95       	ror	r24
    23e8:	77 95       	ror	r23
    23ea:	67 95       	ror	r22
    23ec:	ba 95       	dec	r27
    23ee:	c9 f7       	brne	.-14     	; 0x23e2 <__ultoa_invert+0x86>
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	61 05       	cpc	r22, r1
    23f4:	71 05       	cpc	r23, r1
    23f6:	08 95       	ret
    23f8:	9b 01       	movw	r18, r22
    23fa:	ac 01       	movw	r20, r24
    23fc:	0a 2e       	mov	r0, r26
    23fe:	06 94       	lsr	r0
    2400:	57 95       	ror	r21
    2402:	47 95       	ror	r20
    2404:	37 95       	ror	r19
    2406:	27 95       	ror	r18
    2408:	ba 95       	dec	r27
    240a:	c9 f7       	brne	.-14     	; 0x23fe <__ultoa_invert+0xa2>
    240c:	62 0f       	add	r22, r18
    240e:	73 1f       	adc	r23, r19
    2410:	84 1f       	adc	r24, r20
    2412:	95 1f       	adc	r25, r21
    2414:	a0 1d       	adc	r26, r0
    2416:	08 95       	ret

00002418 <_exit>:
    2418:	f8 94       	cli

0000241a <__stop_program>:
    241a:	ff cf       	rjmp	.-2      	; 0x241a <__stop_program>
