
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001e46  00001eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080016a  0080016a  00001f44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025cb  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008de  00000000  00000000  00004793  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001210  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000618  00000000  00000000  00006284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e6  00000000  00000000  0000689c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014ea  00000000  00000000  00007282  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000876c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	82 c5       	rjmp	.+2820   	; 0xb2a <__vector_9>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d4 c5       	rjmp	.+2984   	; 0xbd6 <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <oi_update+0xfe>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <oi_update+0x2e>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e6 e4       	ldi	r30, 0x46	; 70
     140:	fe e1       	ldi	r31, 0x1E	; 30
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	aa 36       	cpi	r26, 0x6A	; 106
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	aa e6       	ldi	r26, 0x6A	; 106
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ae 3c       	cpi	r26, 0xCE	; 206
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	b7 d1       	rcall	.+878    	; 0x4d2 <main>
     164:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <scanForObjects>:
		}	
	}
}

object_t * scanForObjects()
{
     16a:	2f 92       	push	r2
     16c:	3f 92       	push	r3
     16e:	4f 92       	push	r4
     170:	5f 92       	push	r5
     172:	6f 92       	push	r6
     174:	7f 92       	push	r7
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	c4 56       	subi	r28, 0x64	; 100
     194:	d1 09       	sbc	r29, r1
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
	int sonarDistance =0;
	int irDistance = 0;
	char heading[]="\r\nDegrees\t     IRDistance\tSonarDistance";   //   \r\n for new line, \t and spaces to line up text and numbers on output
     1a0:	88 e2       	ldi	r24, 0x28	; 40
     1a2:	e3 e1       	ldi	r30, 0x13	; 19
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	de 01       	movw	r26, r28
     1a8:	11 96       	adiw	r26, 0x01	; 1
     1aa:	01 90       	ld	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	8a 95       	dec	r24
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <scanForObjects+0x40>
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     1b2:	88 e2       	ldi	r24, 0x28	; 40
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <malloc>
     1ba:	a5 96       	adiw	r28, 0x25	; 37
     1bc:	9f af       	std	Y+63, r25	; 0x3f
     1be:	8e af       	std	Y+62, r24	; 0x3e
     1c0:	a5 97       	sbiw	r28, 0x25	; 37
     1c2:	9e 01       	movw	r18, r28
     1c4:	2f 5f       	subi	r18, 0xFF	; 255
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
     1c8:	69 01       	movw	r12, r18
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	10 e0       	ldi	r17, 0x00	; 0

	while(degrees <= 180)
    {
		for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
     1ce:	79 01       	movw	r14, r18
     1d0:	06 c0       	rjmp	.+12     	; 0x1de <scanForObjects+0x74>
			USART_Transmit(heading[i]);
     1d2:	d6 01       	movw	r26, r12
     1d4:	8d 91       	ld	r24, X+
     1d6:	6d 01       	movw	r12, r26
     1d8:	cf d4       	rcall	.+2462   	; 0xb78 <USART_Transmit>
	
	object_t *objects = malloc(sizeof(object_t) * 10);

	while(degrees <= 180)
    {
		for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
     1da:	0f 5f       	subi	r16, 0xFF	; 255
     1dc:	1f 4f       	sbci	r17, 0xFF	; 255
     1de:	f7 01       	movw	r30, r14
     1e0:	01 90       	ld	r0, Z+
     1e2:	00 20       	and	r0, r0
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <scanForObjects+0x76>
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	ee 19       	sub	r30, r14
     1ea:	ff 09       	sbc	r31, r15
     1ec:	0e 17       	cp	r16, r30
     1ee:	1f 07       	cpc	r17, r31
     1f0:	80 f3       	brcs	.-32     	; 0x1d2 <scanForObjects+0x68>
			USART_Transmit(heading[i]);
		}
		
		move_servo(degrees);
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	c4 d4       	rcall	.+2440   	; 0xb80 <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     1f8:	80 e2       	ldi	r24, 0x20	; 32
     1fa:	93 e0       	ldi	r25, 0x03	; 3
     1fc:	80 d4       	rcall	.+2304   	; 0xafe <wait_ms>
     1fe:	a1 2c       	mov	r10, r1
     200:	b1 2c       	mov	r11, r1
     202:	6f 96       	adiw	r28, 0x1f	; 31
     204:	1f ae       	std	Y+63, r1	; 0x3f
     206:	1e ae       	std	Y+62, r1	; 0x3e
     208:	6f 97       	sbiw	r28, 0x1f	; 31
     20a:	a3 96       	adiw	r28, 0x23	; 35
     20c:	1f ae       	std	Y+63, r1	; 0x3f
     20e:	1e ae       	std	Y+62, r1	; 0x3e
     210:	a3 97       	sbiw	r28, 0x23	; 35
     212:	61 2c       	mov	r6, r1
     214:	71 2c       	mov	r7, r1
     216:	ef ef       	ldi	r30, 0xFF	; 255
     218:	ff ef       	ldi	r31, 0xFF	; 255
     21a:	a1 96       	adiw	r28, 0x21	; 33
     21c:	ff af       	std	Y+63, r31	; 0x3f
     21e:	ee af       	std	Y+62, r30	; 0x3e
     220:	a1 97       	sbiw	r28, 0x21	; 33
			
			move_servo(degrees);
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
			
			sprintf(output,"\r\n%d\t\t%d\t\t%d", degrees, irDistance, sonarDistance);  //  \r\n is new line characters. \t is used to line up numbers 
     222:	7e 01       	movw	r14, r28
     224:	f9 e2       	ldi	r31, 0x29	; 41
     226:	ef 0e       	add	r14, r31
     228:	f1 1c       	adc	r15, r1
     22a:	6c 96       	adiw	r28, 0x1c	; 28
     22c:	ef ae       	std	Y+63, r14	; 0x3f
     22e:	6c 97       	sbiw	r28, 0x1c	; 28
     230:	6d 96       	adiw	r28, 0x1d	; 29
     232:	ff ae       	std	Y+63, r15	; 0x3f
     234:	6d 97       	sbiw	r28, 0x1d	; 29
					
			for(int i = 0; i < strlen(output); i++){		//  Print output data
     236:	21 2c       	mov	r2, r1
     238:	31 2c       	mov	r3, r1
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     23a:	c5 01       	movw	r24, r10
     23c:	a1 d4       	rcall	.+2370   	; 0xb80 <move_servo>
			sonarDistance = getPingDistance();
     23e:	0e d5       	rcall	.+2588   	; 0xc5c <getPingDistance>
     240:	48 2e       	mov	r4, r24
     242:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     244:	46 d5       	rcall	.+2700   	; 0xcd2 <getIrDistance>
     246:	4c 01       	movw	r8, r24
			
			sprintf(output,"\r\n%d\t\t%d\t\t%d", degrees, irDistance, sonarDistance);  //  \r\n is new line characters. \t is used to line up numbers 
     248:	5f 92       	push	r5
     24a:	4f 92       	push	r4
     24c:	9f 92       	push	r9
     24e:	8f 93       	push	r24
     250:	bf 92       	push	r11
     252:	af 92       	push	r10
     254:	a6 e0       	ldi	r26, 0x06	; 6
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	bf 93       	push	r27
     25a:	af 93       	push	r26
     25c:	ff 92       	push	r15
     25e:	ef 92       	push	r14
     260:	0e 94 27 0c 	call	0x184e	; 0x184e <sprintf>
     264:	6c 96       	adiw	r28, 0x1c	; 28
     266:	cf ac       	ldd	r12, Y+63	; 0x3f
     268:	6c 97       	sbiw	r28, 0x1c	; 28
     26a:	6d 96       	adiw	r28, 0x1d	; 29
     26c:	df ac       	ldd	r13, Y+63	; 0x3f
     26e:	6d 97       	sbiw	r28, 0x1d	; 29
					
			for(int i = 0; i < strlen(output); i++){		//  Print output data
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	02 2d       	mov	r16, r2
     27c:	13 2d       	mov	r17, r3
     27e:	06 c0       	rjmp	.+12     	; 0x28c <scanForObjects+0x122>
				USART_Transmit(output[i]);				
     280:	d6 01       	movw	r26, r12
     282:	8d 91       	ld	r24, X+
     284:	6d 01       	movw	r12, r26
     286:	78 d4       	rcall	.+2288   	; 0xb78 <USART_Transmit>
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
			
			sprintf(output,"\r\n%d\t\t%d\t\t%d", degrees, irDistance, sonarDistance);  //  \r\n is new line characters. \t is used to line up numbers 
					
			for(int i = 0; i < strlen(output); i++){		//  Print output data
     288:	0f 5f       	subi	r16, 0xFF	; 255
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	f7 01       	movw	r30, r14
     28e:	01 90       	ld	r0, Z+
     290:	00 20       	and	r0, r0
     292:	e9 f7       	brne	.-6      	; 0x28e <scanForObjects+0x124>
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	ee 19       	sub	r30, r14
     298:	ff 09       	sbc	r31, r15
     29a:	0e 17       	cp	r16, r30
     29c:	1f 07       	cpc	r17, r31
     29e:	80 f3       	brcs	.-32     	; 0x280 <scanForObjects+0x116>
				USART_Transmit(output[i]);				
			}											
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     2a0:	b5 e6       	ldi	r27, 0x65	; 101
     2a2:	8b 16       	cp	r8, r27
     2a4:	91 04       	cpc	r9, r1
     2a6:	0c f0       	brlt	.+2      	; 0x2aa <scanForObjects+0x140>
     2a8:	7f c0       	rjmp	.+254    	; 0x3a8 <scanForObjects+0x23e>
     2aa:	61 14       	cp	r6, r1
     2ac:	71 04       	cpc	r7, r1
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <scanForObjects+0x148>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <scanForObjects+0x226>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     2b2:	a1 96       	adiw	r28, 0x21	; 33
     2b4:	ee ad       	ldd	r30, Y+62	; 0x3e
     2b6:	ff ad       	ldd	r31, Y+63	; 0x3f
     2b8:	a1 97       	sbiw	r28, 0x21	; 33
     2ba:	31 96       	adiw	r30, 0x01	; 1
     2bc:	a1 96       	adiw	r28, 0x21	; 33
     2be:	ff af       	std	Y+63, r31	; 0x3f
     2c0:	ee af       	std	Y+62, r30	; 0x3e
     2c2:	a1 97       	sbiw	r28, 0x21	; 33
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     2c4:	6e 96       	adiw	r28, 0x1e	; 30
     2c6:	4f ae       	std	Y+63, r4	; 0x3f
     2c8:	6e 97       	sbiw	r28, 0x1e	; 30
     2ca:	6f 96       	adiw	r28, 0x1f	; 31
     2cc:	5f ae       	std	Y+63, r5	; 0x3f
     2ce:	6f 97       	sbiw	r28, 0x1f	; 31
				USART_Transmit(output[i]);				
			}											
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     2d0:	a3 96       	adiw	r28, 0x23	; 35
     2d2:	bf ae       	std	Y+63, r11	; 0x3f
     2d4:	ae ae       	std	Y+62, r10	; 0x3e
     2d6:	a3 97       	sbiw	r28, 0x23	; 35
			for(int i = 0; i < strlen(output); i++){		//  Print output data
				USART_Transmit(output[i]);				
			}											
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     2d8:	66 24       	eor	r6, r6
     2da:	63 94       	inc	r6
     2dc:	71 2c       	mov	r7, r1
     2de:	58 c0       	rjmp	.+176    	; 0x390 <scanForObjects+0x226>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     2e0:	a1 96       	adiw	r28, 0x21	; 33
     2e2:	0e ad       	ldd	r16, Y+62	; 0x3e
     2e4:	1f ad       	ldd	r17, Y+63	; 0x3f
     2e6:	a1 97       	sbiw	r28, 0x21	; 33
     2e8:	00 0f       	add	r16, r16
     2ea:	11 1f       	adc	r17, r17
     2ec:	00 0f       	add	r16, r16
     2ee:	11 1f       	adc	r17, r17
     2f0:	a5 96       	adiw	r28, 0x25	; 37
     2f2:	2e ad       	ldd	r18, Y+62	; 0x3e
     2f4:	3f ad       	ldd	r19, Y+63	; 0x3f
     2f6:	a5 97       	sbiw	r28, 0x25	; 37
     2f8:	02 0f       	add	r16, r18
     2fa:	13 1f       	adc	r17, r19
     2fc:	a3 96       	adiw	r28, 0x23	; 35
     2fe:	8e ad       	ldd	r24, Y+62	; 0x3e
     300:	9f ad       	ldd	r25, Y+63	; 0x3f
     302:	a3 97       	sbiw	r28, 0x23	; 35
     304:	8a 0d       	add	r24, r10
     306:	9b 1d       	adc	r25, r11
     308:	99 23       	and	r25, r25
     30a:	0c f4       	brge	.+2      	; 0x30e <scanForObjects+0x1a4>
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	95 95       	asr	r25
     310:	87 95       	ror	r24
     312:	d8 01       	movw	r26, r16
     314:	13 96       	adiw	r26, 0x03	; 3
     316:	9c 93       	st	X, r25
     318:	8e 93       	st	-X, r24
     31a:	12 97       	sbiw	r26, 0x02	; 2
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     31c:	6f 96       	adiw	r28, 0x1f	; 31
     31e:	ee ad       	ldd	r30, Y+62	; 0x3e
     320:	ff ad       	ldd	r31, Y+63	; 0x3f
     322:	6f 97       	sbiw	r28, 0x1f	; 31
     324:	bf 01       	movw	r22, r30
     326:	88 27       	eor	r24, r24
     328:	77 fd       	sbrc	r23, 7
     32a:	80 95       	com	r24
     32c:	98 2f       	mov	r25, r24
     32e:	04 d6       	rcall	.+3080   	; 0xf38 <__floatsisf>
     330:	9b 01       	movw	r18, r22
     332:	ac 01       	movw	r20, r24
     334:	c6 d6       	rcall	.+3468   	; 0x10c2 <__mulsf3>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	fc d4       	rcall	.+2552   	; 0xd34 <__addsf3>
     33c:	2b 01       	movw	r4, r22
     33e:	3c 01       	movw	r6, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     340:	a3 96       	adiw	r28, 0x23	; 35
     342:	8e ad       	ldd	r24, Y+62	; 0x3e
     344:	9f ad       	ldd	r25, Y+63	; 0x3f
     346:	a3 97       	sbiw	r28, 0x23	; 35
     348:	8a 19       	sub	r24, r10
     34a:	9b 09       	sbc	r25, r11
     34c:	bc 01       	movw	r22, r24
     34e:	22 f4       	brpl	.+8      	; 0x358 <scanForObjects+0x1ee>
     350:	66 27       	eor	r22, r22
     352:	77 27       	eor	r23, r23
     354:	68 1b       	sub	r22, r24
     356:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     358:	88 27       	eor	r24, r24
     35a:	77 fd       	sbrc	r23, 7
     35c:	80 95       	com	r24
     35e:	98 2f       	mov	r25, r24
     360:	eb d5       	rcall	.+3030   	; 0xf38 <__floatsisf>
     362:	4c d5       	rcall	.+2712   	; 0xdfc <cos>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c3 01       	movw	r24, r6
     36a:	b2 01       	movw	r22, r4
     36c:	aa d6       	rcall	.+3412   	; 0x10c2 <__mulsf3>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c3 01       	movw	r24, r6
     374:	b2 01       	movw	r22, r4
     376:	dd d4       	rcall	.+2490   	; 0xd32 <__subsf3>
     378:	57 d7       	rcall	.+3758   	; 0x1228 <sqrt>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 eb       	ldi	r20, 0xB0	; 176
     380:	50 e4       	ldi	r21, 0x40	; 64
     382:	3f d5       	rcall	.+2686   	; 0xe02 <__divsf3>
     384:	a6 d5       	rcall	.+2892   	; 0xed2 <__fixsfsi>
     386:	d8 01       	movw	r26, r16
     388:	6d 93       	st	X+, r22
     38a:	7c 93       	st	X, r23
				inObject = 0;											//Sensor is no longer on an object
     38c:	62 2c       	mov	r6, r2
     38e:	73 2c       	mov	r7, r3
			}	
		
			degrees += 2;
     390:	b2 e0       	ldi	r27, 0x02	; 2
     392:	ab 0e       	add	r10, r27
     394:	b1 1c       	adc	r11, r1
			wait_ms(200);
     396:	88 ec       	ldi	r24, 0xC8	; 200
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	b1 d3       	rcall	.+1890   	; 0xafe <wait_ms>
			USART_Transmit(heading[i]);
		}
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     39c:	e6 eb       	ldi	r30, 0xB6	; 182
     39e:	ae 16       	cp	r10, r30
     3a0:	b1 04       	cpc	r11, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <scanForObjects+0x23c>
     3a4:	4a cf       	rjmp	.-364    	; 0x23a <scanForObjects+0xd0>
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <scanForObjects+0x248>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     3a8:	f1 e0       	ldi	r31, 0x01	; 1
     3aa:	6f 16       	cp	r6, r31
     3ac:	71 04       	cpc	r7, r1
     3ae:	81 f7       	brne	.-32     	; 0x390 <scanForObjects+0x226>
     3b0:	97 cf       	rjmp	.-210    	; 0x2e0 <scanForObjects+0x176>
			degrees += 2;
			wait_ms(200);
		}
    }
	return objects;
     3b2:	a5 96       	adiw	r28, 0x25	; 37
     3b4:	8e ad       	ldd	r24, Y+62	; 0x3e
     3b6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3b8:	a5 97       	sbiw	r28, 0x25	; 37
     3ba:	cc 59       	subi	r28, 0x9C	; 156
     3bc:	df 4f       	sbci	r29, 0xFF	; 255
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	cf 90       	pop	r12
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	9f 90       	pop	r9
     3de:	8f 90       	pop	r8
     3e0:	7f 90       	pop	r7
     3e2:	6f 90       	pop	r6
     3e4:	5f 90       	pop	r5
     3e6:	4f 90       	pop	r4
     3e8:	3f 90       	pop	r3
     3ea:	2f 90       	pop	r2
     3ec:	08 95       	ret

000003ee <getCommand>:
		//TODO:: Please write your application code 
    }
}

void getCommand(oi_t *sensor_data)
{
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	27 97       	sbiw	r28, 0x07	; 7
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     40c:	b1 d3       	rcall	.+1890   	; 0xb70 <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     40e:	82 37       	cpi	r24, 0x72	; 114
     410:	39 f0       	breq	.+14     	; 0x420 <getCommand+0x32>
     412:	83 37       	cpi	r24, 0x73	; 115
     414:	09 f4       	brne	.+2      	; 0x418 <getCommand+0x2a>
     416:	3a c0       	rjmp	.+116    	; 0x48c <getCommand+0x9e>
     418:	8d 36       	cpi	r24, 0x6D	; 109
     41a:	09 f0       	breq	.+2      	; 0x41e <getCommand+0x30>
     41c:	4b c0       	rjmp	.+150    	; 0x4b4 <getCommand+0xc6>
     41e:	1c c0       	rjmp	.+56     	; 0x458 <getCommand+0x6a>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     420:	a7 d3       	rcall	.+1870   	; 0xb70 <USART_Receive>
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	a5 d3       	rcall	.+1866   	; 0xb70 <USART_Receive>
     426:	8a 83       	std	Y+2, r24	; 0x02
     428:	a3 d3       	rcall	.+1862   	; 0xb70 <USART_Receive>
     42a:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <atoi>
     434:	e8 2e       	mov	r14, r24
     436:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	2b e3       	ldi	r18, 0x3B	; 59
     43e:	31 e0       	ldi	r19, 0x01	; 1
     440:	3f 93       	push	r19
     442:	2f 93       	push	r18
     444:	c7 d0       	rcall	.+398    	; 0x5d4 <lprintf>
				turn_clockwise(sensor_data, degrees);
     446:	6e 2d       	mov	r22, r14
     448:	7f 2d       	mov	r23, r15
     44a:	c8 01       	movw	r24, r16
     44c:	66 d1       	rcall	.+716    	; 0x71a <turn_clockwise>
				commandRecieved = 1;
				break;
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	30 c0       	rjmp	.+96     	; 0x4b8 <getCommand+0xca>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     458:	8b d3       	rcall	.+1814   	; 0xb70 <USART_Receive>
     45a:	8d 83       	std	Y+5, r24	; 0x05
     45c:	89 d3       	rcall	.+1810   	; 0xb70 <USART_Receive>
     45e:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     460:	ce 01       	movw	r24, r28
     462:	05 96       	adiw	r24, 0x05	; 5
     464:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <atoi>
     468:	e8 2e       	mov	r14, r24
     46a:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	27 e4       	ldi	r18, 0x47	; 71
     472:	31 e0       	ldi	r19, 0x01	; 1
     474:	3f 93       	push	r19
     476:	2f 93       	push	r18
     478:	ad d0       	rcall	.+346    	; 0x5d4 <lprintf>
				move_forward(sensor_data, distance);
     47a:	6e 2d       	mov	r22, r14
     47c:	7f 2d       	mov	r23, r15
     47e:	c8 01       	movw	r24, r16
     480:	96 d1       	rcall	.+812    	; 0x7ae <move_forward>
				commandRecieved = 1;
				break;
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	16 c0       	rjmp	.+44     	; 0x4b8 <getCommand+0xca>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     48c:	6e de       	rcall	.-804    	; 0x16a <scanForObjects>
     48e:	8c 01       	movw	r16, r24
				commandRecieved = 1;
				lprintf("Object 1 Diameter: %d", foundObjects[0].diameter);
     490:	fc 01       	movw	r30, r24
     492:	81 81       	ldd	r24, Z+1	; 0x01
     494:	8f 93       	push	r24
     496:	80 81       	ld	r24, Z
     498:	8f 93       	push	r24
     49a:	84 e5       	ldi	r24, 0x54	; 84
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	98 d0       	rcall	.+304    	; 0x5d4 <lprintf>
				free(foundObjects);
     4a4:	c8 01       	movw	r24, r16
     4a6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <free>
				break;
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <getCommand+0xca>
			default:
				command = USART_Receive();
     4b4:	5d d3       	rcall	.+1722   	; 0xb70 <USART_Receive>
     4b6:	ab cf       	rjmp	.-170    	; 0x40e <getCommand+0x20>
		}	
	}
}
     4b8:	27 96       	adiw	r28, 0x07	; 7
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	08 95       	ret

000004d2 <main>:

unsigned long time_diff;

int main(void)
{
    lcd_init();
     4d2:	2f d0       	rcall	.+94     	; 0x532 <lcd_init>
    ADC_init();
     4d4:	f3 d3       	rcall	.+2022   	; 0xcbc <ADC_init>
    pinginit();
     4d6:	be d3       	rcall	.+1916   	; 0xc54 <pinginit>
    timer3_init();
     4d8:	61 d3       	rcall	.+1730   	; 0xb9c <timer3_init>
	USART_init();
     4da:	3e d3       	rcall	.+1660   	; 0xb58 <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     4dc:	c4 d1       	rcall	.+904    	; 0x866 <oi_alloc>
     4de:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
     4e0:	c6 d2       	rcall	.+1420   	; 0xa6e <oi_init>
	
	while(1)
    {
		getCommand(sensor_data);
     4e2:	ce 01       	movw	r24, r28
     4e4:	84 df       	rcall	.-248    	; 0x3ee <getCommand>
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <main+0x10>

000004e8 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     4e8:	de 9a       	sbi	0x1b, 6	; 27
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	08 d3       	rcall	.+1552   	; 0xafe <wait_ms>
     4ee:	de 98       	cbi	0x1b, 6	; 27
     4f0:	8b b3       	in	r24, 0x1b	; 27
     4f2:	80 7f       	andi	r24, 0xF0	; 240
     4f4:	8b bb       	out	0x1b, r24	; 27
     4f6:	08 95       	ret

000004f8 <lcd_command>:
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
     4fc:	dc 98       	cbi	0x1b, 4	; 27
     4fe:	8b b3       	in	r24, 0x1b	; 27
     500:	9c 2f       	mov	r25, r28
     502:	92 95       	swap	r25
     504:	9f 70       	andi	r25, 0x0F	; 15
     506:	89 2b       	or	r24, r25
     508:	8b bb       	out	0x1b, r24	; 27
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	ed df       	rcall	.-38     	; 0x4e8 <lcd_toggle_clear>
     50e:	8b b3       	in	r24, 0x1b	; 27
     510:	cf 70       	andi	r28, 0x0F	; 15
     512:	c8 2b       	or	r28, r24
     514:	cb bb       	out	0x1b, r28	; 27
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	e7 df       	rcall	.-50     	; 0x4e8 <lcd_toggle_clear>
     51a:	dc 9a       	sbi	0x1b, 4	; 27
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <lcd_clear>:
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	ea df       	rcall	.-44     	; 0x4f8 <lcd_command>
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	ea c2       	rjmp	.+1492   	; 0xafe <wait_ms>
     52a:	08 95       	ret

0000052c <lcd_home_line1>:
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	e4 cf       	rjmp	.-56     	; 0x4f8 <lcd_command>
     530:	08 95       	ret

00000532 <lcd_init>:
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	8a bb       	out	0x1a, r24	; 26
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	8b bb       	out	0x1b, r24	; 27
     53a:	de 9a       	sbi	0x1b, 6	; 27
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	de d2       	rcall	.+1468   	; 0xafe <wait_ms>
     542:	de 98       	cbi	0x1b, 6	; 27
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	da d2       	rcall	.+1460   	; 0xafe <wait_ms>
     54a:	de 9a       	sbi	0x1b, 6	; 27
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	d6 d2       	rcall	.+1452   	; 0xafe <wait_ms>
     552:	de 98       	cbi	0x1b, 6	; 27
     554:	de 9a       	sbi	0x1b, 6	; 27
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	d1 d2       	rcall	.+1442   	; 0xafe <wait_ms>
     55c:	de 98       	cbi	0x1b, 6	; 27
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	8b bb       	out	0x1b, r24	; 27
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	c1 df       	rcall	.-126    	; 0x4e8 <lcd_toggle_clear>
     566:	8b b3       	in	r24, 0x1b	; 27
     568:	8b bb       	out	0x1b, r24	; 27
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	bd df       	rcall	.-134    	; 0x4e8 <lcd_toggle_clear>
     56e:	8b b3       	in	r24, 0x1b	; 27
     570:	8e 60       	ori	r24, 0x0E	; 14
     572:	8b bb       	out	0x1b, r24	; 27
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	b8 df       	rcall	.-144    	; 0x4e8 <lcd_toggle_clear>
     578:	8b b3       	in	r24, 0x1b	; 27
     57a:	8b bb       	out	0x1b, r24	; 27
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	b4 df       	rcall	.-152    	; 0x4e8 <lcd_toggle_clear>
     580:	8b b3       	in	r24, 0x1b	; 27
     582:	86 60       	ori	r24, 0x06	; 6
     584:	8b bb       	out	0x1b, r24	; 27
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	af df       	rcall	.-162    	; 0x4e8 <lcd_toggle_clear>
     58a:	8b b3       	in	r24, 0x1b	; 27
     58c:	8b bb       	out	0x1b, r24	; 27
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	ab df       	rcall	.-170    	; 0x4e8 <lcd_toggle_clear>
     592:	d8 9a       	sbi	0x1b, 0	; 27
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	a8 df       	rcall	.-176    	; 0x4e8 <lcd_toggle_clear>
     598:	dc 9a       	sbi	0x1b, 4	; 27
     59a:	c8 cf       	rjmp	.-112    	; 0x52c <lcd_home_line1>
     59c:	08 95       	ret

0000059e <lcd_home_line2>:
     59e:	80 ec       	ldi	r24, 0xC0	; 192
     5a0:	ab cf       	rjmp	.-170    	; 0x4f8 <lcd_command>
     5a2:	08 95       	ret

000005a4 <lcd_home_line3>:
     5a4:	84 e9       	ldi	r24, 0x94	; 148
     5a6:	a8 cf       	rjmp	.-176    	; 0x4f8 <lcd_command>
     5a8:	08 95       	ret

000005aa <lcd_home_line4>:
     5aa:	84 ed       	ldi	r24, 0xD4	; 212
     5ac:	a5 cf       	rjmp	.-182    	; 0x4f8 <lcd_command>
     5ae:	08 95       	ret

000005b0 <lcd_putc>:
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
     5b4:	8b b3       	in	r24, 0x1b	; 27
     5b6:	9c 2f       	mov	r25, r28
     5b8:	92 95       	swap	r25
     5ba:	9f 70       	andi	r25, 0x0F	; 15
     5bc:	89 2b       	or	r24, r25
     5be:	8b bb       	out	0x1b, r24	; 27
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	92 df       	rcall	.-220    	; 0x4e8 <lcd_toggle_clear>
     5c4:	8b b3       	in	r24, 0x1b	; 27
     5c6:	cf 70       	andi	r28, 0x0F	; 15
     5c8:	c8 2b       	or	r28, r24
     5ca:	cb bb       	out	0x1b, r28	; 27
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	8c df       	rcall	.-232    	; 0x4e8 <lcd_toggle_clear>
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	c1 55       	subi	r28, 0x51	; 81
     5ea:	d1 09       	sbc	r29, r1
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	fe 01       	movw	r30, r28
     5f8:	e4 5a       	subi	r30, 0xA4	; 164
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	41 91       	ld	r20, Z+
     5fe:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     600:	9f 01       	movw	r18, r30
     602:	61 e5       	ldi	r22, 0x51	; 81
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     60e:	be 01       	movw	r22, r28
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	8a e6       	ldi	r24, 0x6A	; 106
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 0f 0c 	call	0x181e	; 0x181e <strcmp>
     61c:	89 2b       	or	r24, r25
     61e:	09 f4       	brne	.+2      	; 0x622 <lprintf+0x4e>
     620:	40 c0       	rjmp	.+128    	; 0x6a2 <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     622:	be 01       	movw	r22, r28
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	8a e6       	ldi	r24, 0x6A	; 106
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 18 0c 	call	0x1830	; 0x1830 <strcpy>
	lcd_clear();
     630:	77 df       	rcall	.-274    	; 0x520 <lcd_clear>
     632:	9e 01       	movw	r18, r28
     634:	2f 5f       	subi	r18, 0xFF	; 255
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     63e:	0f 2e       	mov	r0, r31
     640:	f4 e1       	ldi	r31, 0x14	; 20
     642:	ef 2e       	mov	r14, r31
     644:	f1 2c       	mov	r15, r1
     646:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     648:	24 c0       	rjmp	.+72     	; 0x692 <lprintf+0xbe>
		if (*str == '\n') {
     64a:	8a 30       	cpi	r24, 0x0A	; 10
     64c:	49 f4       	brne	.+18     	; 0x660 <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     64e:	c8 01       	movw	r24, r16
     650:	b7 01       	movw	r22, r14
     652:	59 d7       	rcall	.+3762   	; 0x1506 <__divmodhi4>
     654:	f7 01       	movw	r30, r14
     656:	e8 1b       	sub	r30, r24
     658:	f9 0b       	sbc	r31, r25
     65a:	0e 0f       	add	r16, r30
     65c:	1f 1f       	adc	r17, r31
     65e:	03 c0       	rjmp	.+6      	; 0x666 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     660:	a7 df       	rcall	.-178    	; 0x5b0 <lcd_putc>
			charnum++;
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     666:	c8 01       	movw	r24, r16
     668:	b7 01       	movw	r22, r14
     66a:	4d d7       	rcall	.+3738   	; 0x1506 <__divmodhi4>
     66c:	89 2b       	or	r24, r25
     66e:	89 f4       	brne	.+34     	; 0x692 <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     670:	c8 01       	movw	r24, r16
     672:	b7 01       	movw	r22, r14
     674:	48 d7       	rcall	.+3728   	; 0x1506 <__divmodhi4>
     676:	62 30       	cpi	r22, 0x02	; 2
     678:	71 05       	cpc	r23, r1
     67a:	41 f0       	breq	.+16     	; 0x68c <lprintf+0xb8>
     67c:	63 30       	cpi	r22, 0x03	; 3
     67e:	71 05       	cpc	r23, r1
     680:	39 f0       	breq	.+14     	; 0x690 <lprintf+0xbc>
     682:	61 30       	cpi	r22, 0x01	; 1
     684:	71 05       	cpc	r23, r1
     686:	29 f4       	brne	.+10     	; 0x692 <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     688:	8a df       	rcall	.-236    	; 0x59e <lcd_home_line2>
				break;
     68a:	03 c0       	rjmp	.+6      	; 0x692 <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     68c:	8b df       	rcall	.-234    	; 0x5a4 <lcd_home_line3>
				break;
     68e:	01 c0       	rjmp	.+2      	; 0x692 <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     690:	8c df       	rcall	.-232    	; 0x5aa <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     692:	f6 01       	movw	r30, r12
     694:	81 91       	ld	r24, Z+
     696:	6f 01       	movw	r12, r30
     698:	88 23       	and	r24, r24
     69a:	19 f0       	breq	.+6      	; 0x6a2 <lprintf+0xce>
     69c:	00 35       	cpi	r16, 0x50	; 80
     69e:	11 05       	cpc	r17, r1
     6a0:	a4 f2       	brlt	.-88     	; 0x64a <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     6a2:	cf 5a       	subi	r28, 0xAF	; 175
     6a4:	df 4f       	sbci	r29, 0xFF	; 255
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret

000006c2 <move_backward>:
		sum += sensor->distance;
	}
}

void move_backward(oi_t *sensor, int centimeters)
{
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     6cc:	eb 01       	movw	r28, r22
     6ce:	cc 0f       	add	r28, r28
     6d0:	dd 1f       	adc	r29, r29
     6d2:	66 0f       	add	r22, r22
     6d4:	77 1f       	adc	r23, r23
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	66 0f       	add	r22, r22
     6dc:	77 1f       	adc	r23, r23
     6de:	c6 0f       	add	r28, r22
     6e0:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     6e2:	68 e3       	ldi	r22, 0x38	; 56
     6e4:	7f ef       	ldi	r23, 0xFF	; 255
     6e6:	88 e3       	ldi	r24, 0x38	; 56
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	e7 d0       	rcall	.+462    	; 0x8ba <oi_set_wheels>
	while (sum > 0) {
     6ec:	1c 16       	cp	r1, r28
     6ee:	1d 06       	cpc	r1, r29
     6f0:	54 f4       	brge	.+20     	; 0x706 <move_backward+0x44>
		oi_update(sensor);
     6f2:	c8 01       	movw	r24, r16
     6f4:	01 d1       	rcall	.+514    	; 0x8f8 <oi_update>
		sum += sensor->distance;
     6f6:	f8 01       	movw	r30, r16
     6f8:	84 85       	ldd	r24, Z+12	; 0x0c
     6fa:	95 85       	ldd	r25, Z+13	; 0x0d
     6fc:	c8 0f       	add	r28, r24
     6fe:	d9 1f       	adc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     700:	1c 16       	cp	r1, r28
     702:	1d 06       	cpc	r1, r29
     704:	b4 f3       	brlt	.-20     	; 0x6f2 <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	d5 d0       	rcall	.+426    	; 0x8ba <oi_set_wheels>
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	8c 01       	movw	r16, r24
     724:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     726:	66 e9       	ldi	r22, 0x96	; 150
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	8a e6       	ldi	r24, 0x6A	; 106
     72c:	9f ef       	ldi	r25, 0xFF	; 255
     72e:	c5 d0       	rcall	.+394    	; 0x8ba <oi_set_wheels>
	while (sum > 0) {
     730:	1c 16       	cp	r1, r28
     732:	1d 06       	cpc	r1, r29
     734:	54 f4       	brge	.+20     	; 0x74a <turn_clockwise+0x30>
		oi_update(sensor);
     736:	c8 01       	movw	r24, r16
     738:	df d0       	rcall	.+446    	; 0x8f8 <oi_update>
		sum += sensor->angle;
     73a:	f8 01       	movw	r30, r16
     73c:	86 85       	ldd	r24, Z+14	; 0x0e
     73e:	97 85       	ldd	r25, Z+15	; 0x0f
     740:	c8 0f       	add	r28, r24
     742:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     744:	1c 16       	cp	r1, r28
     746:	1d 06       	cpc	r1, r29
     748:	b4 f3       	brlt	.-20     	; 0x736 <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	b3 d0       	rcall	.+358    	; 0x8ba <oi_set_wheels>
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <turn_counterClockwise>:

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	8c 01       	movw	r16, r24
     76c:	7b 01       	movw	r14, r22
	int sum = 0;
	oi_set_wheels(150, -150);  // start turning
     76e:	6a e6       	ldi	r22, 0x6A	; 106
     770:	7f ef       	ldi	r23, 0xFF	; 255
     772:	86 e9       	ldi	r24, 0x96	; 150
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	a1 d0       	rcall	.+322    	; 0x8ba <oi_set_wheels>
	while (sum < degrees) {
     778:	1e 14       	cp	r1, r14
     77a:	1f 04       	cpc	r1, r15
     77c:	64 f4       	brge	.+24     	; 0x796 <turn_counterClockwise+0x38>
	oi_set_wheels(0, 0);		// stop turning
}

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
	int sum = 0;
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(150, -150);  // start turning
	while (sum < degrees) {
		oi_update(sensor);
     782:	c8 01       	movw	r24, r16
     784:	b9 d0       	rcall	.+370    	; 0x8f8 <oi_update>
		sum += sensor->angle;
     786:	f8 01       	movw	r30, r16
     788:	86 85       	ldd	r24, Z+14	; 0x0e
     78a:	97 85       	ldd	r25, Z+15	; 0x0f
     78c:	c8 0f       	add	r28, r24
     78e:	d9 1f       	adc	r29, r25

void turn_counterClockwise(oi_t *sensor, int degrees) 
{
	int sum = 0;
	oi_set_wheels(150, -150);  // start turning
	while (sum < degrees) {
     790:	ce 15       	cp	r28, r14
     792:	df 05       	cpc	r29, r15
     794:	b4 f3       	brlt	.-20     	; 0x782 <turn_counterClockwise+0x24>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	8d d0       	rcall	.+282    	; 0x8ba <oi_set_wheels>
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	08 95       	ret

000007ae <move_forward>:
#include "movement.h"
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeters) 
{
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
     7c0:	6b 01       	movw	r12, r22
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
     7c2:	68 ec       	ldi	r22, 0xC8	; 200
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	77 d0       	rcall	.+238    	; 0x8ba <oi_set_wheels>
	while (sum < centimeters * 10) {
     7cc:	76 01       	movw	r14, r12
     7ce:	ee 0c       	add	r14, r14
     7d0:	ff 1c       	adc	r15, r15
     7d2:	c6 01       	movw	r24, r12
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	e8 0e       	add	r14, r24
     7e2:	f9 1e       	adc	r15, r25
     7e4:	1e 14       	cp	r1, r14
     7e6:	1f 04       	cpc	r1, r15
     7e8:	84 f5       	brge	.+96     	; 0x84a <move_forward+0x9c>
		if (sensor->bumper_left || sensor->bumper_right) {
     7ea:	88 81       	ld	r24, Y
     7ec:	83 70       	andi	r24, 0x03	; 3
     7ee:	11 f1       	breq	.+68     	; 0x834 <move_forward+0x86>
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <move_forward+0x4c>
     7f2:	88 81       	ld	r24, Y
     7f4:	83 70       	andi	r24, 0x03	; 3
     7f6:	01 f1       	breq	.+64     	; 0x838 <move_forward+0x8a>
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <move_forward+0x50>
#include "movement.h"
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	10 e0       	ldi	r17, 0x00	; 0
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
		if (sensor->bumper_left || sensor->bumper_right) {
			move_backward(sensor, 15);
     7fe:	6f e0       	ldi	r22, 0x0F	; 15
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	ce 01       	movw	r24, r28
     804:	5e df       	rcall	.-324    	; 0x6c2 <move_backward>
			turn_clockwise(sensor, 87);
     806:	67 e5       	ldi	r22, 0x57	; 87
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	ce 01       	movw	r24, r28
     80c:	86 df       	rcall	.-244    	; 0x71a <turn_clockwise>
			move_forward(sensor, 25);
     80e:	69 e1       	ldi	r22, 0x19	; 25
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	ce 01       	movw	r24, r28
     814:	cc df       	rcall	.-104    	; 0x7ae <move_forward>
			turn_counterClockwise(sensor, 87);
     816:	67 e5       	ldi	r22, 0x57	; 87
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	ce 01       	movw	r24, r28
     81c:	a0 df       	rcall	.-192    	; 0x75e <turn_counterClockwise>
			move_forward(sensor, (centimeters - (sum / 10)));
     81e:	c8 01       	movw	r24, r16
     820:	6a e0       	ldi	r22, 0x0A	; 10
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	70 d6       	rcall	.+3296   	; 0x1506 <__divmodhi4>
     826:	c6 01       	movw	r24, r12
     828:	86 1b       	sub	r24, r22
     82a:	97 0b       	sbc	r25, r23
     82c:	bc 01       	movw	r22, r24
     82e:	ce 01       	movw	r24, r28
     830:	be df       	rcall	.-132    	; 0x7ae <move_forward>
			break;
     832:	0b c0       	rjmp	.+22     	; 0x84a <move_forward+0x9c>
#include "movement.h"
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     834:	00 e0       	ldi	r16, 0x00	; 0
     836:	10 e0       	ldi	r17, 0x00	; 0
			move_forward(sensor, 25);
			turn_counterClockwise(sensor, 87);
			move_forward(sensor, (centimeters - (sum / 10)));
			break;
		}
		oi_update(sensor);
     838:	ce 01       	movw	r24, r28
     83a:	5e d0       	rcall	.+188    	; 0x8f8 <oi_update>
		sum += sensor->distance;
     83c:	8c 85       	ldd	r24, Y+12	; 0x0c
     83e:	9d 85       	ldd	r25, Y+13	; 0x0d
     840:	08 0f       	add	r16, r24
     842:	19 1f       	adc	r17, r25

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     844:	0e 15       	cp	r16, r14
     846:	1f 05       	cpc	r17, r15
     848:	a4 f2       	brlt	.-88     	; 0x7f2 <move_forward+0x44>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	33 d0       	rcall	.+102    	; 0x8ba <oi_set_wheels>
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	08 95       	ret

00000866 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     866:	64 e3       	ldi	r22, 0x34	; 52
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	72 c6       	rjmp	.+3300   	; 0x1554 <calloc>
     870:	08 95       	ret

00000872 <oi_byte_tx>:
     872:	eb e9       	ldi	r30, 0x9B	; 155
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	90 81       	ld	r25, Z
     878:	95 ff       	sbrs	r25, 5
     87a:	fd cf       	rjmp	.-6      	; 0x876 <oi_byte_tx+0x4>
     87c:	80 93 9c 00 	sts	0x009C, r24
     880:	08 95       	ret

00000882 <oi_set_leds>:
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	08 2f       	mov	r16, r24
     88c:	16 2f       	mov	r17, r22
     88e:	d4 2f       	mov	r29, r20
     890:	c2 2f       	mov	r28, r18
     892:	8b e8       	ldi	r24, 0x8B	; 139
     894:	ee df       	rcall	.-36     	; 0x872 <oi_byte_tx>
     896:	11 23       	and	r17, r17
     898:	29 f0       	breq	.+10     	; 0x8a4 <oi_set_leds+0x22>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	01 11       	cpse	r16, r1
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <oi_set_leds+0x24>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <oi_set_leds+0x24>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	e5 df       	rcall	.-54     	; 0x872 <oi_byte_tx>
     8a8:	8d 2f       	mov	r24, r29
     8aa:	e3 df       	rcall	.-58     	; 0x872 <oi_byte_tx>
     8ac:	8c 2f       	mov	r24, r28
     8ae:	e1 df       	rcall	.-62     	; 0x872 <oi_byte_tx>
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <oi_set_wheels>:
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	18 2f       	mov	r17, r24
     8c4:	09 2f       	mov	r16, r25
     8c6:	c6 2f       	mov	r28, r22
     8c8:	d7 2f       	mov	r29, r23
     8ca:	81 e9       	ldi	r24, 0x91	; 145
     8cc:	d2 df       	rcall	.-92     	; 0x872 <oi_byte_tx>
     8ce:	80 2f       	mov	r24, r16
     8d0:	d0 df       	rcall	.-96     	; 0x872 <oi_byte_tx>
     8d2:	81 2f       	mov	r24, r17
     8d4:	ce df       	rcall	.-100    	; 0x872 <oi_byte_tx>
     8d6:	8d 2f       	mov	r24, r29
     8d8:	cc df       	rcall	.-104    	; 0x872 <oi_byte_tx>
     8da:	8c 2f       	mov	r24, r28
     8dc:	ca df       	rcall	.-108    	; 0x872 <oi_byte_tx>
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     8e8:	eb e9       	ldi	r30, 0x9B	; 155
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	88 23       	and	r24, r24
     8f0:	ec f7       	brge	.-6      	; 0x8ec <oi_byte_rx+0x4>

	return UDR1;
     8f2:	80 91 9c 00 	lds	r24, 0x009C
}
     8f6:	08 95       	ret

000008f8 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     906:	80 91 9b 00 	lds	r24, 0x009B
     90a:	88 23       	and	r24, r24
     90c:	44 f4       	brge	.+16     	; 0x91e <oi_update+0x26>
		i = UDR1;
     90e:	ac e9       	ldi	r26, 0x9C	; 156
     910:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     912:	eb e9       	ldi	r30, 0x9B	; 155
     914:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     916:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     918:	80 81       	ld	r24, Z
     91a:	88 23       	and	r24, r24
     91c:	e4 f3       	brlt	.-8      	; 0x916 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     91e:	8e e8       	ldi	r24, 0x8E	; 142
     920:	a8 df       	rcall	.-176    	; 0x872 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	a6 df       	rcall	.-180    	; 0x872 <oi_byte_tx>
     926:	e7 01       	movw	r28, r14
     928:	87 01       	movw	r16, r14
     92a:	0c 5c       	subi	r16, 0xCC	; 204
     92c:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     92e:	dc df       	rcall	.-72     	; 0x8e8 <oi_byte_rx>
     930:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     932:	c0 17       	cp	r28, r16
     934:	d1 07       	cpc	r29, r17
     936:	d9 f7       	brne	.-10     	; 0x92e <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     938:	f7 01       	movw	r30, r14
     93a:	84 85       	ldd	r24, Z+12	; 0x0c
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	98 2f       	mov	r25, r24
     940:	88 27       	eor	r24, r24
     942:	25 85       	ldd	r18, Z+13	; 0x0d
     944:	82 0f       	add	r24, r18
     946:	91 1d       	adc	r25, r1
     948:	95 87       	std	Z+13, r25	; 0x0d
     94a:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     94c:	86 85       	ldd	r24, Z+14	; 0x0e
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	98 2f       	mov	r25, r24
     952:	88 27       	eor	r24, r24
     954:	27 85       	ldd	r18, Z+15	; 0x0f
     956:	82 0f       	add	r24, r18
     958:	91 1d       	adc	r25, r1
     95a:	97 87       	std	Z+15, r25	; 0x0f
     95c:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     95e:	81 89       	ldd	r24, Z+17	; 0x11
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	98 2f       	mov	r25, r24
     964:	88 27       	eor	r24, r24
     966:	22 89       	ldd	r18, Z+18	; 0x12
     968:	82 0f       	add	r24, r18
     96a:	91 1d       	adc	r25, r1
     96c:	92 8b       	std	Z+18, r25	; 0x12
     96e:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     970:	83 89       	ldd	r24, Z+19	; 0x13
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	98 2f       	mov	r25, r24
     976:	88 27       	eor	r24, r24
     978:	24 89       	ldd	r18, Z+20	; 0x14
     97a:	82 0f       	add	r24, r18
     97c:	91 1d       	adc	r25, r1
     97e:	94 8b       	std	Z+20, r25	; 0x14
     980:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     982:	86 89       	ldd	r24, Z+22	; 0x16
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	98 2f       	mov	r25, r24
     988:	88 27       	eor	r24, r24
     98a:	27 89       	ldd	r18, Z+23	; 0x17
     98c:	82 0f       	add	r24, r18
     98e:	91 1d       	adc	r25, r1
     990:	97 8b       	std	Z+23, r25	; 0x17
     992:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     994:	80 8d       	ldd	r24, Z+24	; 0x18
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	98 2f       	mov	r25, r24
     99a:	88 27       	eor	r24, r24
     99c:	21 8d       	ldd	r18, Z+25	; 0x19
     99e:	82 0f       	add	r24, r18
     9a0:	91 1d       	adc	r25, r1
     9a2:	91 8f       	std	Z+25, r25	; 0x19
     9a4:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     9a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	98 2f       	mov	r25, r24
     9ac:	88 27       	eor	r24, r24
     9ae:	23 8d       	ldd	r18, Z+27	; 0x1b
     9b0:	82 0f       	add	r24, r18
     9b2:	91 1d       	adc	r25, r1
     9b4:	93 8f       	std	Z+27, r25	; 0x1b
     9b6:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     9b8:	84 8d       	ldd	r24, Z+28	; 0x1c
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	98 2f       	mov	r25, r24
     9be:	88 27       	eor	r24, r24
     9c0:	25 8d       	ldd	r18, Z+29	; 0x1d
     9c2:	82 0f       	add	r24, r18
     9c4:	91 1d       	adc	r25, r1
     9c6:	95 8f       	std	Z+29, r25	; 0x1d
     9c8:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     9ca:	86 8d       	ldd	r24, Z+30	; 0x1e
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	98 2f       	mov	r25, r24
     9d0:	88 27       	eor	r24, r24
     9d2:	27 8d       	ldd	r18, Z+31	; 0x1f
     9d4:	82 0f       	add	r24, r18
     9d6:	91 1d       	adc	r25, r1
     9d8:	97 8f       	std	Z+31, r25	; 0x1f
     9da:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     9dc:	80 a1       	ldd	r24, Z+32	; 0x20
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	98 2f       	mov	r25, r24
     9e2:	88 27       	eor	r24, r24
     9e4:	21 a1       	ldd	r18, Z+33	; 0x21
     9e6:	82 0f       	add	r24, r18
     9e8:	91 1d       	adc	r25, r1
     9ea:	91 a3       	std	Z+33, r25	; 0x21
     9ec:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     9ee:	82 a1       	ldd	r24, Z+34	; 0x22
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	98 2f       	mov	r25, r24
     9f4:	88 27       	eor	r24, r24
     9f6:	23 a1       	ldd	r18, Z+35	; 0x23
     9f8:	82 0f       	add	r24, r18
     9fa:	91 1d       	adc	r25, r1
     9fc:	93 a3       	std	Z+35, r25	; 0x23
     9fe:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     a00:	82 a5       	ldd	r24, Z+42	; 0x2a
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	21 a5       	ldd	r18, Z+41	; 0x29
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	32 2f       	mov	r19, r18
     a0a:	22 27       	eor	r18, r18
     a0c:	28 0f       	add	r18, r24
     a0e:	39 1f       	adc	r19, r25
     a10:	36 a3       	std	Z+38, r19	; 0x26
     a12:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     a14:	20 a9       	ldd	r18, Z+48	; 0x30
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	32 2f       	mov	r19, r18
     a1a:	22 27       	eor	r18, r18
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	95 a7       	std	Z+45, r25	; 0x2d
     a22:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     a24:	82 a9       	ldd	r24, Z+50	; 0x32
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	98 2f       	mov	r25, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	23 a9       	ldd	r18, Z+51	; 0x33
     a2e:	82 0f       	add	r24, r18
     a30:	91 1d       	adc	r25, r1
     a32:	97 a7       	std	Z+47, r25	; 0x2f
     a34:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     a36:	84 a9       	ldd	r24, Z+52	; 0x34
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	98 2f       	mov	r25, r24
     a3c:	88 27       	eor	r24, r24
     a3e:	25 a9       	ldd	r18, Z+53	; 0x35
     a40:	82 0f       	add	r24, r18
     a42:	91 1d       	adc	r25, r1
     a44:	91 ab       	std	Z+49, r25	; 0x31
     a46:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     a48:	86 a9       	ldd	r24, Z+54	; 0x36
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	98 2f       	mov	r25, r24
     a4e:	88 27       	eor	r24, r24
     a50:	27 a9       	ldd	r18, Z+55	; 0x37
     a52:	82 0f       	add	r24, r18
     a54:	91 1d       	adc	r25, r1
     a56:	93 ab       	std	Z+51, r25	; 0x33
     a58:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     a5a:	83 e2       	ldi	r24, 0x23	; 35
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	4f d0       	rcall	.+158    	; 0xafe <wait_ms>
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     a78:	09 e9       	ldi	r16, 0x99	; 153
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	80 e1       	ldi	r24, 0x10	; 16
     a7e:	f8 01       	movw	r30, r16
     a80:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     a82:	88 e1       	ldi	r24, 0x18	; 24
     a84:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     a8e:	80 e8       	ldi	r24, 0x80	; 128
     a90:	f0 de       	rcall	.-544    	; 0x872 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     a92:	81 e8       	ldi	r24, 0x81	; 129
     a94:	ee de       	rcall	.-548    	; 0x872 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	ec de       	rcall	.-552    	; 0x872 <oi_byte_tx>
	wait_ms(100);
     a9a:	84 e6       	ldi	r24, 0x64	; 100
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	2f d0       	rcall	.+94     	; 0xafe <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     aa0:	81 e2       	ldi	r24, 0x21	; 33
     aa2:	f8 01       	movw	r30, r16
     aa4:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     aa6:	84 e8       	ldi	r24, 0x84	; 132
     aa8:	e4 de       	rcall	.-568    	; 0x872 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     aaa:	2f ef       	ldi	r18, 0xFF	; 255
     aac:	47 e0       	ldi	r20, 0x07	; 7
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	e7 de       	rcall	.-562    	; 0x882 <oi_set_leds>
	
	oi_update(self);
     ab4:	ce 01       	movw	r24, r28
     ab6:	20 df       	rcall	.-448    	; 0x8f8 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     ab8:	ce 01       	movw	r24, r28
     aba:	1e df       	rcall	.-452    	; 0x8f8 <oi_update>
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <timer2_start>:
 * Turn the stepper motor a given number of steps. 
 *
 * @param num_steps A value between 1 and 200 steps (1.8 to 360 degrees)
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
     ac6:	10 92 c9 01 	sts	0x01C9, r1
     aca:	10 92 c8 01 	sts	0x01C8, r1
     ace:	81 11       	cpse	r24, r1
     ad0:	06 c0       	rjmp	.+12     	; 0xade <timer2_start+0x18>
     ad2:	8b e0       	ldi	r24, 0x0B	; 11
     ad4:	85 bd       	out	0x25, r24	; 37
     ad6:	87 b7       	in	r24, 0x37	; 55
     ad8:	80 68       	ori	r24, 0x80	; 128
     ada:	87 bf       	out	0x37, r24	; 55
     adc:	07 c0       	rjmp	.+14     	; 0xaec <timer2_start+0x26>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	29 f4       	brne	.+10     	; 0xaec <timer2_start+0x26>
     ae2:	89 e0       	ldi	r24, 0x09	; 9
     ae4:	85 bd       	out	0x25, r24	; 37
     ae6:	87 b7       	in	r24, 0x37	; 55
     ae8:	80 68       	ori	r24, 0x80	; 128
     aea:	87 bf       	out	0x37, r24	; 55
     aec:	78 94       	sei
     aee:	08 95       	ret

00000af0 <timer2_stop>:
     af0:	87 b7       	in	r24, 0x37	; 55
     af2:	8f 77       	andi	r24, 0x7F	; 127
     af4:	87 bf       	out	0x37, r24	; 55
     af6:	85 b5       	in	r24, 0x25	; 37
     af8:	8f 77       	andi	r24, 0x7F	; 127
     afa:	85 bd       	out	0x25, r24	; 37
     afc:	08 95       	ret

00000afe <wait_ms>:
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	8a ef       	ldi	r24, 0xFA	; 250
     b06:	83 bd       	out	0x23, r24	; 35
     b08:	10 92 c9 01 	sts	0x01C9, r1
     b0c:	10 92 c8 01 	sts	0x01C8, r1
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	d9 df       	rcall	.-78     	; 0xac6 <timer2_start>
     b14:	20 91 c8 01 	lds	r18, 0x01C8
     b18:	30 91 c9 01 	lds	r19, 0x01C9
     b1c:	2c 17       	cp	r18, r28
     b1e:	3d 07       	cpc	r19, r29
     b20:	c8 f3       	brcs	.-14     	; 0xb14 <wait_ms+0x16>
     b22:	e6 df       	rcall	.-52     	; 0xaf0 <timer2_stop>
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <__vector_9>:
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	80 91 c8 01 	lds	r24, 0x01C8
     b3c:	90 91 c9 01 	lds	r25, 0x01C9
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	90 93 c9 01 	sts	0x01C9, r25
     b46:	80 93 c8 01 	sts	0x01C8, r24
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <USART_init>:

void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
     b58:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
     b5c:	82 e2       	ldi	r24, 0x22	; 34
     b5e:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
     b64:	8e e0       	ldi	r24, 0x0E	; 14
     b66:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	8a b9       	out	0x0a, r24	; 10
     b6e:	08 95       	ret

00000b70 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
     b70:	5f 9b       	sbis	0x0b, 7	; 11
     b72:	fe cf       	rjmp	.-4      	; 0xb70 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     b74:	8c b1       	in	r24, 0x0c	; 12
}
     b76:	08 95       	ret

00000b78 <USART_Transmit>:
	    //  Copy 9th bit to TXB8 
	        /*UCSR0B &= ~(1<<TXB8);
	        if ( data & 0x0100 )
	        UCSR0B |= (1<<TXB8);*/
			/* Wait for empty transmit buffer by checking the UDRE bit */
while ((UCSR0A & 0b00100000) == 0)
     b78:	5d 9b       	sbis	0x0b, 5	; 11
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <USART_Transmit>
 {
 }
/* Put data into transmit buffer; sends the data */
UDR0 = data;
     b7c:	8c b9       	out	0x0c, r24	; 12
     b7e:	08 95       	ret

00000b80 <move_servo>:
	    //    Put data into buffeasdfr, sends the data
	       // UDR0 = data;
        }
		
		int move_servo(int degree){
			int conv = 20*degree+800;
     b80:	24 e1       	ldi	r18, 0x14	; 20
     b82:	ac 01       	movw	r20, r24
     b84:	24 9f       	mul	r18, r20
     b86:	c0 01       	movw	r24, r0
     b88:	25 9f       	mul	r18, r21
     b8a:	90 0d       	add	r25, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	80 5e       	subi	r24, 0xE0	; 224
     b90:	9c 4f       	sbci	r25, 0xFC	; 252
			OCR3B = conv;
     b92:	90 93 85 00 	sts	0x0085, r25
     b96:	80 93 84 00 	sts	0x0084, r24
			return conv;
		}
     b9a:	08 95       	ret

00000b9c <timer3_init>:

		void timer3_init(void){
			TCCR3A = 0b00100011;
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	80 93 8b 00 	sts	0x008B, r24
			TCCR3B = 0b00011010;
     ba2:	8a e1       	ldi	r24, 0x1A	; 26
     ba4:	80 93 8a 00 	sts	0x008A, r24
			OCR3A = 0b1010011111111000;
     ba8:	88 ef       	ldi	r24, 0xF8	; 248
     baa:	97 ea       	ldi	r25, 0xA7	; 167
     bac:	90 93 87 00 	sts	0x0087, r25
     bb0:	80 93 86 00 	sts	0x0086, r24
			OCR3B = 800;	//4250=180d //3500= 135d //2600=90d //1700 = 45d //0800 = 0d
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	90 93 85 00 	sts	0x0085, r25
     bbc:	80 93 84 00 	sts	0x0084, r24
			//wait_ms(2000);
			//OCR3B = 0b0000011111010000;
			DDRE = 0b00010000;
     bc0:	80 e1       	ldi	r24, 0x10	; 16
     bc2:	82 b9       	out	0x02, r24	; 2
     bc4:	08 95       	ret

00000bc6 <send_pulse>:
		}
		
		void send_pulse(void){
			DDRD |=0x10;
     bc6:	8c 9a       	sbi	0x11, 4	; 17
			PORTD |= 0x10;
     bc8:	94 9a       	sbi	0x12, 4	; 18
			wait_ms(1);
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	97 df       	rcall	.-210    	; 0xafe <wait_ms>
			PORTD &=0xEF;
     bd0:	94 98       	cbi	0x12, 4	; 18
			DDRD &=0xEF;
     bd2:	8c 98       	cbi	0x11, 4	; 17
     bd4:	08 95       	ret

00000bd6 <__vector_11>:
		//Overflow code pulled from lecture notes, overflow in print statement is a constant -1
		//ISR (TIMER1_OVF_vect) {
		//	new_overflows++;
		//}

		ISR(TIMER1_CAPT_vect){
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
			if(State==RISING){
     be8:	80 91 c7 01 	lds	r24, 0x01C7
     bec:	81 11       	cpse	r24, r1
     bee:	13 c0       	rjmp	.+38     	; 0xc16 <__vector_11+0x40>
				rising_time=ICR1;
     bf0:	86 b5       	in	r24, 0x26	; 38
     bf2:	97 b5       	in	r25, 0x27	; 39
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	80 93 c3 01 	sts	0x01C3, r24
     bfc:	90 93 c4 01 	sts	0x01C4, r25
     c00:	a0 93 c5 01 	sts	0x01C5, r26
     c04:	b0 93 c6 01 	sts	0x01C6, r27
				State = FALLING;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 c7 01 	sts	0x01C7, r24
				TCCR1B &= 0b10111111;
     c0e:	8e b5       	in	r24, 0x2e	; 46
     c10:	8f 7b       	andi	r24, 0xBF	; 191
     c12:	8e bd       	out	0x2e, r24	; 46
     c14:	16 c0       	rjmp	.+44     	; 0xc42 <__vector_11+0x6c>
			}
			else if(State==FALLING){
     c16:	80 91 c7 01 	lds	r24, 0x01C7
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 f4       	brne	.+36     	; 0xc42 <__vector_11+0x6c>
				falling_time=ICR1;
     c1e:	86 b5       	in	r24, 0x26	; 38
     c20:	97 b5       	in	r25, 0x27	; 39
     c22:	a0 e0       	ldi	r26, 0x00	; 0
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	80 93 bf 01 	sts	0x01BF, r24
     c2a:	90 93 c0 01 	sts	0x01C0, r25
     c2e:	a0 93 c1 01 	sts	0x01C1, r26
     c32:	b0 93 c2 01 	sts	0x01C2, r27
				State = DONE;
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	80 93 c7 01 	sts	0x01C7, r24
				TCCR1B |= 0b01000000;
     c3c:	8e b5       	in	r24, 0x2e	; 46
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	8e bd       	out	0x2e, r24	; 46
			}
		}
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <pinginit>:

void pinginit(void){
	TIFR = 0b00000000;
     c54:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
     c56:	83 ec       	ldi	r24, 0xC3	; 195
     c58:	8e bd       	out	0x2e, r24	; 46
     c5a:	08 95       	ret

00000c5c <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
     c5c:	10 92 c7 01 	sts	0x01C7, r1
	TIMSK &= 0b11011111;
     c60:	87 b7       	in	r24, 0x37	; 55
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	87 bf       	out	0x37, r24	; 55
	send_pulse();
     c66:	af df       	rcall	.-162    	; 0xbc6 <send_pulse>
	TIFR |= 0b00100000;
     c68:	86 b7       	in	r24, 0x36	; 54
     c6a:	80 62       	ori	r24, 0x20	; 32
     c6c:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
     c6e:	87 b7       	in	r24, 0x37	; 55
     c70:	80 62       	ori	r24, 0x20	; 32
     c72:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
     c74:	80 91 c7 01 	lds	r24, 0x01C7
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
     c7c:	40 91 bf 01 	lds	r20, 0x01BF
     c80:	50 91 c0 01 	lds	r21, 0x01C0
     c84:	60 91 c1 01 	lds	r22, 0x01C1
     c88:	70 91 c2 01 	lds	r23, 0x01C2
     c8c:	80 91 c3 01 	lds	r24, 0x01C3
     c90:	90 91 c4 01 	lds	r25, 0x01C4
     c94:	a0 91 c5 01 	lds	r26, 0x01C5
     c98:	b0 91 c6 01 	lds	r27, 0x01C6
     c9c:	ba 01       	movw	r22, r20
     c9e:	68 1b       	sub	r22, r24
     ca0:	79 0b       	sbc	r23, r25
	
	milliseconds = ping / 250;
	
	centimeters = ping / 14.70588;
     ca2:	88 27       	eor	r24, r24
     ca4:	77 fd       	sbrc	r23, 7
     ca6:	80 95       	com	r24
     ca8:	98 2f       	mov	r25, r24
     caa:	46 d1       	rcall	.+652    	; 0xf38 <__floatsisf>
     cac:	29 e4       	ldi	r18, 0x49	; 73
     cae:	3b e4       	ldi	r19, 0x4B	; 75
     cb0:	4b e6       	ldi	r20, 0x6B	; 107
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	a6 d0       	rcall	.+332    	; 0xe02 <__divsf3>
     cb6:	0d d1       	rcall	.+538    	; 0xed2 <__fixsfsi>
	
	return centimeters;
	
}
     cb8:	cb 01       	movw	r24, r22
     cba:	08 95       	ret

00000cbc <ADC_init>:

void ADC_init(void){
	ADMUX=0b11000010;
     cbc:	82 ec       	ldi	r24, 0xC2	; 194
     cbe:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
     cc0:	87 e8       	ldi	r24, 0x87	; 135
     cc2:	86 b9       	out	0x06, r24	; 6
     cc4:	08 95       	ret

00000cc6 <ADC_read>:
}
int ADC_read(void){
	ADCSRA |= 0b01000000;
     cc6:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
     cc8:	36 99       	sbic	0x06, 6	; 6
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <ADC_read+0x2>
	return ADC;
     ccc:	84 b1       	in	r24, 0x04	; 4
     cce:	95 b1       	in	r25, 0x05	; 5
}
     cd0:	08 95       	ret

00000cd2 <getIrDistance>:
	int distance=0;

	int value1=0;
int getIrDistance(void){
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	c5 e0       	ldi	r28, 0x05	; 5
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
     ce2:	f1 df       	rcall	.-30     	; 0xcc6 <ADC_read>
     ce4:	08 0f       	add	r16, r24
     ce6:	19 1f       	adc	r17, r25
     ce8:	21 97       	sbiw	r28, 0x01	; 1
	int distance=0;

	int value1=0;
int getIrDistance(void){
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
     cea:	20 97       	sbiw	r28, 0x00	; 0
     cec:	d1 f7       	brne	.-12     	; 0xce2 <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
     cee:	c8 01       	movw	r24, r16
     cf0:	65 e0       	ldi	r22, 0x05	; 5
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	08 d4       	rcall	.+2064   	; 0x1506 <__divmodhi4>
     cf6:	70 93 bc 01 	sts	0x01BC, r23
     cfa:	60 93 bb 01 	sts	0x01BB, r22
	distance = 24443*pow(value1,(-1.156));
     cfe:	88 27       	eor	r24, r24
     d00:	77 fd       	sbrc	r23, 7
     d02:	80 95       	com	r24
     d04:	98 2f       	mov	r25, r24
     d06:	18 d1       	rcall	.+560    	; 0xf38 <__floatsisf>
     d08:	2f ec       	ldi	r18, 0xCF	; 207
     d0a:	37 ef       	ldi	r19, 0xF7	; 247
     d0c:	43 e9       	ldi	r20, 0x93	; 147
     d0e:	5f eb       	ldi	r21, 0xBF	; 191
     d10:	3b d2       	rcall	.+1142   	; 0x1188 <pow>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	36 ef       	ldi	r19, 0xF6	; 246
     d16:	4e eb       	ldi	r20, 0xBE	; 190
     d18:	56 e4       	ldi	r21, 0x46	; 70
     d1a:	d3 d1       	rcall	.+934    	; 0x10c2 <__mulsf3>
     d1c:	da d0       	rcall	.+436    	; 0xed2 <__fixsfsi>
     d1e:	70 93 be 01 	sts	0x01BE, r23
     d22:	60 93 bd 01 	sts	0x01BD, r22
	return distance;
     d26:	cb 01       	movw	r24, r22
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <__subsf3>:
     d32:	50 58       	subi	r21, 0x80	; 128

00000d34 <__addsf3>:
     d34:	bb 27       	eor	r27, r27
     d36:	aa 27       	eor	r26, r26
     d38:	0e d0       	rcall	.+28     	; 0xd56 <__addsf3x>
     d3a:	78 c1       	rjmp	.+752    	; 0x102c <__fp_round>
     d3c:	41 d1       	rcall	.+642    	; 0xfc0 <__fp_pscA>
     d3e:	30 f0       	brcs	.+12     	; 0xd4c <__addsf3+0x18>
     d40:	46 d1       	rcall	.+652    	; 0xfce <__fp_pscB>
     d42:	20 f0       	brcs	.+8      	; 0xd4c <__addsf3+0x18>
     d44:	31 f4       	brne	.+12     	; 0xd52 <__addsf3+0x1e>
     d46:	9f 3f       	cpi	r25, 0xFF	; 255
     d48:	11 f4       	brne	.+4      	; 0xd4e <__addsf3+0x1a>
     d4a:	1e f4       	brtc	.+6      	; 0xd52 <__addsf3+0x1e>
     d4c:	36 c1       	rjmp	.+620    	; 0xfba <__fp_nan>
     d4e:	0e f4       	brtc	.+2      	; 0xd52 <__addsf3+0x1e>
     d50:	e0 95       	com	r30
     d52:	e7 fb       	bst	r30, 7
     d54:	2c c1       	rjmp	.+600    	; 0xfae <__fp_inf>

00000d56 <__addsf3x>:
     d56:	e9 2f       	mov	r30, r25
     d58:	8b d1       	rcall	.+790    	; 0x1070 <__fp_split3>
     d5a:	80 f3       	brcs	.-32     	; 0xd3c <__addsf3+0x8>
     d5c:	ba 17       	cp	r27, r26
     d5e:	62 07       	cpc	r22, r18
     d60:	73 07       	cpc	r23, r19
     d62:	84 07       	cpc	r24, r20
     d64:	95 07       	cpc	r25, r21
     d66:	18 f0       	brcs	.+6      	; 0xd6e <__addsf3x+0x18>
     d68:	71 f4       	brne	.+28     	; 0xd86 <__addsf3x+0x30>
     d6a:	9e f5       	brtc	.+102    	; 0xdd2 <__addsf3x+0x7c>
     d6c:	a3 c1       	rjmp	.+838    	; 0x10b4 <__fp_zero>
     d6e:	0e f4       	brtc	.+2      	; 0xd72 <__addsf3x+0x1c>
     d70:	e0 95       	com	r30
     d72:	0b 2e       	mov	r0, r27
     d74:	ba 2f       	mov	r27, r26
     d76:	a0 2d       	mov	r26, r0
     d78:	0b 01       	movw	r0, r22
     d7a:	b9 01       	movw	r22, r18
     d7c:	90 01       	movw	r18, r0
     d7e:	0c 01       	movw	r0, r24
     d80:	ca 01       	movw	r24, r20
     d82:	a0 01       	movw	r20, r0
     d84:	11 24       	eor	r1, r1
     d86:	ff 27       	eor	r31, r31
     d88:	59 1b       	sub	r21, r25
     d8a:	99 f0       	breq	.+38     	; 0xdb2 <__addsf3x+0x5c>
     d8c:	59 3f       	cpi	r21, 0xF9	; 249
     d8e:	50 f4       	brcc	.+20     	; 0xda4 <__addsf3x+0x4e>
     d90:	50 3e       	cpi	r21, 0xE0	; 224
     d92:	68 f1       	brcs	.+90     	; 0xdee <__addsf3x+0x98>
     d94:	1a 16       	cp	r1, r26
     d96:	f0 40       	sbci	r31, 0x00	; 0
     d98:	a2 2f       	mov	r26, r18
     d9a:	23 2f       	mov	r18, r19
     d9c:	34 2f       	mov	r19, r20
     d9e:	44 27       	eor	r20, r20
     da0:	58 5f       	subi	r21, 0xF8	; 248
     da2:	f3 cf       	rjmp	.-26     	; 0xd8a <__addsf3x+0x34>
     da4:	46 95       	lsr	r20
     da6:	37 95       	ror	r19
     da8:	27 95       	ror	r18
     daa:	a7 95       	ror	r26
     dac:	f0 40       	sbci	r31, 0x00	; 0
     dae:	53 95       	inc	r21
     db0:	c9 f7       	brne	.-14     	; 0xda4 <__addsf3x+0x4e>
     db2:	7e f4       	brtc	.+30     	; 0xdd2 <__addsf3x+0x7c>
     db4:	1f 16       	cp	r1, r31
     db6:	ba 0b       	sbc	r27, r26
     db8:	62 0b       	sbc	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	84 0b       	sbc	r24, r20
     dbe:	ba f0       	brmi	.+46     	; 0xdee <__addsf3x+0x98>
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	a1 f0       	breq	.+40     	; 0xdec <__addsf3x+0x96>
     dc4:	ff 0f       	add	r31, r31
     dc6:	bb 1f       	adc	r27, r27
     dc8:	66 1f       	adc	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	c2 f7       	brpl	.-16     	; 0xdc0 <__addsf3x+0x6a>
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <__addsf3x+0x98>
     dd2:	ba 0f       	add	r27, r26
     dd4:	62 1f       	adc	r22, r18
     dd6:	73 1f       	adc	r23, r19
     dd8:	84 1f       	adc	r24, r20
     dda:	48 f4       	brcc	.+18     	; 0xdee <__addsf3x+0x98>
     ddc:	87 95       	ror	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	f7 95       	ror	r31
     de6:	9e 3f       	cpi	r25, 0xFE	; 254
     de8:	08 f0       	brcs	.+2      	; 0xdec <__addsf3x+0x96>
     dea:	b3 cf       	rjmp	.-154    	; 0xd52 <__addsf3+0x1e>
     dec:	93 95       	inc	r25
     dee:	88 0f       	add	r24, r24
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <__addsf3x+0x9e>
     df2:	99 27       	eor	r25, r25
     df4:	ee 0f       	add	r30, r30
     df6:	97 95       	ror	r25
     df8:	87 95       	ror	r24
     dfa:	08 95       	ret

00000dfc <cos>:
     dfc:	f0 d0       	rcall	.+480    	; 0xfde <__fp_rempio2>
     dfe:	e3 95       	inc	r30
     e00:	26 c1       	rjmp	.+588    	; 0x104e <__fp_sinus>

00000e02 <__divsf3>:
     e02:	0c d0       	rcall	.+24     	; 0xe1c <__divsf3x>
     e04:	13 c1       	rjmp	.+550    	; 0x102c <__fp_round>
     e06:	e3 d0       	rcall	.+454    	; 0xfce <__fp_pscB>
     e08:	40 f0       	brcs	.+16     	; 0xe1a <__divsf3+0x18>
     e0a:	da d0       	rcall	.+436    	; 0xfc0 <__fp_pscA>
     e0c:	30 f0       	brcs	.+12     	; 0xe1a <__divsf3+0x18>
     e0e:	21 f4       	brne	.+8      	; 0xe18 <__divsf3+0x16>
     e10:	5f 3f       	cpi	r21, 0xFF	; 255
     e12:	19 f0       	breq	.+6      	; 0xe1a <__divsf3+0x18>
     e14:	cc c0       	rjmp	.+408    	; 0xfae <__fp_inf>
     e16:	51 11       	cpse	r21, r1
     e18:	4e c1       	rjmp	.+668    	; 0x10b6 <__fp_szero>
     e1a:	cf c0       	rjmp	.+414    	; 0xfba <__fp_nan>

00000e1c <__divsf3x>:
     e1c:	29 d1       	rcall	.+594    	; 0x1070 <__fp_split3>
     e1e:	98 f3       	brcs	.-26     	; 0xe06 <__divsf3+0x4>

00000e20 <__divsf3_pse>:
     e20:	99 23       	and	r25, r25
     e22:	c9 f3       	breq	.-14     	; 0xe16 <__divsf3+0x14>
     e24:	55 23       	and	r21, r21
     e26:	b1 f3       	breq	.-20     	; 0xe14 <__divsf3+0x12>
     e28:	95 1b       	sub	r25, r21
     e2a:	55 0b       	sbc	r21, r21
     e2c:	bb 27       	eor	r27, r27
     e2e:	aa 27       	eor	r26, r26
     e30:	62 17       	cp	r22, r18
     e32:	73 07       	cpc	r23, r19
     e34:	84 07       	cpc	r24, r20
     e36:	38 f0       	brcs	.+14     	; 0xe46 <__divsf3_pse+0x26>
     e38:	9f 5f       	subi	r25, 0xFF	; 255
     e3a:	5f 4f       	sbci	r21, 0xFF	; 255
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	44 1f       	adc	r20, r20
     e42:	aa 1f       	adc	r26, r26
     e44:	a9 f3       	breq	.-22     	; 0xe30 <__divsf3_pse+0x10>
     e46:	33 d0       	rcall	.+102    	; 0xeae <__divsf3_pse+0x8e>
     e48:	0e 2e       	mov	r0, r30
     e4a:	3a f0       	brmi	.+14     	; 0xe5a <__divsf3_pse+0x3a>
     e4c:	e0 e8       	ldi	r30, 0x80	; 128
     e4e:	30 d0       	rcall	.+96     	; 0xeb0 <__divsf3_pse+0x90>
     e50:	91 50       	subi	r25, 0x01	; 1
     e52:	50 40       	sbci	r21, 0x00	; 0
     e54:	e6 95       	lsr	r30
     e56:	00 1c       	adc	r0, r0
     e58:	ca f7       	brpl	.-14     	; 0xe4c <__divsf3_pse+0x2c>
     e5a:	29 d0       	rcall	.+82     	; 0xeae <__divsf3_pse+0x8e>
     e5c:	fe 2f       	mov	r31, r30
     e5e:	27 d0       	rcall	.+78     	; 0xeae <__divsf3_pse+0x8e>
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	88 1f       	adc	r24, r24
     e66:	bb 1f       	adc	r27, r27
     e68:	26 17       	cp	r18, r22
     e6a:	37 07       	cpc	r19, r23
     e6c:	48 07       	cpc	r20, r24
     e6e:	ab 07       	cpc	r26, r27
     e70:	b0 e8       	ldi	r27, 0x80	; 128
     e72:	09 f0       	breq	.+2      	; 0xe76 <__divsf3_pse+0x56>
     e74:	bb 0b       	sbc	r27, r27
     e76:	80 2d       	mov	r24, r0
     e78:	bf 01       	movw	r22, r30
     e7a:	ff 27       	eor	r31, r31
     e7c:	93 58       	subi	r25, 0x83	; 131
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__divsf3_pse+0x6c>
     e82:	9e 3f       	cpi	r25, 0xFE	; 254
     e84:	51 05       	cpc	r21, r1
     e86:	68 f0       	brcs	.+26     	; 0xea2 <__divsf3_pse+0x82>
     e88:	92 c0       	rjmp	.+292    	; 0xfae <__fp_inf>
     e8a:	15 c1       	rjmp	.+554    	; 0x10b6 <__fp_szero>
     e8c:	5f 3f       	cpi	r21, 0xFF	; 255
     e8e:	ec f3       	brlt	.-6      	; 0xe8a <__divsf3_pse+0x6a>
     e90:	98 3e       	cpi	r25, 0xE8	; 232
     e92:	dc f3       	brlt	.-10     	; 0xe8a <__divsf3_pse+0x6a>
     e94:	86 95       	lsr	r24
     e96:	77 95       	ror	r23
     e98:	67 95       	ror	r22
     e9a:	b7 95       	ror	r27
     e9c:	f7 95       	ror	r31
     e9e:	9f 5f       	subi	r25, 0xFF	; 255
     ea0:	c9 f7       	brne	.-14     	; 0xe94 <__divsf3_pse+0x74>
     ea2:	88 0f       	add	r24, r24
     ea4:	91 1d       	adc	r25, r1
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret
     eae:	e1 e0       	ldi	r30, 0x01	; 1
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	bb 1f       	adc	r27, r27
     eb8:	62 17       	cp	r22, r18
     eba:	73 07       	cpc	r23, r19
     ebc:	84 07       	cpc	r24, r20
     ebe:	ba 07       	cpc	r27, r26
     ec0:	20 f0       	brcs	.+8      	; 0xeca <__divsf3_pse+0xaa>
     ec2:	62 1b       	sub	r22, r18
     ec4:	73 0b       	sbc	r23, r19
     ec6:	84 0b       	sbc	r24, r20
     ec8:	ba 0b       	sbc	r27, r26
     eca:	ee 1f       	adc	r30, r30
     ecc:	88 f7       	brcc	.-30     	; 0xeb0 <__divsf3_pse+0x90>
     ece:	e0 95       	com	r30
     ed0:	08 95       	ret

00000ed2 <__fixsfsi>:
     ed2:	04 d0       	rcall	.+8      	; 0xedc <__fixunssfsi>
     ed4:	68 94       	set
     ed6:	b1 11       	cpse	r27, r1
     ed8:	ee c0       	rjmp	.+476    	; 0x10b6 <__fp_szero>
     eda:	08 95       	ret

00000edc <__fixunssfsi>:
     edc:	d1 d0       	rcall	.+418    	; 0x1080 <__fp_splitA>
     ede:	88 f0       	brcs	.+34     	; 0xf02 <__fixunssfsi+0x26>
     ee0:	9f 57       	subi	r25, 0x7F	; 127
     ee2:	90 f0       	brcs	.+36     	; 0xf08 <__fixunssfsi+0x2c>
     ee4:	b9 2f       	mov	r27, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	b7 51       	subi	r27, 0x17	; 23
     eea:	a0 f0       	brcs	.+40     	; 0xf14 <__fixunssfsi+0x38>
     eec:	d1 f0       	breq	.+52     	; 0xf22 <__fixunssfsi+0x46>
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	1a f0       	brmi	.+6      	; 0xefe <__fixunssfsi+0x22>
     ef8:	ba 95       	dec	r27
     efa:	c9 f7       	brne	.-14     	; 0xeee <__fixunssfsi+0x12>
     efc:	12 c0       	rjmp	.+36     	; 0xf22 <__fixunssfsi+0x46>
     efe:	b1 30       	cpi	r27, 0x01	; 1
     f00:	81 f0       	breq	.+32     	; 0xf22 <__fixunssfsi+0x46>
     f02:	d8 d0       	rcall	.+432    	; 0x10b4 <__fp_zero>
     f04:	b1 e0       	ldi	r27, 0x01	; 1
     f06:	08 95       	ret
     f08:	d5 c0       	rjmp	.+426    	; 0x10b4 <__fp_zero>
     f0a:	67 2f       	mov	r22, r23
     f0c:	78 2f       	mov	r23, r24
     f0e:	88 27       	eor	r24, r24
     f10:	b8 5f       	subi	r27, 0xF8	; 248
     f12:	39 f0       	breq	.+14     	; 0xf22 <__fixunssfsi+0x46>
     f14:	b9 3f       	cpi	r27, 0xF9	; 249
     f16:	cc f3       	brlt	.-14     	; 0xf0a <__fixunssfsi+0x2e>
     f18:	86 95       	lsr	r24
     f1a:	77 95       	ror	r23
     f1c:	67 95       	ror	r22
     f1e:	b3 95       	inc	r27
     f20:	d9 f7       	brne	.-10     	; 0xf18 <__fixunssfsi+0x3c>
     f22:	3e f4       	brtc	.+14     	; 0xf32 <__fixunssfsi+0x56>
     f24:	90 95       	com	r25
     f26:	80 95       	com	r24
     f28:	70 95       	com	r23
     f2a:	61 95       	neg	r22
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	08 95       	ret

00000f34 <__floatunsisf>:
     f34:	e8 94       	clt
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__floatsisf+0x12>

00000f38 <__floatsisf>:
     f38:	97 fb       	bst	r25, 7
     f3a:	3e f4       	brtc	.+14     	; 0xf4a <__floatsisf+0x12>
     f3c:	90 95       	com	r25
     f3e:	80 95       	com	r24
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	99 23       	and	r25, r25
     f4c:	a9 f0       	breq	.+42     	; 0xf78 <__floatsisf+0x40>
     f4e:	f9 2f       	mov	r31, r25
     f50:	96 e9       	ldi	r25, 0x96	; 150
     f52:	bb 27       	eor	r27, r27
     f54:	93 95       	inc	r25
     f56:	f6 95       	lsr	r31
     f58:	87 95       	ror	r24
     f5a:	77 95       	ror	r23
     f5c:	67 95       	ror	r22
     f5e:	b7 95       	ror	r27
     f60:	f1 11       	cpse	r31, r1
     f62:	f8 cf       	rjmp	.-16     	; 0xf54 <__floatsisf+0x1c>
     f64:	fa f4       	brpl	.+62     	; 0xfa4 <__floatsisf+0x6c>
     f66:	bb 0f       	add	r27, r27
     f68:	11 f4       	brne	.+4      	; 0xf6e <__floatsisf+0x36>
     f6a:	60 ff       	sbrs	r22, 0
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <__floatsisf+0x6c>
     f6e:	6f 5f       	subi	r22, 0xFF	; 255
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <__floatsisf+0x6c>
     f78:	88 23       	and	r24, r24
     f7a:	11 f0       	breq	.+4      	; 0xf80 <__floatsisf+0x48>
     f7c:	96 e9       	ldi	r25, 0x96	; 150
     f7e:	11 c0       	rjmp	.+34     	; 0xfa2 <__floatsisf+0x6a>
     f80:	77 23       	and	r23, r23
     f82:	21 f0       	breq	.+8      	; 0xf8c <__floatsisf+0x54>
     f84:	9e e8       	ldi	r25, 0x8E	; 142
     f86:	87 2f       	mov	r24, r23
     f88:	76 2f       	mov	r23, r22
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <__floatsisf+0x5e>
     f8c:	66 23       	and	r22, r22
     f8e:	71 f0       	breq	.+28     	; 0xfac <__floatsisf+0x74>
     f90:	96 e8       	ldi	r25, 0x86	; 134
     f92:	86 2f       	mov	r24, r22
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	2a f0       	brmi	.+10     	; 0xfa4 <__floatsisf+0x6c>
     f9a:	9a 95       	dec	r25
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	da f7       	brpl	.-10     	; 0xf9a <__floatsisf+0x62>
     fa4:	88 0f       	add	r24, r24
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__fp_inf>:
     fae:	97 f9       	bld	r25, 7
     fb0:	9f 67       	ori	r25, 0x7F	; 127
     fb2:	80 e8       	ldi	r24, 0x80	; 128
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	08 95       	ret

00000fba <__fp_nan>:
     fba:	9f ef       	ldi	r25, 0xFF	; 255
     fbc:	80 ec       	ldi	r24, 0xC0	; 192
     fbe:	08 95       	ret

00000fc0 <__fp_pscA>:
     fc0:	00 24       	eor	r0, r0
     fc2:	0a 94       	dec	r0
     fc4:	16 16       	cp	r1, r22
     fc6:	17 06       	cpc	r1, r23
     fc8:	18 06       	cpc	r1, r24
     fca:	09 06       	cpc	r0, r25
     fcc:	08 95       	ret

00000fce <__fp_pscB>:
     fce:	00 24       	eor	r0, r0
     fd0:	0a 94       	dec	r0
     fd2:	12 16       	cp	r1, r18
     fd4:	13 06       	cpc	r1, r19
     fd6:	14 06       	cpc	r1, r20
     fd8:	05 06       	cpc	r0, r21
     fda:	08 95       	ret
     fdc:	ee cf       	rjmp	.-36     	; 0xfba <__fp_nan>

00000fde <__fp_rempio2>:
     fde:	50 d0       	rcall	.+160    	; 0x1080 <__fp_splitA>
     fe0:	e8 f3       	brcs	.-6      	; 0xfdc <__fp_pscB+0xe>
     fe2:	e8 94       	clt
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	bb 27       	eor	r27, r27
     fe8:	9f 57       	subi	r25, 0x7F	; 127
     fea:	f0 f0       	brcs	.+60     	; 0x1028 <__fp_rempio2+0x4a>
     fec:	2a ed       	ldi	r18, 0xDA	; 218
     fee:	3f e0       	ldi	r19, 0x0F	; 15
     ff0:	49 ec       	ldi	r20, 0xC9	; 201
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <__fp_rempio2+0x22>
     ff4:	ee 0f       	add	r30, r30
     ff6:	bb 0f       	add	r27, r27
     ff8:	66 1f       	adc	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	28 f0       	brcs	.+10     	; 0x100a <__fp_rempio2+0x2c>
    1000:	b2 3a       	cpi	r27, 0xA2	; 162
    1002:	62 07       	cpc	r22, r18
    1004:	73 07       	cpc	r23, r19
    1006:	84 07       	cpc	r24, r20
    1008:	28 f0       	brcs	.+10     	; 0x1014 <__fp_rempio2+0x36>
    100a:	b2 5a       	subi	r27, 0xA2	; 162
    100c:	62 0b       	sbc	r22, r18
    100e:	73 0b       	sbc	r23, r19
    1010:	84 0b       	sbc	r24, r20
    1012:	e3 95       	inc	r30
    1014:	9a 95       	dec	r25
    1016:	72 f7       	brpl	.-36     	; 0xff4 <__fp_rempio2+0x16>
    1018:	80 38       	cpi	r24, 0x80	; 128
    101a:	30 f4       	brcc	.+12     	; 0x1028 <__fp_rempio2+0x4a>
    101c:	9a 95       	dec	r25
    101e:	bb 0f       	add	r27, r27
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	d2 f7       	brpl	.-12     	; 0x101c <__fp_rempio2+0x3e>
    1028:	90 48       	sbci	r25, 0x80	; 128
    102a:	6f c1       	rjmp	.+734    	; 0x130a <__fp_mpack_finite>

0000102c <__fp_round>:
    102c:	09 2e       	mov	r0, r25
    102e:	03 94       	inc	r0
    1030:	00 0c       	add	r0, r0
    1032:	11 f4       	brne	.+4      	; 0x1038 <__fp_round+0xc>
    1034:	88 23       	and	r24, r24
    1036:	52 f0       	brmi	.+20     	; 0x104c <__fp_round+0x20>
    1038:	bb 0f       	add	r27, r27
    103a:	40 f4       	brcc	.+16     	; 0x104c <__fp_round+0x20>
    103c:	bf 2b       	or	r27, r31
    103e:	11 f4       	brne	.+4      	; 0x1044 <__fp_round+0x18>
    1040:	60 ff       	sbrs	r22, 0
    1042:	04 c0       	rjmp	.+8      	; 0x104c <__fp_round+0x20>
    1044:	6f 5f       	subi	r22, 0xFF	; 255
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	08 95       	ret

0000104e <__fp_sinus>:
    104e:	ef 93       	push	r30
    1050:	e0 ff       	sbrs	r30, 0
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <__fp_sinus+0x12>
    1054:	a2 ea       	ldi	r26, 0xA2	; 162
    1056:	2a ed       	ldi	r18, 0xDA	; 218
    1058:	3f e0       	ldi	r19, 0x0F	; 15
    105a:	49 ec       	ldi	r20, 0xC9	; 201
    105c:	5f eb       	ldi	r21, 0xBF	; 191
    105e:	7b de       	rcall	.-778    	; 0xd56 <__addsf3x>
    1060:	e5 df       	rcall	.-54     	; 0x102c <__fp_round>
    1062:	0f 90       	pop	r0
    1064:	03 94       	inc	r0
    1066:	01 fc       	sbrc	r0, 1
    1068:	90 58       	subi	r25, 0x80	; 128
    106a:	ec e8       	ldi	r30, 0x8C	; 140
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	85 c1       	rjmp	.+778    	; 0x137a <__fp_powsodd>

00001070 <__fp_split3>:
    1070:	57 fd       	sbrc	r21, 7
    1072:	90 58       	subi	r25, 0x80	; 128
    1074:	44 0f       	add	r20, r20
    1076:	55 1f       	adc	r21, r21
    1078:	59 f0       	breq	.+22     	; 0x1090 <__fp_splitA+0x10>
    107a:	5f 3f       	cpi	r21, 0xFF	; 255
    107c:	71 f0       	breq	.+28     	; 0x109a <__fp_splitA+0x1a>
    107e:	47 95       	ror	r20

00001080 <__fp_splitA>:
    1080:	88 0f       	add	r24, r24
    1082:	97 fb       	bst	r25, 7
    1084:	99 1f       	adc	r25, r25
    1086:	61 f0       	breq	.+24     	; 0x10a0 <__fp_splitA+0x20>
    1088:	9f 3f       	cpi	r25, 0xFF	; 255
    108a:	79 f0       	breq	.+30     	; 0x10aa <__fp_splitA+0x2a>
    108c:	87 95       	ror	r24
    108e:	08 95       	ret
    1090:	12 16       	cp	r1, r18
    1092:	13 06       	cpc	r1, r19
    1094:	14 06       	cpc	r1, r20
    1096:	55 1f       	adc	r21, r21
    1098:	f2 cf       	rjmp	.-28     	; 0x107e <__fp_split3+0xe>
    109a:	46 95       	lsr	r20
    109c:	f1 df       	rcall	.-30     	; 0x1080 <__fp_splitA>
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <__fp_splitA+0x30>
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	18 06       	cpc	r1, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	f1 cf       	rjmp	.-30     	; 0x108c <__fp_splitA+0xc>
    10aa:	86 95       	lsr	r24
    10ac:	71 05       	cpc	r23, r1
    10ae:	61 05       	cpc	r22, r1
    10b0:	08 94       	sec
    10b2:	08 95       	ret

000010b4 <__fp_zero>:
    10b4:	e8 94       	clt

000010b6 <__fp_szero>:
    10b6:	bb 27       	eor	r27, r27
    10b8:	66 27       	eor	r22, r22
    10ba:	77 27       	eor	r23, r23
    10bc:	cb 01       	movw	r24, r22
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__mulsf3>:
    10c2:	0b d0       	rcall	.+22     	; 0x10da <__mulsf3x>
    10c4:	b3 cf       	rjmp	.-154    	; 0x102c <__fp_round>
    10c6:	7c df       	rcall	.-264    	; 0xfc0 <__fp_pscA>
    10c8:	28 f0       	brcs	.+10     	; 0x10d4 <__mulsf3+0x12>
    10ca:	81 df       	rcall	.-254    	; 0xfce <__fp_pscB>
    10cc:	18 f0       	brcs	.+6      	; 0x10d4 <__mulsf3+0x12>
    10ce:	95 23       	and	r25, r21
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <__mulsf3+0x12>
    10d2:	6d cf       	rjmp	.-294    	; 0xfae <__fp_inf>
    10d4:	72 cf       	rjmp	.-284    	; 0xfba <__fp_nan>
    10d6:	11 24       	eor	r1, r1
    10d8:	ee cf       	rjmp	.-36     	; 0x10b6 <__fp_szero>

000010da <__mulsf3x>:
    10da:	ca df       	rcall	.-108    	; 0x1070 <__fp_split3>
    10dc:	a0 f3       	brcs	.-24     	; 0x10c6 <__mulsf3+0x4>

000010de <__mulsf3_pse>:
    10de:	95 9f       	mul	r25, r21
    10e0:	d1 f3       	breq	.-12     	; 0x10d6 <__mulsf3+0x14>
    10e2:	95 0f       	add	r25, r21
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	55 1f       	adc	r21, r21
    10e8:	62 9f       	mul	r22, r18
    10ea:	f0 01       	movw	r30, r0
    10ec:	72 9f       	mul	r23, r18
    10ee:	bb 27       	eor	r27, r27
    10f0:	f0 0d       	add	r31, r0
    10f2:	b1 1d       	adc	r27, r1
    10f4:	63 9f       	mul	r22, r19
    10f6:	aa 27       	eor	r26, r26
    10f8:	f0 0d       	add	r31, r0
    10fa:	b1 1d       	adc	r27, r1
    10fc:	aa 1f       	adc	r26, r26
    10fe:	64 9f       	mul	r22, r20
    1100:	66 27       	eor	r22, r22
    1102:	b0 0d       	add	r27, r0
    1104:	a1 1d       	adc	r26, r1
    1106:	66 1f       	adc	r22, r22
    1108:	82 9f       	mul	r24, r18
    110a:	22 27       	eor	r18, r18
    110c:	b0 0d       	add	r27, r0
    110e:	a1 1d       	adc	r26, r1
    1110:	62 1f       	adc	r22, r18
    1112:	73 9f       	mul	r23, r19
    1114:	b0 0d       	add	r27, r0
    1116:	a1 1d       	adc	r26, r1
    1118:	62 1f       	adc	r22, r18
    111a:	83 9f       	mul	r24, r19
    111c:	a0 0d       	add	r26, r0
    111e:	61 1d       	adc	r22, r1
    1120:	22 1f       	adc	r18, r18
    1122:	74 9f       	mul	r23, r20
    1124:	33 27       	eor	r19, r19
    1126:	a0 0d       	add	r26, r0
    1128:	61 1d       	adc	r22, r1
    112a:	23 1f       	adc	r18, r19
    112c:	84 9f       	mul	r24, r20
    112e:	60 0d       	add	r22, r0
    1130:	21 1d       	adc	r18, r1
    1132:	82 2f       	mov	r24, r18
    1134:	76 2f       	mov	r23, r22
    1136:	6a 2f       	mov	r22, r26
    1138:	11 24       	eor	r1, r1
    113a:	9f 57       	subi	r25, 0x7F	; 127
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	8a f0       	brmi	.+34     	; 0x1162 <__stack+0x63>
    1140:	e1 f0       	breq	.+56     	; 0x117a <__stack+0x7b>
    1142:	88 23       	and	r24, r24
    1144:	4a f0       	brmi	.+18     	; 0x1158 <__stack+0x59>
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	bb 1f       	adc	r27, r27
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	50 40       	sbci	r21, 0x00	; 0
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__stack+0x43>
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	51 05       	cpc	r21, r1
    115c:	70 f0       	brcs	.+28     	; 0x117a <__stack+0x7b>
    115e:	27 cf       	rjmp	.-434    	; 0xfae <__fp_inf>
    1160:	aa cf       	rjmp	.-172    	; 0x10b6 <__fp_szero>
    1162:	5f 3f       	cpi	r21, 0xFF	; 255
    1164:	ec f3       	brlt	.-6      	; 0x1160 <__stack+0x61>
    1166:	98 3e       	cpi	r25, 0xE8	; 232
    1168:	dc f3       	brlt	.-10     	; 0x1160 <__stack+0x61>
    116a:	86 95       	lsr	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f7 95       	ror	r31
    1174:	e7 95       	ror	r30
    1176:	9f 5f       	subi	r25, 0xFF	; 255
    1178:	c1 f7       	brne	.-16     	; 0x116a <__stack+0x6b>
    117a:	fe 2b       	or	r31, r30
    117c:	88 0f       	add	r24, r24
    117e:	91 1d       	adc	r25, r1
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret

00001188 <pow>:
    1188:	fa 01       	movw	r30, r20
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	30 96       	adiw	r30, 0x00	; 0
    1190:	21 05       	cpc	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	99 f1       	breq	.+102    	; 0x11fc <pow+0x74>
    1196:	61 15       	cp	r22, r1
    1198:	71 05       	cpc	r23, r1
    119a:	61 f4       	brne	.+24     	; 0x11b4 <pow+0x2c>
    119c:	80 38       	cpi	r24, 0x80	; 128
    119e:	bf e3       	ldi	r27, 0x3F	; 63
    11a0:	9b 07       	cpc	r25, r27
    11a2:	49 f1       	breq	.+82     	; 0x11f6 <pow+0x6e>
    11a4:	68 94       	set
    11a6:	90 38       	cpi	r25, 0x80	; 128
    11a8:	81 05       	cpc	r24, r1
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <pow+0x3c>
    11ac:	80 38       	cpi	r24, 0x80	; 128
    11ae:	bf ef       	ldi	r27, 0xFF	; 255
    11b0:	9b 07       	cpc	r25, r27
    11b2:	41 f0       	breq	.+16     	; 0x11c4 <pow+0x3c>
    11b4:	99 23       	and	r25, r25
    11b6:	42 f5       	brpl	.+80     	; 0x1208 <pow+0x80>
    11b8:	ff 3f       	cpi	r31, 0xFF	; 255
    11ba:	e1 05       	cpc	r30, r1
    11bc:	31 05       	cpc	r19, r1
    11be:	21 05       	cpc	r18, r1
    11c0:	11 f1       	breq	.+68     	; 0x1206 <pow+0x7e>
    11c2:	e8 94       	clt
    11c4:	08 94       	sec
    11c6:	e7 95       	ror	r30
    11c8:	d9 01       	movw	r26, r18
    11ca:	aa 23       	and	r26, r26
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <pow+0x50>
    11ce:	ab 2f       	mov	r26, r27
    11d0:	be 2f       	mov	r27, r30
    11d2:	f8 5f       	subi	r31, 0xF8	; 248
    11d4:	d0 f3       	brcs	.-12     	; 0x11ca <pow+0x42>
    11d6:	10 c0       	rjmp	.+32     	; 0x11f8 <pow+0x70>
    11d8:	ff 5f       	subi	r31, 0xFF	; 255
    11da:	70 f4       	brcc	.+28     	; 0x11f8 <pow+0x70>
    11dc:	a6 95       	lsr	r26
    11de:	e0 f7       	brcc	.-8      	; 0x11d8 <pow+0x50>
    11e0:	f7 39       	cpi	r31, 0x97	; 151
    11e2:	50 f0       	brcs	.+20     	; 0x11f8 <pow+0x70>
    11e4:	19 f0       	breq	.+6      	; 0x11ec <pow+0x64>
    11e6:	ff 3a       	cpi	r31, 0xAF	; 175
    11e8:	38 f4       	brcc	.+14     	; 0x11f8 <pow+0x70>
    11ea:	9f 77       	andi	r25, 0x7F	; 127
    11ec:	9f 93       	push	r25
    11ee:	0c d0       	rcall	.+24     	; 0x1208 <pow+0x80>
    11f0:	0f 90       	pop	r0
    11f2:	07 fc       	sbrc	r0, 7
    11f4:	90 58       	subi	r25, 0x80	; 128
    11f6:	08 95       	ret
    11f8:	3e f0       	brts	.+14     	; 0x1208 <pow+0x80>
    11fa:	df ce       	rjmp	.-578    	; 0xfba <__fp_nan>
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	9f e3       	ldi	r25, 0x3F	; 63
    1204:	08 95       	ret
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	9f 77       	andi	r25, 0x7F	; 127
    120a:	5f 93       	push	r21
    120c:	4f 93       	push	r20
    120e:	3f 93       	push	r19
    1210:	2f 93       	push	r18
    1212:	06 d1       	rcall	.+524    	; 0x1420 <log>
    1214:	2f 91       	pop	r18
    1216:	3f 91       	pop	r19
    1218:	4f 91       	pop	r20
    121a:	5f 91       	pop	r21
    121c:	52 df       	rcall	.-348    	; 0x10c2 <__mulsf3>
    121e:	47 c0       	rjmp	.+142    	; 0x12ae <exp>
    1220:	11 f4       	brne	.+4      	; 0x1226 <pow+0x9e>
    1222:	0e f4       	brtc	.+2      	; 0x1226 <pow+0x9e>
    1224:	ca ce       	rjmp	.-620    	; 0xfba <__fp_nan>
    1226:	6f c0       	rjmp	.+222    	; 0x1306 <__fp_mpack>

00001228 <sqrt>:
    1228:	2b df       	rcall	.-426    	; 0x1080 <__fp_splitA>
    122a:	d0 f3       	brcs	.-12     	; 0x1220 <pow+0x98>
    122c:	99 23       	and	r25, r25
    122e:	d9 f3       	breq	.-10     	; 0x1226 <pow+0x9e>
    1230:	ce f3       	brts	.-14     	; 0x1224 <pow+0x9c>
    1232:	9f 57       	subi	r25, 0x7F	; 127
    1234:	55 0b       	sbc	r21, r21
    1236:	87 ff       	sbrs	r24, 7
    1238:	74 d0       	rcall	.+232    	; 0x1322 <__fp_norm2>
    123a:	00 24       	eor	r0, r0
    123c:	a0 e6       	ldi	r26, 0x60	; 96
    123e:	40 ea       	ldi	r20, 0xA0	; 160
    1240:	90 01       	movw	r18, r0
    1242:	80 58       	subi	r24, 0x80	; 128
    1244:	56 95       	lsr	r21
    1246:	97 95       	ror	r25
    1248:	28 f4       	brcc	.+10     	; 0x1254 <sqrt+0x2c>
    124a:	80 5c       	subi	r24, 0xC0	; 192
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	20 f0       	brcs	.+8      	; 0x125c <sqrt+0x34>
    1254:	26 17       	cp	r18, r22
    1256:	37 07       	cpc	r19, r23
    1258:	48 07       	cpc	r20, r24
    125a:	30 f4       	brcc	.+12     	; 0x1268 <sqrt+0x40>
    125c:	62 1b       	sub	r22, r18
    125e:	73 0b       	sbc	r23, r19
    1260:	84 0b       	sbc	r24, r20
    1262:	20 29       	or	r18, r0
    1264:	31 29       	or	r19, r1
    1266:	4a 2b       	or	r20, r26
    1268:	a6 95       	lsr	r26
    126a:	17 94       	ror	r1
    126c:	07 94       	ror	r0
    126e:	20 25       	eor	r18, r0
    1270:	31 25       	eor	r19, r1
    1272:	4a 27       	eor	r20, r26
    1274:	58 f7       	brcc	.-42     	; 0x124c <sqrt+0x24>
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	20 f0       	brcs	.+8      	; 0x1286 <sqrt+0x5e>
    127e:	26 17       	cp	r18, r22
    1280:	37 07       	cpc	r19, r23
    1282:	48 07       	cpc	r20, r24
    1284:	30 f4       	brcc	.+12     	; 0x1292 <sqrt+0x6a>
    1286:	62 0b       	sbc	r22, r18
    1288:	73 0b       	sbc	r23, r19
    128a:	84 0b       	sbc	r24, r20
    128c:	20 0d       	add	r18, r0
    128e:	31 1d       	adc	r19, r1
    1290:	41 1d       	adc	r20, r1
    1292:	a0 95       	com	r26
    1294:	81 f7       	brne	.-32     	; 0x1276 <sqrt+0x4e>
    1296:	b9 01       	movw	r22, r18
    1298:	84 2f       	mov	r24, r20
    129a:	91 58       	subi	r25, 0x81	; 129
    129c:	88 0f       	add	r24, r24
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	08 95       	ret
    12a4:	19 f4       	brne	.+6      	; 0x12ac <sqrt+0x84>
    12a6:	0e f0       	brts	.+2      	; 0x12aa <sqrt+0x82>
    12a8:	82 ce       	rjmp	.-764    	; 0xfae <__fp_inf>
    12aa:	04 cf       	rjmp	.-504    	; 0x10b4 <__fp_zero>
    12ac:	86 ce       	rjmp	.-756    	; 0xfba <__fp_nan>

000012ae <exp>:
    12ae:	e8 de       	rcall	.-560    	; 0x1080 <__fp_splitA>
    12b0:	c8 f3       	brcs	.-14     	; 0x12a4 <sqrt+0x7c>
    12b2:	96 38       	cpi	r25, 0x86	; 134
    12b4:	c0 f7       	brcc	.-16     	; 0x12a6 <sqrt+0x7e>
    12b6:	07 f8       	bld	r0, 7
    12b8:	0f 92       	push	r0
    12ba:	e8 94       	clt
    12bc:	2b e3       	ldi	r18, 0x3B	; 59
    12be:	3a ea       	ldi	r19, 0xAA	; 170
    12c0:	48 eb       	ldi	r20, 0xB8	; 184
    12c2:	5f e7       	ldi	r21, 0x7F	; 127
    12c4:	0c df       	rcall	.-488    	; 0x10de <__mulsf3_pse>
    12c6:	0f 92       	push	r0
    12c8:	0f 92       	push	r0
    12ca:	0f 92       	push	r0
    12cc:	4d b7       	in	r20, 0x3d	; 61
    12ce:	5e b7       	in	r21, 0x3e	; 62
    12d0:	0f 92       	push	r0
    12d2:	e6 d0       	rcall	.+460    	; 0x14a0 <modf>
    12d4:	ea ea       	ldi	r30, 0xAA	; 170
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	2b d0       	rcall	.+86     	; 0x1330 <__fp_powser>
    12da:	4f 91       	pop	r20
    12dc:	5f 91       	pop	r21
    12de:	ef 91       	pop	r30
    12e0:	ff 91       	pop	r31
    12e2:	e5 95       	asr	r30
    12e4:	ee 1f       	adc	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	49 f0       	breq	.+18     	; 0x12fc <exp+0x4e>
    12ea:	fe 57       	subi	r31, 0x7E	; 126
    12ec:	e0 68       	ori	r30, 0x80	; 128
    12ee:	44 27       	eor	r20, r20
    12f0:	ee 0f       	add	r30, r30
    12f2:	44 1f       	adc	r20, r20
    12f4:	fa 95       	dec	r31
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <exp+0x42>
    12f8:	41 95       	neg	r20
    12fa:	55 0b       	sbc	r21, r21
    12fc:	58 d0       	rcall	.+176    	; 0x13ae <ldexp>
    12fe:	0f 90       	pop	r0
    1300:	07 fe       	sbrs	r0, 7
    1302:	4c c0       	rjmp	.+152    	; 0x139c <inverse>
    1304:	08 95       	ret

00001306 <__fp_mpack>:
    1306:	9f 3f       	cpi	r25, 0xFF	; 255
    1308:	31 f0       	breq	.+12     	; 0x1316 <__fp_mpack_finite+0xc>

0000130a <__fp_mpack_finite>:
    130a:	91 50       	subi	r25, 0x01	; 1
    130c:	20 f4       	brcc	.+8      	; 0x1316 <__fp_mpack_finite+0xc>
    130e:	87 95       	ror	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	88 0f       	add	r24, r24
    1318:	91 1d       	adc	r25, r1
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <__fp_norm2>:
    1322:	91 50       	subi	r25, 0x01	; 1
    1324:	50 40       	sbci	r21, 0x00	; 0
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	d2 f7       	brpl	.-12     	; 0x1322 <__fp_norm2>
    132e:	08 95       	ret

00001330 <__fp_powser>:
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	1f 93       	push	r17
    1336:	0f 93       	push	r16
    1338:	ff 92       	push	r15
    133a:	ef 92       	push	r14
    133c:	df 92       	push	r13
    133e:	7b 01       	movw	r14, r22
    1340:	8c 01       	movw	r16, r24
    1342:	68 94       	set
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <__fp_powser+0x20>
    1346:	da 2e       	mov	r13, r26
    1348:	ef 01       	movw	r28, r30
    134a:	c7 de       	rcall	.-626    	; 0x10da <__mulsf3x>
    134c:	fe 01       	movw	r30, r28
    134e:	e8 94       	clt
    1350:	a5 91       	lpm	r26, Z+
    1352:	25 91       	lpm	r18, Z+
    1354:	35 91       	lpm	r19, Z+
    1356:	45 91       	lpm	r20, Z+
    1358:	55 91       	lpm	r21, Z+
    135a:	ae f3       	brts	.-22     	; 0x1346 <__fp_powser+0x16>
    135c:	ef 01       	movw	r28, r30
    135e:	fb dc       	rcall	.-1546   	; 0xd56 <__addsf3x>
    1360:	fe 01       	movw	r30, r28
    1362:	97 01       	movw	r18, r14
    1364:	a8 01       	movw	r20, r16
    1366:	da 94       	dec	r13
    1368:	79 f7       	brne	.-34     	; 0x1348 <__fp_powser+0x18>
    136a:	df 90       	pop	r13
    136c:	ef 90       	pop	r14
    136e:	ff 90       	pop	r15
    1370:	0f 91       	pop	r16
    1372:	1f 91       	pop	r17
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <__fp_powsodd>:
    137a:	9f 93       	push	r25
    137c:	8f 93       	push	r24
    137e:	7f 93       	push	r23
    1380:	6f 93       	push	r22
    1382:	ff 93       	push	r31
    1384:	ef 93       	push	r30
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	9b de       	rcall	.-714    	; 0x10c2 <__mulsf3>
    138c:	ef 91       	pop	r30
    138e:	ff 91       	pop	r31
    1390:	cf df       	rcall	.-98     	; 0x1330 <__fp_powser>
    1392:	2f 91       	pop	r18
    1394:	3f 91       	pop	r19
    1396:	4f 91       	pop	r20
    1398:	5f 91       	pop	r21
    139a:	93 ce       	rjmp	.-730    	; 0x10c2 <__mulsf3>

0000139c <inverse>:
    139c:	9b 01       	movw	r18, r22
    139e:	ac 01       	movw	r20, r24
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	9f e3       	ldi	r25, 0x3F	; 63
    13a8:	2c cd       	rjmp	.-1448   	; 0xe02 <__divsf3>
    13aa:	01 ce       	rjmp	.-1022   	; 0xfae <__fp_inf>
    13ac:	ac cf       	rjmp	.-168    	; 0x1306 <__fp_mpack>

000013ae <ldexp>:
    13ae:	68 de       	rcall	.-816    	; 0x1080 <__fp_splitA>
    13b0:	e8 f3       	brcs	.-6      	; 0x13ac <inverse+0x10>
    13b2:	99 23       	and	r25, r25
    13b4:	d9 f3       	breq	.-10     	; 0x13ac <inverse+0x10>
    13b6:	94 0f       	add	r25, r20
    13b8:	51 1d       	adc	r21, r1
    13ba:	bb f3       	brvs	.-18     	; 0x13aa <inverse+0xe>
    13bc:	91 50       	subi	r25, 0x01	; 1
    13be:	50 40       	sbci	r21, 0x00	; 0
    13c0:	94 f0       	brlt	.+36     	; 0x13e6 <ldexp+0x38>
    13c2:	59 f0       	breq	.+22     	; 0x13da <ldexp+0x2c>
    13c4:	88 23       	and	r24, r24
    13c6:	32 f0       	brmi	.+12     	; 0x13d4 <ldexp+0x26>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	c1 f7       	brne	.-16     	; 0x13c4 <ldexp+0x16>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	44 f7       	brge	.-48     	; 0x13aa <inverse+0xe>
    13da:	88 0f       	add	r24, r24
    13dc:	91 1d       	adc	r25, r1
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	97 f9       	bld	r25, 7
    13e4:	08 95       	ret
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	ac f0       	brlt	.+42     	; 0x1414 <ldexp+0x66>
    13ea:	98 3e       	cpi	r25, 0xE8	; 232
    13ec:	9c f0       	brlt	.+38     	; 0x1414 <ldexp+0x66>
    13ee:	bb 27       	eor	r27, r27
    13f0:	86 95       	lsr	r24
    13f2:	77 95       	ror	r23
    13f4:	67 95       	ror	r22
    13f6:	b7 95       	ror	r27
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <ldexp+0x4e>
    13fa:	b1 60       	ori	r27, 0x01	; 1
    13fc:	93 95       	inc	r25
    13fe:	c1 f7       	brne	.-16     	; 0x13f0 <ldexp+0x42>
    1400:	bb 0f       	add	r27, r27
    1402:	58 f7       	brcc	.-42     	; 0x13da <ldexp+0x2c>
    1404:	11 f4       	brne	.+4      	; 0x140a <ldexp+0x5c>
    1406:	60 ff       	sbrs	r22, 0
    1408:	e8 cf       	rjmp	.-48     	; 0x13da <ldexp+0x2c>
    140a:	6f 5f       	subi	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	8f 4f       	sbci	r24, 0xFF	; 255
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	e3 cf       	rjmp	.-58     	; 0x13da <ldexp+0x2c>
    1414:	50 ce       	rjmp	.-864    	; 0x10b6 <__fp_szero>
    1416:	0e f0       	brts	.+2      	; 0x141a <ldexp+0x6c>
    1418:	76 cf       	rjmp	.-276    	; 0x1306 <__fp_mpack>
    141a:	cf cd       	rjmp	.-1122   	; 0xfba <__fp_nan>
    141c:	68 94       	set
    141e:	c7 cd       	rjmp	.-1138   	; 0xfae <__fp_inf>

00001420 <log>:
    1420:	2f de       	rcall	.-930    	; 0x1080 <__fp_splitA>
    1422:	c8 f3       	brcs	.-14     	; 0x1416 <ldexp+0x68>
    1424:	99 23       	and	r25, r25
    1426:	d1 f3       	breq	.-12     	; 0x141c <ldexp+0x6e>
    1428:	c6 f3       	brts	.-16     	; 0x141a <ldexp+0x6c>
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	1f 93       	push	r17
    1430:	0f 93       	push	r16
    1432:	ff 92       	push	r15
    1434:	c9 2f       	mov	r28, r25
    1436:	dd 27       	eor	r29, r29
    1438:	88 23       	and	r24, r24
    143a:	2a f0       	brmi	.+10     	; 0x1446 <log+0x26>
    143c:	21 97       	sbiw	r28, 0x01	; 1
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	da f7       	brpl	.-10     	; 0x143c <log+0x1c>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f eb       	ldi	r21, 0xBF	; 191
    144e:	9f e3       	ldi	r25, 0x3F	; 63
    1450:	88 39       	cpi	r24, 0x98	; 152
    1452:	20 f0       	brcs	.+8      	; 0x145c <log+0x3c>
    1454:	80 3e       	cpi	r24, 0xE0	; 224
    1456:	30 f0       	brcs	.+12     	; 0x1464 <log+0x44>
    1458:	21 96       	adiw	r28, 0x01	; 1
    145a:	8f 77       	andi	r24, 0x7F	; 127
    145c:	6b dc       	rcall	.-1834   	; 0xd34 <__addsf3>
    145e:	e2 ed       	ldi	r30, 0xD2	; 210
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	03 c0       	rjmp	.+6      	; 0x146a <log+0x4a>
    1464:	67 dc       	rcall	.-1842   	; 0xd34 <__addsf3>
    1466:	ef ef       	ldi	r30, 0xFF	; 255
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	62 df       	rcall	.-316    	; 0x1330 <__fp_powser>
    146c:	8b 01       	movw	r16, r22
    146e:	be 01       	movw	r22, r28
    1470:	ec 01       	movw	r28, r24
    1472:	fb 2e       	mov	r15, r27
    1474:	6f 57       	subi	r22, 0x7F	; 127
    1476:	71 09       	sbc	r23, r1
    1478:	75 95       	asr	r23
    147a:	77 1f       	adc	r23, r23
    147c:	88 0b       	sbc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	5b dd       	rcall	.-1354   	; 0xf38 <__floatsisf>
    1482:	28 e1       	ldi	r18, 0x18	; 24
    1484:	32 e7       	ldi	r19, 0x72	; 114
    1486:	41 e3       	ldi	r20, 0x31	; 49
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	27 de       	rcall	.-946    	; 0x10da <__mulsf3x>
    148c:	af 2d       	mov	r26, r15
    148e:	98 01       	movw	r18, r16
    1490:	ae 01       	movw	r20, r28
    1492:	ff 90       	pop	r15
    1494:	0f 91       	pop	r16
    1496:	1f 91       	pop	r17
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	5c dc       	rcall	.-1864   	; 0xd56 <__addsf3x>
    149e:	c6 cd       	rjmp	.-1140   	; 0x102c <__fp_round>

000014a0 <modf>:
    14a0:	fa 01       	movw	r30, r20
    14a2:	dc 01       	movw	r26, r24
    14a4:	aa 0f       	add	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	bf 57       	subi	r27, 0x7F	; 127
    14ae:	28 f4       	brcc	.+10     	; 0x14ba <modf+0x1a>
    14b0:	22 27       	eor	r18, r18
    14b2:	33 27       	eor	r19, r19
    14b4:	44 27       	eor	r20, r20
    14b6:	50 78       	andi	r21, 0x80	; 128
    14b8:	1f c0       	rjmp	.+62     	; 0x14f8 <modf+0x58>
    14ba:	b7 51       	subi	r27, 0x17	; 23
    14bc:	88 f4       	brcc	.+34     	; 0x14e0 <modf+0x40>
    14be:	ab 2f       	mov	r26, r27
    14c0:	00 24       	eor	r0, r0
    14c2:	46 95       	lsr	r20
    14c4:	37 95       	ror	r19
    14c6:	27 95       	ror	r18
    14c8:	01 1c       	adc	r0, r1
    14ca:	a3 95       	inc	r26
    14cc:	d2 f3       	brmi	.-12     	; 0x14c2 <modf+0x22>
    14ce:	00 20       	and	r0, r0
    14d0:	69 f0       	breq	.+26     	; 0x14ec <modf+0x4c>
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	b3 95       	inc	r27
    14da:	da f3       	brmi	.-10     	; 0x14d2 <modf+0x32>
    14dc:	0d d0       	rcall	.+26     	; 0x14f8 <modf+0x58>
    14de:	29 cc       	rjmp	.-1966   	; 0xd32 <__subsf3>
    14e0:	61 30       	cpi	r22, 0x01	; 1
    14e2:	71 05       	cpc	r23, r1
    14e4:	a0 e8       	ldi	r26, 0x80	; 128
    14e6:	8a 07       	cpc	r24, r26
    14e8:	b9 46       	sbci	r27, 0x69	; 105
    14ea:	30 f4       	brcc	.+12     	; 0x14f8 <modf+0x58>
    14ec:	9b 01       	movw	r18, r22
    14ee:	ac 01       	movw	r20, r24
    14f0:	66 27       	eor	r22, r22
    14f2:	77 27       	eor	r23, r23
    14f4:	88 27       	eor	r24, r24
    14f6:	90 78       	andi	r25, 0x80	; 128
    14f8:	30 96       	adiw	r30, 0x00	; 0
    14fa:	21 f0       	breq	.+8      	; 0x1504 <modf+0x64>
    14fc:	20 83       	st	Z, r18
    14fe:	31 83       	std	Z+1, r19	; 0x01
    1500:	42 83       	std	Z+2, r20	; 0x02
    1502:	53 83       	std	Z+3, r21	; 0x03
    1504:	08 95       	ret

00001506 <__divmodhi4>:
    1506:	97 fb       	bst	r25, 7
    1508:	07 2e       	mov	r0, r23
    150a:	16 f4       	brtc	.+4      	; 0x1510 <__divmodhi4+0xa>
    150c:	00 94       	com	r0
    150e:	06 d0       	rcall	.+12     	; 0x151c <__divmodhi4_neg1>
    1510:	77 fd       	sbrc	r23, 7
    1512:	08 d0       	rcall	.+16     	; 0x1524 <__divmodhi4_neg2>
    1514:	0b d0       	rcall	.+22     	; 0x152c <__udivmodhi4>
    1516:	07 fc       	sbrc	r0, 7
    1518:	05 d0       	rcall	.+10     	; 0x1524 <__divmodhi4_neg2>
    151a:	3e f4       	brtc	.+14     	; 0x152a <__divmodhi4_exit>

0000151c <__divmodhi4_neg1>:
    151c:	90 95       	com	r25
    151e:	81 95       	neg	r24
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	08 95       	ret

00001524 <__divmodhi4_neg2>:
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255

0000152a <__divmodhi4_exit>:
    152a:	08 95       	ret

0000152c <__udivmodhi4>:
    152c:	aa 1b       	sub	r26, r26
    152e:	bb 1b       	sub	r27, r27
    1530:	51 e1       	ldi	r21, 0x11	; 17
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <__udivmodhi4_ep>

00001534 <__udivmodhi4_loop>:
    1534:	aa 1f       	adc	r26, r26
    1536:	bb 1f       	adc	r27, r27
    1538:	a6 17       	cp	r26, r22
    153a:	b7 07       	cpc	r27, r23
    153c:	10 f0       	brcs	.+4      	; 0x1542 <__udivmodhi4_ep>
    153e:	a6 1b       	sub	r26, r22
    1540:	b7 0b       	sbc	r27, r23

00001542 <__udivmodhi4_ep>:
    1542:	88 1f       	adc	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	5a 95       	dec	r21
    1548:	a9 f7       	brne	.-22     	; 0x1534 <__udivmodhi4_loop>
    154a:	80 95       	com	r24
    154c:	90 95       	com	r25
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	08 95       	ret

00001554 <calloc>:
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	86 9f       	mul	r24, r22
    155e:	80 01       	movw	r16, r0
    1560:	87 9f       	mul	r24, r23
    1562:	10 0d       	add	r17, r0
    1564:	96 9f       	mul	r25, r22
    1566:	10 0d       	add	r17, r0
    1568:	11 24       	eor	r1, r1
    156a:	c8 01       	movw	r24, r16
    156c:	0d d0       	rcall	.+26     	; 0x1588 <malloc>
    156e:	ec 01       	movw	r28, r24
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	21 f0       	breq	.+8      	; 0x157c <calloc+0x28>
    1574:	a8 01       	movw	r20, r16
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	4a d1       	rcall	.+660    	; 0x1810 <memset>
    157c:	ce 01       	movw	r24, r28
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <malloc>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	82 30       	cpi	r24, 0x02	; 2
    158e:	91 05       	cpc	r25, r1
    1590:	10 f4       	brcc	.+4      	; 0x1596 <malloc+0xe>
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	e0 91 cc 01 	lds	r30, 0x01CC
    159a:	f0 91 cd 01 	lds	r31, 0x01CD
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	30 97       	sbiw	r30, 0x00	; 0
    15a8:	39 f1       	breq	.+78     	; 0x15f8 <malloc+0x70>
    15aa:	40 81       	ld	r20, Z
    15ac:	51 81       	ldd	r21, Z+1	; 0x01
    15ae:	48 17       	cp	r20, r24
    15b0:	59 07       	cpc	r21, r25
    15b2:	b8 f0       	brcs	.+46     	; 0x15e2 <malloc+0x5a>
    15b4:	48 17       	cp	r20, r24
    15b6:	59 07       	cpc	r21, r25
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <malloc+0x4e>
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	10 97       	sbiw	r26, 0x00	; 0
    15c0:	29 f0       	breq	.+10     	; 0x15cc <malloc+0x44>
    15c2:	13 96       	adiw	r26, 0x03	; 3
    15c4:	9c 93       	st	X, r25
    15c6:	8e 93       	st	-X, r24
    15c8:	12 97       	sbiw	r26, 0x02	; 2
    15ca:	2c c0       	rjmp	.+88     	; 0x1624 <malloc+0x9c>
    15cc:	90 93 cd 01 	sts	0x01CD, r25
    15d0:	80 93 cc 01 	sts	0x01CC, r24
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <malloc+0x9c>
    15d6:	21 15       	cp	r18, r1
    15d8:	31 05       	cpc	r19, r1
    15da:	31 f0       	breq	.+12     	; 0x15e8 <malloc+0x60>
    15dc:	42 17       	cp	r20, r18
    15de:	53 07       	cpc	r21, r19
    15e0:	18 f0       	brcs	.+6      	; 0x15e8 <malloc+0x60>
    15e2:	a9 01       	movw	r20, r18
    15e4:	db 01       	movw	r26, r22
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <malloc+0x62>
    15e8:	ef 01       	movw	r28, r30
    15ea:	9a 01       	movw	r18, r20
    15ec:	bd 01       	movw	r22, r26
    15ee:	df 01       	movw	r26, r30
    15f0:	02 80       	ldd	r0, Z+2	; 0x02
    15f2:	f3 81       	ldd	r31, Z+3	; 0x03
    15f4:	e0 2d       	mov	r30, r0
    15f6:	d7 cf       	rjmp	.-82     	; 0x15a6 <malloc+0x1e>
    15f8:	21 15       	cp	r18, r1
    15fa:	31 05       	cpc	r19, r1
    15fc:	f9 f0       	breq	.+62     	; 0x163c <malloc+0xb4>
    15fe:	28 1b       	sub	r18, r24
    1600:	39 0b       	sbc	r19, r25
    1602:	24 30       	cpi	r18, 0x04	; 4
    1604:	31 05       	cpc	r19, r1
    1606:	80 f4       	brcc	.+32     	; 0x1628 <malloc+0xa0>
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	61 15       	cp	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	21 f0       	breq	.+8      	; 0x161a <malloc+0x92>
    1612:	fb 01       	movw	r30, r22
    1614:	93 83       	std	Z+3, r25	; 0x03
    1616:	82 83       	std	Z+2, r24	; 0x02
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <malloc+0x9a>
    161a:	90 93 cd 01 	sts	0x01CD, r25
    161e:	80 93 cc 01 	sts	0x01CC, r24
    1622:	fe 01       	movw	r30, r28
    1624:	32 96       	adiw	r30, 0x02	; 2
    1626:	44 c0       	rjmp	.+136    	; 0x16b0 <malloc+0x128>
    1628:	fe 01       	movw	r30, r28
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	81 93       	st	Z+, r24
    1630:	91 93       	st	Z+, r25
    1632:	22 50       	subi	r18, 0x02	; 2
    1634:	31 09       	sbc	r19, r1
    1636:	39 83       	std	Y+1, r19	; 0x01
    1638:	28 83       	st	Y, r18
    163a:	3a c0       	rjmp	.+116    	; 0x16b0 <malloc+0x128>
    163c:	20 91 ca 01 	lds	r18, 0x01CA
    1640:	30 91 cb 01 	lds	r19, 0x01CB
    1644:	23 2b       	or	r18, r19
    1646:	41 f4       	brne	.+16     	; 0x1658 <malloc+0xd0>
    1648:	20 91 02 01 	lds	r18, 0x0102
    164c:	30 91 03 01 	lds	r19, 0x0103
    1650:	30 93 cb 01 	sts	0x01CB, r19
    1654:	20 93 ca 01 	sts	0x01CA, r18
    1658:	20 91 00 01 	lds	r18, 0x0100
    165c:	30 91 01 01 	lds	r19, 0x0101
    1660:	21 15       	cp	r18, r1
    1662:	31 05       	cpc	r19, r1
    1664:	41 f4       	brne	.+16     	; 0x1676 <malloc+0xee>
    1666:	2d b7       	in	r18, 0x3d	; 61
    1668:	3e b7       	in	r19, 0x3e	; 62
    166a:	40 91 04 01 	lds	r20, 0x0104
    166e:	50 91 05 01 	lds	r21, 0x0105
    1672:	24 1b       	sub	r18, r20
    1674:	35 0b       	sbc	r19, r21
    1676:	e0 91 ca 01 	lds	r30, 0x01CA
    167a:	f0 91 cb 01 	lds	r31, 0x01CB
    167e:	e2 17       	cp	r30, r18
    1680:	f3 07       	cpc	r31, r19
    1682:	a0 f4       	brcc	.+40     	; 0x16ac <malloc+0x124>
    1684:	2e 1b       	sub	r18, r30
    1686:	3f 0b       	sbc	r19, r31
    1688:	28 17       	cp	r18, r24
    168a:	39 07       	cpc	r19, r25
    168c:	78 f0       	brcs	.+30     	; 0x16ac <malloc+0x124>
    168e:	ac 01       	movw	r20, r24
    1690:	4e 5f       	subi	r20, 0xFE	; 254
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	24 17       	cp	r18, r20
    1696:	35 07       	cpc	r19, r21
    1698:	48 f0       	brcs	.+18     	; 0x16ac <malloc+0x124>
    169a:	4e 0f       	add	r20, r30
    169c:	5f 1f       	adc	r21, r31
    169e:	50 93 cb 01 	sts	0x01CB, r21
    16a2:	40 93 ca 01 	sts	0x01CA, r20
    16a6:	81 93       	st	Z+, r24
    16a8:	91 93       	st	Z+, r25
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <malloc+0x128>
    16ac:	e0 e0       	ldi	r30, 0x00	; 0
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	cf 01       	movw	r24, r30
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <free>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	09 f4       	brne	.+2      	; 0x16c2 <free+0xa>
    16c0:	87 c0       	rjmp	.+270    	; 0x17d0 <free+0x118>
    16c2:	fc 01       	movw	r30, r24
    16c4:	32 97       	sbiw	r30, 0x02	; 2
    16c6:	13 82       	std	Z+3, r1	; 0x03
    16c8:	12 82       	std	Z+2, r1	; 0x02
    16ca:	c0 91 cc 01 	lds	r28, 0x01CC
    16ce:	d0 91 cd 01 	lds	r29, 0x01CD
    16d2:	20 97       	sbiw	r28, 0x00	; 0
    16d4:	81 f4       	brne	.+32     	; 0x16f6 <free+0x3e>
    16d6:	20 81       	ld	r18, Z
    16d8:	31 81       	ldd	r19, Z+1	; 0x01
    16da:	28 0f       	add	r18, r24
    16dc:	39 1f       	adc	r19, r25
    16de:	80 91 ca 01 	lds	r24, 0x01CA
    16e2:	90 91 cb 01 	lds	r25, 0x01CB
    16e6:	82 17       	cp	r24, r18
    16e8:	93 07       	cpc	r25, r19
    16ea:	79 f5       	brne	.+94     	; 0x174a <free+0x92>
    16ec:	f0 93 cb 01 	sts	0x01CB, r31
    16f0:	e0 93 ca 01 	sts	0x01CA, r30
    16f4:	6d c0       	rjmp	.+218    	; 0x17d0 <free+0x118>
    16f6:	de 01       	movw	r26, r28
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	ae 17       	cp	r26, r30
    16fe:	bf 07       	cpc	r27, r31
    1700:	50 f4       	brcc	.+20     	; 0x1716 <free+0x5e>
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	4d 91       	ld	r20, X+
    1706:	5c 91       	ld	r21, X
    1708:	13 97       	sbiw	r26, 0x03	; 3
    170a:	9d 01       	movw	r18, r26
    170c:	41 15       	cp	r20, r1
    170e:	51 05       	cpc	r21, r1
    1710:	09 f1       	breq	.+66     	; 0x1754 <free+0x9c>
    1712:	da 01       	movw	r26, r20
    1714:	f3 cf       	rjmp	.-26     	; 0x16fc <free+0x44>
    1716:	b3 83       	std	Z+3, r27	; 0x03
    1718:	a2 83       	std	Z+2, r26	; 0x02
    171a:	40 81       	ld	r20, Z
    171c:	51 81       	ldd	r21, Z+1	; 0x01
    171e:	84 0f       	add	r24, r20
    1720:	95 1f       	adc	r25, r21
    1722:	8a 17       	cp	r24, r26
    1724:	9b 07       	cpc	r25, r27
    1726:	71 f4       	brne	.+28     	; 0x1744 <free+0x8c>
    1728:	8d 91       	ld	r24, X+
    172a:	9c 91       	ld	r25, X
    172c:	11 97       	sbiw	r26, 0x01	; 1
    172e:	84 0f       	add	r24, r20
    1730:	95 1f       	adc	r25, r21
    1732:	02 96       	adiw	r24, 0x02	; 2
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	12 96       	adiw	r26, 0x02	; 2
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	13 97       	sbiw	r26, 0x03	; 3
    1740:	93 83       	std	Z+3, r25	; 0x03
    1742:	82 83       	std	Z+2, r24	; 0x02
    1744:	21 15       	cp	r18, r1
    1746:	31 05       	cpc	r19, r1
    1748:	29 f4       	brne	.+10     	; 0x1754 <free+0x9c>
    174a:	f0 93 cd 01 	sts	0x01CD, r31
    174e:	e0 93 cc 01 	sts	0x01CC, r30
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <free+0x118>
    1754:	d9 01       	movw	r26, r18
    1756:	13 96       	adiw	r26, 0x03	; 3
    1758:	fc 93       	st	X, r31
    175a:	ee 93       	st	-X, r30
    175c:	12 97       	sbiw	r26, 0x02	; 2
    175e:	4d 91       	ld	r20, X+
    1760:	5d 91       	ld	r21, X+
    1762:	a4 0f       	add	r26, r20
    1764:	b5 1f       	adc	r27, r21
    1766:	ea 17       	cp	r30, r26
    1768:	fb 07       	cpc	r31, r27
    176a:	79 f4       	brne	.+30     	; 0x178a <free+0xd2>
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	02 96       	adiw	r24, 0x02	; 2
    1776:	d9 01       	movw	r26, r18
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	9c 93       	st	X, r25
    177c:	8e 93       	st	-X, r24
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	13 96       	adiw	r26, 0x03	; 3
    1784:	9c 93       	st	X, r25
    1786:	8e 93       	st	-X, r24
    1788:	12 97       	sbiw	r26, 0x02	; 2
    178a:	e0 e0       	ldi	r30, 0x00	; 0
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	19 f0       	breq	.+6      	; 0x179c <free+0xe4>
    1796:	fe 01       	movw	r30, r28
    1798:	ec 01       	movw	r28, r24
    179a:	f9 cf       	rjmp	.-14     	; 0x178e <free+0xd6>
    179c:	ce 01       	movw	r24, r28
    179e:	02 96       	adiw	r24, 0x02	; 2
    17a0:	28 81       	ld	r18, Y
    17a2:	39 81       	ldd	r19, Y+1	; 0x01
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	20 91 ca 01 	lds	r18, 0x01CA
    17ac:	30 91 cb 01 	lds	r19, 0x01CB
    17b0:	28 17       	cp	r18, r24
    17b2:	39 07       	cpc	r19, r25
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <free+0x118>
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <free+0x10c>
    17ba:	10 92 cd 01 	sts	0x01CD, r1
    17be:	10 92 cc 01 	sts	0x01CC, r1
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <free+0x110>
    17c4:	13 82       	std	Z+3, r1	; 0x03
    17c6:	12 82       	std	Z+2, r1	; 0x02
    17c8:	d0 93 cb 01 	sts	0x01CB, r29
    17cc:	c0 93 ca 01 	sts	0x01CA, r28
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <atoi>:
    17d6:	fc 01       	movw	r30, r24
    17d8:	88 27       	eor	r24, r24
    17da:	99 27       	eor	r25, r25
    17dc:	e8 94       	clt
    17de:	21 91       	ld	r18, Z+
    17e0:	20 32       	cpi	r18, 0x20	; 32
    17e2:	e9 f3       	breq	.-6      	; 0x17de <atoi+0x8>
    17e4:	29 30       	cpi	r18, 0x09	; 9
    17e6:	10 f0       	brcs	.+4      	; 0x17ec <atoi+0x16>
    17e8:	2e 30       	cpi	r18, 0x0E	; 14
    17ea:	c8 f3       	brcs	.-14     	; 0x17de <atoi+0x8>
    17ec:	2b 32       	cpi	r18, 0x2B	; 43
    17ee:	39 f0       	breq	.+14     	; 0x17fe <atoi+0x28>
    17f0:	2d 32       	cpi	r18, 0x2D	; 45
    17f2:	31 f4       	brne	.+12     	; 0x1800 <atoi+0x2a>
    17f4:	68 94       	set
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <atoi+0x28>
    17f8:	22 d0       	rcall	.+68     	; 0x183e <__mulhi_const_10>
    17fa:	82 0f       	add	r24, r18
    17fc:	91 1d       	adc	r25, r1
    17fe:	21 91       	ld	r18, Z+
    1800:	20 53       	subi	r18, 0x30	; 48
    1802:	2a 30       	cpi	r18, 0x0A	; 10
    1804:	c8 f3       	brcs	.-14     	; 0x17f8 <atoi+0x22>
    1806:	1e f4       	brtc	.+6      	; 0x180e <atoi+0x38>
    1808:	90 95       	com	r25
    180a:	81 95       	neg	r24
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	08 95       	ret

00001810 <memset>:
    1810:	dc 01       	movw	r26, r24
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <memset+0x6>
    1814:	6d 93       	st	X+, r22
    1816:	41 50       	subi	r20, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	e0 f7       	brcc	.-8      	; 0x1814 <memset+0x4>
    181c:	08 95       	ret

0000181e <strcmp>:
    181e:	fb 01       	movw	r30, r22
    1820:	dc 01       	movw	r26, r24
    1822:	8d 91       	ld	r24, X+
    1824:	01 90       	ld	r0, Z+
    1826:	80 19       	sub	r24, r0
    1828:	01 10       	cpse	r0, r1
    182a:	d9 f3       	breq	.-10     	; 0x1822 <strcmp+0x4>
    182c:	99 0b       	sbc	r25, r25
    182e:	08 95       	ret

00001830 <strcpy>:
    1830:	fb 01       	movw	r30, r22
    1832:	dc 01       	movw	r26, r24
    1834:	01 90       	ld	r0, Z+
    1836:	0d 92       	st	X+, r0
    1838:	00 20       	and	r0, r0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <strcpy+0x4>
    183c:	08 95       	ret

0000183e <__mulhi_const_10>:
    183e:	7a e0       	ldi	r23, 0x0A	; 10
    1840:	97 9f       	mul	r25, r23
    1842:	90 2d       	mov	r25, r0
    1844:	87 9f       	mul	r24, r23
    1846:	80 2d       	mov	r24, r0
    1848:	91 0d       	add	r25, r1
    184a:	11 24       	eor	r1, r1
    184c:	08 95       	ret

0000184e <sprintf>:
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	2e 97       	sbiw	r28, 0x0e	; 14
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	0d 89       	ldd	r16, Y+21	; 0x15
    1868:	1e 89       	ldd	r17, Y+22	; 0x16
    186a:	86 e0       	ldi	r24, 0x06	; 6
    186c:	8c 83       	std	Y+4, r24	; 0x04
    186e:	1a 83       	std	Y+2, r17	; 0x02
    1870:	09 83       	std	Y+1, r16	; 0x01
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	9f e7       	ldi	r25, 0x7F	; 127
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	ae 01       	movw	r20, r28
    187c:	47 5e       	subi	r20, 0xE7	; 231
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	6f 89       	ldd	r22, Y+23	; 0x17
    1882:	78 8d       	ldd	r23, Y+24	; 0x18
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	48 d0       	rcall	.+144    	; 0x191a <vfprintf>
    188a:	ef 81       	ldd	r30, Y+7	; 0x07
    188c:	f8 85       	ldd	r31, Y+8	; 0x08
    188e:	e0 0f       	add	r30, r16
    1890:	f1 1f       	adc	r31, r17
    1892:	10 82       	st	Z, r1
    1894:	2e 96       	adiw	r28, 0x0e	; 14
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <vsnprintf>:
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	2e 97       	sbiw	r28, 0x0e	; 14
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	8c 01       	movw	r16, r24
    18c4:	ca 01       	movw	r24, r20
    18c6:	46 e0       	ldi	r20, 0x06	; 6
    18c8:	4c 83       	std	Y+4, r20	; 0x04
    18ca:	1a 83       	std	Y+2, r17	; 0x02
    18cc:	09 83       	std	Y+1, r16	; 0x01
    18ce:	77 ff       	sbrs	r23, 7
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vsnprintf+0x2c>
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e8       	ldi	r23, 0x80	; 128
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	71 09       	sbc	r23, r1
    18da:	7e 83       	std	Y+6, r23	; 0x06
    18dc:	6d 83       	std	Y+5, r22	; 0x05
    18de:	a9 01       	movw	r20, r18
    18e0:	bc 01       	movw	r22, r24
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	19 d0       	rcall	.+50     	; 0x191a <vfprintf>
    18e8:	4d 81       	ldd	r20, Y+5	; 0x05
    18ea:	5e 81       	ldd	r21, Y+6	; 0x06
    18ec:	57 fd       	sbrc	r21, 7
    18ee:	0a c0       	rjmp	.+20     	; 0x1904 <vsnprintf+0x5a>
    18f0:	2f 81       	ldd	r18, Y+7	; 0x07
    18f2:	38 85       	ldd	r19, Y+8	; 0x08
    18f4:	42 17       	cp	r20, r18
    18f6:	53 07       	cpc	r21, r19
    18f8:	0c f4       	brge	.+2      	; 0x18fc <vsnprintf+0x52>
    18fa:	9a 01       	movw	r18, r20
    18fc:	f8 01       	movw	r30, r16
    18fe:	e2 0f       	add	r30, r18
    1900:	f3 1f       	adc	r31, r19
    1902:	10 82       	st	Z, r1
    1904:	2e 96       	adiw	r28, 0x0e	; 14
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <vfprintf>:
    191a:	2f 92       	push	r2
    191c:	3f 92       	push	r3
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	2c 97       	sbiw	r28, 0x0c	; 12
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	7c 01       	movw	r14, r24
    1950:	6b 01       	movw	r12, r22
    1952:	8a 01       	movw	r16, r20
    1954:	fc 01       	movw	r30, r24
    1956:	17 82       	std	Z+7, r1	; 0x07
    1958:	16 82       	std	Z+6, r1	; 0x06
    195a:	83 81       	ldd	r24, Z+3	; 0x03
    195c:	81 ff       	sbrs	r24, 1
    195e:	b0 c1       	rjmp	.+864    	; 0x1cc0 <vfprintf+0x3a6>
    1960:	ce 01       	movw	r24, r28
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	4c 01       	movw	r8, r24
    1966:	f7 01       	movw	r30, r14
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	f6 01       	movw	r30, r12
    196c:	93 fd       	sbrc	r25, 3
    196e:	85 91       	lpm	r24, Z+
    1970:	93 ff       	sbrs	r25, 3
    1972:	81 91       	ld	r24, Z+
    1974:	6f 01       	movw	r12, r30
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <vfprintf+0x62>
    197a:	9e c1       	rjmp	.+828    	; 0x1cb8 <vfprintf+0x39e>
    197c:	85 32       	cpi	r24, 0x25	; 37
    197e:	39 f4       	brne	.+14     	; 0x198e <vfprintf+0x74>
    1980:	93 fd       	sbrc	r25, 3
    1982:	85 91       	lpm	r24, Z+
    1984:	93 ff       	sbrs	r25, 3
    1986:	81 91       	ld	r24, Z+
    1988:	6f 01       	movw	r12, r30
    198a:	85 32       	cpi	r24, 0x25	; 37
    198c:	21 f4       	brne	.+8      	; 0x1996 <vfprintf+0x7c>
    198e:	b7 01       	movw	r22, r14
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	c7 d1       	rcall	.+910    	; 0x1d22 <fputc>
    1994:	e8 cf       	rjmp	.-48     	; 0x1966 <vfprintf+0x4c>
    1996:	51 2c       	mov	r5, r1
    1998:	31 2c       	mov	r3, r1
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	20 32       	cpi	r18, 0x20	; 32
    199e:	a0 f4       	brcc	.+40     	; 0x19c8 <vfprintf+0xae>
    19a0:	8b 32       	cpi	r24, 0x2B	; 43
    19a2:	69 f0       	breq	.+26     	; 0x19be <vfprintf+0xa4>
    19a4:	30 f4       	brcc	.+12     	; 0x19b2 <vfprintf+0x98>
    19a6:	80 32       	cpi	r24, 0x20	; 32
    19a8:	59 f0       	breq	.+22     	; 0x19c0 <vfprintf+0xa6>
    19aa:	83 32       	cpi	r24, 0x23	; 35
    19ac:	69 f4       	brne	.+26     	; 0x19c8 <vfprintf+0xae>
    19ae:	20 61       	ori	r18, 0x10	; 16
    19b0:	2c c0       	rjmp	.+88     	; 0x1a0a <vfprintf+0xf0>
    19b2:	8d 32       	cpi	r24, 0x2D	; 45
    19b4:	39 f0       	breq	.+14     	; 0x19c4 <vfprintf+0xaa>
    19b6:	80 33       	cpi	r24, 0x30	; 48
    19b8:	39 f4       	brne	.+14     	; 0x19c8 <vfprintf+0xae>
    19ba:	21 60       	ori	r18, 0x01	; 1
    19bc:	26 c0       	rjmp	.+76     	; 0x1a0a <vfprintf+0xf0>
    19be:	22 60       	ori	r18, 0x02	; 2
    19c0:	24 60       	ori	r18, 0x04	; 4
    19c2:	23 c0       	rjmp	.+70     	; 0x1a0a <vfprintf+0xf0>
    19c4:	28 60       	ori	r18, 0x08	; 8
    19c6:	21 c0       	rjmp	.+66     	; 0x1a0a <vfprintf+0xf0>
    19c8:	27 fd       	sbrc	r18, 7
    19ca:	27 c0       	rjmp	.+78     	; 0x1a1a <vfprintf+0x100>
    19cc:	30 ed       	ldi	r19, 0xD0	; 208
    19ce:	38 0f       	add	r19, r24
    19d0:	3a 30       	cpi	r19, 0x0A	; 10
    19d2:	78 f4       	brcc	.+30     	; 0x19f2 <vfprintf+0xd8>
    19d4:	26 ff       	sbrs	r18, 6
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <vfprintf+0xca>
    19d8:	fa e0       	ldi	r31, 0x0A	; 10
    19da:	5f 9e       	mul	r5, r31
    19dc:	30 0d       	add	r19, r0
    19de:	11 24       	eor	r1, r1
    19e0:	53 2e       	mov	r5, r19
    19e2:	13 c0       	rjmp	.+38     	; 0x1a0a <vfprintf+0xf0>
    19e4:	8a e0       	ldi	r24, 0x0A	; 10
    19e6:	38 9e       	mul	r3, r24
    19e8:	30 0d       	add	r19, r0
    19ea:	11 24       	eor	r1, r1
    19ec:	33 2e       	mov	r3, r19
    19ee:	20 62       	ori	r18, 0x20	; 32
    19f0:	0c c0       	rjmp	.+24     	; 0x1a0a <vfprintf+0xf0>
    19f2:	8e 32       	cpi	r24, 0x2E	; 46
    19f4:	21 f4       	brne	.+8      	; 0x19fe <vfprintf+0xe4>
    19f6:	26 fd       	sbrc	r18, 6
    19f8:	5f c1       	rjmp	.+702    	; 0x1cb8 <vfprintf+0x39e>
    19fa:	20 64       	ori	r18, 0x40	; 64
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0xf0>
    19fe:	8c 36       	cpi	r24, 0x6C	; 108
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <vfprintf+0xec>
    1a02:	20 68       	ori	r18, 0x80	; 128
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <vfprintf+0xf0>
    1a06:	88 36       	cpi	r24, 0x68	; 104
    1a08:	41 f4       	brne	.+16     	; 0x1a1a <vfprintf+0x100>
    1a0a:	f6 01       	movw	r30, r12
    1a0c:	93 fd       	sbrc	r25, 3
    1a0e:	85 91       	lpm	r24, Z+
    1a10:	93 ff       	sbrs	r25, 3
    1a12:	81 91       	ld	r24, Z+
    1a14:	6f 01       	movw	r12, r30
    1a16:	81 11       	cpse	r24, r1
    1a18:	c1 cf       	rjmp	.-126    	; 0x199c <vfprintf+0x82>
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	9f 7d       	andi	r25, 0xDF	; 223
    1a1e:	95 54       	subi	r25, 0x45	; 69
    1a20:	93 30       	cpi	r25, 0x03	; 3
    1a22:	28 f4       	brcc	.+10     	; 0x1a2e <vfprintf+0x114>
    1a24:	0c 5f       	subi	r16, 0xFC	; 252
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	ff e3       	ldi	r31, 0x3F	; 63
    1a2a:	f9 83       	std	Y+1, r31	; 0x01
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <vfprintf+0x12e>
    1a2e:	83 36       	cpi	r24, 0x63	; 99
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <vfprintf+0x124>
    1a32:	83 37       	cpi	r24, 0x73	; 115
    1a34:	71 f0       	breq	.+28     	; 0x1a52 <vfprintf+0x138>
    1a36:	83 35       	cpi	r24, 0x53	; 83
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <vfprintf+0x122>
    1a3a:	57 c0       	rjmp	.+174    	; 0x1aea <vfprintf+0x1d0>
    1a3c:	21 c0       	rjmp	.+66     	; 0x1a80 <vfprintf+0x166>
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 81       	ld	r24, Z
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	0e 5f       	subi	r16, 0xFE	; 254
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	44 24       	eor	r4, r4
    1a4a:	43 94       	inc	r4
    1a4c:	51 2c       	mov	r5, r1
    1a4e:	54 01       	movw	r10, r8
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <vfprintf+0x160>
    1a52:	38 01       	movw	r6, r16
    1a54:	f2 e0       	ldi	r31, 0x02	; 2
    1a56:	6f 0e       	add	r6, r31
    1a58:	71 1c       	adc	r7, r1
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	a0 80       	ld	r10, Z
    1a5e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a60:	26 ff       	sbrs	r18, 6
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <vfprintf+0x150>
    1a64:	65 2d       	mov	r22, r5
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <vfprintf+0x154>
    1a6a:	6f ef       	ldi	r22, 0xFF	; 255
    1a6c:	7f ef       	ldi	r23, 0xFF	; 255
    1a6e:	c5 01       	movw	r24, r10
    1a70:	2c 87       	std	Y+12, r18	; 0x0c
    1a72:	4c d1       	rcall	.+664    	; 0x1d0c <strnlen>
    1a74:	2c 01       	movw	r4, r24
    1a76:	83 01       	movw	r16, r6
    1a78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a7a:	2f 77       	andi	r18, 0x7F	; 127
    1a7c:	22 2e       	mov	r2, r18
    1a7e:	16 c0       	rjmp	.+44     	; 0x1aac <vfprintf+0x192>
    1a80:	38 01       	movw	r6, r16
    1a82:	f2 e0       	ldi	r31, 0x02	; 2
    1a84:	6f 0e       	add	r6, r31
    1a86:	71 1c       	adc	r7, r1
    1a88:	f8 01       	movw	r30, r16
    1a8a:	a0 80       	ld	r10, Z
    1a8c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a8e:	26 ff       	sbrs	r18, 6
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <vfprintf+0x17e>
    1a92:	65 2d       	mov	r22, r5
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0x182>
    1a98:	6f ef       	ldi	r22, 0xFF	; 255
    1a9a:	7f ef       	ldi	r23, 0xFF	; 255
    1a9c:	c5 01       	movw	r24, r10
    1a9e:	2c 87       	std	Y+12, r18	; 0x0c
    1aa0:	2a d1       	rcall	.+596    	; 0x1cf6 <strnlen_P>
    1aa2:	2c 01       	movw	r4, r24
    1aa4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa6:	20 68       	ori	r18, 0x80	; 128
    1aa8:	22 2e       	mov	r2, r18
    1aaa:	83 01       	movw	r16, r6
    1aac:	23 fc       	sbrc	r2, 3
    1aae:	19 c0       	rjmp	.+50     	; 0x1ae2 <vfprintf+0x1c8>
    1ab0:	83 2d       	mov	r24, r3
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	48 16       	cp	r4, r24
    1ab6:	59 06       	cpc	r5, r25
    1ab8:	a0 f4       	brcc	.+40     	; 0x1ae2 <vfprintf+0x1c8>
    1aba:	b7 01       	movw	r22, r14
    1abc:	80 e2       	ldi	r24, 0x20	; 32
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	30 d1       	rcall	.+608    	; 0x1d22 <fputc>
    1ac2:	3a 94       	dec	r3
    1ac4:	f5 cf       	rjmp	.-22     	; 0x1ab0 <vfprintf+0x196>
    1ac6:	f5 01       	movw	r30, r10
    1ac8:	27 fc       	sbrc	r2, 7
    1aca:	85 91       	lpm	r24, Z+
    1acc:	27 fe       	sbrs	r2, 7
    1ace:	81 91       	ld	r24, Z+
    1ad0:	5f 01       	movw	r10, r30
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	25 d1       	rcall	.+586    	; 0x1d22 <fputc>
    1ad8:	31 10       	cpse	r3, r1
    1ada:	3a 94       	dec	r3
    1adc:	f1 e0       	ldi	r31, 0x01	; 1
    1ade:	4f 1a       	sub	r4, r31
    1ae0:	51 08       	sbc	r5, r1
    1ae2:	41 14       	cp	r4, r1
    1ae4:	51 04       	cpc	r5, r1
    1ae6:	79 f7       	brne	.-34     	; 0x1ac6 <vfprintf+0x1ac>
    1ae8:	de c0       	rjmp	.+444    	; 0x1ca6 <vfprintf+0x38c>
    1aea:	84 36       	cpi	r24, 0x64	; 100
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <vfprintf+0x1d8>
    1aee:	89 36       	cpi	r24, 0x69	; 105
    1af0:	31 f5       	brne	.+76     	; 0x1b3e <vfprintf+0x224>
    1af2:	f8 01       	movw	r30, r16
    1af4:	27 ff       	sbrs	r18, 7
    1af6:	07 c0       	rjmp	.+14     	; 0x1b06 <vfprintf+0x1ec>
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	0c 5f       	subi	r16, 0xFC	; 252
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	08 c0       	rjmp	.+16     	; 0x1b16 <vfprintf+0x1fc>
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	88 27       	eor	r24, r24
    1b0c:	77 fd       	sbrc	r23, 7
    1b0e:	80 95       	com	r24
    1b10:	98 2f       	mov	r25, r24
    1b12:	0e 5f       	subi	r16, 0xFE	; 254
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	2f 76       	andi	r18, 0x6F	; 111
    1b18:	b2 2e       	mov	r11, r18
    1b1a:	97 ff       	sbrs	r25, 7
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <vfprintf+0x216>
    1b1e:	90 95       	com	r25
    1b20:	80 95       	com	r24
    1b22:	70 95       	com	r23
    1b24:	61 95       	neg	r22
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	20 68       	ori	r18, 0x80	; 128
    1b2e:	b2 2e       	mov	r11, r18
    1b30:	2a e0       	ldi	r18, 0x0A	; 10
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	a4 01       	movw	r20, r8
    1b36:	27 d1       	rcall	.+590    	; 0x1d86 <__ultoa_invert>
    1b38:	a8 2e       	mov	r10, r24
    1b3a:	a8 18       	sub	r10, r8
    1b3c:	43 c0       	rjmp	.+134    	; 0x1bc4 <vfprintf+0x2aa>
    1b3e:	85 37       	cpi	r24, 0x75	; 117
    1b40:	29 f4       	brne	.+10     	; 0x1b4c <vfprintf+0x232>
    1b42:	2f 7e       	andi	r18, 0xEF	; 239
    1b44:	b2 2e       	mov	r11, r18
    1b46:	2a e0       	ldi	r18, 0x0A	; 10
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	25 c0       	rjmp	.+74     	; 0x1b96 <vfprintf+0x27c>
    1b4c:	f2 2f       	mov	r31, r18
    1b4e:	f9 7f       	andi	r31, 0xF9	; 249
    1b50:	bf 2e       	mov	r11, r31
    1b52:	8f 36       	cpi	r24, 0x6F	; 111
    1b54:	c1 f0       	breq	.+48     	; 0x1b86 <vfprintf+0x26c>
    1b56:	18 f4       	brcc	.+6      	; 0x1b5e <vfprintf+0x244>
    1b58:	88 35       	cpi	r24, 0x58	; 88
    1b5a:	79 f0       	breq	.+30     	; 0x1b7a <vfprintf+0x260>
    1b5c:	ad c0       	rjmp	.+346    	; 0x1cb8 <vfprintf+0x39e>
    1b5e:	80 37       	cpi	r24, 0x70	; 112
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <vfprintf+0x24e>
    1b62:	88 37       	cpi	r24, 0x78	; 120
    1b64:	21 f0       	breq	.+8      	; 0x1b6e <vfprintf+0x254>
    1b66:	a8 c0       	rjmp	.+336    	; 0x1cb8 <vfprintf+0x39e>
    1b68:	2f 2f       	mov	r18, r31
    1b6a:	20 61       	ori	r18, 0x10	; 16
    1b6c:	b2 2e       	mov	r11, r18
    1b6e:	b4 fe       	sbrs	r11, 4
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <vfprintf+0x272>
    1b72:	8b 2d       	mov	r24, r11
    1b74:	84 60       	ori	r24, 0x04	; 4
    1b76:	b8 2e       	mov	r11, r24
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <vfprintf+0x272>
    1b7a:	24 ff       	sbrs	r18, 4
    1b7c:	0a c0       	rjmp	.+20     	; 0x1b92 <vfprintf+0x278>
    1b7e:	9f 2f       	mov	r25, r31
    1b80:	96 60       	ori	r25, 0x06	; 6
    1b82:	b9 2e       	mov	r11, r25
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <vfprintf+0x278>
    1b86:	28 e0       	ldi	r18, 0x08	; 8
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <vfprintf+0x27c>
    1b8c:	20 e1       	ldi	r18, 0x10	; 16
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <vfprintf+0x27c>
    1b92:	20 e1       	ldi	r18, 0x10	; 16
    1b94:	32 e0       	ldi	r19, 0x02	; 2
    1b96:	f8 01       	movw	r30, r16
    1b98:	b7 fe       	sbrs	r11, 7
    1b9a:	07 c0       	rjmp	.+14     	; 0x1baa <vfprintf+0x290>
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	0c 5f       	subi	r16, 0xFC	; 252
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	06 c0       	rjmp	.+12     	; 0x1bb6 <vfprintf+0x29c>
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 5f       	subi	r16, 0xFE	; 254
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	a4 01       	movw	r20, r8
    1bb8:	e6 d0       	rcall	.+460    	; 0x1d86 <__ultoa_invert>
    1bba:	a8 2e       	mov	r10, r24
    1bbc:	a8 18       	sub	r10, r8
    1bbe:	fb 2d       	mov	r31, r11
    1bc0:	ff 77       	andi	r31, 0x7F	; 127
    1bc2:	bf 2e       	mov	r11, r31
    1bc4:	b6 fe       	sbrs	r11, 6
    1bc6:	0b c0       	rjmp	.+22     	; 0x1bde <vfprintf+0x2c4>
    1bc8:	2b 2d       	mov	r18, r11
    1bca:	2e 7f       	andi	r18, 0xFE	; 254
    1bcc:	a5 14       	cp	r10, r5
    1bce:	50 f4       	brcc	.+20     	; 0x1be4 <vfprintf+0x2ca>
    1bd0:	b4 fe       	sbrs	r11, 4
    1bd2:	0a c0       	rjmp	.+20     	; 0x1be8 <vfprintf+0x2ce>
    1bd4:	b2 fc       	sbrc	r11, 2
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <vfprintf+0x2ce>
    1bd8:	2b 2d       	mov	r18, r11
    1bda:	2e 7e       	andi	r18, 0xEE	; 238
    1bdc:	05 c0       	rjmp	.+10     	; 0x1be8 <vfprintf+0x2ce>
    1bde:	7a 2c       	mov	r7, r10
    1be0:	2b 2d       	mov	r18, r11
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <vfprintf+0x2d0>
    1be4:	7a 2c       	mov	r7, r10
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <vfprintf+0x2d0>
    1be8:	75 2c       	mov	r7, r5
    1bea:	24 ff       	sbrs	r18, 4
    1bec:	0d c0       	rjmp	.+26     	; 0x1c08 <vfprintf+0x2ee>
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ea 0d       	add	r30, r10
    1bf2:	f1 1d       	adc	r31, r1
    1bf4:	80 81       	ld	r24, Z
    1bf6:	80 33       	cpi	r24, 0x30	; 48
    1bf8:	11 f4       	brne	.+4      	; 0x1bfe <vfprintf+0x2e4>
    1bfa:	29 7e       	andi	r18, 0xE9	; 233
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <vfprintf+0x2f6>
    1bfe:	22 ff       	sbrs	r18, 2
    1c00:	06 c0       	rjmp	.+12     	; 0x1c0e <vfprintf+0x2f4>
    1c02:	73 94       	inc	r7
    1c04:	73 94       	inc	r7
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <vfprintf+0x2f6>
    1c08:	82 2f       	mov	r24, r18
    1c0a:	86 78       	andi	r24, 0x86	; 134
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <vfprintf+0x2f6>
    1c0e:	73 94       	inc	r7
    1c10:	23 fd       	sbrc	r18, 3
    1c12:	12 c0       	rjmp	.+36     	; 0x1c38 <vfprintf+0x31e>
    1c14:	20 ff       	sbrs	r18, 0
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x30a>
    1c18:	5a 2c       	mov	r5, r10
    1c1a:	73 14       	cp	r7, r3
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <vfprintf+0x30a>
    1c1e:	53 0c       	add	r5, r3
    1c20:	57 18       	sub	r5, r7
    1c22:	73 2c       	mov	r7, r3
    1c24:	73 14       	cp	r7, r3
    1c26:	60 f4       	brcc	.+24     	; 0x1c40 <vfprintf+0x326>
    1c28:	b7 01       	movw	r22, r14
    1c2a:	80 e2       	ldi	r24, 0x20	; 32
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	2c 87       	std	Y+12, r18	; 0x0c
    1c30:	78 d0       	rcall	.+240    	; 0x1d22 <fputc>
    1c32:	73 94       	inc	r7
    1c34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <vfprintf+0x30a>
    1c38:	73 14       	cp	r7, r3
    1c3a:	10 f4       	brcc	.+4      	; 0x1c40 <vfprintf+0x326>
    1c3c:	37 18       	sub	r3, r7
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <vfprintf+0x328>
    1c40:	31 2c       	mov	r3, r1
    1c42:	24 ff       	sbrs	r18, 4
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <vfprintf+0x34e>
    1c46:	b7 01       	movw	r22, r14
    1c48:	80 e3       	ldi	r24, 0x30	; 48
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2c 87       	std	Y+12, r18	; 0x0c
    1c4e:	69 d0       	rcall	.+210    	; 0x1d22 <fputc>
    1c50:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c52:	22 ff       	sbrs	r18, 2
    1c54:	16 c0       	rjmp	.+44     	; 0x1c82 <vfprintf+0x368>
    1c56:	21 ff       	sbrs	r18, 1
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <vfprintf+0x346>
    1c5a:	88 e5       	ldi	r24, 0x58	; 88
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <vfprintf+0x34a>
    1c60:	88 e7       	ldi	r24, 0x78	; 120
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	b7 01       	movw	r22, r14
    1c66:	0c c0       	rjmp	.+24     	; 0x1c80 <vfprintf+0x366>
    1c68:	82 2f       	mov	r24, r18
    1c6a:	86 78       	andi	r24, 0x86	; 134
    1c6c:	51 f0       	breq	.+20     	; 0x1c82 <vfprintf+0x368>
    1c6e:	21 fd       	sbrc	r18, 1
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <vfprintf+0x35c>
    1c72:	80 e2       	ldi	r24, 0x20	; 32
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <vfprintf+0x35e>
    1c76:	8b e2       	ldi	r24, 0x2B	; 43
    1c78:	27 fd       	sbrc	r18, 7
    1c7a:	8d e2       	ldi	r24, 0x2D	; 45
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	50 d0       	rcall	.+160    	; 0x1d22 <fputc>
    1c82:	a5 14       	cp	r10, r5
    1c84:	30 f4       	brcc	.+12     	; 0x1c92 <vfprintf+0x378>
    1c86:	b7 01       	movw	r22, r14
    1c88:	80 e3       	ldi	r24, 0x30	; 48
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	4a d0       	rcall	.+148    	; 0x1d22 <fputc>
    1c8e:	5a 94       	dec	r5
    1c90:	f8 cf       	rjmp	.-16     	; 0x1c82 <vfprintf+0x368>
    1c92:	aa 94       	dec	r10
    1c94:	f4 01       	movw	r30, r8
    1c96:	ea 0d       	add	r30, r10
    1c98:	f1 1d       	adc	r31, r1
    1c9a:	80 81       	ld	r24, Z
    1c9c:	b7 01       	movw	r22, r14
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	40 d0       	rcall	.+128    	; 0x1d22 <fputc>
    1ca2:	a1 10       	cpse	r10, r1
    1ca4:	f6 cf       	rjmp	.-20     	; 0x1c92 <vfprintf+0x378>
    1ca6:	33 20       	and	r3, r3
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <vfprintf+0x392>
    1caa:	5d ce       	rjmp	.-838    	; 0x1966 <vfprintf+0x4c>
    1cac:	b7 01       	movw	r22, r14
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	37 d0       	rcall	.+110    	; 0x1d22 <fputc>
    1cb4:	3a 94       	dec	r3
    1cb6:	f7 cf       	rjmp	.-18     	; 0x1ca6 <vfprintf+0x38c>
    1cb8:	f7 01       	movw	r30, r14
    1cba:	86 81       	ldd	r24, Z+6	; 0x06
    1cbc:	97 81       	ldd	r25, Z+7	; 0x07
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <vfprintf+0x3aa>
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	9f ef       	ldi	r25, 0xFF	; 255
    1cc4:	2c 96       	adiw	r28, 0x0c	; 12
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	5f 90       	pop	r5
    1cee:	4f 90       	pop	r4
    1cf0:	3f 90       	pop	r3
    1cf2:	2f 90       	pop	r2
    1cf4:	08 95       	ret

00001cf6 <strnlen_P>:
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	05 90       	lpm	r0, Z+
    1cfa:	61 50       	subi	r22, 0x01	; 1
    1cfc:	70 40       	sbci	r23, 0x00	; 0
    1cfe:	01 10       	cpse	r0, r1
    1d00:	d8 f7       	brcc	.-10     	; 0x1cf8 <strnlen_P+0x2>
    1d02:	80 95       	com	r24
    1d04:	90 95       	com	r25
    1d06:	8e 0f       	add	r24, r30
    1d08:	9f 1f       	adc	r25, r31
    1d0a:	08 95       	ret

00001d0c <strnlen>:
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	61 50       	subi	r22, 0x01	; 1
    1d10:	70 40       	sbci	r23, 0x00	; 0
    1d12:	01 90       	ld	r0, Z+
    1d14:	01 10       	cpse	r0, r1
    1d16:	d8 f7       	brcc	.-10     	; 0x1d0e <strnlen+0x2>
    1d18:	80 95       	com	r24
    1d1a:	90 95       	com	r25
    1d1c:	8e 0f       	add	r24, r30
    1d1e:	9f 1f       	adc	r25, r31
    1d20:	08 95       	ret

00001d22 <fputc>:
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	18 2f       	mov	r17, r24
    1d2c:	09 2f       	mov	r16, r25
    1d2e:	eb 01       	movw	r28, r22
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	81 fd       	sbrc	r24, 1
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <fputc+0x1a>
    1d36:	8f ef       	ldi	r24, 0xFF	; 255
    1d38:	9f ef       	ldi	r25, 0xFF	; 255
    1d3a:	20 c0       	rjmp	.+64     	; 0x1d7c <fputc+0x5a>
    1d3c:	82 ff       	sbrs	r24, 2
    1d3e:	10 c0       	rjmp	.+32     	; 0x1d60 <fputc+0x3e>
    1d40:	4e 81       	ldd	r20, Y+6	; 0x06
    1d42:	5f 81       	ldd	r21, Y+7	; 0x07
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	3d 81       	ldd	r19, Y+5	; 0x05
    1d48:	42 17       	cp	r20, r18
    1d4a:	53 07       	cpc	r21, r19
    1d4c:	7c f4       	brge	.+30     	; 0x1d6c <fputc+0x4a>
    1d4e:	e8 81       	ld	r30, Y
    1d50:	f9 81       	ldd	r31, Y+1	; 0x01
    1d52:	9f 01       	movw	r18, r30
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	39 83       	std	Y+1, r19	; 0x01
    1d5a:	28 83       	st	Y, r18
    1d5c:	10 83       	st	Z, r17
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <fputc+0x4a>
    1d60:	e8 85       	ldd	r30, Y+8	; 0x08
    1d62:	f9 85       	ldd	r31, Y+9	; 0x09
    1d64:	81 2f       	mov	r24, r17
    1d66:	09 95       	icall
    1d68:	89 2b       	or	r24, r25
    1d6a:	29 f7       	brne	.-54     	; 0x1d36 <fputc+0x14>
    1d6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d70:	2f 5f       	subi	r18, 0xFF	; 255
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	3f 83       	std	Y+7, r19	; 0x07
    1d76:	2e 83       	std	Y+6, r18	; 0x06
    1d78:	81 2f       	mov	r24, r17
    1d7a:	90 2f       	mov	r25, r16
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <__ultoa_invert>:
    1d86:	fa 01       	movw	r30, r20
    1d88:	aa 27       	eor	r26, r26
    1d8a:	28 30       	cpi	r18, 0x08	; 8
    1d8c:	51 f1       	breq	.+84     	; 0x1de2 <__ultoa_invert+0x5c>
    1d8e:	20 31       	cpi	r18, 0x10	; 16
    1d90:	81 f1       	breq	.+96     	; 0x1df2 <__ultoa_invert+0x6c>
    1d92:	e8 94       	clt
    1d94:	6f 93       	push	r22
    1d96:	6e 7f       	andi	r22, 0xFE	; 254
    1d98:	6e 5f       	subi	r22, 0xFE	; 254
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	af 4f       	sbci	r26, 0xFF	; 255
    1da2:	b1 e0       	ldi	r27, 0x01	; 1
    1da4:	3e d0       	rcall	.+124    	; 0x1e22 <__ultoa_invert+0x9c>
    1da6:	b4 e0       	ldi	r27, 0x04	; 4
    1da8:	3c d0       	rcall	.+120    	; 0x1e22 <__ultoa_invert+0x9c>
    1daa:	67 0f       	add	r22, r23
    1dac:	78 1f       	adc	r23, r24
    1dae:	89 1f       	adc	r24, r25
    1db0:	9a 1f       	adc	r25, r26
    1db2:	a1 1d       	adc	r26, r1
    1db4:	68 0f       	add	r22, r24
    1db6:	79 1f       	adc	r23, r25
    1db8:	8a 1f       	adc	r24, r26
    1dba:	91 1d       	adc	r25, r1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	6a 0f       	add	r22, r26
    1dc0:	71 1d       	adc	r23, r1
    1dc2:	81 1d       	adc	r24, r1
    1dc4:	91 1d       	adc	r25, r1
    1dc6:	a1 1d       	adc	r26, r1
    1dc8:	20 d0       	rcall	.+64     	; 0x1e0a <__ultoa_invert+0x84>
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__ultoa_invert+0x48>
    1dcc:	68 94       	set
    1dce:	3f 91       	pop	r19
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	26 9f       	mul	r18, r22
    1dd4:	11 24       	eor	r1, r1
    1dd6:	30 19       	sub	r19, r0
    1dd8:	30 5d       	subi	r19, 0xD0	; 208
    1dda:	31 93       	st	Z+, r19
    1ddc:	de f6       	brtc	.-74     	; 0x1d94 <__ultoa_invert+0xe>
    1dde:	cf 01       	movw	r24, r30
    1de0:	08 95       	ret
    1de2:	46 2f       	mov	r20, r22
    1de4:	47 70       	andi	r20, 0x07	; 7
    1de6:	40 5d       	subi	r20, 0xD0	; 208
    1de8:	41 93       	st	Z+, r20
    1dea:	b3 e0       	ldi	r27, 0x03	; 3
    1dec:	0f d0       	rcall	.+30     	; 0x1e0c <__ultoa_invert+0x86>
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__ultoa_invert+0x5c>
    1df0:	f6 cf       	rjmp	.-20     	; 0x1dde <__ultoa_invert+0x58>
    1df2:	46 2f       	mov	r20, r22
    1df4:	4f 70       	andi	r20, 0x0F	; 15
    1df6:	40 5d       	subi	r20, 0xD0	; 208
    1df8:	4a 33       	cpi	r20, 0x3A	; 58
    1dfa:	18 f0       	brcs	.+6      	; 0x1e02 <__ultoa_invert+0x7c>
    1dfc:	49 5d       	subi	r20, 0xD9	; 217
    1dfe:	31 fd       	sbrc	r19, 1
    1e00:	40 52       	subi	r20, 0x20	; 32
    1e02:	41 93       	st	Z+, r20
    1e04:	02 d0       	rcall	.+4      	; 0x1e0a <__ultoa_invert+0x84>
    1e06:	a9 f7       	brne	.-22     	; 0x1df2 <__ultoa_invert+0x6c>
    1e08:	ea cf       	rjmp	.-44     	; 0x1dde <__ultoa_invert+0x58>
    1e0a:	b4 e0       	ldi	r27, 0x04	; 4
    1e0c:	a6 95       	lsr	r26
    1e0e:	97 95       	ror	r25
    1e10:	87 95       	ror	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__ultoa_invert+0x86>
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	61 05       	cpc	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	08 95       	ret
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	0a 2e       	mov	r0, r26
    1e28:	06 94       	lsr	r0
    1e2a:	57 95       	ror	r21
    1e2c:	47 95       	ror	r20
    1e2e:	37 95       	ror	r19
    1e30:	27 95       	ror	r18
    1e32:	ba 95       	dec	r27
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__ultoa_invert+0xa2>
    1e36:	62 0f       	add	r22, r18
    1e38:	73 1f       	adc	r23, r19
    1e3a:	84 1f       	adc	r24, r20
    1e3c:	95 1f       	adc	r25, r21
    1e3e:	a0 1d       	adc	r26, r0
    1e40:	08 95       	ret

00001e42 <_exit>:
    1e42:	f8 94       	cli

00001e44 <__stop_program>:
    1e44:	ff cf       	rjmp	.-2      	; 0x1e44 <__stop_program>
