
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00001efa  00001f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008001b8  008001b8  00002046  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002608  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000886  00000000  00000000  000048ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012a0  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  000063f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b8  00000000  00000000  00006a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015f2  00000000  00000000  000073d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  000089ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	dc c5       	rjmp	.+3000   	; 0xbde <__vector_9>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c6       	rjmp	.+3164   	; 0xc8a <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <oi_update+0x4a>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <oi_byte_tx>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ea ef       	ldi	r30, 0xFA	; 250
     140:	fe e1       	ldi	r31, 0x1E	; 30
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a8 3b       	cpi	r26, 0xB8	; 184
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	22 e0       	ldi	r18, 0x02	; 2
     154:	a8 eb       	ldi	r26, 0xB8	; 184
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ac 31       	cpi	r26, 0x1C	; 28
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	3f d2       	rcall	.+1150   	; 0x5e2 <main>
     164:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <transmitSensorData>:
		}	
	}
}

void transmitSensorData(oi_t *sensor_data)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	ca 5f       	subi	r28, 0xFA	; 250
     180:	d1 09       	sbc	r29, r1
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	8c 01       	movw	r16, r24
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "Bump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	86 95       	lsr	r24
     194:	81 70       	andi	r24, 0x01	; 1
     196:	1f 92       	push	r1
     198:	8f 93       	push	r24
     19a:	80 81       	ld	r24, Z
     19c:	81 70       	andi	r24, 0x01	; 1
     19e:	1f 92       	push	r1
     1a0:	8f 93       	push	r24
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	ce 01       	movw	r24, r28
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	6c 01       	movw	r12, r24
     1b0:	df 92       	push	r13
     1b2:	8f 93       	push	r24
     1b4:	0e 94 81 0c 	call	0x1902	; 0x1902 <sprintf>
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
     1b8:	f8 01       	movw	r30, r16
     1ba:	85 81       	ldd	r24, Z+5	; 0x05
     1bc:	1f 92       	push	r1
     1be:	8f 93       	push	r24
     1c0:	84 81       	ldd	r24, Z+4	; 0x04
     1c2:	1f 92       	push	r1
     1c4:	8f 93       	push	r24
     1c6:	83 81       	ldd	r24, Z+3	; 0x03
     1c8:	1f 92       	push	r1
     1ca:	8f 93       	push	r24
     1cc:	82 81       	ldd	r24, Z+2	; 0x02
     1ce:	1f 92       	push	r1
     1d0:	8f 93       	push	r24
     1d2:	0f 2e       	mov	r0, r31
     1d4:	f0 e3       	ldi	r31, 0x30	; 48
     1d6:	ef 2e       	mov	r14, r31
     1d8:	f1 e0       	ldi	r31, 0x01	; 1
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	ff 92       	push	r15
     1e0:	ef 92       	push	r14
     1e2:	ce 01       	movw	r24, r28
     1e4:	c3 96       	adiw	r24, 0x33	; 51
     1e6:	9f 93       	push	r25
     1e8:	8f 93       	push	r24
     1ea:	0e 94 81 0c 	call	0x1902	; 0x1902 <sprintf>
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
     1ee:	f8 01       	movw	r30, r16
     1f0:	83 a1       	ldd	r24, Z+35	; 0x23
     1f2:	8f 93       	push	r24
     1f4:	82 a1       	ldd	r24, Z+34	; 0x22
     1f6:	8f 93       	push	r24
     1f8:	81 a1       	ldd	r24, Z+33	; 0x21
     1fa:	8f 93       	push	r24
     1fc:	80 a1       	ldd	r24, Z+32	; 0x20
     1fe:	8f 93       	push	r24
     200:	87 8d       	ldd	r24, Z+31	; 0x1f
     202:	8f 93       	push	r24
     204:	86 8d       	ldd	r24, Z+30	; 0x1e
     206:	8f 93       	push	r24
     208:	85 8d       	ldd	r24, Z+29	; 0x1d
     20a:	8f 93       	push	r24
     20c:	84 8d       	ldd	r24, Z+28	; 0x1c
     20e:	8f 93       	push	r24
     210:	ff 92       	push	r15
     212:	ef 92       	push	r14
     214:	ce 01       	movw	r24, r28
     216:	89 56       	subi	r24, 0x69	; 105
     218:	9f 4f       	sbci	r25, 0xFF	; 255
     21a:	9f 93       	push	r25
     21c:	8f 93       	push	r24
     21e:	0e 94 81 0c 	call	0x1902	; 0x1902 <sprintf>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	76 01       	movw	r14, r12
     232:	06 c0       	rjmp	.+12     	; 0x240 <transmitSensorData+0xd6>
		USART_Transmit(bumpSensors[i]);
     234:	f6 01       	movw	r30, r12
     236:	81 91       	ld	r24, Z+
     238:	6f 01       	movw	r12, r30
     23a:	f8 d4       	rcall	.+2544   	; 0xc2c <USART_Transmit>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "Bump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     23c:	0f 5f       	subi	r16, 0xFF	; 255
     23e:	1f 4f       	sbci	r17, 0xFF	; 255
     240:	f7 01       	movw	r30, r14
     242:	01 90       	ld	r0, Z+
     244:	00 20       	and	r0, r0
     246:	e9 f7       	brne	.-6      	; 0x242 <transmitSensorData+0xd8>
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	ee 19       	sub	r30, r14
     24c:	ff 09       	sbc	r31, r15
     24e:	0e 17       	cp	r16, r30
     250:	1f 07       	cpc	r17, r31
     252:	80 f3       	brcs	.-32     	; 0x234 <transmitSensorData+0xca>
     254:	6e 01       	movw	r12, r28
     256:	f3 e3       	ldi	r31, 0x33	; 51
     258:	cf 0e       	add	r12, r31
     25a:	d1 1c       	adc	r13, r1
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     260:	76 01       	movw	r14, r12
     262:	06 c0       	rjmp	.+12     	; 0x270 <transmitSensorData+0x106>
		USART_Transmit(cliffSensors[i]); 
     264:	f6 01       	movw	r30, r12
     266:	81 91       	ld	r24, Z+
     268:	6f 01       	movw	r12, r30
     26a:	e0 d4       	rcall	.+2496   	; 0xc2c <USART_Transmit>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	f7 01       	movw	r30, r14
     272:	01 90       	ld	r0, Z+
     274:	00 20       	and	r0, r0
     276:	e9 f7       	brne	.-6      	; 0x272 <transmitSensorData+0x108>
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ee 19       	sub	r30, r14
     27c:	ff 09       	sbc	r31, r15
     27e:	0e 17       	cp	r16, r30
     280:	1f 07       	cpc	r17, r31
     282:	80 f3       	brcs	.-32     	; 0x264 <transmitSensorData+0xfa>
     284:	6e 01       	movw	r12, r28
     286:	f7 e9       	ldi	r31, 0x97	; 151
     288:	cf 0e       	add	r12, r31
     28a:	d1 1c       	adc	r13, r1
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     290:	76 01       	movw	r14, r12
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <transmitSensorData+0x136>
		USART_Transmit(cliffSignals[i]);
     294:	f6 01       	movw	r30, r12
     296:	81 91       	ld	r24, Z+
     298:	6f 01       	movw	r12, r30
     29a:	c8 d4       	rcall	.+2448   	; 0xc2c <USART_Transmit>
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     29c:	0f 5f       	subi	r16, 0xFF	; 255
     29e:	1f 4f       	sbci	r17, 0xFF	; 255
     2a0:	f7 01       	movw	r30, r14
     2a2:	01 90       	ld	r0, Z+
     2a4:	00 20       	and	r0, r0
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <transmitSensorData+0x138>
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	ee 19       	sub	r30, r14
     2ac:	ff 09       	sbc	r31, r15
     2ae:	0e 17       	cp	r16, r30
     2b0:	1f 07       	cpc	r17, r31
     2b2:	80 f3       	brcs	.-32     	; 0x294 <transmitSensorData+0x12a>
		USART_Transmit(cliffSignals[i]);
	}
}
     2b4:	c6 50       	subi	r28, 0x06	; 6
     2b6:	df 4f       	sbci	r29, 0xFF	; 255
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	08 95       	ret

000002d4 <scanForObjects>:

object_t * scanForObjects()
{
     2d4:	2f 92       	push	r2
     2d6:	3f 92       	push	r3
     2d8:	4f 92       	push	r4
     2da:	5f 92       	push	r5
     2dc:	6f 92       	push	r6
     2de:	7f 92       	push	r7
     2e0:	8f 92       	push	r8
     2e2:	9f 92       	push	r9
     2e4:	af 92       	push	r10
     2e6:	bf 92       	push	r11
     2e8:	cf 92       	push	r12
     2ea:	df 92       	push	r13
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	e0 97       	sbiw	r28, 0x30	; 48
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 1e 0b 	call	0x163c	; 0x163c <malloc>
     310:	3c 01       	movw	r6, r24
		for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
			USART_Transmit(heading[i]);
		}
		*/
		
		move_servo(degrees);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	8e d4       	rcall	.+2332   	; 0xc34 <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	4a d4       	rcall	.+2196   	; 0xbb2 <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	10 e0       	ldi	r17, 0x00	; 0
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     322:	c1 2c       	mov	r12, r1
     324:	d1 2c       	mov	r13, r1
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     326:	81 2c       	mov	r8, r1
     328:	91 2c       	mov	r9, r1
	int currObjectIndex = -1;
	//int currDiam = 0;
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
     32a:	e1 2c       	mov	r14, r1
     32c:	f1 2c       	mov	r15, r1
	int irDistance = 0;
	/*
	char heading[]="\r\nDegrees\t     IRDistance\tSonarDistance";   //   \r\n for new line, \t and spaces to line up text and numbers on output
	char output[50];
	*/
	int currObjectIndex = -1;
     32e:	aa 24       	eor	r10, r10
     330:	aa 94       	dec	r10
     332:	ba 2c       	mov	r11, r10
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     334:	c8 01       	movw	r24, r16
     336:	7e d4       	rcall	.+2300   	; 0xc34 <move_servo>
			sonarDistance = getPingDistance();
     338:	eb d4       	rcall	.+2518   	; 0xd10 <getPingDistance>
     33a:	48 2e       	mov	r4, r24
     33c:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     33e:	23 d5       	rcall	.+2630   	; 0xd86 <getIrDistance>
			for(int i = 0; i < strlen(output); i++){		//  Print output data
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     340:	85 36       	cpi	r24, 0x65	; 101
     342:	91 05       	cpc	r25, r1
     344:	0c f0       	brlt	.+2      	; 0x348 <scanForObjects+0x74>
     346:	b3 c0       	rjmp	.+358    	; 0x4ae <scanForObjects+0x1da>
     348:	e1 14       	cp	r14, r1
     34a:	f1 04       	cpc	r15, r1
     34c:	09 f0       	breq	.+2      	; 0x350 <scanForObjects+0x7c>
     34e:	4f c0       	rjmp	.+158    	; 0x3ee <scanForObjects+0x11a>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	a8 1a       	sub	r10, r24
     354:	b8 0a       	sbc	r11, r24
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     356:	c4 2c       	mov	r12, r4
     358:	d5 2c       	mov	r13, r5
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     35a:	48 01       	movw	r8, r16
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     35c:	ee 24       	eor	r14, r14
     35e:	e3 94       	inc	r14
     360:	f1 2c       	mov	r15, r1
     362:	45 c0       	rjmp	.+138    	; 0x3ee <scanForObjects+0x11a>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     364:	75 01       	movw	r14, r10
     366:	ee 0c       	add	r14, r14
     368:	ff 1c       	adc	r15, r15
     36a:	ee 0c       	add	r14, r14
     36c:	ff 1c       	adc	r15, r15
     36e:	e6 0c       	add	r14, r6
     370:	f7 1c       	adc	r15, r7
     372:	c4 01       	movw	r24, r8
     374:	80 0f       	add	r24, r16
     376:	91 1f       	adc	r25, r17
     378:	99 23       	and	r25, r25
     37a:	0c f4       	brge	.+2      	; 0x37e <scanForObjects+0xaa>
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	95 95       	asr	r25
     380:	87 95       	ror	r24
     382:	f7 01       	movw	r30, r14
     384:	93 83       	std	Z+3, r25	; 0x03
     386:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     388:	b6 01       	movw	r22, r12
     38a:	88 27       	eor	r24, r24
     38c:	77 fd       	sbrc	r23, 7
     38e:	80 95       	com	r24
     390:	98 2f       	mov	r25, r24
     392:	2c d6       	rcall	.+3160   	; 0xfec <__floatsisf>
     394:	9b 01       	movw	r18, r22
     396:	ac 01       	movw	r20, r24
     398:	ee d6       	rcall	.+3548   	; 0x1176 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	24 d5       	rcall	.+2632   	; 0xde8 <__addsf3>
     3a0:	1b 01       	movw	r2, r22
     3a2:	2c 01       	movw	r4, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     3a4:	c4 01       	movw	r24, r8
     3a6:	80 1b       	sub	r24, r16
     3a8:	91 0b       	sbc	r25, r17
     3aa:	bc 01       	movw	r22, r24
     3ac:	22 f4       	brpl	.+8      	; 0x3b6 <scanForObjects+0xe2>
     3ae:	66 27       	eor	r22, r22
     3b0:	77 27       	eor	r23, r23
     3b2:	68 1b       	sub	r22, r24
     3b4:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     3b6:	88 27       	eor	r24, r24
     3b8:	77 fd       	sbrc	r23, 7
     3ba:	80 95       	com	r24
     3bc:	98 2f       	mov	r25, r24
     3be:	16 d6       	rcall	.+3116   	; 0xfec <__floatsisf>
     3c0:	77 d5       	rcall	.+2798   	; 0xeb0 <cos>
     3c2:	9b 01       	movw	r18, r22
     3c4:	ac 01       	movw	r20, r24
     3c6:	c2 01       	movw	r24, r4
     3c8:	b1 01       	movw	r22, r2
     3ca:	d5 d6       	rcall	.+3498   	; 0x1176 <__mulsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c2 01       	movw	r24, r4
     3d2:	b1 01       	movw	r22, r2
     3d4:	08 d5       	rcall	.+2576   	; 0xde6 <__subsf3>
     3d6:	82 d7       	rcall	.+3844   	; 0x12dc <sqrt>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 eb       	ldi	r20, 0xB0	; 176
     3de:	50 e4       	ldi	r21, 0x40	; 64
     3e0:	6a d5       	rcall	.+2772   	; 0xeb6 <__divsf3>
     3e2:	d1 d5       	rcall	.+2978   	; 0xf86 <__fixsfsi>
     3e4:	f7 01       	movw	r30, r14
     3e6:	71 83       	std	Z+1, r23	; 0x01
     3e8:	60 83       	st	Z, r22
				inObject = 0;											//Sensor is no longer on an object
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
			}	
		
			degrees += 2;
     3ee:	0e 5f       	subi	r16, 0xFE	; 254
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
			wait_ms(200);
     3f2:	88 ec       	ldi	r24, 0xC8	; 200
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	dd d3       	rcall	.+1978   	; 0xbb2 <wait_ms>
		}
		*/
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     3f8:	06 3b       	cpi	r16, 0xB6	; 182
     3fa:	11 05       	cpc	r17, r1
     3fc:	09 f0       	breq	.+2      	; 0x400 <scanForObjects+0x12c>
     3fe:	9a cf       	rjmp	.-204    	; 0x334 <scanForObjects+0x60>
     400:	5c c0       	rjmp	.+184    	; 0x4ba <scanForObjects+0x1e6>
		}
    }
	
	char heading[] = "Found objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     
		USART_Transmit(heading[i]);
     402:	f6 01       	movw	r30, r12
     404:	81 91       	ld	r24, Z+
     406:	6f 01       	movw	r12, r30
     408:	11 d4       	rcall	.+2082   	; 0xc2c <USART_Transmit>
			wait_ms(200);
		}
    }
	
	char heading[] = "Found objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	f7 01       	movw	r30, r14
     410:	01 90       	ld	r0, Z+
     412:	00 20       	and	r0, r0
     414:	e9 f7       	brne	.-6      	; 0x410 <scanForObjects+0x13c>
     416:	31 97       	sbiw	r30, 0x01	; 1
     418:	ee 19       	sub	r30, r14
     41a:	ff 09       	sbc	r31, r15
     41c:	0e 17       	cp	r16, r30
     41e:	1f 07       	cpc	r17, r31
     420:	80 f3       	brcs	.-32     	; 0x402 <scanForObjects+0x12e>
		USART_Transmit(heading[i]);
	}
	
	for (int i = 0; i < currObjectIndex; i++) {
     422:	1a 14       	cp	r1, r10
     424:	1b 04       	cpc	r1, r11
     426:	0c f0       	brlt	.+2      	; 0x42a <scanForObjects+0x156>
     428:	58 c0       	rjmp	.+176    	; 0x4da <scanForObjects+0x206>
     42a:	43 01       	movw	r8, r6
     42c:	41 2c       	mov	r4, r1
     42e:	51 2c       	mov	r5, r1
		char output[30];
		sprintf(output, "Diameter: %2d Angle: %3d\r\n", objects[i].diameter, objects[i].location);
     430:	0f 2e       	mov	r0, r31
     432:	f3 e7       	ldi	r31, 0x73	; 115
     434:	2f 2e       	mov	r2, r31
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	3f 2e       	mov	r3, r31
     43a:	f0 2d       	mov	r31, r0
     43c:	7e 01       	movw	r14, r28
     43e:	f1 e1       	ldi	r31, 0x11	; 17
     440:	ef 0e       	add	r14, r31
     442:	f1 1c       	adc	r15, r1
     444:	ef a6       	std	Y+47, r14	; 0x2f
     446:	f8 aa       	std	Y+48, r15	; 0x30
     448:	f4 01       	movw	r30, r8
     44a:	83 81       	ldd	r24, Z+3	; 0x03
     44c:	8f 93       	push	r24
     44e:	82 81       	ldd	r24, Z+2	; 0x02
     450:	8f 93       	push	r24
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	8f 93       	push	r24
     456:	80 81       	ld	r24, Z
     458:	8f 93       	push	r24
     45a:	3f 92       	push	r3
     45c:	2f 92       	push	r2
     45e:	ff 92       	push	r15
     460:	ef 92       	push	r14
     462:	0e 94 81 0c 	call	0x1902	; 0x1902 <sprintf>
     466:	cf a4       	ldd	r12, Y+47	; 0x2f
     468:	d8 a8       	ldd	r13, Y+48	; 0x30
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	06 c0       	rjmp	.+12     	; 0x486 <scanForObjects+0x1b2>
			USART_Transmit(output[i]);
     47a:	f6 01       	movw	r30, r12
     47c:	81 91       	ld	r24, Z+
     47e:	6f 01       	movw	r12, r30
     480:	d5 d3       	rcall	.+1962   	; 0xc2c <USART_Transmit>
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[30];
		sprintf(output, "Diameter: %2d Angle: %3d\r\n", objects[i].diameter, objects[i].location);
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     482:	0f 5f       	subi	r16, 0xFF	; 255
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	f7 01       	movw	r30, r14
     488:	01 90       	ld	r0, Z+
     48a:	00 20       	and	r0, r0
     48c:	e9 f7       	brne	.-6      	; 0x488 <scanForObjects+0x1b4>
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	ee 19       	sub	r30, r14
     492:	ff 09       	sbc	r31, r15
     494:	0e 17       	cp	r16, r30
     496:	1f 07       	cpc	r17, r31
     498:	80 f3       	brcs	.-32     	; 0x47a <scanForObjects+0x1a6>
	char heading[] = "Found objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     
		USART_Transmit(heading[i]);
	}
	
	for (int i = 0; i < currObjectIndex; i++) {
     49a:	ff ef       	ldi	r31, 0xFF	; 255
     49c:	4f 1a       	sub	r4, r31
     49e:	5f 0a       	sbc	r5, r31
     4a0:	84 e0       	ldi	r24, 0x04	; 4
     4a2:	88 0e       	add	r8, r24
     4a4:	91 1c       	adc	r9, r1
     4a6:	4a 14       	cp	r4, r10
     4a8:	5b 04       	cpc	r5, r11
     4aa:	71 f6       	brne	.-100    	; 0x448 <scanForObjects+0x174>
     4ac:	16 c0       	rjmp	.+44     	; 0x4da <scanForObjects+0x206>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	e9 16       	cp	r14, r25
     4b2:	f1 04       	cpc	r15, r1
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <scanForObjects+0x1e4>
     4b6:	9b cf       	rjmp	.-202    	; 0x3ee <scanForObjects+0x11a>
     4b8:	55 cf       	rjmp	.-342    	; 0x364 <scanForObjects+0x90>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	char heading[] = "Found objects\r\n";
     4ba:	80 e1       	ldi	r24, 0x10	; 16
     4bc:	ee e8       	ldi	r30, 0x8E	; 142
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	de 01       	movw	r26, r28
     4c2:	11 96       	adiw	r26, 0x01	; 1
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <scanForObjects+0x1f0>
     4cc:	fe 01       	movw	r30, r28
     4ce:	31 96       	adiw	r30, 0x01	; 1
     4d0:	6f 01       	movw	r12, r30
	for(int i = 0; i < strlen(heading); i++) {     
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	10 e0       	ldi	r17, 0x00	; 0
     4d6:	7f 01       	movw	r14, r30
     4d8:	9a cf       	rjmp	.-204    	; 0x40e <scanForObjects+0x13a>
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
			USART_Transmit(output[i]);
		}
	}
	return objects;
     4da:	c3 01       	movw	r24, r6
     4dc:	e0 96       	adiw	r28, 0x30	; 48
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	7f 90       	pop	r7
     502:	6f 90       	pop	r6
     504:	5f 90       	pop	r5
     506:	4f 90       	pop	r4
     508:	3f 90       	pop	r3
     50a:	2f 90       	pop	r2
     50c:	08 95       	ret

0000050e <getCommand>:
		//TODO:: Please write your application code 
    }
}

void getCommand(oi_t *sensor_data)
{
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	27 97       	sbiw	r28, 0x07	; 7
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     52c:	7b d3       	rcall	.+1782   	; 0xc24 <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     52e:	82 37       	cpi	r24, 0x72	; 114
     530:	39 f0       	breq	.+14     	; 0x540 <getCommand+0x32>
     532:	83 37       	cpi	r24, 0x73	; 115
     534:	09 f4       	brne	.+2      	; 0x538 <getCommand+0x2a>
     536:	3e c0       	rjmp	.+124    	; 0x5b4 <getCommand+0xa6>
     538:	8d 36       	cpi	r24, 0x6D	; 109
     53a:	09 f0       	breq	.+2      	; 0x53e <getCommand+0x30>
     53c:	43 c0       	rjmp	.+134    	; 0x5c4 <getCommand+0xb6>
     53e:	1e c0       	rjmp	.+60     	; 0x57c <getCommand+0x6e>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     540:	71 d3       	rcall	.+1762   	; 0xc24 <USART_Receive>
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	6f d3       	rcall	.+1758   	; 0xc24 <USART_Receive>
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	6d d3       	rcall	.+1754   	; 0xc24 <USART_Receive>
     54a:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 45 0c 	call	0x188a	; 0x188a <atoi>
     554:	e8 2e       	mov	r14, r24
     556:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	2e e9       	ldi	r18, 0x9E	; 158
     55e:	31 e0       	ldi	r19, 0x01	; 1
     560:	3f 93       	push	r19
     562:	2f 93       	push	r18
     564:	bf d0       	rcall	.+382    	; 0x6e4 <lprintf>
				turn_clockwise(sensor_data, degrees);
     566:	6e 2d       	mov	r22, r14
     568:	7f 2d       	mov	r23, r15
     56a:	c8 01       	movw	r24, r16
     56c:	b4 d1       	rcall	.+872    	; 0x8d6 <turn_clockwise>
				transmitSensorData(sensor_data);
     56e:	c8 01       	movw	r24, r16
     570:	fc dd       	rcall	.-1032   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	26 c0       	rjmp	.+76     	; 0x5c8 <getCommand+0xba>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     57c:	53 d3       	rcall	.+1702   	; 0xc24 <USART_Receive>
     57e:	8d 83       	std	Y+5, r24	; 0x05
     580:	51 d3       	rcall	.+1698   	; 0xc24 <USART_Receive>
     582:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     584:	ce 01       	movw	r24, r28
     586:	05 96       	adiw	r24, 0x05	; 5
     588:	0e 94 45 0c 	call	0x188a	; 0x188a <atoi>
     58c:	e8 2e       	mov	r14, r24
     58e:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	2a ea       	ldi	r18, 0xAA	; 170
     596:	31 e0       	ldi	r19, 0x01	; 1
     598:	3f 93       	push	r19
     59a:	2f 93       	push	r18
     59c:	a3 d0       	rcall	.+326    	; 0x6e4 <lprintf>
				move_forward(sensor_data, distance);
     59e:	6e 2d       	mov	r22, r14
     5a0:	7f 2d       	mov	r23, r15
     5a2:	c8 01       	movw	r24, r16
     5a4:	42 d1       	rcall	.+644    	; 0x82a <move_forward>
				transmitSensorData(sensor_data);
     5a6:	c8 01       	movw	r24, r16
     5a8:	e0 dd       	rcall	.-1088   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0a c0       	rjmp	.+20     	; 0x5c8 <getCommand+0xba>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     5b4:	8f de       	rcall	.-738    	; 0x2d4 <scanForObjects>
     5b6:	7c 01       	movw	r14, r24
				transmitSensorData(sensor_data);
     5b8:	c8 01       	movw	r24, r16
     5ba:	d7 dd       	rcall	.-1106   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				free(foundObjects);
     5bc:	c7 01       	movw	r24, r14
     5be:	0e 94 b6 0b 	call	0x176c	; 0x176c <free>
				break;
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <getCommand+0xba>
			default:
				command = USART_Receive();
     5c4:	2f d3       	rcall	.+1630   	; 0xc24 <USART_Receive>
     5c6:	b3 cf       	rjmp	.-154    	; 0x52e <getCommand+0x20>
		}	
	}
}
     5c8:	27 96       	adiw	r28, 0x07	; 7
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <main>:

unsigned long time_diff;

int main(void)
{
    lcd_init();
     5e2:	2f d0       	rcall	.+94     	; 0x642 <lcd_init>
    ADC_init();
     5e4:	c5 d3       	rcall	.+1930   	; 0xd70 <ADC_init>
    pinginit();
     5e6:	90 d3       	rcall	.+1824   	; 0xd08 <pinginit>
    timer3_init();
     5e8:	33 d3       	rcall	.+1638   	; 0xc50 <timer3_init>
	USART_init();
     5ea:	10 d3       	rcall	.+1568   	; 0xc0c <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     5ec:	96 d1       	rcall	.+812    	; 0x91a <oi_alloc>
     5ee:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
     5f0:	98 d2       	rcall	.+1328   	; 0xb22 <oi_init>
	
	while(1)
    {
		getCommand(sensor_data);
     5f2:	ce 01       	movw	r24, r28
     5f4:	8c df       	rcall	.-232    	; 0x50e <getCommand>
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <main+0x10>

000005f8 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     5f8:	de 9a       	sbi	0x1b, 6	; 27
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	da d2       	rcall	.+1460   	; 0xbb2 <wait_ms>
     5fe:	de 98       	cbi	0x1b, 6	; 27
     600:	8b b3       	in	r24, 0x1b	; 27
     602:	80 7f       	andi	r24, 0xF0	; 240
     604:	8b bb       	out	0x1b, r24	; 27
     606:	08 95       	ret

00000608 <lcd_command>:
     608:	cf 93       	push	r28
     60a:	c8 2f       	mov	r28, r24
     60c:	dc 98       	cbi	0x1b, 4	; 27
     60e:	8b b3       	in	r24, 0x1b	; 27
     610:	9c 2f       	mov	r25, r28
     612:	92 95       	swap	r25
     614:	9f 70       	andi	r25, 0x0F	; 15
     616:	89 2b       	or	r24, r25
     618:	8b bb       	out	0x1b, r24	; 27
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	ed df       	rcall	.-38     	; 0x5f8 <lcd_toggle_clear>
     61e:	8b b3       	in	r24, 0x1b	; 27
     620:	cf 70       	andi	r28, 0x0F	; 15
     622:	c8 2b       	or	r28, r24
     624:	cb bb       	out	0x1b, r28	; 27
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	e7 df       	rcall	.-50     	; 0x5f8 <lcd_toggle_clear>
     62a:	dc 9a       	sbi	0x1b, 4	; 27
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <lcd_clear>:
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	ea df       	rcall	.-44     	; 0x608 <lcd_command>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	bc c2       	rjmp	.+1400   	; 0xbb2 <wait_ms>
     63a:	08 95       	ret

0000063c <lcd_home_line1>:
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	e4 cf       	rjmp	.-56     	; 0x608 <lcd_command>
     640:	08 95       	ret

00000642 <lcd_init>:
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	8a bb       	out	0x1a, r24	; 26
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	8b bb       	out	0x1b, r24	; 27
     64a:	de 9a       	sbi	0x1b, 6	; 27
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	b0 d2       	rcall	.+1376   	; 0xbb2 <wait_ms>
     652:	de 98       	cbi	0x1b, 6	; 27
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	ac d2       	rcall	.+1368   	; 0xbb2 <wait_ms>
     65a:	de 9a       	sbi	0x1b, 6	; 27
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	a8 d2       	rcall	.+1360   	; 0xbb2 <wait_ms>
     662:	de 98       	cbi	0x1b, 6	; 27
     664:	de 9a       	sbi	0x1b, 6	; 27
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	a3 d2       	rcall	.+1350   	; 0xbb2 <wait_ms>
     66c:	de 98       	cbi	0x1b, 6	; 27
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	8b bb       	out	0x1b, r24	; 27
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	c1 df       	rcall	.-126    	; 0x5f8 <lcd_toggle_clear>
     676:	8b b3       	in	r24, 0x1b	; 27
     678:	8b bb       	out	0x1b, r24	; 27
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	bd df       	rcall	.-134    	; 0x5f8 <lcd_toggle_clear>
     67e:	8b b3       	in	r24, 0x1b	; 27
     680:	8e 60       	ori	r24, 0x0E	; 14
     682:	8b bb       	out	0x1b, r24	; 27
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	b8 df       	rcall	.-144    	; 0x5f8 <lcd_toggle_clear>
     688:	8b b3       	in	r24, 0x1b	; 27
     68a:	8b bb       	out	0x1b, r24	; 27
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	b4 df       	rcall	.-152    	; 0x5f8 <lcd_toggle_clear>
     690:	8b b3       	in	r24, 0x1b	; 27
     692:	86 60       	ori	r24, 0x06	; 6
     694:	8b bb       	out	0x1b, r24	; 27
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	af df       	rcall	.-162    	; 0x5f8 <lcd_toggle_clear>
     69a:	8b b3       	in	r24, 0x1b	; 27
     69c:	8b bb       	out	0x1b, r24	; 27
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	ab df       	rcall	.-170    	; 0x5f8 <lcd_toggle_clear>
     6a2:	d8 9a       	sbi	0x1b, 0	; 27
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	a8 df       	rcall	.-176    	; 0x5f8 <lcd_toggle_clear>
     6a8:	dc 9a       	sbi	0x1b, 4	; 27
     6aa:	c8 cf       	rjmp	.-112    	; 0x63c <lcd_home_line1>
     6ac:	08 95       	ret

000006ae <lcd_home_line2>:
     6ae:	80 ec       	ldi	r24, 0xC0	; 192
     6b0:	ab cf       	rjmp	.-170    	; 0x608 <lcd_command>
     6b2:	08 95       	ret

000006b4 <lcd_home_line3>:
     6b4:	84 e9       	ldi	r24, 0x94	; 148
     6b6:	a8 cf       	rjmp	.-176    	; 0x608 <lcd_command>
     6b8:	08 95       	ret

000006ba <lcd_home_line4>:
     6ba:	84 ed       	ldi	r24, 0xD4	; 212
     6bc:	a5 cf       	rjmp	.-182    	; 0x608 <lcd_command>
     6be:	08 95       	ret

000006c0 <lcd_putc>:
     6c0:	cf 93       	push	r28
     6c2:	c8 2f       	mov	r28, r24
     6c4:	8b b3       	in	r24, 0x1b	; 27
     6c6:	9c 2f       	mov	r25, r28
     6c8:	92 95       	swap	r25
     6ca:	9f 70       	andi	r25, 0x0F	; 15
     6cc:	89 2b       	or	r24, r25
     6ce:	8b bb       	out	0x1b, r24	; 27
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	92 df       	rcall	.-220    	; 0x5f8 <lcd_toggle_clear>
     6d4:	8b b3       	in	r24, 0x1b	; 27
     6d6:	cf 70       	andi	r28, 0x0F	; 15
     6d8:	c8 2b       	or	r28, r24
     6da:	cb bb       	out	0x1b, r28	; 27
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	8c df       	rcall	.-232    	; 0x5f8 <lcd_toggle_clear>
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	c1 55       	subi	r28, 0x51	; 81
     6fa:	d1 09       	sbc	r29, r1
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	fe 01       	movw	r30, r28
     708:	e4 5a       	subi	r30, 0xA4	; 164
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	41 91       	ld	r20, Z+
     70e:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     710:	9f 01       	movw	r18, r30
     712:	61 e5       	ldi	r22, 0x51	; 81
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	ce 01       	movw	r24, r28
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	0e 94 af 0c 	call	0x195e	; 0x195e <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	88 eb       	ldi	r24, 0xB8	; 184
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <strcmp>
     72c:	89 2b       	or	r24, r25
     72e:	09 f4       	brne	.+2      	; 0x732 <lprintf+0x4e>
     730:	40 c0       	rjmp	.+128    	; 0x7b2 <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	88 eb       	ldi	r24, 0xB8	; 184
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <strcpy>
	lcd_clear();
     740:	77 df       	rcall	.-274    	; 0x630 <lcd_clear>
     742:	9e 01       	movw	r18, r28
     744:	2f 5f       	subi	r18, 0xFF	; 255
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     74e:	0f 2e       	mov	r0, r31
     750:	f4 e1       	ldi	r31, 0x14	; 20
     752:	ef 2e       	mov	r14, r31
     754:	f1 2c       	mov	r15, r1
     756:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     758:	24 c0       	rjmp	.+72     	; 0x7a2 <lprintf+0xbe>
		if (*str == '\n') {
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	49 f4       	brne	.+18     	; 0x770 <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     75e:	c8 01       	movw	r24, r16
     760:	b7 01       	movw	r22, r14
     762:	2b d7       	rcall	.+3670   	; 0x15ba <__divmodhi4>
     764:	f7 01       	movw	r30, r14
     766:	e8 1b       	sub	r30, r24
     768:	f9 0b       	sbc	r31, r25
     76a:	0e 0f       	add	r16, r30
     76c:	1f 1f       	adc	r17, r31
     76e:	03 c0       	rjmp	.+6      	; 0x776 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     770:	a7 df       	rcall	.-178    	; 0x6c0 <lcd_putc>
			charnum++;
     772:	0f 5f       	subi	r16, 0xFF	; 255
     774:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     776:	c8 01       	movw	r24, r16
     778:	b7 01       	movw	r22, r14
     77a:	1f d7       	rcall	.+3646   	; 0x15ba <__divmodhi4>
     77c:	89 2b       	or	r24, r25
     77e:	89 f4       	brne	.+34     	; 0x7a2 <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     780:	c8 01       	movw	r24, r16
     782:	b7 01       	movw	r22, r14
     784:	1a d7       	rcall	.+3636   	; 0x15ba <__divmodhi4>
     786:	62 30       	cpi	r22, 0x02	; 2
     788:	71 05       	cpc	r23, r1
     78a:	41 f0       	breq	.+16     	; 0x79c <lprintf+0xb8>
     78c:	63 30       	cpi	r22, 0x03	; 3
     78e:	71 05       	cpc	r23, r1
     790:	39 f0       	breq	.+14     	; 0x7a0 <lprintf+0xbc>
     792:	61 30       	cpi	r22, 0x01	; 1
     794:	71 05       	cpc	r23, r1
     796:	29 f4       	brne	.+10     	; 0x7a2 <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     798:	8a df       	rcall	.-236    	; 0x6ae <lcd_home_line2>
				break;
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     79c:	8b df       	rcall	.-234    	; 0x6b4 <lcd_home_line3>
				break;
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     7a0:	8c df       	rcall	.-232    	; 0x6ba <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     7a2:	f6 01       	movw	r30, r12
     7a4:	81 91       	ld	r24, Z+
     7a6:	6f 01       	movw	r12, r30
     7a8:	88 23       	and	r24, r24
     7aa:	19 f0       	breq	.+6      	; 0x7b2 <lprintf+0xce>
     7ac:	00 35       	cpi	r16, 0x50	; 80
     7ae:	11 05       	cpc	r17, r1
     7b0:	a4 f2       	brlt	.-88     	; 0x75a <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     7b2:	cf 5a       	subi	r28, 0xAF	; 175
     7b4:	df 4f       	sbci	r29, 0xFF	; 255
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <move_backward>:
		sum += sensor->distance;
	}
}

void move_backward(oi_t *sensor, int centimeters)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     7dc:	eb 01       	movw	r28, r22
     7de:	cc 0f       	add	r28, r28
     7e0:	dd 1f       	adc	r29, r29
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	66 0f       	add	r22, r22
     7e8:	77 1f       	adc	r23, r23
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	c6 0f       	add	r28, r22
     7f0:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     7f2:	68 e3       	ldi	r22, 0x38	; 56
     7f4:	7f ef       	ldi	r23, 0xFF	; 255
     7f6:	88 e3       	ldi	r24, 0x38	; 56
     7f8:	9f ef       	ldi	r25, 0xFF	; 255
     7fa:	b9 d0       	rcall	.+370    	; 0x96e <oi_set_wheels>
	while (sum > 0) {
     7fc:	1c 16       	cp	r1, r28
     7fe:	1d 06       	cpc	r1, r29
     800:	54 f4       	brge	.+20     	; 0x816 <move_backward+0x44>
		oi_update(sensor);
     802:	c8 01       	movw	r24, r16
     804:	d3 d0       	rcall	.+422    	; 0x9ac <oi_update>
		sum += sensor->distance;
     806:	f8 01       	movw	r30, r16
     808:	84 85       	ldd	r24, Z+12	; 0x0c
     80a:	95 85       	ldd	r25, Z+13	; 0x0d
     80c:	c8 0f       	add	r28, r24
     80e:	d9 1f       	adc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     810:	1c 16       	cp	r1, r28
     812:	1d 06       	cpc	r1, r29
     814:	b4 f3       	brlt	.-20     	; 0x802 <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a7 d0       	rcall	.+334    	; 0x96e <oi_set_wheels>
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <move_forward>:
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ec 01       	movw	r28, r24
     838:	8b 01       	movw	r16, r22
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
     83a:	68 ec       	ldi	r22, 0xC8	; 200
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	88 ec       	ldi	r24, 0xC8	; 200
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	95 d0       	rcall	.+298    	; 0x96e <oi_set_wheels>
	while (sum < centimeters * 10) {
     844:	78 01       	movw	r14, r16
     846:	ee 0c       	add	r14, r14
     848:	ff 1c       	adc	r15, r15
     84a:	00 0f       	add	r16, r16
     84c:	11 1f       	adc	r17, r17
     84e:	00 0f       	add	r16, r16
     850:	11 1f       	adc	r17, r17
     852:	00 0f       	add	r16, r16
     854:	11 1f       	adc	r17, r17
     856:	e0 0e       	add	r14, r16
     858:	f1 1e       	adc	r15, r17
     85a:	1e 14       	cp	r1, r14
     85c:	1f 04       	cpc	r1, r15
     85e:	7c f5       	brge	.+94     	; 0x8be <move_forward+0x94>
		if (sensor->bumper_left || sensor->bumper_right || sensor->cliff_left || sensor->cliff_right || sensor->cliff_frontleft || sensor ->cliff_frontright) {
     860:	88 81       	ld	r24, Y
     862:	83 70       	andi	r24, 0x03	; 3
     864:	e1 f4       	brne	.+56     	; 0x89e <move_forward+0x74>
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	81 11       	cpse	r24, r1
     86a:	19 c0       	rjmp	.+50     	; 0x89e <move_forward+0x74>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	81 11       	cpse	r24, r1
     870:	16 c0       	rjmp	.+44     	; 0x89e <move_forward+0x74>
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	81 11       	cpse	r24, r1
     876:	13 c0       	rjmp	.+38     	; 0x89e <move_forward+0x74>
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	88 23       	and	r24, r24
     87c:	a9 f0       	breq	.+42     	; 0x8a8 <move_forward+0x7e>
     87e:	0f c0       	rjmp	.+30     	; 0x89e <move_forward+0x74>
     880:	88 81       	ld	r24, Y
     882:	83 70       	andi	r24, 0x03	; 3
     884:	61 f4       	brne	.+24     	; 0x89e <move_forward+0x74>
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	81 11       	cpse	r24, r1
     88a:	09 c0       	rjmp	.+18     	; 0x89e <move_forward+0x74>
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	81 11       	cpse	r24, r1
     890:	06 c0       	rjmp	.+12     	; 0x89e <move_forward+0x74>
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	81 11       	cpse	r24, r1
     896:	03 c0       	rjmp	.+6      	; 0x89e <move_forward+0x74>
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	88 23       	and	r24, r24
     89c:	39 f0       	breq	.+14     	; 0x8ac <move_forward+0x82>
			move_backward(sensor, 15);
     89e:	6f e0       	ldi	r22, 0x0F	; 15
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	ce 01       	movw	r24, r28
     8a4:	96 df       	rcall	.-212    	; 0x7d2 <move_backward>
			//turn_clockwise(sensor, 87);
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
     8a6:	0b c0       	rjmp	.+22     	; 0x8be <move_forward+0x94>
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
		}
		oi_update(sensor);
     8ac:	ce 01       	movw	r24, r28
     8ae:	7e d0       	rcall	.+252    	; 0x9ac <oi_update>
		sum += sensor->distance;
     8b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     8b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     8b4:	08 0f       	add	r16, r24
     8b6:	19 1f       	adc	r17, r25

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     8b8:	0e 15       	cp	r16, r14
     8ba:	1f 05       	cpc	r17, r15
     8bc:	0c f3       	brlt	.-62     	; 0x880 <move_forward+0x56>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	53 d0       	rcall	.+166    	; 0x96e <oi_set_wheels>
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	08 95       	ret

000008d6 <turn_clockwise>:
	}
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	8c 01       	movw	r16, r24
     8e0:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     8e2:	66 e9       	ldi	r22, 0x96	; 150
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	8a e6       	ldi	r24, 0x6A	; 106
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	41 d0       	rcall	.+130    	; 0x96e <oi_set_wheels>
	while (sum > 0) {
     8ec:	1c 16       	cp	r1, r28
     8ee:	1d 06       	cpc	r1, r29
     8f0:	54 f4       	brge	.+20     	; 0x906 <turn_clockwise+0x30>
		oi_update(sensor);
     8f2:	c8 01       	movw	r24, r16
     8f4:	5b d0       	rcall	.+182    	; 0x9ac <oi_update>
		sum += sensor->angle;
     8f6:	f8 01       	movw	r30, r16
     8f8:	86 85       	ldd	r24, Z+14	; 0x0e
     8fa:	97 85       	ldd	r25, Z+15	; 0x0f
     8fc:	c8 0f       	add	r28, r24
     8fe:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     900:	1c 16       	cp	r1, r28
     902:	1d 06       	cpc	r1, r29
     904:	b4 f3       	brlt	.-20     	; 0x8f2 <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	2f d0       	rcall	.+94     	; 0x96e <oi_set_wheels>
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     91a:	64 e3       	ldi	r22, 0x34	; 52
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	72 c6       	rjmp	.+3300   	; 0x1608 <calloc>
     924:	08 95       	ret

00000926 <oi_byte_tx>:
     926:	eb e9       	ldi	r30, 0x9B	; 155
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	90 81       	ld	r25, Z
     92c:	95 ff       	sbrs	r25, 5
     92e:	fd cf       	rjmp	.-6      	; 0x92a <oi_byte_tx+0x4>
     930:	80 93 9c 00 	sts	0x009C, r24
     934:	08 95       	ret

00000936 <oi_set_leds>:
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	08 2f       	mov	r16, r24
     940:	16 2f       	mov	r17, r22
     942:	d4 2f       	mov	r29, r20
     944:	c2 2f       	mov	r28, r18
     946:	8b e8       	ldi	r24, 0x8B	; 139
     948:	ee df       	rcall	.-36     	; 0x926 <oi_byte_tx>
     94a:	11 23       	and	r17, r17
     94c:	29 f0       	breq	.+10     	; 0x958 <oi_set_leds+0x22>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	01 11       	cpse	r16, r1
     952:	03 c0       	rjmp	.+6      	; 0x95a <oi_set_leds+0x24>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	01 c0       	rjmp	.+2      	; 0x95a <oi_set_leds+0x24>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e5 df       	rcall	.-54     	; 0x926 <oi_byte_tx>
     95c:	8d 2f       	mov	r24, r29
     95e:	e3 df       	rcall	.-58     	; 0x926 <oi_byte_tx>
     960:	8c 2f       	mov	r24, r28
     962:	e1 df       	rcall	.-62     	; 0x926 <oi_byte_tx>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <oi_set_wheels>:
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	18 2f       	mov	r17, r24
     978:	09 2f       	mov	r16, r25
     97a:	c6 2f       	mov	r28, r22
     97c:	d7 2f       	mov	r29, r23
     97e:	81 e9       	ldi	r24, 0x91	; 145
     980:	d2 df       	rcall	.-92     	; 0x926 <oi_byte_tx>
     982:	80 2f       	mov	r24, r16
     984:	d0 df       	rcall	.-96     	; 0x926 <oi_byte_tx>
     986:	81 2f       	mov	r24, r17
     988:	ce df       	rcall	.-100    	; 0x926 <oi_byte_tx>
     98a:	8d 2f       	mov	r24, r29
     98c:	cc df       	rcall	.-104    	; 0x926 <oi_byte_tx>
     98e:	8c 2f       	mov	r24, r28
     990:	ca df       	rcall	.-108    	; 0x926 <oi_byte_tx>
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     99c:	eb e9       	ldi	r30, 0x9B	; 155
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	88 23       	and	r24, r24
     9a4:	ec f7       	brge	.-6      	; 0x9a0 <oi_byte_rx+0x4>

	return UDR1;
     9a6:	80 91 9c 00 	lds	r24, 0x009C
}
     9aa:	08 95       	ret

000009ac <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9ba:	80 91 9b 00 	lds	r24, 0x009B
     9be:	88 23       	and	r24, r24
     9c0:	44 f4       	brge	.+16     	; 0x9d2 <oi_update+0x26>
		i = UDR1;
     9c2:	ac e9       	ldi	r26, 0x9C	; 156
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9c6:	eb e9       	ldi	r30, 0x9B	; 155
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     9ca:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9cc:	80 81       	ld	r24, Z
     9ce:	88 23       	and	r24, r24
     9d0:	e4 f3       	brlt	.-8      	; 0x9ca <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     9d2:	8e e8       	ldi	r24, 0x8E	; 142
     9d4:	a8 df       	rcall	.-176    	; 0x926 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	a6 df       	rcall	.-180    	; 0x926 <oi_byte_tx>
     9da:	e7 01       	movw	r28, r14
     9dc:	87 01       	movw	r16, r14
     9de:	0c 5c       	subi	r16, 0xCC	; 204
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     9e2:	dc df       	rcall	.-72     	; 0x99c <oi_byte_rx>
     9e4:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     9e6:	c0 17       	cp	r28, r16
     9e8:	d1 07       	cpc	r29, r17
     9ea:	d9 f7       	brne	.-10     	; 0x9e2 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     9ec:	f7 01       	movw	r30, r14
     9ee:	84 85       	ldd	r24, Z+12	; 0x0c
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	98 2f       	mov	r25, r24
     9f4:	88 27       	eor	r24, r24
     9f6:	25 85       	ldd	r18, Z+13	; 0x0d
     9f8:	82 0f       	add	r24, r18
     9fa:	91 1d       	adc	r25, r1
     9fc:	95 87       	std	Z+13, r25	; 0x0d
     9fe:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     a00:	86 85       	ldd	r24, Z+14	; 0x0e
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	98 2f       	mov	r25, r24
     a06:	88 27       	eor	r24, r24
     a08:	27 85       	ldd	r18, Z+15	; 0x0f
     a0a:	82 0f       	add	r24, r18
     a0c:	91 1d       	adc	r25, r1
     a0e:	97 87       	std	Z+15, r25	; 0x0f
     a10:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     a12:	81 89       	ldd	r24, Z+17	; 0x11
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	98 2f       	mov	r25, r24
     a18:	88 27       	eor	r24, r24
     a1a:	22 89       	ldd	r18, Z+18	; 0x12
     a1c:	82 0f       	add	r24, r18
     a1e:	91 1d       	adc	r25, r1
     a20:	92 8b       	std	Z+18, r25	; 0x12
     a22:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     a24:	83 89       	ldd	r24, Z+19	; 0x13
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	98 2f       	mov	r25, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	24 89       	ldd	r18, Z+20	; 0x14
     a2e:	82 0f       	add	r24, r18
     a30:	91 1d       	adc	r25, r1
     a32:	94 8b       	std	Z+20, r25	; 0x14
     a34:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     a36:	86 89       	ldd	r24, Z+22	; 0x16
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	98 2f       	mov	r25, r24
     a3c:	88 27       	eor	r24, r24
     a3e:	27 89       	ldd	r18, Z+23	; 0x17
     a40:	82 0f       	add	r24, r18
     a42:	91 1d       	adc	r25, r1
     a44:	97 8b       	std	Z+23, r25	; 0x17
     a46:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     a48:	80 8d       	ldd	r24, Z+24	; 0x18
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	98 2f       	mov	r25, r24
     a4e:	88 27       	eor	r24, r24
     a50:	21 8d       	ldd	r18, Z+25	; 0x19
     a52:	82 0f       	add	r24, r18
     a54:	91 1d       	adc	r25, r1
     a56:	91 8f       	std	Z+25, r25	; 0x19
     a58:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	98 2f       	mov	r25, r24
     a60:	88 27       	eor	r24, r24
     a62:	23 8d       	ldd	r18, Z+27	; 0x1b
     a64:	82 0f       	add	r24, r18
     a66:	91 1d       	adc	r25, r1
     a68:	93 8f       	std	Z+27, r25	; 0x1b
     a6a:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     a6c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	98 2f       	mov	r25, r24
     a72:	88 27       	eor	r24, r24
     a74:	25 8d       	ldd	r18, Z+29	; 0x1d
     a76:	82 0f       	add	r24, r18
     a78:	91 1d       	adc	r25, r1
     a7a:	95 8f       	std	Z+29, r25	; 0x1d
     a7c:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     a7e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	98 2f       	mov	r25, r24
     a84:	88 27       	eor	r24, r24
     a86:	27 8d       	ldd	r18, Z+31	; 0x1f
     a88:	82 0f       	add	r24, r18
     a8a:	91 1d       	adc	r25, r1
     a8c:	97 8f       	std	Z+31, r25	; 0x1f
     a8e:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     a90:	80 a1       	ldd	r24, Z+32	; 0x20
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	98 2f       	mov	r25, r24
     a96:	88 27       	eor	r24, r24
     a98:	21 a1       	ldd	r18, Z+33	; 0x21
     a9a:	82 0f       	add	r24, r18
     a9c:	91 1d       	adc	r25, r1
     a9e:	91 a3       	std	Z+33, r25	; 0x21
     aa0:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     aa2:	82 a1       	ldd	r24, Z+34	; 0x22
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	98 2f       	mov	r25, r24
     aa8:	88 27       	eor	r24, r24
     aaa:	23 a1       	ldd	r18, Z+35	; 0x23
     aac:	82 0f       	add	r24, r18
     aae:	91 1d       	adc	r25, r1
     ab0:	93 a3       	std	Z+35, r25	; 0x23
     ab2:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     ab4:	82 a5       	ldd	r24, Z+42	; 0x2a
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	21 a5       	ldd	r18, Z+41	; 0x29
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	32 2f       	mov	r19, r18
     abe:	22 27       	eor	r18, r18
     ac0:	28 0f       	add	r18, r24
     ac2:	39 1f       	adc	r19, r25
     ac4:	36 a3       	std	Z+38, r19	; 0x26
     ac6:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     ac8:	20 a9       	ldd	r18, Z+48	; 0x30
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	32 2f       	mov	r19, r18
     ace:	22 27       	eor	r18, r18
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	95 a7       	std	Z+45, r25	; 0x2d
     ad6:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     ad8:	82 a9       	ldd	r24, Z+50	; 0x32
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	98 2f       	mov	r25, r24
     ade:	88 27       	eor	r24, r24
     ae0:	23 a9       	ldd	r18, Z+51	; 0x33
     ae2:	82 0f       	add	r24, r18
     ae4:	91 1d       	adc	r25, r1
     ae6:	97 a7       	std	Z+47, r25	; 0x2f
     ae8:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     aea:	84 a9       	ldd	r24, Z+52	; 0x34
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	98 2f       	mov	r25, r24
     af0:	88 27       	eor	r24, r24
     af2:	25 a9       	ldd	r18, Z+53	; 0x35
     af4:	82 0f       	add	r24, r18
     af6:	91 1d       	adc	r25, r1
     af8:	91 ab       	std	Z+49, r25	; 0x31
     afa:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     afc:	86 a9       	ldd	r24, Z+54	; 0x36
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	98 2f       	mov	r25, r24
     b02:	88 27       	eor	r24, r24
     b04:	27 a9       	ldd	r18, Z+55	; 0x37
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	93 ab       	std	Z+51, r25	; 0x33
     b0c:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     b0e:	83 e2       	ldi	r24, 0x23	; 35
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	4f d0       	rcall	.+158    	; 0xbb2 <wait_ms>
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     b2c:	09 e9       	ldi	r16, 0x99	; 153
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	f8 01       	movw	r30, r16
     b34:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     b36:	88 e1       	ldi	r24, 0x18	; 24
     b38:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	f0 de       	rcall	.-544    	; 0x926 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     b46:	81 e8       	ldi	r24, 0x81	; 129
     b48:	ee de       	rcall	.-548    	; 0x926 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     b4a:	88 e0       	ldi	r24, 0x08	; 8
     b4c:	ec de       	rcall	.-552    	; 0x926 <oi_byte_tx>
	wait_ms(100);
     b4e:	84 e6       	ldi	r24, 0x64	; 100
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	2f d0       	rcall	.+94     	; 0xbb2 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     b54:	81 e2       	ldi	r24, 0x21	; 33
     b56:	f8 01       	movw	r30, r16
     b58:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     b5a:	84 e8       	ldi	r24, 0x84	; 132
     b5c:	e4 de       	rcall	.-568    	; 0x926 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
     b60:	47 e0       	ldi	r20, 0x07	; 7
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	e7 de       	rcall	.-562    	; 0x936 <oi_set_leds>
	
	oi_update(self);
     b68:	ce 01       	movw	r24, r28
     b6a:	20 df       	rcall	.-448    	; 0x9ac <oi_update>
	oi_update(self); // call twice to clear distance/angle
     b6c:	ce 01       	movw	r24, r28
     b6e:	1e df       	rcall	.-452    	; 0x9ac <oi_update>
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <timer2_start>:
 * -1 = CCW rotation
 */
char read_shaft_encoder(void) 
{
	return 0;
}
     b7a:	10 92 17 02 	sts	0x0217, r1
     b7e:	10 92 16 02 	sts	0x0216, r1
     b82:	81 11       	cpse	r24, r1
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <timer2_start+0x18>
     b86:	8b e0       	ldi	r24, 0x0B	; 11
     b88:	85 bd       	out	0x25, r24	; 37
     b8a:	87 b7       	in	r24, 0x37	; 55
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	87 bf       	out	0x37, r24	; 55
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <timer2_start+0x26>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	29 f4       	brne	.+10     	; 0xba0 <timer2_start+0x26>
     b96:	89 e0       	ldi	r24, 0x09	; 9
     b98:	85 bd       	out	0x25, r24	; 37
     b9a:	87 b7       	in	r24, 0x37	; 55
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	87 bf       	out	0x37, r24	; 55
     ba0:	78 94       	sei
     ba2:	08 95       	ret

00000ba4 <timer2_stop>:
     ba4:	87 b7       	in	r24, 0x37	; 55
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	87 bf       	out	0x37, r24	; 55
     baa:	85 b5       	in	r24, 0x25	; 37
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	85 bd       	out	0x25, r24	; 37
     bb0:	08 95       	ret

00000bb2 <wait_ms>:
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	8a ef       	ldi	r24, 0xFA	; 250
     bba:	83 bd       	out	0x23, r24	; 35
     bbc:	10 92 17 02 	sts	0x0217, r1
     bc0:	10 92 16 02 	sts	0x0216, r1
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	d9 df       	rcall	.-78     	; 0xb7a <timer2_start>
     bc8:	20 91 16 02 	lds	r18, 0x0216
     bcc:	30 91 17 02 	lds	r19, 0x0217
     bd0:	2c 17       	cp	r18, r28
     bd2:	3d 07       	cpc	r19, r29
     bd4:	c8 f3       	brcs	.-14     	; 0xbc8 <wait_ms+0x16>
     bd6:	e6 df       	rcall	.-52     	; 0xba4 <timer2_stop>
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <__vector_9>:
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	80 91 16 02 	lds	r24, 0x0216
     bf0:	90 91 17 02 	lds	r25, 0x0217
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	90 93 17 02 	sts	0x0217, r25
     bfa:	80 93 16 02 	sts	0x0216, r24
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <USART_init>:

void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
     c0c:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
     c10:	82 e2       	ldi	r24, 0x22	; 34
     c12:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
     c18:	8e e0       	ldi	r24, 0x0E	; 14
     c1a:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
     c1e:	88 e1       	ldi	r24, 0x18	; 24
     c20:	8a b9       	out	0x0a, r24	; 10
     c22:	08 95       	ret

00000c24 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
     c24:	5f 9b       	sbis	0x0b, 7	; 11
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     c28:	8c b1       	in	r24, 0x0c	; 12
}
     c2a:	08 95       	ret

00000c2c <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
     c2c:	5d 9b       	sbis	0x0b, 5	; 11
     c2e:	fe cf       	rjmp	.-4      	; 0xc2c <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     c30:	8c b9       	out	0x0c, r24	; 12
     c32:	08 95       	ret

00000c34 <move_servo>:
}
		
int move_servo(int degree)
{
	int conv = 20*degree+800;
     c34:	24 e1       	ldi	r18, 0x14	; 20
     c36:	ac 01       	movw	r20, r24
     c38:	24 9f       	mul	r18, r20
     c3a:	c0 01       	movw	r24, r0
     c3c:	25 9f       	mul	r18, r21
     c3e:	90 0d       	add	r25, r0
     c40:	11 24       	eor	r1, r1
     c42:	80 5e       	subi	r24, 0xE0	; 224
     c44:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
     c46:	90 93 85 00 	sts	0x0085, r25
     c4a:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
     c4e:	08 95       	ret

00000c50 <timer3_init>:

void timer3_init(void)
{
	TCCR3A = 0b00100011;
     c50:	83 e2       	ldi	r24, 0x23	; 35
     c52:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
     c56:	8a e1       	ldi	r24, 0x1A	; 26
     c58:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
     c5c:	88 ef       	ldi	r24, 0xF8	; 248
     c5e:	97 ea       	ldi	r25, 0xA7	; 167
     c60:	90 93 87 00 	sts	0x0087, r25
     c64:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	//4250=180d //3500= 135d //2600=90d //1700 = 45d //0800 = 0d
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	90 93 85 00 	sts	0x0085, r25
     c70:	80 93 84 00 	sts	0x0084, r24
	//wait_ms(2000);
	//OCR3B = 0b0000011111010000;
	DDRE = 0b00010000;
     c74:	80 e1       	ldi	r24, 0x10	; 16
     c76:	82 b9       	out	0x02, r24	; 2
     c78:	08 95       	ret

00000c7a <send_pulse>:
}

void send_pulse(void)
{
	DDRD |=0x10;
     c7a:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     c7c:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	97 df       	rcall	.-210    	; 0xbb2 <wait_ms>
	PORTD &=0xEF;
     c84:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
     c86:	8c 98       	cbi	0x11, 4	; 17
     c88:	08 95       	ret

00000c8a <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
	if(State==RISING){
     c9c:	80 91 15 02 	lds	r24, 0x0215
     ca0:	81 11       	cpse	r24, r1
     ca2:	13 c0       	rjmp	.+38     	; 0xcca <__vector_11+0x40>
		rising_time=ICR1;
     ca4:	86 b5       	in	r24, 0x26	; 38
     ca6:	97 b5       	in	r25, 0x27	; 39
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	80 93 11 02 	sts	0x0211, r24
     cb0:	90 93 12 02 	sts	0x0212, r25
     cb4:	a0 93 13 02 	sts	0x0213, r26
     cb8:	b0 93 14 02 	sts	0x0214, r27
		State = FALLING;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 15 02 	sts	0x0215, r24
		TCCR1B &= 0b10111111;
     cc2:	8e b5       	in	r24, 0x2e	; 46
     cc4:	8f 7b       	andi	r24, 0xBF	; 191
     cc6:	8e bd       	out	0x2e, r24	; 46
     cc8:	16 c0       	rjmp	.+44     	; 0xcf6 <__vector_11+0x6c>
	}
	else if(State==FALLING){
     cca:	80 91 15 02 	lds	r24, 0x0215
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 f4       	brne	.+36     	; 0xcf6 <__vector_11+0x6c>
		falling_time=ICR1;
     cd2:	86 b5       	in	r24, 0x26	; 38
     cd4:	97 b5       	in	r25, 0x27	; 39
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	80 93 0d 02 	sts	0x020D, r24
     cde:	90 93 0e 02 	sts	0x020E, r25
     ce2:	a0 93 0f 02 	sts	0x020F, r26
     ce6:	b0 93 10 02 	sts	0x0210, r27
		State = DONE;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	80 93 15 02 	sts	0x0215, r24
		TCCR1B |= 0b01000000;
     cf0:	8e b5       	in	r24, 0x2e	; 46
     cf2:	80 64       	ori	r24, 0x40	; 64
     cf4:	8e bd       	out	0x2e, r24	; 46
	}
}
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <pinginit>:

void pinginit(void)
{
	TIFR = 0b00000000;
     d08:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
     d0a:	83 ec       	ldi	r24, 0xC3	; 195
     d0c:	8e bd       	out	0x2e, r24	; 46
     d0e:	08 95       	ret

00000d10 <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
     d10:	10 92 15 02 	sts	0x0215, r1
	TIMSK &= 0b11011111;
     d14:	87 b7       	in	r24, 0x37	; 55
     d16:	8f 7d       	andi	r24, 0xDF	; 223
     d18:	87 bf       	out	0x37, r24	; 55
	send_pulse();
     d1a:	af df       	rcall	.-162    	; 0xc7a <send_pulse>
	TIFR |= 0b00100000;
     d1c:	86 b7       	in	r24, 0x36	; 54
     d1e:	80 62       	ori	r24, 0x20	; 32
     d20:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
     d22:	87 b7       	in	r24, 0x37	; 55
     d24:	80 62       	ori	r24, 0x20	; 32
     d26:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
     d28:	80 91 15 02 	lds	r24, 0x0215
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
     d30:	40 91 0d 02 	lds	r20, 0x020D
     d34:	50 91 0e 02 	lds	r21, 0x020E
     d38:	60 91 0f 02 	lds	r22, 0x020F
     d3c:	70 91 10 02 	lds	r23, 0x0210
     d40:	80 91 11 02 	lds	r24, 0x0211
     d44:	90 91 12 02 	lds	r25, 0x0212
     d48:	a0 91 13 02 	lds	r26, 0x0213
     d4c:	b0 91 14 02 	lds	r27, 0x0214
     d50:	ba 01       	movw	r22, r20
     d52:	68 1b       	sub	r22, r24
     d54:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
     d56:	88 27       	eor	r24, r24
     d58:	77 fd       	sbrc	r23, 7
     d5a:	80 95       	com	r24
     d5c:	98 2f       	mov	r25, r24
     d5e:	46 d1       	rcall	.+652    	; 0xfec <__floatsisf>
     d60:	29 e4       	ldi	r18, 0x49	; 73
     d62:	3b e4       	ldi	r19, 0x4B	; 75
     d64:	4b e6       	ldi	r20, 0x6B	; 107
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	a6 d0       	rcall	.+332    	; 0xeb6 <__divsf3>
     d6a:	0d d1       	rcall	.+538    	; 0xf86 <__fixsfsi>
	
	return centimeters;
}
     d6c:	cb 01       	movw	r24, r22
     d6e:	08 95       	ret

00000d70 <ADC_init>:

void ADC_init(void)
{
	ADMUX=0b11000010;
     d70:	82 ec       	ldi	r24, 0xC2	; 194
     d72:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
     d74:	87 e8       	ldi	r24, 0x87	; 135
     d76:	86 b9       	out	0x06, r24	; 6
     d78:	08 95       	ret

00000d7a <ADC_read>:
}

int ADC_read(void)
{
	ADCSRA |= 0b01000000;
     d7a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
     d7c:	36 99       	sbic	0x06, 6	; 6
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <ADC_read+0x2>
	return ADC;
     d80:	84 b1       	in	r24, 0x04	; 4
     d82:	95 b1       	in	r25, 0x05	; 5
}
     d84:	08 95       	ret

00000d86 <getIrDistance>:

int distance=0;
int value1=0;

int getIrDistance(void)
{
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	c5 e0       	ldi	r28, 0x05	; 5
     d90:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
     d96:	f1 df       	rcall	.-30     	; 0xd7a <ADC_read>
     d98:	08 0f       	add	r16, r24
     d9a:	19 1f       	adc	r17, r25
     d9c:	21 97       	sbiw	r28, 0x01	; 1
int value1=0;

int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
     d9e:	20 97       	sbiw	r28, 0x00	; 0
     da0:	d1 f7       	brne	.-12     	; 0xd96 <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
     da2:	c8 01       	movw	r24, r16
     da4:	65 e0       	ldi	r22, 0x05	; 5
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	08 d4       	rcall	.+2064   	; 0x15ba <__divmodhi4>
     daa:	70 93 0a 02 	sts	0x020A, r23
     dae:	60 93 09 02 	sts	0x0209, r22
	distance = 24443*pow(value1,(-1.156));
     db2:	88 27       	eor	r24, r24
     db4:	77 fd       	sbrc	r23, 7
     db6:	80 95       	com	r24
     db8:	98 2f       	mov	r25, r24
     dba:	18 d1       	rcall	.+560    	; 0xfec <__floatsisf>
     dbc:	2f ec       	ldi	r18, 0xCF	; 207
     dbe:	37 ef       	ldi	r19, 0xF7	; 247
     dc0:	43 e9       	ldi	r20, 0x93	; 147
     dc2:	5f eb       	ldi	r21, 0xBF	; 191
     dc4:	3b d2       	rcall	.+1142   	; 0x123c <pow>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	36 ef       	ldi	r19, 0xF6	; 246
     dca:	4e eb       	ldi	r20, 0xBE	; 190
     dcc:	56 e4       	ldi	r21, 0x46	; 70
     dce:	d3 d1       	rcall	.+934    	; 0x1176 <__mulsf3>
     dd0:	da d0       	rcall	.+436    	; 0xf86 <__fixsfsi>
     dd2:	70 93 0c 02 	sts	0x020C, r23
     dd6:	60 93 0b 02 	sts	0x020B, r22
	return distance;
     dda:	cb 01       	movw	r24, r22
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	08 95       	ret

00000de6 <__subsf3>:
     de6:	50 58       	subi	r21, 0x80	; 128

00000de8 <__addsf3>:
     de8:	bb 27       	eor	r27, r27
     dea:	aa 27       	eor	r26, r26
     dec:	0e d0       	rcall	.+28     	; 0xe0a <__addsf3x>
     dee:	78 c1       	rjmp	.+752    	; 0x10e0 <__fp_round>
     df0:	41 d1       	rcall	.+642    	; 0x1074 <__fp_pscA>
     df2:	30 f0       	brcs	.+12     	; 0xe00 <__addsf3+0x18>
     df4:	46 d1       	rcall	.+652    	; 0x1082 <__fp_pscB>
     df6:	20 f0       	brcs	.+8      	; 0xe00 <__addsf3+0x18>
     df8:	31 f4       	brne	.+12     	; 0xe06 <__addsf3+0x1e>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	11 f4       	brne	.+4      	; 0xe02 <__addsf3+0x1a>
     dfe:	1e f4       	brtc	.+6      	; 0xe06 <__addsf3+0x1e>
     e00:	36 c1       	rjmp	.+620    	; 0x106e <__fp_nan>
     e02:	0e f4       	brtc	.+2      	; 0xe06 <__addsf3+0x1e>
     e04:	e0 95       	com	r30
     e06:	e7 fb       	bst	r30, 7
     e08:	2c c1       	rjmp	.+600    	; 0x1062 <__fp_inf>

00000e0a <__addsf3x>:
     e0a:	e9 2f       	mov	r30, r25
     e0c:	8b d1       	rcall	.+790    	; 0x1124 <__fp_split3>
     e0e:	80 f3       	brcs	.-32     	; 0xdf0 <__addsf3+0x8>
     e10:	ba 17       	cp	r27, r26
     e12:	62 07       	cpc	r22, r18
     e14:	73 07       	cpc	r23, r19
     e16:	84 07       	cpc	r24, r20
     e18:	95 07       	cpc	r25, r21
     e1a:	18 f0       	brcs	.+6      	; 0xe22 <__addsf3x+0x18>
     e1c:	71 f4       	brne	.+28     	; 0xe3a <__addsf3x+0x30>
     e1e:	9e f5       	brtc	.+102    	; 0xe86 <__addsf3x+0x7c>
     e20:	a3 c1       	rjmp	.+838    	; 0x1168 <__fp_zero>
     e22:	0e f4       	brtc	.+2      	; 0xe26 <__addsf3x+0x1c>
     e24:	e0 95       	com	r30
     e26:	0b 2e       	mov	r0, r27
     e28:	ba 2f       	mov	r27, r26
     e2a:	a0 2d       	mov	r26, r0
     e2c:	0b 01       	movw	r0, r22
     e2e:	b9 01       	movw	r22, r18
     e30:	90 01       	movw	r18, r0
     e32:	0c 01       	movw	r0, r24
     e34:	ca 01       	movw	r24, r20
     e36:	a0 01       	movw	r20, r0
     e38:	11 24       	eor	r1, r1
     e3a:	ff 27       	eor	r31, r31
     e3c:	59 1b       	sub	r21, r25
     e3e:	99 f0       	breq	.+38     	; 0xe66 <__addsf3x+0x5c>
     e40:	59 3f       	cpi	r21, 0xF9	; 249
     e42:	50 f4       	brcc	.+20     	; 0xe58 <__addsf3x+0x4e>
     e44:	50 3e       	cpi	r21, 0xE0	; 224
     e46:	68 f1       	brcs	.+90     	; 0xea2 <__addsf3x+0x98>
     e48:	1a 16       	cp	r1, r26
     e4a:	f0 40       	sbci	r31, 0x00	; 0
     e4c:	a2 2f       	mov	r26, r18
     e4e:	23 2f       	mov	r18, r19
     e50:	34 2f       	mov	r19, r20
     e52:	44 27       	eor	r20, r20
     e54:	58 5f       	subi	r21, 0xF8	; 248
     e56:	f3 cf       	rjmp	.-26     	; 0xe3e <__addsf3x+0x34>
     e58:	46 95       	lsr	r20
     e5a:	37 95       	ror	r19
     e5c:	27 95       	ror	r18
     e5e:	a7 95       	ror	r26
     e60:	f0 40       	sbci	r31, 0x00	; 0
     e62:	53 95       	inc	r21
     e64:	c9 f7       	brne	.-14     	; 0xe58 <__addsf3x+0x4e>
     e66:	7e f4       	brtc	.+30     	; 0xe86 <__addsf3x+0x7c>
     e68:	1f 16       	cp	r1, r31
     e6a:	ba 0b       	sbc	r27, r26
     e6c:	62 0b       	sbc	r22, r18
     e6e:	73 0b       	sbc	r23, r19
     e70:	84 0b       	sbc	r24, r20
     e72:	ba f0       	brmi	.+46     	; 0xea2 <__addsf3x+0x98>
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	a1 f0       	breq	.+40     	; 0xea0 <__addsf3x+0x96>
     e78:	ff 0f       	add	r31, r31
     e7a:	bb 1f       	adc	r27, r27
     e7c:	66 1f       	adc	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	c2 f7       	brpl	.-16     	; 0xe74 <__addsf3x+0x6a>
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <__addsf3x+0x98>
     e86:	ba 0f       	add	r27, r26
     e88:	62 1f       	adc	r22, r18
     e8a:	73 1f       	adc	r23, r19
     e8c:	84 1f       	adc	r24, r20
     e8e:	48 f4       	brcc	.+18     	; 0xea2 <__addsf3x+0x98>
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	f7 95       	ror	r31
     e9a:	9e 3f       	cpi	r25, 0xFE	; 254
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <__addsf3x+0x96>
     e9e:	b3 cf       	rjmp	.-154    	; 0xe06 <__addsf3+0x1e>
     ea0:	93 95       	inc	r25
     ea2:	88 0f       	add	r24, r24
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__addsf3x+0x9e>
     ea6:	99 27       	eor	r25, r25
     ea8:	ee 0f       	add	r30, r30
     eaa:	97 95       	ror	r25
     eac:	87 95       	ror	r24
     eae:	08 95       	ret

00000eb0 <cos>:
     eb0:	f0 d0       	rcall	.+480    	; 0x1092 <__fp_rempio2>
     eb2:	e3 95       	inc	r30
     eb4:	26 c1       	rjmp	.+588    	; 0x1102 <__fp_sinus>

00000eb6 <__divsf3>:
     eb6:	0c d0       	rcall	.+24     	; 0xed0 <__divsf3x>
     eb8:	13 c1       	rjmp	.+550    	; 0x10e0 <__fp_round>
     eba:	e3 d0       	rcall	.+454    	; 0x1082 <__fp_pscB>
     ebc:	40 f0       	brcs	.+16     	; 0xece <__divsf3+0x18>
     ebe:	da d0       	rcall	.+436    	; 0x1074 <__fp_pscA>
     ec0:	30 f0       	brcs	.+12     	; 0xece <__divsf3+0x18>
     ec2:	21 f4       	brne	.+8      	; 0xecc <__divsf3+0x16>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	19 f0       	breq	.+6      	; 0xece <__divsf3+0x18>
     ec8:	cc c0       	rjmp	.+408    	; 0x1062 <__fp_inf>
     eca:	51 11       	cpse	r21, r1
     ecc:	4e c1       	rjmp	.+668    	; 0x116a <__fp_szero>
     ece:	cf c0       	rjmp	.+414    	; 0x106e <__fp_nan>

00000ed0 <__divsf3x>:
     ed0:	29 d1       	rcall	.+594    	; 0x1124 <__fp_split3>
     ed2:	98 f3       	brcs	.-26     	; 0xeba <__divsf3+0x4>

00000ed4 <__divsf3_pse>:
     ed4:	99 23       	and	r25, r25
     ed6:	c9 f3       	breq	.-14     	; 0xeca <__divsf3+0x14>
     ed8:	55 23       	and	r21, r21
     eda:	b1 f3       	breq	.-20     	; 0xec8 <__divsf3+0x12>
     edc:	95 1b       	sub	r25, r21
     ede:	55 0b       	sbc	r21, r21
     ee0:	bb 27       	eor	r27, r27
     ee2:	aa 27       	eor	r26, r26
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	38 f0       	brcs	.+14     	; 0xefa <__divsf3_pse+0x26>
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	44 1f       	adc	r20, r20
     ef6:	aa 1f       	adc	r26, r26
     ef8:	a9 f3       	breq	.-22     	; 0xee4 <__divsf3_pse+0x10>
     efa:	33 d0       	rcall	.+102    	; 0xf62 <__divsf3_pse+0x8e>
     efc:	0e 2e       	mov	r0, r30
     efe:	3a f0       	brmi	.+14     	; 0xf0e <__divsf3_pse+0x3a>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	30 d0       	rcall	.+96     	; 0xf64 <__divsf3_pse+0x90>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	e6 95       	lsr	r30
     f0a:	00 1c       	adc	r0, r0
     f0c:	ca f7       	brpl	.-14     	; 0xf00 <__divsf3_pse+0x2c>
     f0e:	29 d0       	rcall	.+82     	; 0xf62 <__divsf3_pse+0x8e>
     f10:	fe 2f       	mov	r31, r30
     f12:	27 d0       	rcall	.+78     	; 0xf62 <__divsf3_pse+0x8e>
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	ab 07       	cpc	r26, r27
     f24:	b0 e8       	ldi	r27, 0x80	; 128
     f26:	09 f0       	breq	.+2      	; 0xf2a <__divsf3_pse+0x56>
     f28:	bb 0b       	sbc	r27, r27
     f2a:	80 2d       	mov	r24, r0
     f2c:	bf 01       	movw	r22, r30
     f2e:	ff 27       	eor	r31, r31
     f30:	93 58       	subi	r25, 0x83	; 131
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	2a f0       	brmi	.+10     	; 0xf40 <__divsf3_pse+0x6c>
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	51 05       	cpc	r21, r1
     f3a:	68 f0       	brcs	.+26     	; 0xf56 <__divsf3_pse+0x82>
     f3c:	92 c0       	rjmp	.+292    	; 0x1062 <__fp_inf>
     f3e:	15 c1       	rjmp	.+554    	; 0x116a <__fp_szero>
     f40:	5f 3f       	cpi	r21, 0xFF	; 255
     f42:	ec f3       	brlt	.-6      	; 0xf3e <__divsf3_pse+0x6a>
     f44:	98 3e       	cpi	r25, 0xE8	; 232
     f46:	dc f3       	brlt	.-10     	; 0xf3e <__divsf3_pse+0x6a>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f7 95       	ror	r31
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	c9 f7       	brne	.-14     	; 0xf48 <__divsf3_pse+0x74>
     f56:	88 0f       	add	r24, r24
     f58:	91 1d       	adc	r25, r1
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	97 f9       	bld	r25, 7
     f60:	08 95       	ret
     f62:	e1 e0       	ldi	r30, 0x01	; 1
     f64:	66 0f       	add	r22, r22
     f66:	77 1f       	adc	r23, r23
     f68:	88 1f       	adc	r24, r24
     f6a:	bb 1f       	adc	r27, r27
     f6c:	62 17       	cp	r22, r18
     f6e:	73 07       	cpc	r23, r19
     f70:	84 07       	cpc	r24, r20
     f72:	ba 07       	cpc	r27, r26
     f74:	20 f0       	brcs	.+8      	; 0xf7e <__divsf3_pse+0xaa>
     f76:	62 1b       	sub	r22, r18
     f78:	73 0b       	sbc	r23, r19
     f7a:	84 0b       	sbc	r24, r20
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	ee 1f       	adc	r30, r30
     f80:	88 f7       	brcc	.-30     	; 0xf64 <__divsf3_pse+0x90>
     f82:	e0 95       	com	r30
     f84:	08 95       	ret

00000f86 <__fixsfsi>:
     f86:	04 d0       	rcall	.+8      	; 0xf90 <__fixunssfsi>
     f88:	68 94       	set
     f8a:	b1 11       	cpse	r27, r1
     f8c:	ee c0       	rjmp	.+476    	; 0x116a <__fp_szero>
     f8e:	08 95       	ret

00000f90 <__fixunssfsi>:
     f90:	d1 d0       	rcall	.+418    	; 0x1134 <__fp_splitA>
     f92:	88 f0       	brcs	.+34     	; 0xfb6 <__fixunssfsi+0x26>
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	90 f0       	brcs	.+36     	; 0xfbc <__fixunssfsi+0x2c>
     f98:	b9 2f       	mov	r27, r25
     f9a:	99 27       	eor	r25, r25
     f9c:	b7 51       	subi	r27, 0x17	; 23
     f9e:	a0 f0       	brcs	.+40     	; 0xfc8 <__fixunssfsi+0x38>
     fa0:	d1 f0       	breq	.+52     	; 0xfd6 <__fixunssfsi+0x46>
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	1a f0       	brmi	.+6      	; 0xfb2 <__fixunssfsi+0x22>
     fac:	ba 95       	dec	r27
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <__fixunssfsi+0x12>
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <__fixunssfsi+0x46>
     fb2:	b1 30       	cpi	r27, 0x01	; 1
     fb4:	81 f0       	breq	.+32     	; 0xfd6 <__fixunssfsi+0x46>
     fb6:	d8 d0       	rcall	.+432    	; 0x1168 <__fp_zero>
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	08 95       	ret
     fbc:	d5 c0       	rjmp	.+426    	; 0x1168 <__fp_zero>
     fbe:	67 2f       	mov	r22, r23
     fc0:	78 2f       	mov	r23, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	b8 5f       	subi	r27, 0xF8	; 248
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__fixunssfsi+0x46>
     fc8:	b9 3f       	cpi	r27, 0xF9	; 249
     fca:	cc f3       	brlt	.-14     	; 0xfbe <__fixunssfsi+0x2e>
     fcc:	86 95       	lsr	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b3 95       	inc	r27
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <__fixunssfsi+0x3c>
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__fixunssfsi+0x56>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__floatunsisf>:
     fe8:	e8 94       	clt
     fea:	09 c0       	rjmp	.+18     	; 0xffe <__floatsisf+0x12>

00000fec <__floatsisf>:
     fec:	97 fb       	bst	r25, 7
     fee:	3e f4       	brtc	.+14     	; 0xffe <__floatsisf+0x12>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	99 23       	and	r25, r25
    1000:	a9 f0       	breq	.+42     	; 0x102c <__floatsisf+0x40>
    1002:	f9 2f       	mov	r31, r25
    1004:	96 e9       	ldi	r25, 0x96	; 150
    1006:	bb 27       	eor	r27, r27
    1008:	93 95       	inc	r25
    100a:	f6 95       	lsr	r31
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f1 11       	cpse	r31, r1
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <__floatsisf+0x1c>
    1018:	fa f4       	brpl	.+62     	; 0x1058 <__floatsisf+0x6c>
    101a:	bb 0f       	add	r27, r27
    101c:	11 f4       	brne	.+4      	; 0x1022 <__floatsisf+0x36>
    101e:	60 ff       	sbrs	r22, 0
    1020:	1b c0       	rjmp	.+54     	; 0x1058 <__floatsisf+0x6c>
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <__floatsisf+0x6c>
    102c:	88 23       	and	r24, r24
    102e:	11 f0       	breq	.+4      	; 0x1034 <__floatsisf+0x48>
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <__floatsisf+0x6a>
    1034:	77 23       	and	r23, r23
    1036:	21 f0       	breq	.+8      	; 0x1040 <__floatsisf+0x54>
    1038:	9e e8       	ldi	r25, 0x8E	; 142
    103a:	87 2f       	mov	r24, r23
    103c:	76 2f       	mov	r23, r22
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__floatsisf+0x5e>
    1040:	66 23       	and	r22, r22
    1042:	71 f0       	breq	.+28     	; 0x1060 <__floatsisf+0x74>
    1044:	96 e8       	ldi	r25, 0x86	; 134
    1046:	86 2f       	mov	r24, r22
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	2a f0       	brmi	.+10     	; 0x1058 <__floatsisf+0x6c>
    104e:	9a 95       	dec	r25
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	da f7       	brpl	.-10     	; 0x104e <__floatsisf+0x62>
    1058:	88 0f       	add	r24, r24
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__fp_inf>:
    1062:	97 f9       	bld	r25, 7
    1064:	9f 67       	ori	r25, 0x7F	; 127
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	08 95       	ret

0000106e <__fp_nan>:
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	80 ec       	ldi	r24, 0xC0	; 192
    1072:	08 95       	ret

00001074 <__fp_pscA>:
    1074:	00 24       	eor	r0, r0
    1076:	0a 94       	dec	r0
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	18 06       	cpc	r1, r24
    107e:	09 06       	cpc	r0, r25
    1080:	08 95       	ret

00001082 <__fp_pscB>:
    1082:	00 24       	eor	r0, r0
    1084:	0a 94       	dec	r0
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	05 06       	cpc	r0, r21
    108e:	08 95       	ret
    1090:	ee cf       	rjmp	.-36     	; 0x106e <__fp_nan>

00001092 <__fp_rempio2>:
    1092:	50 d0       	rcall	.+160    	; 0x1134 <__fp_splitA>
    1094:	e8 f3       	brcs	.-6      	; 0x1090 <__fp_pscB+0xe>
    1096:	e8 94       	clt
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	bb 27       	eor	r27, r27
    109c:	9f 57       	subi	r25, 0x7F	; 127
    109e:	f0 f0       	brcs	.+60     	; 0x10dc <__fp_rempio2+0x4a>
    10a0:	2a ed       	ldi	r18, 0xDA	; 218
    10a2:	3f e0       	ldi	r19, 0x0F	; 15
    10a4:	49 ec       	ldi	r20, 0xC9	; 201
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <__fp_rempio2+0x22>
    10a8:	ee 0f       	add	r30, r30
    10aa:	bb 0f       	add	r27, r27
    10ac:	66 1f       	adc	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	28 f0       	brcs	.+10     	; 0x10be <__fp_rempio2+0x2c>
    10b4:	b2 3a       	cpi	r27, 0xA2	; 162
    10b6:	62 07       	cpc	r22, r18
    10b8:	73 07       	cpc	r23, r19
    10ba:	84 07       	cpc	r24, r20
    10bc:	28 f0       	brcs	.+10     	; 0x10c8 <__fp_rempio2+0x36>
    10be:	b2 5a       	subi	r27, 0xA2	; 162
    10c0:	62 0b       	sbc	r22, r18
    10c2:	73 0b       	sbc	r23, r19
    10c4:	84 0b       	sbc	r24, r20
    10c6:	e3 95       	inc	r30
    10c8:	9a 95       	dec	r25
    10ca:	72 f7       	brpl	.-36     	; 0x10a8 <__fp_rempio2+0x16>
    10cc:	80 38       	cpi	r24, 0x80	; 128
    10ce:	30 f4       	brcc	.+12     	; 0x10dc <__fp_rempio2+0x4a>
    10d0:	9a 95       	dec	r25
    10d2:	bb 0f       	add	r27, r27
    10d4:	66 1f       	adc	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	d2 f7       	brpl	.-12     	; 0x10d0 <__fp_rempio2+0x3e>
    10dc:	90 48       	sbci	r25, 0x80	; 128
    10de:	6f c1       	rjmp	.+734    	; 0x13be <__fp_mpack_finite>

000010e0 <__fp_round>:
    10e0:	09 2e       	mov	r0, r25
    10e2:	03 94       	inc	r0
    10e4:	00 0c       	add	r0, r0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0xc>
    10e8:	88 23       	and	r24, r24
    10ea:	52 f0       	brmi	.+20     	; 0x1100 <__stack+0x1>
    10ec:	bb 0f       	add	r27, r27
    10ee:	40 f4       	brcc	.+16     	; 0x1100 <__stack+0x1>
    10f0:	bf 2b       	or	r27, r31
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0x18>
    10f4:	60 ff       	sbrs	r22, 0
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__stack+0x1>
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__fp_sinus>:
    1102:	ef 93       	push	r30
    1104:	e0 ff       	sbrs	r30, 0
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <__fp_sinus+0x12>
    1108:	a2 ea       	ldi	r26, 0xA2	; 162
    110a:	2a ed       	ldi	r18, 0xDA	; 218
    110c:	3f e0       	ldi	r19, 0x0F	; 15
    110e:	49 ec       	ldi	r20, 0xC9	; 201
    1110:	5f eb       	ldi	r21, 0xBF	; 191
    1112:	7b de       	rcall	.-778    	; 0xe0a <__addsf3x>
    1114:	e5 df       	rcall	.-54     	; 0x10e0 <__fp_round>
    1116:	0f 90       	pop	r0
    1118:	03 94       	inc	r0
    111a:	01 fc       	sbrc	r0, 1
    111c:	90 58       	subi	r25, 0x80	; 128
    111e:	ec e8       	ldi	r30, 0x8C	; 140
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	85 c1       	rjmp	.+778    	; 0x142e <__fp_powsodd>

00001124 <__fp_split3>:
    1124:	57 fd       	sbrc	r21, 7
    1126:	90 58       	subi	r25, 0x80	; 128
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	59 f0       	breq	.+22     	; 0x1144 <__fp_splitA+0x10>
    112e:	5f 3f       	cpi	r21, 0xFF	; 255
    1130:	71 f0       	breq	.+28     	; 0x114e <__fp_splitA+0x1a>
    1132:	47 95       	ror	r20

00001134 <__fp_splitA>:
    1134:	88 0f       	add	r24, r24
    1136:	97 fb       	bst	r25, 7
    1138:	99 1f       	adc	r25, r25
    113a:	61 f0       	breq	.+24     	; 0x1154 <__fp_splitA+0x20>
    113c:	9f 3f       	cpi	r25, 0xFF	; 255
    113e:	79 f0       	breq	.+30     	; 0x115e <__fp_splitA+0x2a>
    1140:	87 95       	ror	r24
    1142:	08 95       	ret
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	14 06       	cpc	r1, r20
    114a:	55 1f       	adc	r21, r21
    114c:	f2 cf       	rjmp	.-28     	; 0x1132 <__fp_split3+0xe>
    114e:	46 95       	lsr	r20
    1150:	f1 df       	rcall	.-30     	; 0x1134 <__fp_splitA>
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <__fp_splitA+0x30>
    1154:	16 16       	cp	r1, r22
    1156:	17 06       	cpc	r1, r23
    1158:	18 06       	cpc	r1, r24
    115a:	99 1f       	adc	r25, r25
    115c:	f1 cf       	rjmp	.-30     	; 0x1140 <__fp_splitA+0xc>
    115e:	86 95       	lsr	r24
    1160:	71 05       	cpc	r23, r1
    1162:	61 05       	cpc	r22, r1
    1164:	08 94       	sec
    1166:	08 95       	ret

00001168 <__fp_zero>:
    1168:	e8 94       	clt

0000116a <__fp_szero>:
    116a:	bb 27       	eor	r27, r27
    116c:	66 27       	eor	r22, r22
    116e:	77 27       	eor	r23, r23
    1170:	cb 01       	movw	r24, r22
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <__mulsf3>:
    1176:	0b d0       	rcall	.+22     	; 0x118e <__mulsf3x>
    1178:	b3 cf       	rjmp	.-154    	; 0x10e0 <__fp_round>
    117a:	7c df       	rcall	.-264    	; 0x1074 <__fp_pscA>
    117c:	28 f0       	brcs	.+10     	; 0x1188 <__mulsf3+0x12>
    117e:	81 df       	rcall	.-254    	; 0x1082 <__fp_pscB>
    1180:	18 f0       	brcs	.+6      	; 0x1188 <__mulsf3+0x12>
    1182:	95 23       	and	r25, r21
    1184:	09 f0       	breq	.+2      	; 0x1188 <__mulsf3+0x12>
    1186:	6d cf       	rjmp	.-294    	; 0x1062 <__fp_inf>
    1188:	72 cf       	rjmp	.-284    	; 0x106e <__fp_nan>
    118a:	11 24       	eor	r1, r1
    118c:	ee cf       	rjmp	.-36     	; 0x116a <__fp_szero>

0000118e <__mulsf3x>:
    118e:	ca df       	rcall	.-108    	; 0x1124 <__fp_split3>
    1190:	a0 f3       	brcs	.-24     	; 0x117a <__mulsf3+0x4>

00001192 <__mulsf3_pse>:
    1192:	95 9f       	mul	r25, r21
    1194:	d1 f3       	breq	.-12     	; 0x118a <__mulsf3+0x14>
    1196:	95 0f       	add	r25, r21
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	55 1f       	adc	r21, r21
    119c:	62 9f       	mul	r22, r18
    119e:	f0 01       	movw	r30, r0
    11a0:	72 9f       	mul	r23, r18
    11a2:	bb 27       	eor	r27, r27
    11a4:	f0 0d       	add	r31, r0
    11a6:	b1 1d       	adc	r27, r1
    11a8:	63 9f       	mul	r22, r19
    11aa:	aa 27       	eor	r26, r26
    11ac:	f0 0d       	add	r31, r0
    11ae:	b1 1d       	adc	r27, r1
    11b0:	aa 1f       	adc	r26, r26
    11b2:	64 9f       	mul	r22, r20
    11b4:	66 27       	eor	r22, r22
    11b6:	b0 0d       	add	r27, r0
    11b8:	a1 1d       	adc	r26, r1
    11ba:	66 1f       	adc	r22, r22
    11bc:	82 9f       	mul	r24, r18
    11be:	22 27       	eor	r18, r18
    11c0:	b0 0d       	add	r27, r0
    11c2:	a1 1d       	adc	r26, r1
    11c4:	62 1f       	adc	r22, r18
    11c6:	73 9f       	mul	r23, r19
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	62 1f       	adc	r22, r18
    11ce:	83 9f       	mul	r24, r19
    11d0:	a0 0d       	add	r26, r0
    11d2:	61 1d       	adc	r22, r1
    11d4:	22 1f       	adc	r18, r18
    11d6:	74 9f       	mul	r23, r20
    11d8:	33 27       	eor	r19, r19
    11da:	a0 0d       	add	r26, r0
    11dc:	61 1d       	adc	r22, r1
    11de:	23 1f       	adc	r18, r19
    11e0:	84 9f       	mul	r24, r20
    11e2:	60 0d       	add	r22, r0
    11e4:	21 1d       	adc	r18, r1
    11e6:	82 2f       	mov	r24, r18
    11e8:	76 2f       	mov	r23, r22
    11ea:	6a 2f       	mov	r22, r26
    11ec:	11 24       	eor	r1, r1
    11ee:	9f 57       	subi	r25, 0x7F	; 127
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	8a f0       	brmi	.+34     	; 0x1216 <__mulsf3_pse+0x84>
    11f4:	e1 f0       	breq	.+56     	; 0x122e <__mulsf3_pse+0x9c>
    11f6:	88 23       	and	r24, r24
    11f8:	4a f0       	brmi	.+18     	; 0x120c <__mulsf3_pse+0x7a>
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	bb 1f       	adc	r27, r27
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	a9 f7       	brne	.-22     	; 0x11f6 <__mulsf3_pse+0x64>
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	51 05       	cpc	r21, r1
    1210:	70 f0       	brcs	.+28     	; 0x122e <__mulsf3_pse+0x9c>
    1212:	27 cf       	rjmp	.-434    	; 0x1062 <__fp_inf>
    1214:	aa cf       	rjmp	.-172    	; 0x116a <__fp_szero>
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	ec f3       	brlt	.-6      	; 0x1214 <__mulsf3_pse+0x82>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	dc f3       	brlt	.-10     	; 0x1214 <__mulsf3_pse+0x82>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f7 95       	ror	r31
    1228:	e7 95       	ror	r30
    122a:	9f 5f       	subi	r25, 0xFF	; 255
    122c:	c1 f7       	brne	.-16     	; 0x121e <__mulsf3_pse+0x8c>
    122e:	fe 2b       	or	r31, r30
    1230:	88 0f       	add	r24, r24
    1232:	91 1d       	adc	r25, r1
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret

0000123c <pow>:
    123c:	fa 01       	movw	r30, r20
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	30 96       	adiw	r30, 0x00	; 0
    1244:	21 05       	cpc	r18, r1
    1246:	31 05       	cpc	r19, r1
    1248:	99 f1       	breq	.+102    	; 0x12b0 <pow+0x74>
    124a:	61 15       	cp	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	61 f4       	brne	.+24     	; 0x1268 <pow+0x2c>
    1250:	80 38       	cpi	r24, 0x80	; 128
    1252:	bf e3       	ldi	r27, 0x3F	; 63
    1254:	9b 07       	cpc	r25, r27
    1256:	49 f1       	breq	.+82     	; 0x12aa <pow+0x6e>
    1258:	68 94       	set
    125a:	90 38       	cpi	r25, 0x80	; 128
    125c:	81 05       	cpc	r24, r1
    125e:	61 f0       	breq	.+24     	; 0x1278 <pow+0x3c>
    1260:	80 38       	cpi	r24, 0x80	; 128
    1262:	bf ef       	ldi	r27, 0xFF	; 255
    1264:	9b 07       	cpc	r25, r27
    1266:	41 f0       	breq	.+16     	; 0x1278 <pow+0x3c>
    1268:	99 23       	and	r25, r25
    126a:	42 f5       	brpl	.+80     	; 0x12bc <pow+0x80>
    126c:	ff 3f       	cpi	r31, 0xFF	; 255
    126e:	e1 05       	cpc	r30, r1
    1270:	31 05       	cpc	r19, r1
    1272:	21 05       	cpc	r18, r1
    1274:	11 f1       	breq	.+68     	; 0x12ba <pow+0x7e>
    1276:	e8 94       	clt
    1278:	08 94       	sec
    127a:	e7 95       	ror	r30
    127c:	d9 01       	movw	r26, r18
    127e:	aa 23       	and	r26, r26
    1280:	29 f4       	brne	.+10     	; 0x128c <pow+0x50>
    1282:	ab 2f       	mov	r26, r27
    1284:	be 2f       	mov	r27, r30
    1286:	f8 5f       	subi	r31, 0xF8	; 248
    1288:	d0 f3       	brcs	.-12     	; 0x127e <pow+0x42>
    128a:	10 c0       	rjmp	.+32     	; 0x12ac <pow+0x70>
    128c:	ff 5f       	subi	r31, 0xFF	; 255
    128e:	70 f4       	brcc	.+28     	; 0x12ac <pow+0x70>
    1290:	a6 95       	lsr	r26
    1292:	e0 f7       	brcc	.-8      	; 0x128c <pow+0x50>
    1294:	f7 39       	cpi	r31, 0x97	; 151
    1296:	50 f0       	brcs	.+20     	; 0x12ac <pow+0x70>
    1298:	19 f0       	breq	.+6      	; 0x12a0 <pow+0x64>
    129a:	ff 3a       	cpi	r31, 0xAF	; 175
    129c:	38 f4       	brcc	.+14     	; 0x12ac <pow+0x70>
    129e:	9f 77       	andi	r25, 0x7F	; 127
    12a0:	9f 93       	push	r25
    12a2:	0c d0       	rcall	.+24     	; 0x12bc <pow+0x80>
    12a4:	0f 90       	pop	r0
    12a6:	07 fc       	sbrc	r0, 7
    12a8:	90 58       	subi	r25, 0x80	; 128
    12aa:	08 95       	ret
    12ac:	3e f0       	brts	.+14     	; 0x12bc <pow+0x80>
    12ae:	df ce       	rjmp	.-578    	; 0x106e <__fp_nan>
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	9f e3       	ldi	r25, 0x3F	; 63
    12b8:	08 95       	ret
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	9f 77       	andi	r25, 0x7F	; 127
    12be:	5f 93       	push	r21
    12c0:	4f 93       	push	r20
    12c2:	3f 93       	push	r19
    12c4:	2f 93       	push	r18
    12c6:	06 d1       	rcall	.+524    	; 0x14d4 <log>
    12c8:	2f 91       	pop	r18
    12ca:	3f 91       	pop	r19
    12cc:	4f 91       	pop	r20
    12ce:	5f 91       	pop	r21
    12d0:	52 df       	rcall	.-348    	; 0x1176 <__mulsf3>
    12d2:	47 c0       	rjmp	.+142    	; 0x1362 <exp>
    12d4:	11 f4       	brne	.+4      	; 0x12da <pow+0x9e>
    12d6:	0e f4       	brtc	.+2      	; 0x12da <pow+0x9e>
    12d8:	ca ce       	rjmp	.-620    	; 0x106e <__fp_nan>
    12da:	6f c0       	rjmp	.+222    	; 0x13ba <__fp_mpack>

000012dc <sqrt>:
    12dc:	2b df       	rcall	.-426    	; 0x1134 <__fp_splitA>
    12de:	d0 f3       	brcs	.-12     	; 0x12d4 <pow+0x98>
    12e0:	99 23       	and	r25, r25
    12e2:	d9 f3       	breq	.-10     	; 0x12da <pow+0x9e>
    12e4:	ce f3       	brts	.-14     	; 0x12d8 <pow+0x9c>
    12e6:	9f 57       	subi	r25, 0x7F	; 127
    12e8:	55 0b       	sbc	r21, r21
    12ea:	87 ff       	sbrs	r24, 7
    12ec:	74 d0       	rcall	.+232    	; 0x13d6 <__fp_norm2>
    12ee:	00 24       	eor	r0, r0
    12f0:	a0 e6       	ldi	r26, 0x60	; 96
    12f2:	40 ea       	ldi	r20, 0xA0	; 160
    12f4:	90 01       	movw	r18, r0
    12f6:	80 58       	subi	r24, 0x80	; 128
    12f8:	56 95       	lsr	r21
    12fa:	97 95       	ror	r25
    12fc:	28 f4       	brcc	.+10     	; 0x1308 <sqrt+0x2c>
    12fe:	80 5c       	subi	r24, 0xC0	; 192
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	20 f0       	brcs	.+8      	; 0x1310 <sqrt+0x34>
    1308:	26 17       	cp	r18, r22
    130a:	37 07       	cpc	r19, r23
    130c:	48 07       	cpc	r20, r24
    130e:	30 f4       	brcc	.+12     	; 0x131c <sqrt+0x40>
    1310:	62 1b       	sub	r22, r18
    1312:	73 0b       	sbc	r23, r19
    1314:	84 0b       	sbc	r24, r20
    1316:	20 29       	or	r18, r0
    1318:	31 29       	or	r19, r1
    131a:	4a 2b       	or	r20, r26
    131c:	a6 95       	lsr	r26
    131e:	17 94       	ror	r1
    1320:	07 94       	ror	r0
    1322:	20 25       	eor	r18, r0
    1324:	31 25       	eor	r19, r1
    1326:	4a 27       	eor	r20, r26
    1328:	58 f7       	brcc	.-42     	; 0x1300 <sqrt+0x24>
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	20 f0       	brcs	.+8      	; 0x133a <sqrt+0x5e>
    1332:	26 17       	cp	r18, r22
    1334:	37 07       	cpc	r19, r23
    1336:	48 07       	cpc	r20, r24
    1338:	30 f4       	brcc	.+12     	; 0x1346 <sqrt+0x6a>
    133a:	62 0b       	sbc	r22, r18
    133c:	73 0b       	sbc	r23, r19
    133e:	84 0b       	sbc	r24, r20
    1340:	20 0d       	add	r18, r0
    1342:	31 1d       	adc	r19, r1
    1344:	41 1d       	adc	r20, r1
    1346:	a0 95       	com	r26
    1348:	81 f7       	brne	.-32     	; 0x132a <sqrt+0x4e>
    134a:	b9 01       	movw	r22, r18
    134c:	84 2f       	mov	r24, r20
    134e:	91 58       	subi	r25, 0x81	; 129
    1350:	88 0f       	add	r24, r24
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	08 95       	ret
    1358:	19 f4       	brne	.+6      	; 0x1360 <sqrt+0x84>
    135a:	0e f0       	brts	.+2      	; 0x135e <sqrt+0x82>
    135c:	82 ce       	rjmp	.-764    	; 0x1062 <__fp_inf>
    135e:	04 cf       	rjmp	.-504    	; 0x1168 <__fp_zero>
    1360:	86 ce       	rjmp	.-756    	; 0x106e <__fp_nan>

00001362 <exp>:
    1362:	e8 de       	rcall	.-560    	; 0x1134 <__fp_splitA>
    1364:	c8 f3       	brcs	.-14     	; 0x1358 <sqrt+0x7c>
    1366:	96 38       	cpi	r25, 0x86	; 134
    1368:	c0 f7       	brcc	.-16     	; 0x135a <sqrt+0x7e>
    136a:	07 f8       	bld	r0, 7
    136c:	0f 92       	push	r0
    136e:	e8 94       	clt
    1370:	2b e3       	ldi	r18, 0x3B	; 59
    1372:	3a ea       	ldi	r19, 0xAA	; 170
    1374:	48 eb       	ldi	r20, 0xB8	; 184
    1376:	5f e7       	ldi	r21, 0x7F	; 127
    1378:	0c df       	rcall	.-488    	; 0x1192 <__mulsf3_pse>
    137a:	0f 92       	push	r0
    137c:	0f 92       	push	r0
    137e:	0f 92       	push	r0
    1380:	4d b7       	in	r20, 0x3d	; 61
    1382:	5e b7       	in	r21, 0x3e	; 62
    1384:	0f 92       	push	r0
    1386:	e6 d0       	rcall	.+460    	; 0x1554 <modf>
    1388:	ea ea       	ldi	r30, 0xAA	; 170
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	2b d0       	rcall	.+86     	; 0x13e4 <__fp_powser>
    138e:	4f 91       	pop	r20
    1390:	5f 91       	pop	r21
    1392:	ef 91       	pop	r30
    1394:	ff 91       	pop	r31
    1396:	e5 95       	asr	r30
    1398:	ee 1f       	adc	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	49 f0       	breq	.+18     	; 0x13b0 <exp+0x4e>
    139e:	fe 57       	subi	r31, 0x7E	; 126
    13a0:	e0 68       	ori	r30, 0x80	; 128
    13a2:	44 27       	eor	r20, r20
    13a4:	ee 0f       	add	r30, r30
    13a6:	44 1f       	adc	r20, r20
    13a8:	fa 95       	dec	r31
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <exp+0x42>
    13ac:	41 95       	neg	r20
    13ae:	55 0b       	sbc	r21, r21
    13b0:	58 d0       	rcall	.+176    	; 0x1462 <ldexp>
    13b2:	0f 90       	pop	r0
    13b4:	07 fe       	sbrs	r0, 7
    13b6:	4c c0       	rjmp	.+152    	; 0x1450 <inverse>
    13b8:	08 95       	ret

000013ba <__fp_mpack>:
    13ba:	9f 3f       	cpi	r25, 0xFF	; 255
    13bc:	31 f0       	breq	.+12     	; 0x13ca <__fp_mpack_finite+0xc>

000013be <__fp_mpack_finite>:
    13be:	91 50       	subi	r25, 0x01	; 1
    13c0:	20 f4       	brcc	.+8      	; 0x13ca <__fp_mpack_finite+0xc>
    13c2:	87 95       	ror	r24
    13c4:	77 95       	ror	r23
    13c6:	67 95       	ror	r22
    13c8:	b7 95       	ror	r27
    13ca:	88 0f       	add	r24, r24
    13cc:	91 1d       	adc	r25, r1
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	97 f9       	bld	r25, 7
    13d4:	08 95       	ret

000013d6 <__fp_norm2>:
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	66 0f       	add	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	d2 f7       	brpl	.-12     	; 0x13d6 <__fp_norm2>
    13e2:	08 95       	ret

000013e4 <__fp_powser>:
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	1f 93       	push	r17
    13ea:	0f 93       	push	r16
    13ec:	ff 92       	push	r15
    13ee:	ef 92       	push	r14
    13f0:	df 92       	push	r13
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
    13f6:	68 94       	set
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <__fp_powser+0x20>
    13fa:	da 2e       	mov	r13, r26
    13fc:	ef 01       	movw	r28, r30
    13fe:	c7 de       	rcall	.-626    	; 0x118e <__mulsf3x>
    1400:	fe 01       	movw	r30, r28
    1402:	e8 94       	clt
    1404:	a5 91       	lpm	r26, Z+
    1406:	25 91       	lpm	r18, Z+
    1408:	35 91       	lpm	r19, Z+
    140a:	45 91       	lpm	r20, Z+
    140c:	55 91       	lpm	r21, Z+
    140e:	ae f3       	brts	.-22     	; 0x13fa <__fp_powser+0x16>
    1410:	ef 01       	movw	r28, r30
    1412:	fb dc       	rcall	.-1546   	; 0xe0a <__addsf3x>
    1414:	fe 01       	movw	r30, r28
    1416:	97 01       	movw	r18, r14
    1418:	a8 01       	movw	r20, r16
    141a:	da 94       	dec	r13
    141c:	79 f7       	brne	.-34     	; 0x13fc <__fp_powser+0x18>
    141e:	df 90       	pop	r13
    1420:	ef 90       	pop	r14
    1422:	ff 90       	pop	r15
    1424:	0f 91       	pop	r16
    1426:	1f 91       	pop	r17
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <__fp_powsodd>:
    142e:	9f 93       	push	r25
    1430:	8f 93       	push	r24
    1432:	7f 93       	push	r23
    1434:	6f 93       	push	r22
    1436:	ff 93       	push	r31
    1438:	ef 93       	push	r30
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	9b de       	rcall	.-714    	; 0x1176 <__mulsf3>
    1440:	ef 91       	pop	r30
    1442:	ff 91       	pop	r31
    1444:	cf df       	rcall	.-98     	; 0x13e4 <__fp_powser>
    1446:	2f 91       	pop	r18
    1448:	3f 91       	pop	r19
    144a:	4f 91       	pop	r20
    144c:	5f 91       	pop	r21
    144e:	93 ce       	rjmp	.-730    	; 0x1176 <__mulsf3>

00001450 <inverse>:
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	80 e8       	ldi	r24, 0x80	; 128
    145a:	9f e3       	ldi	r25, 0x3F	; 63
    145c:	2c cd       	rjmp	.-1448   	; 0xeb6 <__divsf3>
    145e:	01 ce       	rjmp	.-1022   	; 0x1062 <__fp_inf>
    1460:	ac cf       	rjmp	.-168    	; 0x13ba <__fp_mpack>

00001462 <ldexp>:
    1462:	68 de       	rcall	.-816    	; 0x1134 <__fp_splitA>
    1464:	e8 f3       	brcs	.-6      	; 0x1460 <inverse+0x10>
    1466:	99 23       	and	r25, r25
    1468:	d9 f3       	breq	.-10     	; 0x1460 <inverse+0x10>
    146a:	94 0f       	add	r25, r20
    146c:	51 1d       	adc	r21, r1
    146e:	bb f3       	brvs	.-18     	; 0x145e <inverse+0xe>
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	94 f0       	brlt	.+36     	; 0x149a <ldexp+0x38>
    1476:	59 f0       	breq	.+22     	; 0x148e <ldexp+0x2c>
    1478:	88 23       	and	r24, r24
    147a:	32 f0       	brmi	.+12     	; 0x1488 <ldexp+0x26>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	91 50       	subi	r25, 0x01	; 1
    1484:	50 40       	sbci	r21, 0x00	; 0
    1486:	c1 f7       	brne	.-16     	; 0x1478 <ldexp+0x16>
    1488:	9e 3f       	cpi	r25, 0xFE	; 254
    148a:	51 05       	cpc	r21, r1
    148c:	44 f7       	brge	.-48     	; 0x145e <inverse+0xe>
    148e:	88 0f       	add	r24, r24
    1490:	91 1d       	adc	r25, r1
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret
    149a:	5f 3f       	cpi	r21, 0xFF	; 255
    149c:	ac f0       	brlt	.+42     	; 0x14c8 <ldexp+0x66>
    149e:	98 3e       	cpi	r25, 0xE8	; 232
    14a0:	9c f0       	brlt	.+38     	; 0x14c8 <ldexp+0x66>
    14a2:	bb 27       	eor	r27, r27
    14a4:	86 95       	lsr	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <ldexp+0x4e>
    14ae:	b1 60       	ori	r27, 0x01	; 1
    14b0:	93 95       	inc	r25
    14b2:	c1 f7       	brne	.-16     	; 0x14a4 <ldexp+0x42>
    14b4:	bb 0f       	add	r27, r27
    14b6:	58 f7       	brcc	.-42     	; 0x148e <ldexp+0x2c>
    14b8:	11 f4       	brne	.+4      	; 0x14be <ldexp+0x5c>
    14ba:	60 ff       	sbrs	r22, 0
    14bc:	e8 cf       	rjmp	.-48     	; 0x148e <ldexp+0x2c>
    14be:	6f 5f       	subi	r22, 0xFF	; 255
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	e3 cf       	rjmp	.-58     	; 0x148e <ldexp+0x2c>
    14c8:	50 ce       	rjmp	.-864    	; 0x116a <__fp_szero>
    14ca:	0e f0       	brts	.+2      	; 0x14ce <ldexp+0x6c>
    14cc:	76 cf       	rjmp	.-276    	; 0x13ba <__fp_mpack>
    14ce:	cf cd       	rjmp	.-1122   	; 0x106e <__fp_nan>
    14d0:	68 94       	set
    14d2:	c7 cd       	rjmp	.-1138   	; 0x1062 <__fp_inf>

000014d4 <log>:
    14d4:	2f de       	rcall	.-930    	; 0x1134 <__fp_splitA>
    14d6:	c8 f3       	brcs	.-14     	; 0x14ca <ldexp+0x68>
    14d8:	99 23       	and	r25, r25
    14da:	d1 f3       	breq	.-12     	; 0x14d0 <ldexp+0x6e>
    14dc:	c6 f3       	brts	.-16     	; 0x14ce <ldexp+0x6c>
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	1f 93       	push	r17
    14e4:	0f 93       	push	r16
    14e6:	ff 92       	push	r15
    14e8:	c9 2f       	mov	r28, r25
    14ea:	dd 27       	eor	r29, r29
    14ec:	88 23       	and	r24, r24
    14ee:	2a f0       	brmi	.+10     	; 0x14fa <log+0x26>
    14f0:	21 97       	sbiw	r28, 0x01	; 1
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	da f7       	brpl	.-10     	; 0x14f0 <log+0x1c>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f eb       	ldi	r21, 0xBF	; 191
    1502:	9f e3       	ldi	r25, 0x3F	; 63
    1504:	88 39       	cpi	r24, 0x98	; 152
    1506:	20 f0       	brcs	.+8      	; 0x1510 <log+0x3c>
    1508:	80 3e       	cpi	r24, 0xE0	; 224
    150a:	30 f0       	brcs	.+12     	; 0x1518 <log+0x44>
    150c:	21 96       	adiw	r28, 0x01	; 1
    150e:	8f 77       	andi	r24, 0x7F	; 127
    1510:	6b dc       	rcall	.-1834   	; 0xde8 <__addsf3>
    1512:	e2 ed       	ldi	r30, 0xD2	; 210
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	03 c0       	rjmp	.+6      	; 0x151e <log+0x4a>
    1518:	67 dc       	rcall	.-1842   	; 0xde8 <__addsf3>
    151a:	ef ef       	ldi	r30, 0xFF	; 255
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	62 df       	rcall	.-316    	; 0x13e4 <__fp_powser>
    1520:	8b 01       	movw	r16, r22
    1522:	be 01       	movw	r22, r28
    1524:	ec 01       	movw	r28, r24
    1526:	fb 2e       	mov	r15, r27
    1528:	6f 57       	subi	r22, 0x7F	; 127
    152a:	71 09       	sbc	r23, r1
    152c:	75 95       	asr	r23
    152e:	77 1f       	adc	r23, r23
    1530:	88 0b       	sbc	r24, r24
    1532:	99 0b       	sbc	r25, r25
    1534:	5b dd       	rcall	.-1354   	; 0xfec <__floatsisf>
    1536:	28 e1       	ldi	r18, 0x18	; 24
    1538:	32 e7       	ldi	r19, 0x72	; 114
    153a:	41 e3       	ldi	r20, 0x31	; 49
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	27 de       	rcall	.-946    	; 0x118e <__mulsf3x>
    1540:	af 2d       	mov	r26, r15
    1542:	98 01       	movw	r18, r16
    1544:	ae 01       	movw	r20, r28
    1546:	ff 90       	pop	r15
    1548:	0f 91       	pop	r16
    154a:	1f 91       	pop	r17
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	5c dc       	rcall	.-1864   	; 0xe0a <__addsf3x>
    1552:	c6 cd       	rjmp	.-1140   	; 0x10e0 <__fp_round>

00001554 <modf>:
    1554:	fa 01       	movw	r30, r20
    1556:	dc 01       	movw	r26, r24
    1558:	aa 0f       	add	r26, r26
    155a:	bb 1f       	adc	r27, r27
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	bf 57       	subi	r27, 0x7F	; 127
    1562:	28 f4       	brcc	.+10     	; 0x156e <modf+0x1a>
    1564:	22 27       	eor	r18, r18
    1566:	33 27       	eor	r19, r19
    1568:	44 27       	eor	r20, r20
    156a:	50 78       	andi	r21, 0x80	; 128
    156c:	1f c0       	rjmp	.+62     	; 0x15ac <modf+0x58>
    156e:	b7 51       	subi	r27, 0x17	; 23
    1570:	88 f4       	brcc	.+34     	; 0x1594 <modf+0x40>
    1572:	ab 2f       	mov	r26, r27
    1574:	00 24       	eor	r0, r0
    1576:	46 95       	lsr	r20
    1578:	37 95       	ror	r19
    157a:	27 95       	ror	r18
    157c:	01 1c       	adc	r0, r1
    157e:	a3 95       	inc	r26
    1580:	d2 f3       	brmi	.-12     	; 0x1576 <modf+0x22>
    1582:	00 20       	and	r0, r0
    1584:	69 f0       	breq	.+26     	; 0x15a0 <modf+0x4c>
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	44 1f       	adc	r20, r20
    158c:	b3 95       	inc	r27
    158e:	da f3       	brmi	.-10     	; 0x1586 <modf+0x32>
    1590:	0d d0       	rcall	.+26     	; 0x15ac <modf+0x58>
    1592:	29 cc       	rjmp	.-1966   	; 0xde6 <__subsf3>
    1594:	61 30       	cpi	r22, 0x01	; 1
    1596:	71 05       	cpc	r23, r1
    1598:	a0 e8       	ldi	r26, 0x80	; 128
    159a:	8a 07       	cpc	r24, r26
    159c:	b9 46       	sbci	r27, 0x69	; 105
    159e:	30 f4       	brcc	.+12     	; 0x15ac <modf+0x58>
    15a0:	9b 01       	movw	r18, r22
    15a2:	ac 01       	movw	r20, r24
    15a4:	66 27       	eor	r22, r22
    15a6:	77 27       	eor	r23, r23
    15a8:	88 27       	eor	r24, r24
    15aa:	90 78       	andi	r25, 0x80	; 128
    15ac:	30 96       	adiw	r30, 0x00	; 0
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <modf+0x64>
    15b0:	20 83       	st	Z, r18
    15b2:	31 83       	std	Z+1, r19	; 0x01
    15b4:	42 83       	std	Z+2, r20	; 0x02
    15b6:	53 83       	std	Z+3, r21	; 0x03
    15b8:	08 95       	ret

000015ba <__divmodhi4>:
    15ba:	97 fb       	bst	r25, 7
    15bc:	07 2e       	mov	r0, r23
    15be:	16 f4       	brtc	.+4      	; 0x15c4 <__divmodhi4+0xa>
    15c0:	00 94       	com	r0
    15c2:	06 d0       	rcall	.+12     	; 0x15d0 <__divmodhi4_neg1>
    15c4:	77 fd       	sbrc	r23, 7
    15c6:	08 d0       	rcall	.+16     	; 0x15d8 <__divmodhi4_neg2>
    15c8:	0b d0       	rcall	.+22     	; 0x15e0 <__udivmodhi4>
    15ca:	07 fc       	sbrc	r0, 7
    15cc:	05 d0       	rcall	.+10     	; 0x15d8 <__divmodhi4_neg2>
    15ce:	3e f4       	brtc	.+14     	; 0x15de <__divmodhi4_exit>

000015d0 <__divmodhi4_neg1>:
    15d0:	90 95       	com	r25
    15d2:	81 95       	neg	r24
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	08 95       	ret

000015d8 <__divmodhi4_neg2>:
    15d8:	70 95       	com	r23
    15da:	61 95       	neg	r22
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255

000015de <__divmodhi4_exit>:
    15de:	08 95       	ret

000015e0 <__udivmodhi4>:
    15e0:	aa 1b       	sub	r26, r26
    15e2:	bb 1b       	sub	r27, r27
    15e4:	51 e1       	ldi	r21, 0x11	; 17
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <__udivmodhi4_ep>

000015e8 <__udivmodhi4_loop>:
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	a6 17       	cp	r26, r22
    15ee:	b7 07       	cpc	r27, r23
    15f0:	10 f0       	brcs	.+4      	; 0x15f6 <__udivmodhi4_ep>
    15f2:	a6 1b       	sub	r26, r22
    15f4:	b7 0b       	sbc	r27, r23

000015f6 <__udivmodhi4_ep>:
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	5a 95       	dec	r21
    15fc:	a9 f7       	brne	.-22     	; 0x15e8 <__udivmodhi4_loop>
    15fe:	80 95       	com	r24
    1600:	90 95       	com	r25
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	08 95       	ret

00001608 <calloc>:
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	86 9f       	mul	r24, r22
    1612:	80 01       	movw	r16, r0
    1614:	87 9f       	mul	r24, r23
    1616:	10 0d       	add	r17, r0
    1618:	96 9f       	mul	r25, r22
    161a:	10 0d       	add	r17, r0
    161c:	11 24       	eor	r1, r1
    161e:	c8 01       	movw	r24, r16
    1620:	0d d0       	rcall	.+26     	; 0x163c <malloc>
    1622:	ec 01       	movw	r28, r24
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	21 f0       	breq	.+8      	; 0x1630 <calloc+0x28>
    1628:	a8 01       	movw	r20, r16
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	4a d1       	rcall	.+660    	; 0x18c4 <memset>
    1630:	ce 01       	movw	r24, r28
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	08 95       	ret

0000163c <malloc>:
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	91 05       	cpc	r25, r1
    1644:	10 f4       	brcc	.+4      	; 0x164a <malloc+0xe>
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	e0 91 1a 02 	lds	r30, 0x021A
    164e:	f0 91 1b 02 	lds	r31, 0x021B
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	39 f1       	breq	.+78     	; 0x16ac <malloc+0x70>
    165e:	40 81       	ld	r20, Z
    1660:	51 81       	ldd	r21, Z+1	; 0x01
    1662:	48 17       	cp	r20, r24
    1664:	59 07       	cpc	r21, r25
    1666:	b8 f0       	brcs	.+46     	; 0x1696 <malloc+0x5a>
    1668:	48 17       	cp	r20, r24
    166a:	59 07       	cpc	r21, r25
    166c:	71 f4       	brne	.+28     	; 0x168a <malloc+0x4e>
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	10 97       	sbiw	r26, 0x00	; 0
    1674:	29 f0       	breq	.+10     	; 0x1680 <malloc+0x44>
    1676:	13 96       	adiw	r26, 0x03	; 3
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	12 97       	sbiw	r26, 0x02	; 2
    167e:	2c c0       	rjmp	.+88     	; 0x16d8 <malloc+0x9c>
    1680:	90 93 1b 02 	sts	0x021B, r25
    1684:	80 93 1a 02 	sts	0x021A, r24
    1688:	27 c0       	rjmp	.+78     	; 0x16d8 <malloc+0x9c>
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	31 f0       	breq	.+12     	; 0x169c <malloc+0x60>
    1690:	42 17       	cp	r20, r18
    1692:	53 07       	cpc	r21, r19
    1694:	18 f0       	brcs	.+6      	; 0x169c <malloc+0x60>
    1696:	a9 01       	movw	r20, r18
    1698:	db 01       	movw	r26, r22
    169a:	01 c0       	rjmp	.+2      	; 0x169e <malloc+0x62>
    169c:	ef 01       	movw	r28, r30
    169e:	9a 01       	movw	r18, r20
    16a0:	bd 01       	movw	r22, r26
    16a2:	df 01       	movw	r26, r30
    16a4:	02 80       	ldd	r0, Z+2	; 0x02
    16a6:	f3 81       	ldd	r31, Z+3	; 0x03
    16a8:	e0 2d       	mov	r30, r0
    16aa:	d7 cf       	rjmp	.-82     	; 0x165a <malloc+0x1e>
    16ac:	21 15       	cp	r18, r1
    16ae:	31 05       	cpc	r19, r1
    16b0:	f9 f0       	breq	.+62     	; 0x16f0 <malloc+0xb4>
    16b2:	28 1b       	sub	r18, r24
    16b4:	39 0b       	sbc	r19, r25
    16b6:	24 30       	cpi	r18, 0x04	; 4
    16b8:	31 05       	cpc	r19, r1
    16ba:	80 f4       	brcc	.+32     	; 0x16dc <malloc+0xa0>
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	61 15       	cp	r22, r1
    16c2:	71 05       	cpc	r23, r1
    16c4:	21 f0       	breq	.+8      	; 0x16ce <malloc+0x92>
    16c6:	fb 01       	movw	r30, r22
    16c8:	93 83       	std	Z+3, r25	; 0x03
    16ca:	82 83       	std	Z+2, r24	; 0x02
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <malloc+0x9a>
    16ce:	90 93 1b 02 	sts	0x021B, r25
    16d2:	80 93 1a 02 	sts	0x021A, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	32 96       	adiw	r30, 0x02	; 2
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <malloc+0x128>
    16dc:	fe 01       	movw	r30, r28
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	81 93       	st	Z+, r24
    16e4:	91 93       	st	Z+, r25
    16e6:	22 50       	subi	r18, 0x02	; 2
    16e8:	31 09       	sbc	r19, r1
    16ea:	39 83       	std	Y+1, r19	; 0x01
    16ec:	28 83       	st	Y, r18
    16ee:	3a c0       	rjmp	.+116    	; 0x1764 <malloc+0x128>
    16f0:	20 91 18 02 	lds	r18, 0x0218
    16f4:	30 91 19 02 	lds	r19, 0x0219
    16f8:	23 2b       	or	r18, r19
    16fa:	41 f4       	brne	.+16     	; 0x170c <malloc+0xd0>
    16fc:	20 91 02 01 	lds	r18, 0x0102
    1700:	30 91 03 01 	lds	r19, 0x0103
    1704:	30 93 19 02 	sts	0x0219, r19
    1708:	20 93 18 02 	sts	0x0218, r18
    170c:	20 91 00 01 	lds	r18, 0x0100
    1710:	30 91 01 01 	lds	r19, 0x0101
    1714:	21 15       	cp	r18, r1
    1716:	31 05       	cpc	r19, r1
    1718:	41 f4       	brne	.+16     	; 0x172a <malloc+0xee>
    171a:	2d b7       	in	r18, 0x3d	; 61
    171c:	3e b7       	in	r19, 0x3e	; 62
    171e:	40 91 04 01 	lds	r20, 0x0104
    1722:	50 91 05 01 	lds	r21, 0x0105
    1726:	24 1b       	sub	r18, r20
    1728:	35 0b       	sbc	r19, r21
    172a:	e0 91 18 02 	lds	r30, 0x0218
    172e:	f0 91 19 02 	lds	r31, 0x0219
    1732:	e2 17       	cp	r30, r18
    1734:	f3 07       	cpc	r31, r19
    1736:	a0 f4       	brcc	.+40     	; 0x1760 <malloc+0x124>
    1738:	2e 1b       	sub	r18, r30
    173a:	3f 0b       	sbc	r19, r31
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	78 f0       	brcs	.+30     	; 0x1760 <malloc+0x124>
    1742:	ac 01       	movw	r20, r24
    1744:	4e 5f       	subi	r20, 0xFE	; 254
    1746:	5f 4f       	sbci	r21, 0xFF	; 255
    1748:	24 17       	cp	r18, r20
    174a:	35 07       	cpc	r19, r21
    174c:	48 f0       	brcs	.+18     	; 0x1760 <malloc+0x124>
    174e:	4e 0f       	add	r20, r30
    1750:	5f 1f       	adc	r21, r31
    1752:	50 93 19 02 	sts	0x0219, r21
    1756:	40 93 18 02 	sts	0x0218, r20
    175a:	81 93       	st	Z+, r24
    175c:	91 93       	st	Z+, r25
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <malloc+0x128>
    1760:	e0 e0       	ldi	r30, 0x00	; 0
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	cf 01       	movw	r24, r30
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <free>:
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	09 f4       	brne	.+2      	; 0x1776 <free+0xa>
    1774:	87 c0       	rjmp	.+270    	; 0x1884 <free+0x118>
    1776:	fc 01       	movw	r30, r24
    1778:	32 97       	sbiw	r30, 0x02	; 2
    177a:	13 82       	std	Z+3, r1	; 0x03
    177c:	12 82       	std	Z+2, r1	; 0x02
    177e:	c0 91 1a 02 	lds	r28, 0x021A
    1782:	d0 91 1b 02 	lds	r29, 0x021B
    1786:	20 97       	sbiw	r28, 0x00	; 0
    1788:	81 f4       	brne	.+32     	; 0x17aa <free+0x3e>
    178a:	20 81       	ld	r18, Z
    178c:	31 81       	ldd	r19, Z+1	; 0x01
    178e:	28 0f       	add	r18, r24
    1790:	39 1f       	adc	r19, r25
    1792:	80 91 18 02 	lds	r24, 0x0218
    1796:	90 91 19 02 	lds	r25, 0x0219
    179a:	82 17       	cp	r24, r18
    179c:	93 07       	cpc	r25, r19
    179e:	79 f5       	brne	.+94     	; 0x17fe <free+0x92>
    17a0:	f0 93 19 02 	sts	0x0219, r31
    17a4:	e0 93 18 02 	sts	0x0218, r30
    17a8:	6d c0       	rjmp	.+218    	; 0x1884 <free+0x118>
    17aa:	de 01       	movw	r26, r28
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	ae 17       	cp	r26, r30
    17b2:	bf 07       	cpc	r27, r31
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <free+0x5e>
    17b6:	12 96       	adiw	r26, 0x02	; 2
    17b8:	4d 91       	ld	r20, X+
    17ba:	5c 91       	ld	r21, X
    17bc:	13 97       	sbiw	r26, 0x03	; 3
    17be:	9d 01       	movw	r18, r26
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	09 f1       	breq	.+66     	; 0x1808 <free+0x9c>
    17c6:	da 01       	movw	r26, r20
    17c8:	f3 cf       	rjmp	.-26     	; 0x17b0 <free+0x44>
    17ca:	b3 83       	std	Z+3, r27	; 0x03
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	40 81       	ld	r20, Z
    17d0:	51 81       	ldd	r21, Z+1	; 0x01
    17d2:	84 0f       	add	r24, r20
    17d4:	95 1f       	adc	r25, r21
    17d6:	8a 17       	cp	r24, r26
    17d8:	9b 07       	cpc	r25, r27
    17da:	71 f4       	brne	.+28     	; 0x17f8 <free+0x8c>
    17dc:	8d 91       	ld	r24, X+
    17de:	9c 91       	ld	r25, X
    17e0:	11 97       	sbiw	r26, 0x01	; 1
    17e2:	84 0f       	add	r24, r20
    17e4:	95 1f       	adc	r25, r21
    17e6:	02 96       	adiw	r24, 0x02	; 2
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	8d 91       	ld	r24, X+
    17f0:	9c 91       	ld	r25, X
    17f2:	13 97       	sbiw	r26, 0x03	; 3
    17f4:	93 83       	std	Z+3, r25	; 0x03
    17f6:	82 83       	std	Z+2, r24	; 0x02
    17f8:	21 15       	cp	r18, r1
    17fa:	31 05       	cpc	r19, r1
    17fc:	29 f4       	brne	.+10     	; 0x1808 <free+0x9c>
    17fe:	f0 93 1b 02 	sts	0x021B, r31
    1802:	e0 93 1a 02 	sts	0x021A, r30
    1806:	3e c0       	rjmp	.+124    	; 0x1884 <free+0x118>
    1808:	d9 01       	movw	r26, r18
    180a:	13 96       	adiw	r26, 0x03	; 3
    180c:	fc 93       	st	X, r31
    180e:	ee 93       	st	-X, r30
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	4d 91       	ld	r20, X+
    1814:	5d 91       	ld	r21, X+
    1816:	a4 0f       	add	r26, r20
    1818:	b5 1f       	adc	r27, r21
    181a:	ea 17       	cp	r30, r26
    181c:	fb 07       	cpc	r31, r27
    181e:	79 f4       	brne	.+30     	; 0x183e <free+0xd2>
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	84 0f       	add	r24, r20
    1826:	95 1f       	adc	r25, r21
    1828:	02 96       	adiw	r24, 0x02	; 2
    182a:	d9 01       	movw	r26, r18
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	9c 93       	st	X, r25
    1830:	8e 93       	st	-X, r24
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	13 96       	adiw	r26, 0x03	; 3
    1838:	9c 93       	st	X, r25
    183a:	8e 93       	st	-X, r24
    183c:	12 97       	sbiw	r26, 0x02	; 2
    183e:	e0 e0       	ldi	r30, 0x00	; 0
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	19 f0       	breq	.+6      	; 0x1850 <free+0xe4>
    184a:	fe 01       	movw	r30, r28
    184c:	ec 01       	movw	r28, r24
    184e:	f9 cf       	rjmp	.-14     	; 0x1842 <free+0xd6>
    1850:	ce 01       	movw	r24, r28
    1852:	02 96       	adiw	r24, 0x02	; 2
    1854:	28 81       	ld	r18, Y
    1856:	39 81       	ldd	r19, Y+1	; 0x01
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	20 91 18 02 	lds	r18, 0x0218
    1860:	30 91 19 02 	lds	r19, 0x0219
    1864:	28 17       	cp	r18, r24
    1866:	39 07       	cpc	r19, r25
    1868:	69 f4       	brne	.+26     	; 0x1884 <free+0x118>
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	29 f4       	brne	.+10     	; 0x1878 <free+0x10c>
    186e:	10 92 1b 02 	sts	0x021B, r1
    1872:	10 92 1a 02 	sts	0x021A, r1
    1876:	02 c0       	rjmp	.+4      	; 0x187c <free+0x110>
    1878:	13 82       	std	Z+3, r1	; 0x03
    187a:	12 82       	std	Z+2, r1	; 0x02
    187c:	d0 93 19 02 	sts	0x0219, r29
    1880:	c0 93 18 02 	sts	0x0218, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <atoi>:
    188a:	fc 01       	movw	r30, r24
    188c:	88 27       	eor	r24, r24
    188e:	99 27       	eor	r25, r25
    1890:	e8 94       	clt
    1892:	21 91       	ld	r18, Z+
    1894:	20 32       	cpi	r18, 0x20	; 32
    1896:	e9 f3       	breq	.-6      	; 0x1892 <atoi+0x8>
    1898:	29 30       	cpi	r18, 0x09	; 9
    189a:	10 f0       	brcs	.+4      	; 0x18a0 <atoi+0x16>
    189c:	2e 30       	cpi	r18, 0x0E	; 14
    189e:	c8 f3       	brcs	.-14     	; 0x1892 <atoi+0x8>
    18a0:	2b 32       	cpi	r18, 0x2B	; 43
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <atoi+0x28>
    18a4:	2d 32       	cpi	r18, 0x2D	; 45
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <atoi+0x2a>
    18a8:	68 94       	set
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <atoi+0x28>
    18ac:	22 d0       	rcall	.+68     	; 0x18f2 <__mulhi_const_10>
    18ae:	82 0f       	add	r24, r18
    18b0:	91 1d       	adc	r25, r1
    18b2:	21 91       	ld	r18, Z+
    18b4:	20 53       	subi	r18, 0x30	; 48
    18b6:	2a 30       	cpi	r18, 0x0A	; 10
    18b8:	c8 f3       	brcs	.-14     	; 0x18ac <atoi+0x22>
    18ba:	1e f4       	brtc	.+6      	; 0x18c2 <atoi+0x38>
    18bc:	90 95       	com	r25
    18be:	81 95       	neg	r24
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	08 95       	ret

000018c4 <memset>:
    18c4:	dc 01       	movw	r26, r24
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <memset+0x6>
    18c8:	6d 93       	st	X+, r22
    18ca:	41 50       	subi	r20, 0x01	; 1
    18cc:	50 40       	sbci	r21, 0x00	; 0
    18ce:	e0 f7       	brcc	.-8      	; 0x18c8 <memset+0x4>
    18d0:	08 95       	ret

000018d2 <strcmp>:
    18d2:	fb 01       	movw	r30, r22
    18d4:	dc 01       	movw	r26, r24
    18d6:	8d 91       	ld	r24, X+
    18d8:	01 90       	ld	r0, Z+
    18da:	80 19       	sub	r24, r0
    18dc:	01 10       	cpse	r0, r1
    18de:	d9 f3       	breq	.-10     	; 0x18d6 <strcmp+0x4>
    18e0:	99 0b       	sbc	r25, r25
    18e2:	08 95       	ret

000018e4 <strcpy>:
    18e4:	fb 01       	movw	r30, r22
    18e6:	dc 01       	movw	r26, r24
    18e8:	01 90       	ld	r0, Z+
    18ea:	0d 92       	st	X+, r0
    18ec:	00 20       	and	r0, r0
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <strcpy+0x4>
    18f0:	08 95       	ret

000018f2 <__mulhi_const_10>:
    18f2:	7a e0       	ldi	r23, 0x0A	; 10
    18f4:	97 9f       	mul	r25, r23
    18f6:	90 2d       	mov	r25, r0
    18f8:	87 9f       	mul	r24, r23
    18fa:	80 2d       	mov	r24, r0
    18fc:	91 0d       	add	r25, r1
    18fe:	11 24       	eor	r1, r1
    1900:	08 95       	ret

00001902 <sprintf>:
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	2e 97       	sbiw	r28, 0x0e	; 14
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	0d 89       	ldd	r16, Y+21	; 0x15
    191c:	1e 89       	ldd	r17, Y+22	; 0x16
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	8c 83       	std	Y+4, r24	; 0x04
    1922:	1a 83       	std	Y+2, r17	; 0x02
    1924:	09 83       	std	Y+1, r16	; 0x01
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	9f e7       	ldi	r25, 0x7F	; 127
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	ae 01       	movw	r20, r28
    1930:	47 5e       	subi	r20, 0xE7	; 231
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	6f 89       	ldd	r22, Y+23	; 0x17
    1936:	78 8d       	ldd	r23, Y+24	; 0x18
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	48 d0       	rcall	.+144    	; 0x19ce <vfprintf>
    193e:	ef 81       	ldd	r30, Y+7	; 0x07
    1940:	f8 85       	ldd	r31, Y+8	; 0x08
    1942:	e0 0f       	add	r30, r16
    1944:	f1 1f       	adc	r31, r17
    1946:	10 82       	st	Z, r1
    1948:	2e 96       	adiw	r28, 0x0e	; 14
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <vsnprintf>:
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	2e 97       	sbiw	r28, 0x0e	; 14
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	8c 01       	movw	r16, r24
    1978:	ca 01       	movw	r24, r20
    197a:	46 e0       	ldi	r20, 0x06	; 6
    197c:	4c 83       	std	Y+4, r20	; 0x04
    197e:	1a 83       	std	Y+2, r17	; 0x02
    1980:	09 83       	std	Y+1, r16	; 0x01
    1982:	77 ff       	sbrs	r23, 7
    1984:	02 c0       	rjmp	.+4      	; 0x198a <vsnprintf+0x2c>
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e8       	ldi	r23, 0x80	; 128
    198a:	61 50       	subi	r22, 0x01	; 1
    198c:	71 09       	sbc	r23, r1
    198e:	7e 83       	std	Y+6, r23	; 0x06
    1990:	6d 83       	std	Y+5, r22	; 0x05
    1992:	a9 01       	movw	r20, r18
    1994:	bc 01       	movw	r22, r24
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	19 d0       	rcall	.+50     	; 0x19ce <vfprintf>
    199c:	4d 81       	ldd	r20, Y+5	; 0x05
    199e:	5e 81       	ldd	r21, Y+6	; 0x06
    19a0:	57 fd       	sbrc	r21, 7
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <vsnprintf+0x5a>
    19a4:	2f 81       	ldd	r18, Y+7	; 0x07
    19a6:	38 85       	ldd	r19, Y+8	; 0x08
    19a8:	42 17       	cp	r20, r18
    19aa:	53 07       	cpc	r21, r19
    19ac:	0c f4       	brge	.+2      	; 0x19b0 <vsnprintf+0x52>
    19ae:	9a 01       	movw	r18, r20
    19b0:	f8 01       	movw	r30, r16
    19b2:	e2 0f       	add	r30, r18
    19b4:	f3 1f       	adc	r31, r19
    19b6:	10 82       	st	Z, r1
    19b8:	2e 96       	adiw	r28, 0x0e	; 14
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <vfprintf>:
    19ce:	2f 92       	push	r2
    19d0:	3f 92       	push	r3
    19d2:	4f 92       	push	r4
    19d4:	5f 92       	push	r5
    19d6:	6f 92       	push	r6
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	2c 97       	sbiw	r28, 0x0c	; 12
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	7c 01       	movw	r14, r24
    1a04:	6b 01       	movw	r12, r22
    1a06:	8a 01       	movw	r16, r20
    1a08:	fc 01       	movw	r30, r24
    1a0a:	17 82       	std	Z+7, r1	; 0x07
    1a0c:	16 82       	std	Z+6, r1	; 0x06
    1a0e:	83 81       	ldd	r24, Z+3	; 0x03
    1a10:	81 ff       	sbrs	r24, 1
    1a12:	b0 c1       	rjmp	.+864    	; 0x1d74 <vfprintf+0x3a6>
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	4c 01       	movw	r8, r24
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	f6 01       	movw	r30, r12
    1a20:	93 fd       	sbrc	r25, 3
    1a22:	85 91       	lpm	r24, Z+
    1a24:	93 ff       	sbrs	r25, 3
    1a26:	81 91       	ld	r24, Z+
    1a28:	6f 01       	movw	r12, r30
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <vfprintf+0x62>
    1a2e:	9e c1       	rjmp	.+828    	; 0x1d6c <vfprintf+0x39e>
    1a30:	85 32       	cpi	r24, 0x25	; 37
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <vfprintf+0x74>
    1a34:	93 fd       	sbrc	r25, 3
    1a36:	85 91       	lpm	r24, Z+
    1a38:	93 ff       	sbrs	r25, 3
    1a3a:	81 91       	ld	r24, Z+
    1a3c:	6f 01       	movw	r12, r30
    1a3e:	85 32       	cpi	r24, 0x25	; 37
    1a40:	21 f4       	brne	.+8      	; 0x1a4a <vfprintf+0x7c>
    1a42:	b7 01       	movw	r22, r14
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	c7 d1       	rcall	.+910    	; 0x1dd6 <fputc>
    1a48:	e8 cf       	rjmp	.-48     	; 0x1a1a <vfprintf+0x4c>
    1a4a:	51 2c       	mov	r5, r1
    1a4c:	31 2c       	mov	r3, r1
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	20 32       	cpi	r18, 0x20	; 32
    1a52:	a0 f4       	brcc	.+40     	; 0x1a7c <vfprintf+0xae>
    1a54:	8b 32       	cpi	r24, 0x2B	; 43
    1a56:	69 f0       	breq	.+26     	; 0x1a72 <vfprintf+0xa4>
    1a58:	30 f4       	brcc	.+12     	; 0x1a66 <vfprintf+0x98>
    1a5a:	80 32       	cpi	r24, 0x20	; 32
    1a5c:	59 f0       	breq	.+22     	; 0x1a74 <vfprintf+0xa6>
    1a5e:	83 32       	cpi	r24, 0x23	; 35
    1a60:	69 f4       	brne	.+26     	; 0x1a7c <vfprintf+0xae>
    1a62:	20 61       	ori	r18, 0x10	; 16
    1a64:	2c c0       	rjmp	.+88     	; 0x1abe <vfprintf+0xf0>
    1a66:	8d 32       	cpi	r24, 0x2D	; 45
    1a68:	39 f0       	breq	.+14     	; 0x1a78 <vfprintf+0xaa>
    1a6a:	80 33       	cpi	r24, 0x30	; 48
    1a6c:	39 f4       	brne	.+14     	; 0x1a7c <vfprintf+0xae>
    1a6e:	21 60       	ori	r18, 0x01	; 1
    1a70:	26 c0       	rjmp	.+76     	; 0x1abe <vfprintf+0xf0>
    1a72:	22 60       	ori	r18, 0x02	; 2
    1a74:	24 60       	ori	r18, 0x04	; 4
    1a76:	23 c0       	rjmp	.+70     	; 0x1abe <vfprintf+0xf0>
    1a78:	28 60       	ori	r18, 0x08	; 8
    1a7a:	21 c0       	rjmp	.+66     	; 0x1abe <vfprintf+0xf0>
    1a7c:	27 fd       	sbrc	r18, 7
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <vfprintf+0x100>
    1a80:	30 ed       	ldi	r19, 0xD0	; 208
    1a82:	38 0f       	add	r19, r24
    1a84:	3a 30       	cpi	r19, 0x0A	; 10
    1a86:	78 f4       	brcc	.+30     	; 0x1aa6 <vfprintf+0xd8>
    1a88:	26 ff       	sbrs	r18, 6
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <vfprintf+0xca>
    1a8c:	fa e0       	ldi	r31, 0x0A	; 10
    1a8e:	5f 9e       	mul	r5, r31
    1a90:	30 0d       	add	r19, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	53 2e       	mov	r5, r19
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <vfprintf+0xf0>
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	38 9e       	mul	r3, r24
    1a9c:	30 0d       	add	r19, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	33 2e       	mov	r3, r19
    1aa2:	20 62       	ori	r18, 0x20	; 32
    1aa4:	0c c0       	rjmp	.+24     	; 0x1abe <vfprintf+0xf0>
    1aa6:	8e 32       	cpi	r24, 0x2E	; 46
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <vfprintf+0xe4>
    1aaa:	26 fd       	sbrc	r18, 6
    1aac:	5f c1       	rjmp	.+702    	; 0x1d6c <vfprintf+0x39e>
    1aae:	20 64       	ori	r18, 0x40	; 64
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0xf0>
    1ab2:	8c 36       	cpi	r24, 0x6C	; 108
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <vfprintf+0xec>
    1ab6:	20 68       	ori	r18, 0x80	; 128
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <vfprintf+0xf0>
    1aba:	88 36       	cpi	r24, 0x68	; 104
    1abc:	41 f4       	brne	.+16     	; 0x1ace <vfprintf+0x100>
    1abe:	f6 01       	movw	r30, r12
    1ac0:	93 fd       	sbrc	r25, 3
    1ac2:	85 91       	lpm	r24, Z+
    1ac4:	93 ff       	sbrs	r25, 3
    1ac6:	81 91       	ld	r24, Z+
    1ac8:	6f 01       	movw	r12, r30
    1aca:	81 11       	cpse	r24, r1
    1acc:	c1 cf       	rjmp	.-126    	; 0x1a50 <vfprintf+0x82>
    1ace:	98 2f       	mov	r25, r24
    1ad0:	9f 7d       	andi	r25, 0xDF	; 223
    1ad2:	95 54       	subi	r25, 0x45	; 69
    1ad4:	93 30       	cpi	r25, 0x03	; 3
    1ad6:	28 f4       	brcc	.+10     	; 0x1ae2 <vfprintf+0x114>
    1ad8:	0c 5f       	subi	r16, 0xFC	; 252
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	ff e3       	ldi	r31, 0x3F	; 63
    1ade:	f9 83       	std	Y+1, r31	; 0x01
    1ae0:	0d c0       	rjmp	.+26     	; 0x1afc <vfprintf+0x12e>
    1ae2:	83 36       	cpi	r24, 0x63	; 99
    1ae4:	31 f0       	breq	.+12     	; 0x1af2 <vfprintf+0x124>
    1ae6:	83 37       	cpi	r24, 0x73	; 115
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <vfprintf+0x138>
    1aea:	83 35       	cpi	r24, 0x53	; 83
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <vfprintf+0x122>
    1aee:	57 c0       	rjmp	.+174    	; 0x1b9e <vfprintf+0x1d0>
    1af0:	21 c0       	rjmp	.+66     	; 0x1b34 <vfprintf+0x166>
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 81       	ld	r24, Z
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	0e 5f       	subi	r16, 0xFE	; 254
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	44 24       	eor	r4, r4
    1afe:	43 94       	inc	r4
    1b00:	51 2c       	mov	r5, r1
    1b02:	54 01       	movw	r10, r8
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <vfprintf+0x160>
    1b06:	38 01       	movw	r6, r16
    1b08:	f2 e0       	ldi	r31, 0x02	; 2
    1b0a:	6f 0e       	add	r6, r31
    1b0c:	71 1c       	adc	r7, r1
    1b0e:	f8 01       	movw	r30, r16
    1b10:	a0 80       	ld	r10, Z
    1b12:	b1 80       	ldd	r11, Z+1	; 0x01
    1b14:	26 ff       	sbrs	r18, 6
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <vfprintf+0x150>
    1b18:	65 2d       	mov	r22, r5
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <vfprintf+0x154>
    1b1e:	6f ef       	ldi	r22, 0xFF	; 255
    1b20:	7f ef       	ldi	r23, 0xFF	; 255
    1b22:	c5 01       	movw	r24, r10
    1b24:	2c 87       	std	Y+12, r18	; 0x0c
    1b26:	4c d1       	rcall	.+664    	; 0x1dc0 <strnlen>
    1b28:	2c 01       	movw	r4, r24
    1b2a:	83 01       	movw	r16, r6
    1b2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2e:	2f 77       	andi	r18, 0x7F	; 127
    1b30:	22 2e       	mov	r2, r18
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <vfprintf+0x192>
    1b34:	38 01       	movw	r6, r16
    1b36:	f2 e0       	ldi	r31, 0x02	; 2
    1b38:	6f 0e       	add	r6, r31
    1b3a:	71 1c       	adc	r7, r1
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	a0 80       	ld	r10, Z
    1b40:	b1 80       	ldd	r11, Z+1	; 0x01
    1b42:	26 ff       	sbrs	r18, 6
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <vfprintf+0x17e>
    1b46:	65 2d       	mov	r22, r5
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0x182>
    1b4c:	6f ef       	ldi	r22, 0xFF	; 255
    1b4e:	7f ef       	ldi	r23, 0xFF	; 255
    1b50:	c5 01       	movw	r24, r10
    1b52:	2c 87       	std	Y+12, r18	; 0x0c
    1b54:	2a d1       	rcall	.+596    	; 0x1daa <strnlen_P>
    1b56:	2c 01       	movw	r4, r24
    1b58:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b5a:	20 68       	ori	r18, 0x80	; 128
    1b5c:	22 2e       	mov	r2, r18
    1b5e:	83 01       	movw	r16, r6
    1b60:	23 fc       	sbrc	r2, 3
    1b62:	19 c0       	rjmp	.+50     	; 0x1b96 <vfprintf+0x1c8>
    1b64:	83 2d       	mov	r24, r3
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	48 16       	cp	r4, r24
    1b6a:	59 06       	cpc	r5, r25
    1b6c:	a0 f4       	brcc	.+40     	; 0x1b96 <vfprintf+0x1c8>
    1b6e:	b7 01       	movw	r22, r14
    1b70:	80 e2       	ldi	r24, 0x20	; 32
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	30 d1       	rcall	.+608    	; 0x1dd6 <fputc>
    1b76:	3a 94       	dec	r3
    1b78:	f5 cf       	rjmp	.-22     	; 0x1b64 <vfprintf+0x196>
    1b7a:	f5 01       	movw	r30, r10
    1b7c:	27 fc       	sbrc	r2, 7
    1b7e:	85 91       	lpm	r24, Z+
    1b80:	27 fe       	sbrs	r2, 7
    1b82:	81 91       	ld	r24, Z+
    1b84:	5f 01       	movw	r10, r30
    1b86:	b7 01       	movw	r22, r14
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	25 d1       	rcall	.+586    	; 0x1dd6 <fputc>
    1b8c:	31 10       	cpse	r3, r1
    1b8e:	3a 94       	dec	r3
    1b90:	f1 e0       	ldi	r31, 0x01	; 1
    1b92:	4f 1a       	sub	r4, r31
    1b94:	51 08       	sbc	r5, r1
    1b96:	41 14       	cp	r4, r1
    1b98:	51 04       	cpc	r5, r1
    1b9a:	79 f7       	brne	.-34     	; 0x1b7a <vfprintf+0x1ac>
    1b9c:	de c0       	rjmp	.+444    	; 0x1d5a <vfprintf+0x38c>
    1b9e:	84 36       	cpi	r24, 0x64	; 100
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <vfprintf+0x1d8>
    1ba2:	89 36       	cpi	r24, 0x69	; 105
    1ba4:	31 f5       	brne	.+76     	; 0x1bf2 <vfprintf+0x224>
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	27 ff       	sbrs	r18, 7
    1baa:	07 c0       	rjmp	.+14     	; 0x1bba <vfprintf+0x1ec>
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	0c 5f       	subi	r16, 0xFC	; 252
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	08 c0       	rjmp	.+16     	; 0x1bca <vfprintf+0x1fc>
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	88 27       	eor	r24, r24
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	80 95       	com	r24
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	0e 5f       	subi	r16, 0xFE	; 254
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	2f 76       	andi	r18, 0x6F	; 111
    1bcc:	b2 2e       	mov	r11, r18
    1bce:	97 ff       	sbrs	r25, 7
    1bd0:	09 c0       	rjmp	.+18     	; 0x1be4 <vfprintf+0x216>
    1bd2:	90 95       	com	r25
    1bd4:	80 95       	com	r24
    1bd6:	70 95       	com	r23
    1bd8:	61 95       	neg	r22
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	20 68       	ori	r18, 0x80	; 128
    1be2:	b2 2e       	mov	r11, r18
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	a4 01       	movw	r20, r8
    1bea:	27 d1       	rcall	.+590    	; 0x1e3a <__ultoa_invert>
    1bec:	a8 2e       	mov	r10, r24
    1bee:	a8 18       	sub	r10, r8
    1bf0:	43 c0       	rjmp	.+134    	; 0x1c78 <vfprintf+0x2aa>
    1bf2:	85 37       	cpi	r24, 0x75	; 117
    1bf4:	29 f4       	brne	.+10     	; 0x1c00 <vfprintf+0x232>
    1bf6:	2f 7e       	andi	r18, 0xEF	; 239
    1bf8:	b2 2e       	mov	r11, r18
    1bfa:	2a e0       	ldi	r18, 0x0A	; 10
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	25 c0       	rjmp	.+74     	; 0x1c4a <vfprintf+0x27c>
    1c00:	f2 2f       	mov	r31, r18
    1c02:	f9 7f       	andi	r31, 0xF9	; 249
    1c04:	bf 2e       	mov	r11, r31
    1c06:	8f 36       	cpi	r24, 0x6F	; 111
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <vfprintf+0x26c>
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <vfprintf+0x244>
    1c0c:	88 35       	cpi	r24, 0x58	; 88
    1c0e:	79 f0       	breq	.+30     	; 0x1c2e <vfprintf+0x260>
    1c10:	ad c0       	rjmp	.+346    	; 0x1d6c <vfprintf+0x39e>
    1c12:	80 37       	cpi	r24, 0x70	; 112
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <vfprintf+0x24e>
    1c16:	88 37       	cpi	r24, 0x78	; 120
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <vfprintf+0x254>
    1c1a:	a8 c0       	rjmp	.+336    	; 0x1d6c <vfprintf+0x39e>
    1c1c:	2f 2f       	mov	r18, r31
    1c1e:	20 61       	ori	r18, 0x10	; 16
    1c20:	b2 2e       	mov	r11, r18
    1c22:	b4 fe       	sbrs	r11, 4
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <vfprintf+0x272>
    1c26:	8b 2d       	mov	r24, r11
    1c28:	84 60       	ori	r24, 0x04	; 4
    1c2a:	b8 2e       	mov	r11, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <vfprintf+0x272>
    1c2e:	24 ff       	sbrs	r18, 4
    1c30:	0a c0       	rjmp	.+20     	; 0x1c46 <vfprintf+0x278>
    1c32:	9f 2f       	mov	r25, r31
    1c34:	96 60       	ori	r25, 0x06	; 6
    1c36:	b9 2e       	mov	r11, r25
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x278>
    1c3a:	28 e0       	ldi	r18, 0x08	; 8
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <vfprintf+0x27c>
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0x27c>
    1c46:	20 e1       	ldi	r18, 0x10	; 16
    1c48:	32 e0       	ldi	r19, 0x02	; 2
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	b7 fe       	sbrs	r11, 7
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <vfprintf+0x290>
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0c 5f       	subi	r16, 0xFC	; 252
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <vfprintf+0x29c>
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 5f       	subi	r16, 0xFE	; 254
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	a4 01       	movw	r20, r8
    1c6c:	e6 d0       	rcall	.+460    	; 0x1e3a <__ultoa_invert>
    1c6e:	a8 2e       	mov	r10, r24
    1c70:	a8 18       	sub	r10, r8
    1c72:	fb 2d       	mov	r31, r11
    1c74:	ff 77       	andi	r31, 0x7F	; 127
    1c76:	bf 2e       	mov	r11, r31
    1c78:	b6 fe       	sbrs	r11, 6
    1c7a:	0b c0       	rjmp	.+22     	; 0x1c92 <vfprintf+0x2c4>
    1c7c:	2b 2d       	mov	r18, r11
    1c7e:	2e 7f       	andi	r18, 0xFE	; 254
    1c80:	a5 14       	cp	r10, r5
    1c82:	50 f4       	brcc	.+20     	; 0x1c98 <vfprintf+0x2ca>
    1c84:	b4 fe       	sbrs	r11, 4
    1c86:	0a c0       	rjmp	.+20     	; 0x1c9c <vfprintf+0x2ce>
    1c88:	b2 fc       	sbrc	r11, 2
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <vfprintf+0x2ce>
    1c8c:	2b 2d       	mov	r18, r11
    1c8e:	2e 7e       	andi	r18, 0xEE	; 238
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <vfprintf+0x2ce>
    1c92:	7a 2c       	mov	r7, r10
    1c94:	2b 2d       	mov	r18, r11
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <vfprintf+0x2d0>
    1c98:	7a 2c       	mov	r7, r10
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <vfprintf+0x2d0>
    1c9c:	75 2c       	mov	r7, r5
    1c9e:	24 ff       	sbrs	r18, 4
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <vfprintf+0x2ee>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ea 0d       	add	r30, r10
    1ca6:	f1 1d       	adc	r31, r1
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 33       	cpi	r24, 0x30	; 48
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <vfprintf+0x2e4>
    1cae:	29 7e       	andi	r18, 0xE9	; 233
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <vfprintf+0x2f6>
    1cb2:	22 ff       	sbrs	r18, 2
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <vfprintf+0x2f4>
    1cb6:	73 94       	inc	r7
    1cb8:	73 94       	inc	r7
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <vfprintf+0x2f6>
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	86 78       	andi	r24, 0x86	; 134
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <vfprintf+0x2f6>
    1cc2:	73 94       	inc	r7
    1cc4:	23 fd       	sbrc	r18, 3
    1cc6:	12 c0       	rjmp	.+36     	; 0x1cec <vfprintf+0x31e>
    1cc8:	20 ff       	sbrs	r18, 0
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <vfprintf+0x30a>
    1ccc:	5a 2c       	mov	r5, r10
    1cce:	73 14       	cp	r7, r3
    1cd0:	18 f4       	brcc	.+6      	; 0x1cd8 <vfprintf+0x30a>
    1cd2:	53 0c       	add	r5, r3
    1cd4:	57 18       	sub	r5, r7
    1cd6:	73 2c       	mov	r7, r3
    1cd8:	73 14       	cp	r7, r3
    1cda:	60 f4       	brcc	.+24     	; 0x1cf4 <vfprintf+0x326>
    1cdc:	b7 01       	movw	r22, r14
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	2c 87       	std	Y+12, r18	; 0x0c
    1ce4:	78 d0       	rcall	.+240    	; 0x1dd6 <fputc>
    1ce6:	73 94       	inc	r7
    1ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cea:	f6 cf       	rjmp	.-20     	; 0x1cd8 <vfprintf+0x30a>
    1cec:	73 14       	cp	r7, r3
    1cee:	10 f4       	brcc	.+4      	; 0x1cf4 <vfprintf+0x326>
    1cf0:	37 18       	sub	r3, r7
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <vfprintf+0x328>
    1cf4:	31 2c       	mov	r3, r1
    1cf6:	24 ff       	sbrs	r18, 4
    1cf8:	11 c0       	rjmp	.+34     	; 0x1d1c <vfprintf+0x34e>
    1cfa:	b7 01       	movw	r22, r14
    1cfc:	80 e3       	ldi	r24, 0x30	; 48
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	2c 87       	std	Y+12, r18	; 0x0c
    1d02:	69 d0       	rcall	.+210    	; 0x1dd6 <fputc>
    1d04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d06:	22 ff       	sbrs	r18, 2
    1d08:	16 c0       	rjmp	.+44     	; 0x1d36 <vfprintf+0x368>
    1d0a:	21 ff       	sbrs	r18, 1
    1d0c:	03 c0       	rjmp	.+6      	; 0x1d14 <vfprintf+0x346>
    1d0e:	88 e5       	ldi	r24, 0x58	; 88
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <vfprintf+0x34a>
    1d14:	88 e7       	ldi	r24, 0x78	; 120
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	b7 01       	movw	r22, r14
    1d1a:	0c c0       	rjmp	.+24     	; 0x1d34 <vfprintf+0x366>
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	86 78       	andi	r24, 0x86	; 134
    1d20:	51 f0       	breq	.+20     	; 0x1d36 <vfprintf+0x368>
    1d22:	21 fd       	sbrc	r18, 1
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <vfprintf+0x35c>
    1d26:	80 e2       	ldi	r24, 0x20	; 32
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x35e>
    1d2a:	8b e2       	ldi	r24, 0x2B	; 43
    1d2c:	27 fd       	sbrc	r18, 7
    1d2e:	8d e2       	ldi	r24, 0x2D	; 45
    1d30:	b7 01       	movw	r22, r14
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	50 d0       	rcall	.+160    	; 0x1dd6 <fputc>
    1d36:	a5 14       	cp	r10, r5
    1d38:	30 f4       	brcc	.+12     	; 0x1d46 <vfprintf+0x378>
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	80 e3       	ldi	r24, 0x30	; 48
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	4a d0       	rcall	.+148    	; 0x1dd6 <fputc>
    1d42:	5a 94       	dec	r5
    1d44:	f8 cf       	rjmp	.-16     	; 0x1d36 <vfprintf+0x368>
    1d46:	aa 94       	dec	r10
    1d48:	f4 01       	movw	r30, r8
    1d4a:	ea 0d       	add	r30, r10
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	80 81       	ld	r24, Z
    1d50:	b7 01       	movw	r22, r14
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	40 d0       	rcall	.+128    	; 0x1dd6 <fputc>
    1d56:	a1 10       	cpse	r10, r1
    1d58:	f6 cf       	rjmp	.-20     	; 0x1d46 <vfprintf+0x378>
    1d5a:	33 20       	and	r3, r3
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <vfprintf+0x392>
    1d5e:	5d ce       	rjmp	.-838    	; 0x1a1a <vfprintf+0x4c>
    1d60:	b7 01       	movw	r22, r14
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	37 d0       	rcall	.+110    	; 0x1dd6 <fputc>
    1d68:	3a 94       	dec	r3
    1d6a:	f7 cf       	rjmp	.-18     	; 0x1d5a <vfprintf+0x38c>
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	86 81       	ldd	r24, Z+6	; 0x06
    1d70:	97 81       	ldd	r25, Z+7	; 0x07
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <vfprintf+0x3aa>
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	2c 96       	adiw	r28, 0x0c	; 12
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	7f 90       	pop	r7
    1d9e:	6f 90       	pop	r6
    1da0:	5f 90       	pop	r5
    1da2:	4f 90       	pop	r4
    1da4:	3f 90       	pop	r3
    1da6:	2f 90       	pop	r2
    1da8:	08 95       	ret

00001daa <strnlen_P>:
    1daa:	fc 01       	movw	r30, r24
    1dac:	05 90       	lpm	r0, Z+
    1dae:	61 50       	subi	r22, 0x01	; 1
    1db0:	70 40       	sbci	r23, 0x00	; 0
    1db2:	01 10       	cpse	r0, r1
    1db4:	d8 f7       	brcc	.-10     	; 0x1dac <strnlen_P+0x2>
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	8e 0f       	add	r24, r30
    1dbc:	9f 1f       	adc	r25, r31
    1dbe:	08 95       	ret

00001dc0 <strnlen>:
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	61 50       	subi	r22, 0x01	; 1
    1dc4:	70 40       	sbci	r23, 0x00	; 0
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	01 10       	cpse	r0, r1
    1dca:	d8 f7       	brcc	.-10     	; 0x1dc2 <strnlen+0x2>
    1dcc:	80 95       	com	r24
    1dce:	90 95       	com	r25
    1dd0:	8e 0f       	add	r24, r30
    1dd2:	9f 1f       	adc	r25, r31
    1dd4:	08 95       	ret

00001dd6 <fputc>:
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	18 2f       	mov	r17, r24
    1de0:	09 2f       	mov	r16, r25
    1de2:	eb 01       	movw	r28, r22
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	81 fd       	sbrc	r24, 1
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <fputc+0x1a>
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	9f ef       	ldi	r25, 0xFF	; 255
    1dee:	20 c0       	rjmp	.+64     	; 0x1e30 <fputc+0x5a>
    1df0:	82 ff       	sbrs	r24, 2
    1df2:	10 c0       	rjmp	.+32     	; 0x1e14 <fputc+0x3e>
    1df4:	4e 81       	ldd	r20, Y+6	; 0x06
    1df6:	5f 81       	ldd	r21, Y+7	; 0x07
    1df8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfc:	42 17       	cp	r20, r18
    1dfe:	53 07       	cpc	r21, r19
    1e00:	7c f4       	brge	.+30     	; 0x1e20 <fputc+0x4a>
    1e02:	e8 81       	ld	r30, Y
    1e04:	f9 81       	ldd	r31, Y+1	; 0x01
    1e06:	9f 01       	movw	r18, r30
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	39 83       	std	Y+1, r19	; 0x01
    1e0e:	28 83       	st	Y, r18
    1e10:	10 83       	st	Z, r17
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <fputc+0x4a>
    1e14:	e8 85       	ldd	r30, Y+8	; 0x08
    1e16:	f9 85       	ldd	r31, Y+9	; 0x09
    1e18:	81 2f       	mov	r24, r17
    1e1a:	09 95       	icall
    1e1c:	89 2b       	or	r24, r25
    1e1e:	29 f7       	brne	.-54     	; 0x1dea <fputc+0x14>
    1e20:	2e 81       	ldd	r18, Y+6	; 0x06
    1e22:	3f 81       	ldd	r19, Y+7	; 0x07
    1e24:	2f 5f       	subi	r18, 0xFF	; 255
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	3f 83       	std	Y+7, r19	; 0x07
    1e2a:	2e 83       	std	Y+6, r18	; 0x06
    1e2c:	81 2f       	mov	r24, r17
    1e2e:	90 2f       	mov	r25, r16
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <__ultoa_invert>:
    1e3a:	fa 01       	movw	r30, r20
    1e3c:	aa 27       	eor	r26, r26
    1e3e:	28 30       	cpi	r18, 0x08	; 8
    1e40:	51 f1       	breq	.+84     	; 0x1e96 <__ultoa_invert+0x5c>
    1e42:	20 31       	cpi	r18, 0x10	; 16
    1e44:	81 f1       	breq	.+96     	; 0x1ea6 <__ultoa_invert+0x6c>
    1e46:	e8 94       	clt
    1e48:	6f 93       	push	r22
    1e4a:	6e 7f       	andi	r22, 0xFE	; 254
    1e4c:	6e 5f       	subi	r22, 0xFE	; 254
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	8f 4f       	sbci	r24, 0xFF	; 255
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	af 4f       	sbci	r26, 0xFF	; 255
    1e56:	b1 e0       	ldi	r27, 0x01	; 1
    1e58:	3e d0       	rcall	.+124    	; 0x1ed6 <__ultoa_invert+0x9c>
    1e5a:	b4 e0       	ldi	r27, 0x04	; 4
    1e5c:	3c d0       	rcall	.+120    	; 0x1ed6 <__ultoa_invert+0x9c>
    1e5e:	67 0f       	add	r22, r23
    1e60:	78 1f       	adc	r23, r24
    1e62:	89 1f       	adc	r24, r25
    1e64:	9a 1f       	adc	r25, r26
    1e66:	a1 1d       	adc	r26, r1
    1e68:	68 0f       	add	r22, r24
    1e6a:	79 1f       	adc	r23, r25
    1e6c:	8a 1f       	adc	r24, r26
    1e6e:	91 1d       	adc	r25, r1
    1e70:	a1 1d       	adc	r26, r1
    1e72:	6a 0f       	add	r22, r26
    1e74:	71 1d       	adc	r23, r1
    1e76:	81 1d       	adc	r24, r1
    1e78:	91 1d       	adc	r25, r1
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	20 d0       	rcall	.+64     	; 0x1ebe <__ultoa_invert+0x84>
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <__ultoa_invert+0x48>
    1e80:	68 94       	set
    1e82:	3f 91       	pop	r19
    1e84:	2a e0       	ldi	r18, 0x0A	; 10
    1e86:	26 9f       	mul	r18, r22
    1e88:	11 24       	eor	r1, r1
    1e8a:	30 19       	sub	r19, r0
    1e8c:	30 5d       	subi	r19, 0xD0	; 208
    1e8e:	31 93       	st	Z+, r19
    1e90:	de f6       	brtc	.-74     	; 0x1e48 <__ultoa_invert+0xe>
    1e92:	cf 01       	movw	r24, r30
    1e94:	08 95       	ret
    1e96:	46 2f       	mov	r20, r22
    1e98:	47 70       	andi	r20, 0x07	; 7
    1e9a:	40 5d       	subi	r20, 0xD0	; 208
    1e9c:	41 93       	st	Z+, r20
    1e9e:	b3 e0       	ldi	r27, 0x03	; 3
    1ea0:	0f d0       	rcall	.+30     	; 0x1ec0 <__ultoa_invert+0x86>
    1ea2:	c9 f7       	brne	.-14     	; 0x1e96 <__ultoa_invert+0x5c>
    1ea4:	f6 cf       	rjmp	.-20     	; 0x1e92 <__ultoa_invert+0x58>
    1ea6:	46 2f       	mov	r20, r22
    1ea8:	4f 70       	andi	r20, 0x0F	; 15
    1eaa:	40 5d       	subi	r20, 0xD0	; 208
    1eac:	4a 33       	cpi	r20, 0x3A	; 58
    1eae:	18 f0       	brcs	.+6      	; 0x1eb6 <__ultoa_invert+0x7c>
    1eb0:	49 5d       	subi	r20, 0xD9	; 217
    1eb2:	31 fd       	sbrc	r19, 1
    1eb4:	40 52       	subi	r20, 0x20	; 32
    1eb6:	41 93       	st	Z+, r20
    1eb8:	02 d0       	rcall	.+4      	; 0x1ebe <__ultoa_invert+0x84>
    1eba:	a9 f7       	brne	.-22     	; 0x1ea6 <__ultoa_invert+0x6c>
    1ebc:	ea cf       	rjmp	.-44     	; 0x1e92 <__ultoa_invert+0x58>
    1ebe:	b4 e0       	ldi	r27, 0x04	; 4
    1ec0:	a6 95       	lsr	r26
    1ec2:	97 95       	ror	r25
    1ec4:	87 95       	ror	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	ba 95       	dec	r27
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <__ultoa_invert+0x86>
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	61 05       	cpc	r22, r1
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	08 95       	ret
    1ed6:	9b 01       	movw	r18, r22
    1ed8:	ac 01       	movw	r20, r24
    1eda:	0a 2e       	mov	r0, r26
    1edc:	06 94       	lsr	r0
    1ede:	57 95       	ror	r21
    1ee0:	47 95       	ror	r20
    1ee2:	37 95       	ror	r19
    1ee4:	27 95       	ror	r18
    1ee6:	ba 95       	dec	r27
    1ee8:	c9 f7       	brne	.-14     	; 0x1edc <__ultoa_invert+0xa2>
    1eea:	62 0f       	add	r22, r18
    1eec:	73 1f       	adc	r23, r19
    1eee:	84 1f       	adc	r24, r20
    1ef0:	95 1f       	adc	r25, r21
    1ef2:	a0 1d       	adc	r26, r0
    1ef4:	08 95       	ret

00001ef6 <_exit>:
    1ef6:	f8 94       	cli

00001ef8 <__stop_program>:
    1ef8:	ff cf       	rjmp	.-2      	; 0x1ef8 <__stop_program>
