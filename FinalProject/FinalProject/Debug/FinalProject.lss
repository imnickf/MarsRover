
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001f98  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800226  00800226  00002152  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000268c  00000000  00000000  000023ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000884  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000128c  00000000  00000000  000052de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000640  00000000  00000000  0000656c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b0  00000000  00000000  00006bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015dd  00000000  00000000  0000755c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00008b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c6       	rjmp	.+3158   	; 0xc7c <__vector_9>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7d c6       	rjmp	.+3322   	; 0xd28 <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <oi_load_song+0x2e>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <turn_clockwise+0x24>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e8 e9       	ldi	r30, 0x98	; 152
     140:	ff e1       	ldi	r31, 0x1F	; 31
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a6 32       	cpi	r26, 0x26	; 38
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	22 e0       	ldi	r18, 0x02	; 2
     154:	a6 e2       	ldi	r26, 0x26	; 38
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	aa 38       	cpi	r26, 0x8A	; 138
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	2b d2       	rcall	.+1110   	; 0x5ba <main>
     164:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <transmitSensorData>:
		}	
	}
}

void transmitSensorData(oi_t *sensor_data)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	ca 5f       	subi	r28, 0xFA	; 250
     180:	d1 09       	sbc	r29, r1
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	8c 01       	movw	r16, r24
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	86 95       	lsr	r24
     194:	81 70       	andi	r24, 0x01	; 1
     196:	1f 92       	push	r1
     198:	8f 93       	push	r24
     19a:	80 81       	ld	r24, Z
     19c:	81 70       	andi	r24, 0x01	; 1
     19e:	1f 92       	push	r1
     1a0:	8f 93       	push	r24
     1a2:	8e e1       	ldi	r24, 0x1E	; 30
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	ce 01       	movw	r24, r28
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	6c 01       	movw	r12, r24
     1b0:	df 92       	push	r13
     1b2:	8f 93       	push	r24
     1b4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <sprintf>
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
     1b8:	f8 01       	movw	r30, r16
     1ba:	85 81       	ldd	r24, Z+5	; 0x05
     1bc:	1f 92       	push	r1
     1be:	8f 93       	push	r24
     1c0:	84 81       	ldd	r24, Z+4	; 0x04
     1c2:	1f 92       	push	r1
     1c4:	8f 93       	push	r24
     1c6:	83 81       	ldd	r24, Z+3	; 0x03
     1c8:	1f 92       	push	r1
     1ca:	8f 93       	push	r24
     1cc:	82 81       	ldd	r24, Z+2	; 0x02
     1ce:	1f 92       	push	r1
     1d0:	8f 93       	push	r24
     1d2:	8a e4       	ldi	r24, 0x4A	; 74
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	9f 93       	push	r25
     1d8:	8f 93       	push	r24
     1da:	ce 01       	movw	r24, r28
     1dc:	c3 96       	adiw	r24, 0x33	; 51
     1de:	9f 93       	push	r25
     1e0:	8f 93       	push	r24
     1e2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <sprintf>
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
     1e6:	f8 01       	movw	r30, r16
     1e8:	83 a1       	ldd	r24, Z+35	; 0x23
     1ea:	8f 93       	push	r24
     1ec:	82 a1       	ldd	r24, Z+34	; 0x22
     1ee:	8f 93       	push	r24
     1f0:	81 a1       	ldd	r24, Z+33	; 0x21
     1f2:	8f 93       	push	r24
     1f4:	80 a1       	ldd	r24, Z+32	; 0x20
     1f6:	8f 93       	push	r24
     1f8:	87 8d       	ldd	r24, Z+31	; 0x1f
     1fa:	8f 93       	push	r24
     1fc:	86 8d       	ldd	r24, Z+30	; 0x1e
     1fe:	8f 93       	push	r24
     200:	85 8d       	ldd	r24, Z+29	; 0x1d
     202:	8f 93       	push	r24
     204:	84 8d       	ldd	r24, Z+28	; 0x1c
     206:	8f 93       	push	r24
     208:	8d e8       	ldi	r24, 0x8D	; 141
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	9f 93       	push	r25
     20e:	8f 93       	push	r24
     210:	ce 01       	movw	r24, r28
     212:	89 56       	subi	r24, 0x69	; 105
     214:	9f 4f       	sbci	r25, 0xFF	; 255
     216:	9f 93       	push	r25
     218:	8f 93       	push	r24
     21a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <sprintf>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	76 01       	movw	r14, r12
     22e:	06 c0       	rjmp	.+12     	; 0x23c <transmitSensorData+0xd2>
		USART_Transmit(bumpSensors[i]);
     230:	f6 01       	movw	r30, r12
     232:	81 91       	ld	r24, Z+
     234:	6f 01       	movw	r12, r30
     236:	49 d5       	rcall	.+2706   	; 0xcca <USART_Transmit>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     238:	0f 5f       	subi	r16, 0xFF	; 255
     23a:	1f 4f       	sbci	r17, 0xFF	; 255
     23c:	f7 01       	movw	r30, r14
     23e:	01 90       	ld	r0, Z+
     240:	00 20       	and	r0, r0
     242:	e9 f7       	brne	.-6      	; 0x23e <transmitSensorData+0xd4>
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	ee 19       	sub	r30, r14
     248:	ff 09       	sbc	r31, r15
     24a:	0e 17       	cp	r16, r30
     24c:	1f 07       	cpc	r17, r31
     24e:	80 f3       	brcs	.-32     	; 0x230 <transmitSensorData+0xc6>
     250:	6e 01       	movw	r12, r28
     252:	f3 e3       	ldi	r31, 0x33	; 51
     254:	cf 0e       	add	r12, r31
     256:	d1 1c       	adc	r13, r1
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     25c:	76 01       	movw	r14, r12
     25e:	06 c0       	rjmp	.+12     	; 0x26c <transmitSensorData+0x102>
		USART_Transmit(cliffSensors[i]); 
     260:	f6 01       	movw	r30, r12
     262:	81 91       	ld	r24, Z+
     264:	6f 01       	movw	r12, r30
     266:	31 d5       	rcall	.+2658   	; 0xcca <USART_Transmit>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     268:	0f 5f       	subi	r16, 0xFF	; 255
     26a:	1f 4f       	sbci	r17, 0xFF	; 255
     26c:	f7 01       	movw	r30, r14
     26e:	01 90       	ld	r0, Z+
     270:	00 20       	and	r0, r0
     272:	e9 f7       	brne	.-6      	; 0x26e <transmitSensorData+0x104>
     274:	31 97       	sbiw	r30, 0x01	; 1
     276:	ee 19       	sub	r30, r14
     278:	ff 09       	sbc	r31, r15
     27a:	0e 17       	cp	r16, r30
     27c:	1f 07       	cpc	r17, r31
     27e:	80 f3       	brcs	.-32     	; 0x260 <transmitSensorData+0xf6>
     280:	6e 01       	movw	r12, r28
     282:	f7 e9       	ldi	r31, 0x97	; 151
     284:	cf 0e       	add	r12, r31
     286:	d1 1c       	adc	r13, r1
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     28c:	76 01       	movw	r14, r12
     28e:	06 c0       	rjmp	.+12     	; 0x29c <transmitSensorData+0x132>
		USART_Transmit(cliffSignals[i]);
     290:	f6 01       	movw	r30, r12
     292:	81 91       	ld	r24, Z+
     294:	6f 01       	movw	r12, r30
     296:	19 d5       	rcall	.+2610   	; 0xcca <USART_Transmit>
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     298:	0f 5f       	subi	r16, 0xFF	; 255
     29a:	1f 4f       	sbci	r17, 0xFF	; 255
     29c:	f7 01       	movw	r30, r14
     29e:	01 90       	ld	r0, Z+
     2a0:	00 20       	and	r0, r0
     2a2:	e9 f7       	brne	.-6      	; 0x29e <transmitSensorData+0x134>
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	ee 19       	sub	r30, r14
     2a8:	ff 09       	sbc	r31, r15
     2aa:	0e 17       	cp	r16, r30
     2ac:	1f 07       	cpc	r17, r31
     2ae:	80 f3       	brcs	.-32     	; 0x290 <transmitSensorData+0x126>
		USART_Transmit(cliffSignals[i]);
	}
}
     2b0:	c6 50       	subi	r28, 0x06	; 6
     2b2:	df 4f       	sbci	r29, 0xFF	; 255
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	08 95       	ret

000002d0 <scanForObjects>:

object_t * scanForObjects()
{
     2d0:	2f 92       	push	r2
     2d2:	3f 92       	push	r3
     2d4:	4f 92       	push	r4
     2d6:	5f 92       	push	r5
     2d8:	6f 92       	push	r6
     2da:	7f 92       	push	r7
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	c6 54       	subi	r28, 0x46	; 70
     2fa:	d1 09       	sbc	r29, r1
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     306:	8c e3       	ldi	r24, 0x3C	; 60
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 6d 0b 	call	0x16da	; 0x16da <malloc>
     30e:	3c 01       	movw	r6, r24

	while(degrees <= 180)
    {	
		move_servo(degrees);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	de d4       	rcall	.+2492   	; 0xcd2 <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     316:	80 e2       	ldi	r24, 0x20	; 32
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	9a d4       	rcall	.+2356   	; 0xc50 <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     320:	a1 2c       	mov	r10, r1
     322:	b1 2c       	mov	r11, r1
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     324:	81 2c       	mov	r8, r1
     326:	91 2c       	mov	r9, r1
object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
     328:	e1 2c       	mov	r14, r1
     32a:	f1 2c       	mov	r15, r1

object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
     32c:	cc 24       	eor	r12, r12
     32e:	ca 94       	dec	r12
     330:	dc 2c       	mov	r13, r12
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     332:	c8 01       	movw	r24, r16
     334:	ce d4       	rcall	.+2460   	; 0xcd2 <move_servo>
			sonarDistance = getPingDistance();
     336:	3b d5       	rcall	.+2678   	; 0xdae <getPingDistance>
     338:	48 2e       	mov	r4, r24
     33a:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     33c:	73 d5       	rcall	.+2790   	; 0xe24 <getIrDistance>
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     33e:	85 36       	cpi	r24, 0x65	; 101
     340:	91 05       	cpc	r25, r1
     342:	0c f0       	brlt	.+2      	; 0x346 <scanForObjects+0x76>
     344:	95 c0       	rjmp	.+298    	; 0x470 <scanForObjects+0x1a0>
     346:	e1 14       	cp	r14, r1
     348:	f1 04       	cpc	r15, r1
     34a:	09 f0       	breq	.+2      	; 0x34e <scanForObjects+0x7e>
     34c:	53 c0       	rjmp	.+166    	; 0x3f4 <scanForObjects+0x124>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	c8 1a       	sub	r12, r24
     352:	d8 0a       	sbc	r13, r24
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     354:	a4 2c       	mov	r10, r4
     356:	b5 2c       	mov	r11, r5
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     358:	48 01       	movw	r8, r16
			move_servo(degrees);
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     35a:	ee 24       	eor	r14, r14
     35c:	e3 94       	inc	r14
     35e:	f1 2c       	mov	r15, r1
     360:	49 c0       	rjmp	.+146    	; 0x3f4 <scanForObjects+0x124>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     362:	76 01       	movw	r14, r12
     364:	ee 0c       	add	r14, r14
     366:	ff 1c       	adc	r15, r15
     368:	ec 0c       	add	r14, r12
     36a:	fd 1c       	adc	r15, r13
     36c:	ee 0c       	add	r14, r14
     36e:	ff 1c       	adc	r15, r15
     370:	e6 0c       	add	r14, r6
     372:	f7 1c       	adc	r15, r7
     374:	c4 01       	movw	r24, r8
     376:	80 0f       	add	r24, r16
     378:	91 1f       	adc	r25, r17
     37a:	99 23       	and	r25, r25
     37c:	0c f4       	brge	.+2      	; 0x380 <scanForObjects+0xb0>
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	95 95       	asr	r25
     382:	87 95       	ror	r24
     384:	f7 01       	movw	r30, r14
     386:	93 83       	std	Z+3, r25	; 0x03
     388:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     38a:	b5 01       	movw	r22, r10
     38c:	88 27       	eor	r24, r24
     38e:	77 fd       	sbrc	r23, 7
     390:	80 95       	com	r24
     392:	98 2f       	mov	r25, r24
     394:	7a d6       	rcall	.+3316   	; 0x108a <__floatsisf>
     396:	9b 01       	movw	r18, r22
     398:	ac 01       	movw	r20, r24
     39a:	3c d7       	rcall	.+3704   	; 0x1214 <__mulsf3>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	72 d5       	rcall	.+2788   	; 0xe86 <__addsf3>
     3a2:	1b 01       	movw	r2, r22
     3a4:	2c 01       	movw	r4, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     3a6:	c4 01       	movw	r24, r8
     3a8:	80 1b       	sub	r24, r16
     3aa:	91 0b       	sbc	r25, r17
     3ac:	bc 01       	movw	r22, r24
     3ae:	22 f4       	brpl	.+8      	; 0x3b8 <scanForObjects+0xe8>
     3b0:	66 27       	eor	r22, r22
     3b2:	77 27       	eor	r23, r23
     3b4:	68 1b       	sub	r22, r24
     3b6:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     3b8:	88 27       	eor	r24, r24
     3ba:	77 fd       	sbrc	r23, 7
     3bc:	80 95       	com	r24
     3be:	98 2f       	mov	r25, r24
     3c0:	64 d6       	rcall	.+3272   	; 0x108a <__floatsisf>
     3c2:	c5 d5       	rcall	.+2954   	; 0xf4e <cos>
     3c4:	9b 01       	movw	r18, r22
     3c6:	ac 01       	movw	r20, r24
     3c8:	c2 01       	movw	r24, r4
     3ca:	b1 01       	movw	r22, r2
     3cc:	23 d7       	rcall	.+3654   	; 0x1214 <__mulsf3>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c2 01       	movw	r24, r4
     3d4:	b1 01       	movw	r22, r2
     3d6:	56 d5       	rcall	.+2732   	; 0xe84 <__subsf3>
     3d8:	d0 d7       	rcall	.+4000   	; 0x137a <sqrt>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 eb       	ldi	r20, 0xB0	; 176
     3e0:	50 e4       	ldi	r21, 0x40	; 64
     3e2:	b8 d5       	rcall	.+2928   	; 0xf54 <__divsf3>
     3e4:	1f d6       	rcall	.+3134   	; 0x1024 <__fixsfsi>
     3e6:	f7 01       	movw	r30, r14
     3e8:	71 83       	std	Z+1, r23	; 0x01
     3ea:	60 83       	st	Z, r22
				objects[currObjectIndex].distance = lastSonarDistance;					
     3ec:	b5 82       	std	Z+5, r11	; 0x05
     3ee:	a4 82       	std	Z+4, r10	; 0x04
				inObject = 0;											//Sensor is no longer on an object
     3f0:	e1 2c       	mov	r14, r1
     3f2:	f1 2c       	mov	r15, r1
			}	
		
			degrees += 2;
     3f4:	0e 5f       	subi	r16, 0xFE	; 254
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
			wait_ms(200);
     3f8:	88 ec       	ldi	r24, 0xC8	; 200
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	29 d4       	rcall	.+2130   	; 0xc50 <wait_ms>

	while(degrees <= 180)
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     3fe:	06 3b       	cpi	r16, 0xB6	; 182
     400:	11 05       	cpc	r17, r1
     402:	09 f0       	breq	.+2      	; 0x406 <scanForObjects+0x136>
     404:	96 cf       	rjmp	.-212    	; 0x332 <scanForObjects+0x62>
     406:	3a c0       	rjmp	.+116    	; 0x47c <scanForObjects+0x1ac>
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     408:	f5 01       	movw	r30, r10
     40a:	83 81       	ldd	r24, Z+3	; 0x03
     40c:	8f 93       	push	r24
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	8f 93       	push	r24
     412:	81 81       	ldd	r24, Z+1	; 0x01
     414:	8f 93       	push	r24
     416:	80 81       	ld	r24, Z
     418:	8f 93       	push	r24
     41a:	85 81       	ldd	r24, Z+5	; 0x05
     41c:	8f 93       	push	r24
     41e:	84 81       	ldd	r24, Z+4	; 0x04
     420:	8f 93       	push	r24
     422:	5f 92       	push	r5
     424:	4f 92       	push	r4
     426:	ff 92       	push	r15
     428:	ef 92       	push	r14
     42a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <sprintf>
     42e:	c2 2c       	mov	r12, r2
     430:	d3 2c       	mov	r13, r3
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	06 c0       	rjmp	.+12     	; 0x44e <scanForObjects+0x17e>
			USART_Transmit(output[i]);
     442:	f6 01       	movw	r30, r12
     444:	81 91       	ld	r24, Z+
     446:	6f 01       	movw	r12, r30
     448:	40 d4       	rcall	.+2176   	; 0xcca <USART_Transmit>
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     44a:	0f 5f       	subi	r16, 0xFF	; 255
     44c:	1f 4f       	sbci	r17, 0xFF	; 255
     44e:	f7 01       	movw	r30, r14
     450:	01 90       	ld	r0, Z+
     452:	00 20       	and	r0, r0
     454:	e9 f7       	brne	.-6      	; 0x450 <scanForObjects+0x180>
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	ee 19       	sub	r30, r14
     45a:	ff 09       	sbc	r31, r15
     45c:	0e 17       	cp	r16, r30
     45e:	1f 07       	cpc	r17, r31
     460:	80 f3       	brcs	.-32     	; 0x442 <scanForObjects+0x172>
     462:	f6 e0       	ldi	r31, 0x06	; 6
     464:	af 0e       	add	r10, r31
     466:	b1 1c       	adc	r11, r1
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     468:	a8 14       	cp	r10, r8
     46a:	b9 04       	cpc	r11, r9
     46c:	69 f6       	brne	.-102    	; 0x408 <scanForObjects+0x138>
     46e:	20 c0       	rjmp	.+64     	; 0x4b0 <scanForObjects+0x1e0>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	e8 16       	cp	r14, r24
     474:	f1 04       	cpc	r15, r1
     476:	09 f0       	breq	.+2      	; 0x47a <scanForObjects+0x1aa>
     478:	bd cf       	rjmp	.-134    	; 0x3f4 <scanForObjects+0x124>
     47a:	73 cf       	rjmp	.-282    	; 0x362 <scanForObjects+0x92>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     47c:	1c 14       	cp	r1, r12
     47e:	1d 04       	cpc	r1, r13
     480:	bc f4       	brge	.+46     	; 0x4b0 <scanForObjects+0x1e0>
     482:	53 01       	movw	r10, r6
     484:	46 01       	movw	r8, r12
     486:	88 0c       	add	r8, r8
     488:	99 1c       	adc	r9, r9
     48a:	c8 0c       	add	r12, r8
     48c:	d9 1c       	adc	r13, r9
     48e:	46 01       	movw	r8, r12
     490:	88 0c       	add	r8, r8
     492:	99 1c       	adc	r9, r9
     494:	86 0c       	add	r8, r6
     496:	97 1c       	adc	r9, r7
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     498:	0f 2e       	mov	r0, r31
     49a:	f2 ed       	ldi	r31, 0xD2	; 210
     49c:	4f 2e       	mov	r4, r31
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	5f 2e       	mov	r5, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	fe 01       	movw	r30, r28
     4a6:	31 96       	adiw	r30, 0x01	; 1
     4a8:	7f 01       	movw	r14, r30
     4aa:	2e 2e       	mov	r2, r30
     4ac:	3f 2c       	mov	r3, r15
     4ae:	ac cf       	rjmp	.-168    	; 0x408 <scanForObjects+0x138>
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
			USART_Transmit(output[i]);
		}
	}
	return objects;
}
     4b0:	c3 01       	movw	r24, r6
     4b2:	ca 5b       	subi	r28, 0xBA	; 186
     4b4:	df 4f       	sbci	r29, 0xFF	; 255
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	7f 90       	pop	r7
     4da:	6f 90       	pop	r6
     4dc:	5f 90       	pop	r5
     4de:	4f 90       	pop	r4
     4e0:	3f 90       	pop	r3
     4e2:	2f 90       	pop	r2
     4e4:	08 95       	ret

000004e6 <getCommand>:
		//TODO:: Please write your application code 
    }
}

void getCommand(oi_t *sensor_data)
{
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	27 97       	sbiw	r28, 0x07	; 7
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     504:	de d3       	rcall	.+1980   	; 0xcc2 <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     506:	82 37       	cpi	r24, 0x72	; 114
     508:	39 f0       	breq	.+14     	; 0x518 <getCommand+0x32>
     50a:	83 37       	cpi	r24, 0x73	; 115
     50c:	09 f4       	brne	.+2      	; 0x510 <getCommand+0x2a>
     50e:	3e c0       	rjmp	.+124    	; 0x58c <getCommand+0xa6>
     510:	8d 36       	cpi	r24, 0x6D	; 109
     512:	09 f0       	breq	.+2      	; 0x516 <getCommand+0x30>
     514:	43 c0       	rjmp	.+134    	; 0x59c <getCommand+0xb6>
     516:	1e c0       	rjmp	.+60     	; 0x554 <getCommand+0x6e>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     518:	d4 d3       	rcall	.+1960   	; 0xcc2 <USART_Receive>
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	d2 d3       	rcall	.+1956   	; 0xcc2 <USART_Receive>
     51e:	8a 83       	std	Y+2, r24	; 0x02
     520:	d0 d3       	rcall	.+1952   	; 0xcc2 <USART_Receive>
     522:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     52c:	e8 2e       	mov	r14, r24
     52e:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	2c e0       	ldi	r18, 0x0C	; 12
     536:	32 e0       	ldi	r19, 0x02	; 2
     538:	3f 93       	push	r19
     53a:	2f 93       	push	r18
     53c:	e9 d0       	rcall	.+466    	; 0x710 <lprintf>
				turn_clockwise(sensor_data, degrees);
     53e:	6e 2d       	mov	r22, r14
     540:	7f 2d       	mov	r23, r15
     542:	c8 01       	movw	r24, r16
     544:	de d1       	rcall	.+956    	; 0x902 <turn_clockwise>
				transmitSensorData(sensor_data);
     546:	c8 01       	movw	r24, r16
     548:	10 de       	rcall	.-992    	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	26 c0       	rjmp	.+76     	; 0x5a0 <getCommand+0xba>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     554:	b6 d3       	rcall	.+1900   	; 0xcc2 <USART_Receive>
     556:	8d 83       	std	Y+5, r24	; 0x05
     558:	b4 d3       	rcall	.+1896   	; 0xcc2 <USART_Receive>
     55a:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     55c:	ce 01       	movw	r24, r28
     55e:	05 96       	adiw	r24, 0x05	; 5
     560:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     564:	e8 2e       	mov	r14, r24
     566:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	28 e1       	ldi	r18, 0x18	; 24
     56e:	32 e0       	ldi	r19, 0x02	; 2
     570:	3f 93       	push	r19
     572:	2f 93       	push	r18
     574:	cd d0       	rcall	.+410    	; 0x710 <lprintf>
				move_forward(sensor_data, distance);
     576:	6e 2d       	mov	r22, r14
     578:	7f 2d       	mov	r23, r15
     57a:	c8 01       	movw	r24, r16
     57c:	6c d1       	rcall	.+728    	; 0x856 <move_forward>
				transmitSensorData(sensor_data);
     57e:	c8 01       	movw	r24, r16
     580:	f4 dd       	rcall	.-1048   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0a c0       	rjmp	.+20     	; 0x5a0 <getCommand+0xba>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     58c:	a1 de       	rcall	.-702    	; 0x2d0 <scanForObjects>
     58e:	7c 01       	movw	r14, r24
				transmitSensorData(sensor_data);
     590:	c8 01       	movw	r24, r16
     592:	eb dd       	rcall	.-1066   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				free(foundObjects);
     594:	c7 01       	movw	r24, r14
     596:	0e 94 05 0c 	call	0x180a	; 0x180a <free>
				break;
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <getCommand+0xba>
			default:
				command = USART_Receive();
     59c:	92 d3       	rcall	.+1828   	; 0xcc2 <USART_Receive>
     59e:	b3 cf       	rjmp	.-154    	; 0x506 <getCommand+0x20>
		}	
	}
}
     5a0:	27 96       	adiw	r28, 0x07	; 7
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	08 95       	ret

000005ba <main>:
object_t * scanForObjects();

unsigned long time_diff;

int main(void)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	68 97       	sbiw	r28, 0x18	; 24
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
    lcd_init();
     5ce:	4f d0       	rcall	.+158    	; 0x66e <lcd_init>
    ADC_init();
     5d0:	1e d4       	rcall	.+2108   	; 0xe0e <ADC_init>
    pinginit();
     5d2:	e9 d3       	rcall	.+2002   	; 0xda6 <pinginit>
    timer3_init();
     5d4:	8c d3       	rcall	.+1816   	; 0xcee <timer3_init>
	USART_init();
     5d6:	69 d3       	rcall	.+1746   	; 0xcaa <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     5d8:	b6 d1       	rcall	.+876    	; 0x946 <oi_alloc>
     5da:	8c 01       	movw	r16, r24
	oi_init(sensor_data);
     5dc:	f1 d2       	rcall	.+1506   	; 0xbc0 <oi_init>
	
	unsigned char notes[12]    = {98, 103, 105, 108, 107, 105, 103, 103, 98, 103, 105, 105};
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	e6 e0       	ldi	r30, 0x06	; 6
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	de 01       	movw	r26, r28
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	01 90       	ld	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	8a 95       	dec	r24
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <main+0x2e>
	unsigned char duration[12] = {64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 256};
     5f0:	8c e0       	ldi	r24, 0x0C	; 12
     5f2:	e2 e1       	ldi	r30, 0x12	; 18
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	de 01       	movw	r26, r28
     5f8:	1d 96       	adiw	r26, 0x0d	; 13
     5fa:	01 90       	ld	r0, Z+
     5fc:	0d 92       	st	X+, r0
     5fe:	8a 95       	dec	r24
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x40>
	
// 	unsigned char notes[26]  = {72, 67, 69, 67,  0, 72, 67, 69, 67,  0, 72, 72, 72, 72,  0, 72, 72, 72, 72,  0, 72, 71, 72, 71, 72};
// 	unsigned char duration[26]={64, 16, 16, 16, 40, 64, 16, 16, 16, 40, 8,   8, 16, 16, 16, 8,   8, 16, 16, 16, 20, 20, 32, 20, 96};
 		
	oi_load_song(0, 12, notes, duration);
     602:	9e 01       	movw	r18, r28
     604:	23 5f       	subi	r18, 0xF3	; 243
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	ae 01       	movw	r20, r28
     60a:	4f 5f       	subi	r20, 0xFF	; 255
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	6c e0       	ldi	r22, 0x0C	; 12
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	d8 d1       	rcall	.+944    	; 0x9c8 <oi_load_song>
	oi_play_song(0);
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	06 d2       	rcall	.+1036   	; 0xa2a <oi_play_song>
	
	while(1)
    {
		getCommand(sensor_data);
     61e:	c8 01       	movw	r24, r16
     620:	62 df       	rcall	.-316    	; 0x4e6 <getCommand>
     622:	fd cf       	rjmp	.-6      	; 0x61e <main+0x64>

00000624 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     624:	de 9a       	sbi	0x1b, 6	; 27
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	13 d3       	rcall	.+1574   	; 0xc50 <wait_ms>
     62a:	de 98       	cbi	0x1b, 6	; 27
     62c:	8b b3       	in	r24, 0x1b	; 27
     62e:	80 7f       	andi	r24, 0xF0	; 240
     630:	8b bb       	out	0x1b, r24	; 27
     632:	08 95       	ret

00000634 <lcd_command>:
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
     638:	dc 98       	cbi	0x1b, 4	; 27
     63a:	8b b3       	in	r24, 0x1b	; 27
     63c:	9c 2f       	mov	r25, r28
     63e:	92 95       	swap	r25
     640:	9f 70       	andi	r25, 0x0F	; 15
     642:	89 2b       	or	r24, r25
     644:	8b bb       	out	0x1b, r24	; 27
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	ed df       	rcall	.-38     	; 0x624 <lcd_toggle_clear>
     64a:	8b b3       	in	r24, 0x1b	; 27
     64c:	cf 70       	andi	r28, 0x0F	; 15
     64e:	c8 2b       	or	r28, r24
     650:	cb bb       	out	0x1b, r28	; 27
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	e7 df       	rcall	.-50     	; 0x624 <lcd_toggle_clear>
     656:	dc 9a       	sbi	0x1b, 4	; 27
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <lcd_clear>:
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	ea df       	rcall	.-44     	; 0x634 <lcd_command>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	f5 c2       	rjmp	.+1514   	; 0xc50 <wait_ms>
     666:	08 95       	ret

00000668 <lcd_home_line1>:
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	e4 cf       	rjmp	.-56     	; 0x634 <lcd_command>
     66c:	08 95       	ret

0000066e <lcd_init>:
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	8a bb       	out	0x1a, r24	; 26
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	8b bb       	out	0x1b, r24	; 27
     676:	de 9a       	sbi	0x1b, 6	; 27
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	e9 d2       	rcall	.+1490   	; 0xc50 <wait_ms>
     67e:	de 98       	cbi	0x1b, 6	; 27
     680:	85 e0       	ldi	r24, 0x05	; 5
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	e5 d2       	rcall	.+1482   	; 0xc50 <wait_ms>
     686:	de 9a       	sbi	0x1b, 6	; 27
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	e1 d2       	rcall	.+1474   	; 0xc50 <wait_ms>
     68e:	de 98       	cbi	0x1b, 6	; 27
     690:	de 9a       	sbi	0x1b, 6	; 27
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	dc d2       	rcall	.+1464   	; 0xc50 <wait_ms>
     698:	de 98       	cbi	0x1b, 6	; 27
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	8b bb       	out	0x1b, r24	; 27
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	c1 df       	rcall	.-126    	; 0x624 <lcd_toggle_clear>
     6a2:	8b b3       	in	r24, 0x1b	; 27
     6a4:	8b bb       	out	0x1b, r24	; 27
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	bd df       	rcall	.-134    	; 0x624 <lcd_toggle_clear>
     6aa:	8b b3       	in	r24, 0x1b	; 27
     6ac:	8e 60       	ori	r24, 0x0E	; 14
     6ae:	8b bb       	out	0x1b, r24	; 27
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	b8 df       	rcall	.-144    	; 0x624 <lcd_toggle_clear>
     6b4:	8b b3       	in	r24, 0x1b	; 27
     6b6:	8b bb       	out	0x1b, r24	; 27
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	b4 df       	rcall	.-152    	; 0x624 <lcd_toggle_clear>
     6bc:	8b b3       	in	r24, 0x1b	; 27
     6be:	86 60       	ori	r24, 0x06	; 6
     6c0:	8b bb       	out	0x1b, r24	; 27
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	af df       	rcall	.-162    	; 0x624 <lcd_toggle_clear>
     6c6:	8b b3       	in	r24, 0x1b	; 27
     6c8:	8b bb       	out	0x1b, r24	; 27
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	ab df       	rcall	.-170    	; 0x624 <lcd_toggle_clear>
     6ce:	d8 9a       	sbi	0x1b, 0	; 27
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	a8 df       	rcall	.-176    	; 0x624 <lcd_toggle_clear>
     6d4:	dc 9a       	sbi	0x1b, 4	; 27
     6d6:	c8 cf       	rjmp	.-112    	; 0x668 <lcd_home_line1>
     6d8:	08 95       	ret

000006da <lcd_home_line2>:
     6da:	80 ec       	ldi	r24, 0xC0	; 192
     6dc:	ab cf       	rjmp	.-170    	; 0x634 <lcd_command>
     6de:	08 95       	ret

000006e0 <lcd_home_line3>:
     6e0:	84 e9       	ldi	r24, 0x94	; 148
     6e2:	a8 cf       	rjmp	.-176    	; 0x634 <lcd_command>
     6e4:	08 95       	ret

000006e6 <lcd_home_line4>:
     6e6:	84 ed       	ldi	r24, 0xD4	; 212
     6e8:	a5 cf       	rjmp	.-182    	; 0x634 <lcd_command>
     6ea:	08 95       	ret

000006ec <lcd_putc>:
     6ec:	cf 93       	push	r28
     6ee:	c8 2f       	mov	r28, r24
     6f0:	8b b3       	in	r24, 0x1b	; 27
     6f2:	9c 2f       	mov	r25, r28
     6f4:	92 95       	swap	r25
     6f6:	9f 70       	andi	r25, 0x0F	; 15
     6f8:	89 2b       	or	r24, r25
     6fa:	8b bb       	out	0x1b, r24	; 27
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	92 df       	rcall	.-220    	; 0x624 <lcd_toggle_clear>
     700:	8b b3       	in	r24, 0x1b	; 27
     702:	cf 70       	andi	r28, 0x0F	; 15
     704:	c8 2b       	or	r28, r24
     706:	cb bb       	out	0x1b, r28	; 27
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	8c df       	rcall	.-232    	; 0x624 <lcd_toggle_clear>
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	c1 55       	subi	r28, 0x51	; 81
     726:	d1 09       	sbc	r29, r1
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	fe 01       	movw	r30, r28
     734:	e4 5a       	subi	r30, 0xA4	; 164
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	41 91       	ld	r20, Z+
     73a:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     73c:	9f 01       	movw	r18, r30
     73e:	61 e5       	ldi	r22, 0x51	; 81
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	86 e2       	ldi	r24, 0x26	; 38
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     758:	89 2b       	or	r24, r25
     75a:	09 f4       	brne	.+2      	; 0x75e <lprintf+0x4e>
     75c:	40 c0       	rjmp	.+128    	; 0x7de <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     75e:	be 01       	movw	r22, r28
     760:	6f 5f       	subi	r22, 0xFF	; 255
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	86 e2       	ldi	r24, 0x26	; 38
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 c1 0c 	call	0x1982	; 0x1982 <strcpy>
	lcd_clear();
     76c:	77 df       	rcall	.-274    	; 0x65c <lcd_clear>
     76e:	9e 01       	movw	r18, r28
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     776:	00 e0       	ldi	r16, 0x00	; 0
     778:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     77a:	0f 2e       	mov	r0, r31
     77c:	f4 e1       	ldi	r31, 0x14	; 20
     77e:	ef 2e       	mov	r14, r31
     780:	f1 2c       	mov	r15, r1
     782:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     784:	24 c0       	rjmp	.+72     	; 0x7ce <lprintf+0xbe>
		if (*str == '\n') {
     786:	8a 30       	cpi	r24, 0x0A	; 10
     788:	49 f4       	brne	.+18     	; 0x79c <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     78a:	c8 01       	movw	r24, r16
     78c:	b7 01       	movw	r22, r14
     78e:	64 d7       	rcall	.+3784   	; 0x1658 <__divmodhi4>
     790:	f7 01       	movw	r30, r14
     792:	e8 1b       	sub	r30, r24
     794:	f9 0b       	sbc	r31, r25
     796:	0e 0f       	add	r16, r30
     798:	1f 1f       	adc	r17, r31
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     79c:	a7 df       	rcall	.-178    	; 0x6ec <lcd_putc>
			charnum++;
     79e:	0f 5f       	subi	r16, 0xFF	; 255
     7a0:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     7a2:	c8 01       	movw	r24, r16
     7a4:	b7 01       	movw	r22, r14
     7a6:	58 d7       	rcall	.+3760   	; 0x1658 <__divmodhi4>
     7a8:	89 2b       	or	r24, r25
     7aa:	89 f4       	brne	.+34     	; 0x7ce <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     7ac:	c8 01       	movw	r24, r16
     7ae:	b7 01       	movw	r22, r14
     7b0:	53 d7       	rcall	.+3750   	; 0x1658 <__divmodhi4>
     7b2:	62 30       	cpi	r22, 0x02	; 2
     7b4:	71 05       	cpc	r23, r1
     7b6:	41 f0       	breq	.+16     	; 0x7c8 <lprintf+0xb8>
     7b8:	63 30       	cpi	r22, 0x03	; 3
     7ba:	71 05       	cpc	r23, r1
     7bc:	39 f0       	breq	.+14     	; 0x7cc <lprintf+0xbc>
     7be:	61 30       	cpi	r22, 0x01	; 1
     7c0:	71 05       	cpc	r23, r1
     7c2:	29 f4       	brne	.+10     	; 0x7ce <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     7c4:	8a df       	rcall	.-236    	; 0x6da <lcd_home_line2>
				break;
     7c6:	03 c0       	rjmp	.+6      	; 0x7ce <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     7c8:	8b df       	rcall	.-234    	; 0x6e0 <lcd_home_line3>
				break;
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     7cc:	8c df       	rcall	.-232    	; 0x6e6 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     7ce:	f6 01       	movw	r30, r12
     7d0:	81 91       	ld	r24, Z+
     7d2:	6f 01       	movw	r12, r30
     7d4:	88 23       	and	r24, r24
     7d6:	19 f0       	breq	.+6      	; 0x7de <lprintf+0xce>
     7d8:	00 35       	cpi	r16, 0x50	; 80
     7da:	11 05       	cpc	r17, r1
     7dc:	a4 f2       	brlt	.-88     	; 0x786 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     7de:	cf 5a       	subi	r28, 0xAF	; 175
     7e0:	df 4f       	sbci	r29, 0xFF	; 255
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	08 95       	ret

000007fe <move_backward>:
		sum += sensor->distance;
	}
}

void move_backward(oi_t *sensor, int centimeters)
{
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     808:	eb 01       	movw	r28, r22
     80a:	cc 0f       	add	r28, r28
     80c:	dd 1f       	adc	r29, r29
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	66 0f       	add	r22, r22
     814:	77 1f       	adc	r23, r23
     816:	66 0f       	add	r22, r22
     818:	77 1f       	adc	r23, r23
     81a:	c6 0f       	add	r28, r22
     81c:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     81e:	68 e3       	ldi	r22, 0x38	; 56
     820:	7f ef       	ldi	r23, 0xFF	; 255
     822:	88 e3       	ldi	r24, 0x38	; 56
     824:	9f ef       	ldi	r25, 0xFF	; 255
     826:	b9 d0       	rcall	.+370    	; 0x99a <oi_set_wheels>
	while (sum > 0) {
     828:	1c 16       	cp	r1, r28
     82a:	1d 06       	cpc	r1, r29
     82c:	54 f4       	brge	.+20     	; 0x842 <move_backward+0x44>
		oi_update(sensor);
     82e:	c8 01       	movw	r24, r16
     830:	0c d1       	rcall	.+536    	; 0xa4a <oi_update>
		sum += sensor->distance;
     832:	f8 01       	movw	r30, r16
     834:	84 85       	ldd	r24, Z+12	; 0x0c
     836:	95 85       	ldd	r25, Z+13	; 0x0d
     838:	c8 0f       	add	r28, r24
     83a:	d9 1f       	adc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     83c:	1c 16       	cp	r1, r28
     83e:	1d 06       	cpc	r1, r29
     840:	b4 f3       	brlt	.-20     	; 0x82e <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a7 d0       	rcall	.+334    	; 0x99a <oi_set_wheels>
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <move_forward>:
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	8b 01       	movw	r16, r22
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
     866:	68 ec       	ldi	r22, 0xC8	; 200
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	88 ec       	ldi	r24, 0xC8	; 200
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	95 d0       	rcall	.+298    	; 0x99a <oi_set_wheels>
	while (sum < centimeters * 10) {
     870:	78 01       	movw	r14, r16
     872:	ee 0c       	add	r14, r14
     874:	ff 1c       	adc	r15, r15
     876:	00 0f       	add	r16, r16
     878:	11 1f       	adc	r17, r17
     87a:	00 0f       	add	r16, r16
     87c:	11 1f       	adc	r17, r17
     87e:	00 0f       	add	r16, r16
     880:	11 1f       	adc	r17, r17
     882:	e0 0e       	add	r14, r16
     884:	f1 1e       	adc	r15, r17
     886:	1e 14       	cp	r1, r14
     888:	1f 04       	cpc	r1, r15
     88a:	7c f5       	brge	.+94     	; 0x8ea <move_forward+0x94>
		if (sensor->bumper_left || sensor->bumper_right || sensor->cliff_left || sensor->cliff_right || sensor->cliff_frontleft || sensor ->cliff_frontright) {
     88c:	88 81       	ld	r24, Y
     88e:	83 70       	andi	r24, 0x03	; 3
     890:	e1 f4       	brne	.+56     	; 0x8ca <move_forward+0x74>
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	81 11       	cpse	r24, r1
     896:	19 c0       	rjmp	.+50     	; 0x8ca <move_forward+0x74>
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	81 11       	cpse	r24, r1
     89c:	16 c0       	rjmp	.+44     	; 0x8ca <move_forward+0x74>
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	81 11       	cpse	r24, r1
     8a2:	13 c0       	rjmp	.+38     	; 0x8ca <move_forward+0x74>
     8a4:	8c 81       	ldd	r24, Y+4	; 0x04
     8a6:	88 23       	and	r24, r24
     8a8:	a9 f0       	breq	.+42     	; 0x8d4 <move_forward+0x7e>
     8aa:	0f c0       	rjmp	.+30     	; 0x8ca <move_forward+0x74>
     8ac:	88 81       	ld	r24, Y
     8ae:	83 70       	andi	r24, 0x03	; 3
     8b0:	61 f4       	brne	.+24     	; 0x8ca <move_forward+0x74>
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	81 11       	cpse	r24, r1
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <move_forward+0x74>
     8b8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ba:	81 11       	cpse	r24, r1
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <move_forward+0x74>
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	81 11       	cpse	r24, r1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <move_forward+0x74>
     8c4:	8c 81       	ldd	r24, Y+4	; 0x04
     8c6:	88 23       	and	r24, r24
     8c8:	39 f0       	breq	.+14     	; 0x8d8 <move_forward+0x82>
			move_backward(sensor, 15);
     8ca:	6f e0       	ldi	r22, 0x0F	; 15
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
     8d0:	96 df       	rcall	.-212    	; 0x7fe <move_backward>
			//turn_clockwise(sensor, 87);
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <move_forward+0x94>
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     8d4:	00 e0       	ldi	r16, 0x00	; 0
     8d6:	10 e0       	ldi	r17, 0x00	; 0
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
		}
		oi_update(sensor);
     8d8:	ce 01       	movw	r24, r28
     8da:	b7 d0       	rcall	.+366    	; 0xa4a <oi_update>
		sum += sensor->distance;
     8dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8de:	9d 85       	ldd	r25, Y+13	; 0x0d
     8e0:	08 0f       	add	r16, r24
     8e2:	19 1f       	adc	r17, r25

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     8e4:	0e 15       	cp	r16, r14
     8e6:	1f 05       	cpc	r17, r15
     8e8:	0c f3       	brlt	.-62     	; 0x8ac <move_forward+0x56>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	53 d0       	rcall	.+166    	; 0x99a <oi_set_wheels>
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	08 95       	ret

00000902 <turn_clockwise>:
	}
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	8c 01       	movw	r16, r24
     90c:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     90e:	66 e9       	ldi	r22, 0x96	; 150
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	8a e6       	ldi	r24, 0x6A	; 106
     914:	9f ef       	ldi	r25, 0xFF	; 255
     916:	41 d0       	rcall	.+130    	; 0x99a <oi_set_wheels>
	while (sum > 0) {
     918:	1c 16       	cp	r1, r28
     91a:	1d 06       	cpc	r1, r29
     91c:	54 f4       	brge	.+20     	; 0x932 <turn_clockwise+0x30>
		oi_update(sensor);
     91e:	c8 01       	movw	r24, r16
     920:	94 d0       	rcall	.+296    	; 0xa4a <oi_update>
		sum += sensor->angle;
     922:	f8 01       	movw	r30, r16
     924:	86 85       	ldd	r24, Z+14	; 0x0e
     926:	97 85       	ldd	r25, Z+15	; 0x0f
     928:	c8 0f       	add	r28, r24
     92a:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     92c:	1c 16       	cp	r1, r28
     92e:	1d 06       	cpc	r1, r29
     930:	b4 f3       	brlt	.-20     	; 0x91e <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	2f d0       	rcall	.+94     	; 0x99a <oi_set_wheels>
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     946:	64 e3       	ldi	r22, 0x34	; 52
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	ab c6       	rjmp	.+3414   	; 0x16a6 <calloc>
     950:	08 95       	ret

00000952 <oi_byte_tx>:
     952:	eb e9       	ldi	r30, 0x9B	; 155
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	90 81       	ld	r25, Z
     958:	95 ff       	sbrs	r25, 5
     95a:	fd cf       	rjmp	.-6      	; 0x956 <oi_byte_tx+0x4>
     95c:	80 93 9c 00 	sts	0x009C, r24
     960:	08 95       	ret

00000962 <oi_set_leds>:
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	08 2f       	mov	r16, r24
     96c:	16 2f       	mov	r17, r22
     96e:	d4 2f       	mov	r29, r20
     970:	c2 2f       	mov	r28, r18
     972:	8b e8       	ldi	r24, 0x8B	; 139
     974:	ee df       	rcall	.-36     	; 0x952 <oi_byte_tx>
     976:	11 23       	and	r17, r17
     978:	29 f0       	breq	.+10     	; 0x984 <oi_set_leds+0x22>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	01 11       	cpse	r16, r1
     97e:	03 c0       	rjmp	.+6      	; 0x986 <oi_set_leds+0x24>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	01 c0       	rjmp	.+2      	; 0x986 <oi_set_leds+0x24>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	e5 df       	rcall	.-54     	; 0x952 <oi_byte_tx>
     988:	8d 2f       	mov	r24, r29
     98a:	e3 df       	rcall	.-58     	; 0x952 <oi_byte_tx>
     98c:	8c 2f       	mov	r24, r28
     98e:	e1 df       	rcall	.-62     	; 0x952 <oi_byte_tx>
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <oi_set_wheels>:
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	18 2f       	mov	r17, r24
     9a4:	09 2f       	mov	r16, r25
     9a6:	c6 2f       	mov	r28, r22
     9a8:	d7 2f       	mov	r29, r23
     9aa:	81 e9       	ldi	r24, 0x91	; 145
     9ac:	d2 df       	rcall	.-92     	; 0x952 <oi_byte_tx>
     9ae:	80 2f       	mov	r24, r16
     9b0:	d0 df       	rcall	.-96     	; 0x952 <oi_byte_tx>
     9b2:	81 2f       	mov	r24, r17
     9b4:	ce df       	rcall	.-100    	; 0x952 <oi_byte_tx>
     9b6:	8d 2f       	mov	r24, r29
     9b8:	cc df       	rcall	.-104    	; 0x952 <oi_byte_tx>
     9ba:	8c 2f       	mov	r24, r28
     9bc:	ca df       	rcall	.-108    	; 0x952 <oi_byte_tx>
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <oi_load_song>:
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	c8 2f       	mov	r28, r24
     9de:	7b 01       	movw	r14, r22
     9e0:	6a 01       	movw	r12, r20
     9e2:	a2 2e       	mov	r10, r18
     9e4:	b3 2e       	mov	r11, r19
     9e6:	8c e8       	ldi	r24, 0x8C	; 140
     9e8:	b4 df       	rcall	.-152    	; 0x952 <oi_byte_tx>
     9ea:	8c 2f       	mov	r24, r28
     9ec:	b2 df       	rcall	.-156    	; 0x952 <oi_byte_tx>
     9ee:	8e 2d       	mov	r24, r14
     9f0:	b0 df       	rcall	.-160    	; 0x952 <oi_byte_tx>
     9f2:	1e 14       	cp	r1, r14
     9f4:	1f 04       	cpc	r1, r15
     9f6:	74 f4       	brge	.+28     	; 0xa14 <oi_load_song+0x4c>
     9f8:	e6 01       	movw	r28, r12
     9fa:	0a 2d       	mov	r16, r10
     9fc:	1b 2d       	mov	r17, r11
     9fe:	ec 0c       	add	r14, r12
     a00:	fd 1c       	adc	r15, r13
     a02:	89 91       	ld	r24, Y+
     a04:	a6 df       	rcall	.-180    	; 0x952 <oi_byte_tx>
     a06:	f8 01       	movw	r30, r16
     a08:	81 91       	ld	r24, Z+
     a0a:	8f 01       	movw	r16, r30
     a0c:	a2 df       	rcall	.-188    	; 0x952 <oi_byte_tx>
     a0e:	ce 15       	cp	r28, r14
     a10:	df 05       	cpc	r29, r15
     a12:	b9 f7       	brne	.-18     	; 0xa02 <oi_load_song+0x3a>
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	08 95       	ret

00000a2a <oi_play_song>:
     a2a:	cf 93       	push	r28
     a2c:	c8 2f       	mov	r28, r24
     a2e:	8d e8       	ldi	r24, 0x8D	; 141
     a30:	90 df       	rcall	.-224    	; 0x952 <oi_byte_tx>
     a32:	8c 2f       	mov	r24, r28
     a34:	8e df       	rcall	.-228    	; 0x952 <oi_byte_tx>
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     a3a:	eb e9       	ldi	r30, 0x9B	; 155
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	88 23       	and	r24, r24
     a42:	ec f7       	brge	.-6      	; 0xa3e <oi_byte_rx+0x4>

	return UDR1;
     a44:	80 91 9c 00 	lds	r24, 0x009C
}
     a48:	08 95       	ret

00000a4a <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a58:	80 91 9b 00 	lds	r24, 0x009B
     a5c:	88 23       	and	r24, r24
     a5e:	44 f4       	brge	.+16     	; 0xa70 <oi_update+0x26>
		i = UDR1;
     a60:	ac e9       	ldi	r26, 0x9C	; 156
     a62:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a64:	eb e9       	ldi	r30, 0x9B	; 155
     a66:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     a68:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a6a:	80 81       	ld	r24, Z
     a6c:	88 23       	and	r24, r24
     a6e:	e4 f3       	brlt	.-8      	; 0xa68 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     a70:	8e e8       	ldi	r24, 0x8E	; 142
     a72:	6f df       	rcall	.-290    	; 0x952 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	6d df       	rcall	.-294    	; 0x952 <oi_byte_tx>
     a78:	e7 01       	movw	r28, r14
     a7a:	87 01       	movw	r16, r14
     a7c:	0c 5c       	subi	r16, 0xCC	; 204
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     a80:	dc df       	rcall	.-72     	; 0xa3a <oi_byte_rx>
     a82:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     a84:	c0 17       	cp	r28, r16
     a86:	d1 07       	cpc	r29, r17
     a88:	d9 f7       	brne	.-10     	; 0xa80 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     a8a:	f7 01       	movw	r30, r14
     a8c:	84 85       	ldd	r24, Z+12	; 0x0c
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	98 2f       	mov	r25, r24
     a92:	88 27       	eor	r24, r24
     a94:	25 85       	ldd	r18, Z+13	; 0x0d
     a96:	82 0f       	add	r24, r18
     a98:	91 1d       	adc	r25, r1
     a9a:	95 87       	std	Z+13, r25	; 0x0d
     a9c:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     a9e:	86 85       	ldd	r24, Z+14	; 0x0e
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	98 2f       	mov	r25, r24
     aa4:	88 27       	eor	r24, r24
     aa6:	27 85       	ldd	r18, Z+15	; 0x0f
     aa8:	82 0f       	add	r24, r18
     aaa:	91 1d       	adc	r25, r1
     aac:	97 87       	std	Z+15, r25	; 0x0f
     aae:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     ab0:	81 89       	ldd	r24, Z+17	; 0x11
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	98 2f       	mov	r25, r24
     ab6:	88 27       	eor	r24, r24
     ab8:	22 89       	ldd	r18, Z+18	; 0x12
     aba:	82 0f       	add	r24, r18
     abc:	91 1d       	adc	r25, r1
     abe:	92 8b       	std	Z+18, r25	; 0x12
     ac0:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     ac2:	83 89       	ldd	r24, Z+19	; 0x13
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	98 2f       	mov	r25, r24
     ac8:	88 27       	eor	r24, r24
     aca:	24 89       	ldd	r18, Z+20	; 0x14
     acc:	82 0f       	add	r24, r18
     ace:	91 1d       	adc	r25, r1
     ad0:	94 8b       	std	Z+20, r25	; 0x14
     ad2:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     ad4:	86 89       	ldd	r24, Z+22	; 0x16
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	98 2f       	mov	r25, r24
     ada:	88 27       	eor	r24, r24
     adc:	27 89       	ldd	r18, Z+23	; 0x17
     ade:	82 0f       	add	r24, r18
     ae0:	91 1d       	adc	r25, r1
     ae2:	97 8b       	std	Z+23, r25	; 0x17
     ae4:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     ae6:	80 8d       	ldd	r24, Z+24	; 0x18
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	98 2f       	mov	r25, r24
     aec:	88 27       	eor	r24, r24
     aee:	21 8d       	ldd	r18, Z+25	; 0x19
     af0:	82 0f       	add	r24, r18
     af2:	91 1d       	adc	r25, r1
     af4:	91 8f       	std	Z+25, r25	; 0x19
     af6:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     af8:	82 8d       	ldd	r24, Z+26	; 0x1a
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	98 2f       	mov	r25, r24
     afe:	88 27       	eor	r24, r24
     b00:	23 8d       	ldd	r18, Z+27	; 0x1b
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	93 8f       	std	Z+27, r25	; 0x1b
     b08:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     b0a:	84 8d       	ldd	r24, Z+28	; 0x1c
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	98 2f       	mov	r25, r24
     b10:	88 27       	eor	r24, r24
     b12:	25 8d       	ldd	r18, Z+29	; 0x1d
     b14:	82 0f       	add	r24, r18
     b16:	91 1d       	adc	r25, r1
     b18:	95 8f       	std	Z+29, r25	; 0x1d
     b1a:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     b1c:	86 8d       	ldd	r24, Z+30	; 0x1e
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	98 2f       	mov	r25, r24
     b22:	88 27       	eor	r24, r24
     b24:	27 8d       	ldd	r18, Z+31	; 0x1f
     b26:	82 0f       	add	r24, r18
     b28:	91 1d       	adc	r25, r1
     b2a:	97 8f       	std	Z+31, r25	; 0x1f
     b2c:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     b2e:	80 a1       	ldd	r24, Z+32	; 0x20
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	98 2f       	mov	r25, r24
     b34:	88 27       	eor	r24, r24
     b36:	21 a1       	ldd	r18, Z+33	; 0x21
     b38:	82 0f       	add	r24, r18
     b3a:	91 1d       	adc	r25, r1
     b3c:	91 a3       	std	Z+33, r25	; 0x21
     b3e:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     b40:	82 a1       	ldd	r24, Z+34	; 0x22
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	98 2f       	mov	r25, r24
     b46:	88 27       	eor	r24, r24
     b48:	23 a1       	ldd	r18, Z+35	; 0x23
     b4a:	82 0f       	add	r24, r18
     b4c:	91 1d       	adc	r25, r1
     b4e:	93 a3       	std	Z+35, r25	; 0x23
     b50:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     b52:	82 a5       	ldd	r24, Z+42	; 0x2a
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	21 a5       	ldd	r18, Z+41	; 0x29
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	32 2f       	mov	r19, r18
     b5c:	22 27       	eor	r18, r18
     b5e:	28 0f       	add	r18, r24
     b60:	39 1f       	adc	r19, r25
     b62:	36 a3       	std	Z+38, r19	; 0x26
     b64:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     b66:	20 a9       	ldd	r18, Z+48	; 0x30
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	32 2f       	mov	r19, r18
     b6c:	22 27       	eor	r18, r18
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	95 a7       	std	Z+45, r25	; 0x2d
     b74:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     b76:	82 a9       	ldd	r24, Z+50	; 0x32
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	98 2f       	mov	r25, r24
     b7c:	88 27       	eor	r24, r24
     b7e:	23 a9       	ldd	r18, Z+51	; 0x33
     b80:	82 0f       	add	r24, r18
     b82:	91 1d       	adc	r25, r1
     b84:	97 a7       	std	Z+47, r25	; 0x2f
     b86:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     b88:	84 a9       	ldd	r24, Z+52	; 0x34
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	98 2f       	mov	r25, r24
     b8e:	88 27       	eor	r24, r24
     b90:	25 a9       	ldd	r18, Z+53	; 0x35
     b92:	82 0f       	add	r24, r18
     b94:	91 1d       	adc	r25, r1
     b96:	91 ab       	std	Z+49, r25	; 0x31
     b98:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     b9a:	86 a9       	ldd	r24, Z+54	; 0x36
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	98 2f       	mov	r25, r24
     ba0:	88 27       	eor	r24, r24
     ba2:	27 a9       	ldd	r18, Z+55	; 0x37
     ba4:	82 0f       	add	r24, r18
     ba6:	91 1d       	adc	r25, r1
     ba8:	93 ab       	std	Z+51, r25	; 0x33
     baa:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     bac:	83 e2       	ldi	r24, 0x23	; 35
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	4f d0       	rcall	.+158    	; 0xc50 <wait_ms>
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     bca:	09 e9       	ldi	r16, 0x99	; 153
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	f8 01       	movw	r30, r16
     bd2:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     bd4:	88 e1       	ldi	r24, 0x18	; 24
     bd6:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     bda:	86 e0       	ldi	r24, 0x06	; 6
     bdc:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	b7 de       	rcall	.-658    	; 0x952 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     be4:	81 e8       	ldi	r24, 0x81	; 129
     be6:	b5 de       	rcall	.-662    	; 0x952 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     be8:	88 e0       	ldi	r24, 0x08	; 8
     bea:	b3 de       	rcall	.-666    	; 0x952 <oi_byte_tx>
	wait_ms(100);
     bec:	84 e6       	ldi	r24, 0x64	; 100
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	2f d0       	rcall	.+94     	; 0xc50 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     bf2:	81 e2       	ldi	r24, 0x21	; 33
     bf4:	f8 01       	movw	r30, r16
     bf6:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     bf8:	84 e8       	ldi	r24, 0x84	; 132
     bfa:	ab de       	rcall	.-682    	; 0x952 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     bfc:	2f ef       	ldi	r18, 0xFF	; 255
     bfe:	47 e0       	ldi	r20, 0x07	; 7
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	ae de       	rcall	.-676    	; 0x962 <oi_set_leds>
	
	oi_update(self);
     c06:	ce 01       	movw	r24, r28
     c08:	20 df       	rcall	.-448    	; 0xa4a <oi_update>
	oi_update(self); // call twice to clear distance/angle
     c0a:	ce 01       	movw	r24, r28
     c0c:	1e df       	rcall	.-452    	; 0xa4a <oi_update>
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <timer2_start>:
 * -1 = CCW rotation
 */
char read_shaft_encoder(void) 
{
	return 0;
}
     c18:	10 92 85 02 	sts	0x0285, r1
     c1c:	10 92 84 02 	sts	0x0284, r1
     c20:	81 11       	cpse	r24, r1
     c22:	06 c0       	rjmp	.+12     	; 0xc30 <timer2_start+0x18>
     c24:	8b e0       	ldi	r24, 0x0B	; 11
     c26:	85 bd       	out	0x25, r24	; 37
     c28:	87 b7       	in	r24, 0x37	; 55
     c2a:	80 68       	ori	r24, 0x80	; 128
     c2c:	87 bf       	out	0x37, r24	; 55
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <timer2_start+0x26>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	29 f4       	brne	.+10     	; 0xc3e <timer2_start+0x26>
     c34:	89 e0       	ldi	r24, 0x09	; 9
     c36:	85 bd       	out	0x25, r24	; 37
     c38:	87 b7       	in	r24, 0x37	; 55
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	87 bf       	out	0x37, r24	; 55
     c3e:	78 94       	sei
     c40:	08 95       	ret

00000c42 <timer2_stop>:
     c42:	87 b7       	in	r24, 0x37	; 55
     c44:	8f 77       	andi	r24, 0x7F	; 127
     c46:	87 bf       	out	0x37, r24	; 55
     c48:	85 b5       	in	r24, 0x25	; 37
     c4a:	8f 77       	andi	r24, 0x7F	; 127
     c4c:	85 bd       	out	0x25, r24	; 37
     c4e:	08 95       	ret

00000c50 <wait_ms>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	8a ef       	ldi	r24, 0xFA	; 250
     c58:	83 bd       	out	0x23, r24	; 35
     c5a:	10 92 85 02 	sts	0x0285, r1
     c5e:	10 92 84 02 	sts	0x0284, r1
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	d9 df       	rcall	.-78     	; 0xc18 <timer2_start>
     c66:	20 91 84 02 	lds	r18, 0x0284
     c6a:	30 91 85 02 	lds	r19, 0x0285
     c6e:	2c 17       	cp	r18, r28
     c70:	3d 07       	cpc	r19, r29
     c72:	c8 f3       	brcs	.-14     	; 0xc66 <wait_ms+0x16>
     c74:	e6 df       	rcall	.-52     	; 0xc42 <timer2_stop>
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <__vector_9>:
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	80 91 84 02 	lds	r24, 0x0284
     c8e:	90 91 85 02 	lds	r25, 0x0285
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	90 93 85 02 	sts	0x0285, r25
     c98:	80 93 84 02 	sts	0x0284, r24
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <USART_init>:

void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
     caa:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
     cae:	82 e2       	ldi	r24, 0x22	; 34
     cb0:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
     cb6:	8e e0       	ldi	r24, 0x0E	; 14
     cb8:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
     cbc:	88 e1       	ldi	r24, 0x18	; 24
     cbe:	8a b9       	out	0x0a, r24	; 10
     cc0:	08 95       	ret

00000cc2 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
     cc2:	5f 9b       	sbis	0x0b, 7	; 11
     cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     cc6:	8c b1       	in	r24, 0x0c	; 12
}
     cc8:	08 95       	ret

00000cca <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
     cca:	5d 9b       	sbis	0x0b, 5	; 11
     ccc:	fe cf       	rjmp	.-4      	; 0xcca <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     cce:	8c b9       	out	0x0c, r24	; 12
     cd0:	08 95       	ret

00000cd2 <move_servo>:
}
		
int move_servo(int degree)
{
	int conv = 20*degree+800;
     cd2:	24 e1       	ldi	r18, 0x14	; 20
     cd4:	ac 01       	movw	r20, r24
     cd6:	24 9f       	mul	r18, r20
     cd8:	c0 01       	movw	r24, r0
     cda:	25 9f       	mul	r18, r21
     cdc:	90 0d       	add	r25, r0
     cde:	11 24       	eor	r1, r1
     ce0:	80 5e       	subi	r24, 0xE0	; 224
     ce2:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
     ce4:	90 93 85 00 	sts	0x0085, r25
     ce8:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
     cec:	08 95       	ret

00000cee <timer3_init>:

void timer3_init(void)
{
	TCCR3A = 0b00100011;
     cee:	83 e2       	ldi	r24, 0x23	; 35
     cf0:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
     cf4:	8a e1       	ldi	r24, 0x1A	; 26
     cf6:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
     cfa:	88 ef       	ldi	r24, 0xF8	; 248
     cfc:	97 ea       	ldi	r25, 0xA7	; 167
     cfe:	90 93 87 00 	sts	0x0087, r25
     d02:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	//4250=180d //3500= 135d //2600=90d //1700 = 45d //0800 = 0d
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	90 93 85 00 	sts	0x0085, r25
     d0e:	80 93 84 00 	sts	0x0084, r24
	//wait_ms(2000);
	//OCR3B = 0b0000011111010000;
	DDRE = 0b00010000;
     d12:	80 e1       	ldi	r24, 0x10	; 16
     d14:	82 b9       	out	0x02, r24	; 2
     d16:	08 95       	ret

00000d18 <send_pulse>:
}

void send_pulse(void)
{
	DDRD |=0x10;
     d18:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     d1a:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	97 df       	rcall	.-210    	; 0xc50 <wait_ms>
	PORTD &=0xEF;
     d22:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
     d24:	8c 98       	cbi	0x11, 4	; 17
     d26:	08 95       	ret

00000d28 <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
	if(State==RISING){
     d3a:	80 91 83 02 	lds	r24, 0x0283
     d3e:	81 11       	cpse	r24, r1
     d40:	13 c0       	rjmp	.+38     	; 0xd68 <__vector_11+0x40>
		rising_time=ICR1;
     d42:	86 b5       	in	r24, 0x26	; 38
     d44:	97 b5       	in	r25, 0x27	; 39
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	80 93 7f 02 	sts	0x027F, r24
     d4e:	90 93 80 02 	sts	0x0280, r25
     d52:	a0 93 81 02 	sts	0x0281, r26
     d56:	b0 93 82 02 	sts	0x0282, r27
		State = FALLING;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 83 02 	sts	0x0283, r24
		TCCR1B &= 0b10111111;
     d60:	8e b5       	in	r24, 0x2e	; 46
     d62:	8f 7b       	andi	r24, 0xBF	; 191
     d64:	8e bd       	out	0x2e, r24	; 46
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <__vector_11+0x6c>
	}
	else if(State==FALLING){
     d68:	80 91 83 02 	lds	r24, 0x0283
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 f4       	brne	.+36     	; 0xd94 <__vector_11+0x6c>
		falling_time=ICR1;
     d70:	86 b5       	in	r24, 0x26	; 38
     d72:	97 b5       	in	r25, 0x27	; 39
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	80 93 7b 02 	sts	0x027B, r24
     d7c:	90 93 7c 02 	sts	0x027C, r25
     d80:	a0 93 7d 02 	sts	0x027D, r26
     d84:	b0 93 7e 02 	sts	0x027E, r27
		State = DONE;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	80 93 83 02 	sts	0x0283, r24
		TCCR1B |= 0b01000000;
     d8e:	8e b5       	in	r24, 0x2e	; 46
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	8e bd       	out	0x2e, r24	; 46
	}
}
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <pinginit>:

void pinginit(void)
{
	TIFR = 0b00000000;
     da6:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
     da8:	83 ec       	ldi	r24, 0xC3	; 195
     daa:	8e bd       	out	0x2e, r24	; 46
     dac:	08 95       	ret

00000dae <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
     dae:	10 92 83 02 	sts	0x0283, r1
	TIMSK &= 0b11011111;
     db2:	87 b7       	in	r24, 0x37	; 55
     db4:	8f 7d       	andi	r24, 0xDF	; 223
     db6:	87 bf       	out	0x37, r24	; 55
	send_pulse();
     db8:	af df       	rcall	.-162    	; 0xd18 <send_pulse>
	TIFR |= 0b00100000;
     dba:	86 b7       	in	r24, 0x36	; 54
     dbc:	80 62       	ori	r24, 0x20	; 32
     dbe:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
     dc0:	87 b7       	in	r24, 0x37	; 55
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
     dc6:	80 91 83 02 	lds	r24, 0x0283
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
     dce:	40 91 7b 02 	lds	r20, 0x027B
     dd2:	50 91 7c 02 	lds	r21, 0x027C
     dd6:	60 91 7d 02 	lds	r22, 0x027D
     dda:	70 91 7e 02 	lds	r23, 0x027E
     dde:	80 91 7f 02 	lds	r24, 0x027F
     de2:	90 91 80 02 	lds	r25, 0x0280
     de6:	a0 91 81 02 	lds	r26, 0x0281
     dea:	b0 91 82 02 	lds	r27, 0x0282
     dee:	ba 01       	movw	r22, r20
     df0:	68 1b       	sub	r22, r24
     df2:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
     df4:	88 27       	eor	r24, r24
     df6:	77 fd       	sbrc	r23, 7
     df8:	80 95       	com	r24
     dfa:	98 2f       	mov	r25, r24
     dfc:	46 d1       	rcall	.+652    	; 0x108a <__floatsisf>
     dfe:	29 e4       	ldi	r18, 0x49	; 73
     e00:	3b e4       	ldi	r19, 0x4B	; 75
     e02:	4b e6       	ldi	r20, 0x6B	; 107
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	a6 d0       	rcall	.+332    	; 0xf54 <__divsf3>
     e08:	0d d1       	rcall	.+538    	; 0x1024 <__fixsfsi>
	
	return centimeters;
}
     e0a:	cb 01       	movw	r24, r22
     e0c:	08 95       	ret

00000e0e <ADC_init>:

void ADC_init(void)
{
	ADMUX=0b11000010;
     e0e:	82 ec       	ldi	r24, 0xC2	; 194
     e10:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
     e12:	87 e8       	ldi	r24, 0x87	; 135
     e14:	86 b9       	out	0x06, r24	; 6
     e16:	08 95       	ret

00000e18 <ADC_read>:
}

int ADC_read(void)
{
	ADCSRA |= 0b01000000;
     e18:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
     e1a:	36 99       	sbic	0x06, 6	; 6
     e1c:	fe cf       	rjmp	.-4      	; 0xe1a <ADC_read+0x2>
	return ADC;
     e1e:	84 b1       	in	r24, 0x04	; 4
     e20:	95 b1       	in	r25, 0x05	; 5
}
     e22:	08 95       	ret

00000e24 <getIrDistance>:

int distance=0;
int value1=0;

int getIrDistance(void)
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	c5 e0       	ldi	r28, 0x05	; 5
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
     e34:	f1 df       	rcall	.-30     	; 0xe18 <ADC_read>
     e36:	08 0f       	add	r16, r24
     e38:	19 1f       	adc	r17, r25
     e3a:	21 97       	sbiw	r28, 0x01	; 1
int value1=0;

int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
     e3c:	20 97       	sbiw	r28, 0x00	; 0
     e3e:	d1 f7       	brne	.-12     	; 0xe34 <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
     e40:	c8 01       	movw	r24, r16
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	08 d4       	rcall	.+2064   	; 0x1658 <__divmodhi4>
     e48:	70 93 78 02 	sts	0x0278, r23
     e4c:	60 93 77 02 	sts	0x0277, r22
	distance = 24443*pow(value1,(-1.156));
     e50:	88 27       	eor	r24, r24
     e52:	77 fd       	sbrc	r23, 7
     e54:	80 95       	com	r24
     e56:	98 2f       	mov	r25, r24
     e58:	18 d1       	rcall	.+560    	; 0x108a <__floatsisf>
     e5a:	2f ec       	ldi	r18, 0xCF	; 207
     e5c:	37 ef       	ldi	r19, 0xF7	; 247
     e5e:	43 e9       	ldi	r20, 0x93	; 147
     e60:	5f eb       	ldi	r21, 0xBF	; 191
     e62:	3b d2       	rcall	.+1142   	; 0x12da <pow>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	36 ef       	ldi	r19, 0xF6	; 246
     e68:	4e eb       	ldi	r20, 0xBE	; 190
     e6a:	56 e4       	ldi	r21, 0x46	; 70
     e6c:	d3 d1       	rcall	.+934    	; 0x1214 <__mulsf3>
     e6e:	da d0       	rcall	.+436    	; 0x1024 <__fixsfsi>
     e70:	70 93 7a 02 	sts	0x027A, r23
     e74:	60 93 79 02 	sts	0x0279, r22
	return distance;
     e78:	cb 01       	movw	r24, r22
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <__subsf3>:
     e84:	50 58       	subi	r21, 0x80	; 128

00000e86 <__addsf3>:
     e86:	bb 27       	eor	r27, r27
     e88:	aa 27       	eor	r26, r26
     e8a:	0e d0       	rcall	.+28     	; 0xea8 <__addsf3x>
     e8c:	78 c1       	rjmp	.+752    	; 0x117e <__fp_round>
     e8e:	41 d1       	rcall	.+642    	; 0x1112 <__fp_pscA>
     e90:	30 f0       	brcs	.+12     	; 0xe9e <__addsf3+0x18>
     e92:	46 d1       	rcall	.+652    	; 0x1120 <__fp_pscB>
     e94:	20 f0       	brcs	.+8      	; 0xe9e <__addsf3+0x18>
     e96:	31 f4       	brne	.+12     	; 0xea4 <__addsf3+0x1e>
     e98:	9f 3f       	cpi	r25, 0xFF	; 255
     e9a:	11 f4       	brne	.+4      	; 0xea0 <__addsf3+0x1a>
     e9c:	1e f4       	brtc	.+6      	; 0xea4 <__addsf3+0x1e>
     e9e:	36 c1       	rjmp	.+620    	; 0x110c <__fp_nan>
     ea0:	0e f4       	brtc	.+2      	; 0xea4 <__addsf3+0x1e>
     ea2:	e0 95       	com	r30
     ea4:	e7 fb       	bst	r30, 7
     ea6:	2c c1       	rjmp	.+600    	; 0x1100 <__fp_inf>

00000ea8 <__addsf3x>:
     ea8:	e9 2f       	mov	r30, r25
     eaa:	8b d1       	rcall	.+790    	; 0x11c2 <__fp_split3>
     eac:	80 f3       	brcs	.-32     	; 0xe8e <__addsf3+0x8>
     eae:	ba 17       	cp	r27, r26
     eb0:	62 07       	cpc	r22, r18
     eb2:	73 07       	cpc	r23, r19
     eb4:	84 07       	cpc	r24, r20
     eb6:	95 07       	cpc	r25, r21
     eb8:	18 f0       	brcs	.+6      	; 0xec0 <__addsf3x+0x18>
     eba:	71 f4       	brne	.+28     	; 0xed8 <__addsf3x+0x30>
     ebc:	9e f5       	brtc	.+102    	; 0xf24 <__addsf3x+0x7c>
     ebe:	a3 c1       	rjmp	.+838    	; 0x1206 <__fp_zero>
     ec0:	0e f4       	brtc	.+2      	; 0xec4 <__addsf3x+0x1c>
     ec2:	e0 95       	com	r30
     ec4:	0b 2e       	mov	r0, r27
     ec6:	ba 2f       	mov	r27, r26
     ec8:	a0 2d       	mov	r26, r0
     eca:	0b 01       	movw	r0, r22
     ecc:	b9 01       	movw	r22, r18
     ece:	90 01       	movw	r18, r0
     ed0:	0c 01       	movw	r0, r24
     ed2:	ca 01       	movw	r24, r20
     ed4:	a0 01       	movw	r20, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	ff 27       	eor	r31, r31
     eda:	59 1b       	sub	r21, r25
     edc:	99 f0       	breq	.+38     	; 0xf04 <__addsf3x+0x5c>
     ede:	59 3f       	cpi	r21, 0xF9	; 249
     ee0:	50 f4       	brcc	.+20     	; 0xef6 <__addsf3x+0x4e>
     ee2:	50 3e       	cpi	r21, 0xE0	; 224
     ee4:	68 f1       	brcs	.+90     	; 0xf40 <__addsf3x+0x98>
     ee6:	1a 16       	cp	r1, r26
     ee8:	f0 40       	sbci	r31, 0x00	; 0
     eea:	a2 2f       	mov	r26, r18
     eec:	23 2f       	mov	r18, r19
     eee:	34 2f       	mov	r19, r20
     ef0:	44 27       	eor	r20, r20
     ef2:	58 5f       	subi	r21, 0xF8	; 248
     ef4:	f3 cf       	rjmp	.-26     	; 0xedc <__addsf3x+0x34>
     ef6:	46 95       	lsr	r20
     ef8:	37 95       	ror	r19
     efa:	27 95       	ror	r18
     efc:	a7 95       	ror	r26
     efe:	f0 40       	sbci	r31, 0x00	; 0
     f00:	53 95       	inc	r21
     f02:	c9 f7       	brne	.-14     	; 0xef6 <__addsf3x+0x4e>
     f04:	7e f4       	brtc	.+30     	; 0xf24 <__addsf3x+0x7c>
     f06:	1f 16       	cp	r1, r31
     f08:	ba 0b       	sbc	r27, r26
     f0a:	62 0b       	sbc	r22, r18
     f0c:	73 0b       	sbc	r23, r19
     f0e:	84 0b       	sbc	r24, r20
     f10:	ba f0       	brmi	.+46     	; 0xf40 <__addsf3x+0x98>
     f12:	91 50       	subi	r25, 0x01	; 1
     f14:	a1 f0       	breq	.+40     	; 0xf3e <__addsf3x+0x96>
     f16:	ff 0f       	add	r31, r31
     f18:	bb 1f       	adc	r27, r27
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	88 1f       	adc	r24, r24
     f20:	c2 f7       	brpl	.-16     	; 0xf12 <__addsf3x+0x6a>
     f22:	0e c0       	rjmp	.+28     	; 0xf40 <__addsf3x+0x98>
     f24:	ba 0f       	add	r27, r26
     f26:	62 1f       	adc	r22, r18
     f28:	73 1f       	adc	r23, r19
     f2a:	84 1f       	adc	r24, r20
     f2c:	48 f4       	brcc	.+18     	; 0xf40 <__addsf3x+0x98>
     f2e:	87 95       	ror	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	b7 95       	ror	r27
     f36:	f7 95       	ror	r31
     f38:	9e 3f       	cpi	r25, 0xFE	; 254
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <__addsf3x+0x96>
     f3c:	b3 cf       	rjmp	.-154    	; 0xea4 <__addsf3+0x1e>
     f3e:	93 95       	inc	r25
     f40:	88 0f       	add	r24, r24
     f42:	08 f0       	brcs	.+2      	; 0xf46 <__addsf3x+0x9e>
     f44:	99 27       	eor	r25, r25
     f46:	ee 0f       	add	r30, r30
     f48:	97 95       	ror	r25
     f4a:	87 95       	ror	r24
     f4c:	08 95       	ret

00000f4e <cos>:
     f4e:	f0 d0       	rcall	.+480    	; 0x1130 <__fp_rempio2>
     f50:	e3 95       	inc	r30
     f52:	26 c1       	rjmp	.+588    	; 0x11a0 <__fp_sinus>

00000f54 <__divsf3>:
     f54:	0c d0       	rcall	.+24     	; 0xf6e <__divsf3x>
     f56:	13 c1       	rjmp	.+550    	; 0x117e <__fp_round>
     f58:	e3 d0       	rcall	.+454    	; 0x1120 <__fp_pscB>
     f5a:	40 f0       	brcs	.+16     	; 0xf6c <__divsf3+0x18>
     f5c:	da d0       	rcall	.+436    	; 0x1112 <__fp_pscA>
     f5e:	30 f0       	brcs	.+12     	; 0xf6c <__divsf3+0x18>
     f60:	21 f4       	brne	.+8      	; 0xf6a <__divsf3+0x16>
     f62:	5f 3f       	cpi	r21, 0xFF	; 255
     f64:	19 f0       	breq	.+6      	; 0xf6c <__divsf3+0x18>
     f66:	cc c0       	rjmp	.+408    	; 0x1100 <__fp_inf>
     f68:	51 11       	cpse	r21, r1
     f6a:	4e c1       	rjmp	.+668    	; 0x1208 <__fp_szero>
     f6c:	cf c0       	rjmp	.+414    	; 0x110c <__fp_nan>

00000f6e <__divsf3x>:
     f6e:	29 d1       	rcall	.+594    	; 0x11c2 <__fp_split3>
     f70:	98 f3       	brcs	.-26     	; 0xf58 <__divsf3+0x4>

00000f72 <__divsf3_pse>:
     f72:	99 23       	and	r25, r25
     f74:	c9 f3       	breq	.-14     	; 0xf68 <__divsf3+0x14>
     f76:	55 23       	and	r21, r21
     f78:	b1 f3       	breq	.-20     	; 0xf66 <__divsf3+0x12>
     f7a:	95 1b       	sub	r25, r21
     f7c:	55 0b       	sbc	r21, r21
     f7e:	bb 27       	eor	r27, r27
     f80:	aa 27       	eor	r26, r26
     f82:	62 17       	cp	r22, r18
     f84:	73 07       	cpc	r23, r19
     f86:	84 07       	cpc	r24, r20
     f88:	38 f0       	brcs	.+14     	; 0xf98 <__divsf3_pse+0x26>
     f8a:	9f 5f       	subi	r25, 0xFF	; 255
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	aa 1f       	adc	r26, r26
     f96:	a9 f3       	breq	.-22     	; 0xf82 <__divsf3_pse+0x10>
     f98:	33 d0       	rcall	.+102    	; 0x1000 <__divsf3_pse+0x8e>
     f9a:	0e 2e       	mov	r0, r30
     f9c:	3a f0       	brmi	.+14     	; 0xfac <__divsf3_pse+0x3a>
     f9e:	e0 e8       	ldi	r30, 0x80	; 128
     fa0:	30 d0       	rcall	.+96     	; 0x1002 <__divsf3_pse+0x90>
     fa2:	91 50       	subi	r25, 0x01	; 1
     fa4:	50 40       	sbci	r21, 0x00	; 0
     fa6:	e6 95       	lsr	r30
     fa8:	00 1c       	adc	r0, r0
     faa:	ca f7       	brpl	.-14     	; 0xf9e <__divsf3_pse+0x2c>
     fac:	29 d0       	rcall	.+82     	; 0x1000 <__divsf3_pse+0x8e>
     fae:	fe 2f       	mov	r31, r30
     fb0:	27 d0       	rcall	.+78     	; 0x1000 <__divsf3_pse+0x8e>
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	bb 1f       	adc	r27, r27
     fba:	26 17       	cp	r18, r22
     fbc:	37 07       	cpc	r19, r23
     fbe:	48 07       	cpc	r20, r24
     fc0:	ab 07       	cpc	r26, r27
     fc2:	b0 e8       	ldi	r27, 0x80	; 128
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <__divsf3_pse+0x56>
     fc6:	bb 0b       	sbc	r27, r27
     fc8:	80 2d       	mov	r24, r0
     fca:	bf 01       	movw	r22, r30
     fcc:	ff 27       	eor	r31, r31
     fce:	93 58       	subi	r25, 0x83	; 131
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255
     fd2:	2a f0       	brmi	.+10     	; 0xfde <__divsf3_pse+0x6c>
     fd4:	9e 3f       	cpi	r25, 0xFE	; 254
     fd6:	51 05       	cpc	r21, r1
     fd8:	68 f0       	brcs	.+26     	; 0xff4 <__divsf3_pse+0x82>
     fda:	92 c0       	rjmp	.+292    	; 0x1100 <__fp_inf>
     fdc:	15 c1       	rjmp	.+554    	; 0x1208 <__fp_szero>
     fde:	5f 3f       	cpi	r21, 0xFF	; 255
     fe0:	ec f3       	brlt	.-6      	; 0xfdc <__divsf3_pse+0x6a>
     fe2:	98 3e       	cpi	r25, 0xE8	; 232
     fe4:	dc f3       	brlt	.-10     	; 0xfdc <__divsf3_pse+0x6a>
     fe6:	86 95       	lsr	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	b7 95       	ror	r27
     fee:	f7 95       	ror	r31
     ff0:	9f 5f       	subi	r25, 0xFF	; 255
     ff2:	c9 f7       	brne	.-14     	; 0xfe6 <__divsf3_pse+0x74>
     ff4:	88 0f       	add	r24, r24
     ff6:	91 1d       	adc	r25, r1
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret
    1000:	e1 e0       	ldi	r30, 0x01	; 1
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	bb 1f       	adc	r27, r27
    100a:	62 17       	cp	r22, r18
    100c:	73 07       	cpc	r23, r19
    100e:	84 07       	cpc	r24, r20
    1010:	ba 07       	cpc	r27, r26
    1012:	20 f0       	brcs	.+8      	; 0x101c <__divsf3_pse+0xaa>
    1014:	62 1b       	sub	r22, r18
    1016:	73 0b       	sbc	r23, r19
    1018:	84 0b       	sbc	r24, r20
    101a:	ba 0b       	sbc	r27, r26
    101c:	ee 1f       	adc	r30, r30
    101e:	88 f7       	brcc	.-30     	; 0x1002 <__divsf3_pse+0x90>
    1020:	e0 95       	com	r30
    1022:	08 95       	ret

00001024 <__fixsfsi>:
    1024:	04 d0       	rcall	.+8      	; 0x102e <__fixunssfsi>
    1026:	68 94       	set
    1028:	b1 11       	cpse	r27, r1
    102a:	ee c0       	rjmp	.+476    	; 0x1208 <__fp_szero>
    102c:	08 95       	ret

0000102e <__fixunssfsi>:
    102e:	d1 d0       	rcall	.+418    	; 0x11d2 <__fp_splitA>
    1030:	88 f0       	brcs	.+34     	; 0x1054 <__fixunssfsi+0x26>
    1032:	9f 57       	subi	r25, 0x7F	; 127
    1034:	90 f0       	brcs	.+36     	; 0x105a <__fixunssfsi+0x2c>
    1036:	b9 2f       	mov	r27, r25
    1038:	99 27       	eor	r25, r25
    103a:	b7 51       	subi	r27, 0x17	; 23
    103c:	a0 f0       	brcs	.+40     	; 0x1066 <__fixunssfsi+0x38>
    103e:	d1 f0       	breq	.+52     	; 0x1074 <__fixunssfsi+0x46>
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	1a f0       	brmi	.+6      	; 0x1050 <__fixunssfsi+0x22>
    104a:	ba 95       	dec	r27
    104c:	c9 f7       	brne	.-14     	; 0x1040 <__fixunssfsi+0x12>
    104e:	12 c0       	rjmp	.+36     	; 0x1074 <__fixunssfsi+0x46>
    1050:	b1 30       	cpi	r27, 0x01	; 1
    1052:	81 f0       	breq	.+32     	; 0x1074 <__fixunssfsi+0x46>
    1054:	d8 d0       	rcall	.+432    	; 0x1206 <__fp_zero>
    1056:	b1 e0       	ldi	r27, 0x01	; 1
    1058:	08 95       	ret
    105a:	d5 c0       	rjmp	.+426    	; 0x1206 <__fp_zero>
    105c:	67 2f       	mov	r22, r23
    105e:	78 2f       	mov	r23, r24
    1060:	88 27       	eor	r24, r24
    1062:	b8 5f       	subi	r27, 0xF8	; 248
    1064:	39 f0       	breq	.+14     	; 0x1074 <__fixunssfsi+0x46>
    1066:	b9 3f       	cpi	r27, 0xF9	; 249
    1068:	cc f3       	brlt	.-14     	; 0x105c <__fixunssfsi+0x2e>
    106a:	86 95       	lsr	r24
    106c:	77 95       	ror	r23
    106e:	67 95       	ror	r22
    1070:	b3 95       	inc	r27
    1072:	d9 f7       	brne	.-10     	; 0x106a <__fixunssfsi+0x3c>
    1074:	3e f4       	brtc	.+14     	; 0x1084 <__fixunssfsi+0x56>
    1076:	90 95       	com	r25
    1078:	80 95       	com	r24
    107a:	70 95       	com	r23
    107c:	61 95       	neg	r22
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	08 95       	ret

00001086 <__floatunsisf>:
    1086:	e8 94       	clt
    1088:	09 c0       	rjmp	.+18     	; 0x109c <__floatsisf+0x12>

0000108a <__floatsisf>:
    108a:	97 fb       	bst	r25, 7
    108c:	3e f4       	brtc	.+14     	; 0x109c <__floatsisf+0x12>
    108e:	90 95       	com	r25
    1090:	80 95       	com	r24
    1092:	70 95       	com	r23
    1094:	61 95       	neg	r22
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	99 23       	and	r25, r25
    109e:	a9 f0       	breq	.+42     	; 0x10ca <__floatsisf+0x40>
    10a0:	f9 2f       	mov	r31, r25
    10a2:	96 e9       	ldi	r25, 0x96	; 150
    10a4:	bb 27       	eor	r27, r27
    10a6:	93 95       	inc	r25
    10a8:	f6 95       	lsr	r31
    10aa:	87 95       	ror	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b7 95       	ror	r27
    10b2:	f1 11       	cpse	r31, r1
    10b4:	f8 cf       	rjmp	.-16     	; 0x10a6 <__floatsisf+0x1c>
    10b6:	fa f4       	brpl	.+62     	; 0x10f6 <__floatsisf+0x6c>
    10b8:	bb 0f       	add	r27, r27
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__floatsisf+0x36>
    10bc:	60 ff       	sbrs	r22, 0
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <__floatsisf+0x6c>
    10c0:	6f 5f       	subi	r22, 0xFF	; 255
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	8f 4f       	sbci	r24, 0xFF	; 255
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	16 c0       	rjmp	.+44     	; 0x10f6 <__floatsisf+0x6c>
    10ca:	88 23       	and	r24, r24
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <__floatsisf+0x48>
    10ce:	96 e9       	ldi	r25, 0x96	; 150
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <__floatsisf+0x6a>
    10d2:	77 23       	and	r23, r23
    10d4:	21 f0       	breq	.+8      	; 0x10de <__floatsisf+0x54>
    10d6:	9e e8       	ldi	r25, 0x8E	; 142
    10d8:	87 2f       	mov	r24, r23
    10da:	76 2f       	mov	r23, r22
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <__floatsisf+0x5e>
    10de:	66 23       	and	r22, r22
    10e0:	71 f0       	breq	.+28     	; 0x10fe <__floatsisf+0x74>
    10e2:	96 e8       	ldi	r25, 0x86	; 134
    10e4:	86 2f       	mov	r24, r22
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	2a f0       	brmi	.+10     	; 0x10f6 <__floatsisf+0x6c>
    10ec:	9a 95       	dec	r25
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	da f7       	brpl	.-10     	; 0x10ec <__floatsisf+0x62>
    10f6:	88 0f       	add	r24, r24
    10f8:	96 95       	lsr	r25
    10fa:	87 95       	ror	r24
    10fc:	97 f9       	bld	r25, 7
    10fe:	08 95       	ret

00001100 <__fp_inf>:
    1100:	97 f9       	bld	r25, 7
    1102:	9f 67       	ori	r25, 0x7F	; 127
    1104:	80 e8       	ldi	r24, 0x80	; 128
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	08 95       	ret

0000110c <__fp_nan>:
    110c:	9f ef       	ldi	r25, 0xFF	; 255
    110e:	80 ec       	ldi	r24, 0xC0	; 192
    1110:	08 95       	ret

00001112 <__fp_pscA>:
    1112:	00 24       	eor	r0, r0
    1114:	0a 94       	dec	r0
    1116:	16 16       	cp	r1, r22
    1118:	17 06       	cpc	r1, r23
    111a:	18 06       	cpc	r1, r24
    111c:	09 06       	cpc	r0, r25
    111e:	08 95       	ret

00001120 <__fp_pscB>:
    1120:	00 24       	eor	r0, r0
    1122:	0a 94       	dec	r0
    1124:	12 16       	cp	r1, r18
    1126:	13 06       	cpc	r1, r19
    1128:	14 06       	cpc	r1, r20
    112a:	05 06       	cpc	r0, r21
    112c:	08 95       	ret
    112e:	ee cf       	rjmp	.-36     	; 0x110c <__fp_nan>

00001130 <__fp_rempio2>:
    1130:	50 d0       	rcall	.+160    	; 0x11d2 <__fp_splitA>
    1132:	e8 f3       	brcs	.-6      	; 0x112e <__fp_pscB+0xe>
    1134:	e8 94       	clt
    1136:	e0 e0       	ldi	r30, 0x00	; 0
    1138:	bb 27       	eor	r27, r27
    113a:	9f 57       	subi	r25, 0x7F	; 127
    113c:	f0 f0       	brcs	.+60     	; 0x117a <__fp_rempio2+0x4a>
    113e:	2a ed       	ldi	r18, 0xDA	; 218
    1140:	3f e0       	ldi	r19, 0x0F	; 15
    1142:	49 ec       	ldi	r20, 0xC9	; 201
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <__fp_rempio2+0x22>
    1146:	ee 0f       	add	r30, r30
    1148:	bb 0f       	add	r27, r27
    114a:	66 1f       	adc	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	28 f0       	brcs	.+10     	; 0x115c <__fp_rempio2+0x2c>
    1152:	b2 3a       	cpi	r27, 0xA2	; 162
    1154:	62 07       	cpc	r22, r18
    1156:	73 07       	cpc	r23, r19
    1158:	84 07       	cpc	r24, r20
    115a:	28 f0       	brcs	.+10     	; 0x1166 <__fp_rempio2+0x36>
    115c:	b2 5a       	subi	r27, 0xA2	; 162
    115e:	62 0b       	sbc	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	e3 95       	inc	r30
    1166:	9a 95       	dec	r25
    1168:	72 f7       	brpl	.-36     	; 0x1146 <__fp_rempio2+0x16>
    116a:	80 38       	cpi	r24, 0x80	; 128
    116c:	30 f4       	brcc	.+12     	; 0x117a <__fp_rempio2+0x4a>
    116e:	9a 95       	dec	r25
    1170:	bb 0f       	add	r27, r27
    1172:	66 1f       	adc	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	d2 f7       	brpl	.-12     	; 0x116e <__fp_rempio2+0x3e>
    117a:	90 48       	sbci	r25, 0x80	; 128
    117c:	6f c1       	rjmp	.+734    	; 0x145c <__fp_mpack_finite>

0000117e <__fp_round>:
    117e:	09 2e       	mov	r0, r25
    1180:	03 94       	inc	r0
    1182:	00 0c       	add	r0, r0
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0xc>
    1186:	88 23       	and	r24, r24
    1188:	52 f0       	brmi	.+20     	; 0x119e <__fp_round+0x20>
    118a:	bb 0f       	add	r27, r27
    118c:	40 f4       	brcc	.+16     	; 0x119e <__fp_round+0x20>
    118e:	bf 2b       	or	r27, r31
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_round+0x18>
    1192:	60 ff       	sbrs	r22, 0
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__fp_round+0x20>
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__fp_sinus>:
    11a0:	ef 93       	push	r30
    11a2:	e0 ff       	sbrs	r30, 0
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <__fp_sinus+0x12>
    11a6:	a2 ea       	ldi	r26, 0xA2	; 162
    11a8:	2a ed       	ldi	r18, 0xDA	; 218
    11aa:	3f e0       	ldi	r19, 0x0F	; 15
    11ac:	49 ec       	ldi	r20, 0xC9	; 201
    11ae:	5f eb       	ldi	r21, 0xBF	; 191
    11b0:	7b de       	rcall	.-778    	; 0xea8 <__addsf3x>
    11b2:	e5 df       	rcall	.-54     	; 0x117e <__fp_round>
    11b4:	0f 90       	pop	r0
    11b6:	03 94       	inc	r0
    11b8:	01 fc       	sbrc	r0, 1
    11ba:	90 58       	subi	r25, 0x80	; 128
    11bc:	ec e8       	ldi	r30, 0x8C	; 140
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	85 c1       	rjmp	.+778    	; 0x14cc <__fp_powsodd>

000011c2 <__fp_split3>:
    11c2:	57 fd       	sbrc	r21, 7
    11c4:	90 58       	subi	r25, 0x80	; 128
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	59 f0       	breq	.+22     	; 0x11e2 <__fp_splitA+0x10>
    11cc:	5f 3f       	cpi	r21, 0xFF	; 255
    11ce:	71 f0       	breq	.+28     	; 0x11ec <__fp_splitA+0x1a>
    11d0:	47 95       	ror	r20

000011d2 <__fp_splitA>:
    11d2:	88 0f       	add	r24, r24
    11d4:	97 fb       	bst	r25, 7
    11d6:	99 1f       	adc	r25, r25
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <__fp_splitA+0x20>
    11da:	9f 3f       	cpi	r25, 0xFF	; 255
    11dc:	79 f0       	breq	.+30     	; 0x11fc <__fp_splitA+0x2a>
    11de:	87 95       	ror	r24
    11e0:	08 95       	ret
    11e2:	12 16       	cp	r1, r18
    11e4:	13 06       	cpc	r1, r19
    11e6:	14 06       	cpc	r1, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	f2 cf       	rjmp	.-28     	; 0x11d0 <__fp_split3+0xe>
    11ec:	46 95       	lsr	r20
    11ee:	f1 df       	rcall	.-30     	; 0x11d2 <__fp_splitA>
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <__fp_splitA+0x30>
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	18 06       	cpc	r1, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	f1 cf       	rjmp	.-30     	; 0x11de <__fp_splitA+0xc>
    11fc:	86 95       	lsr	r24
    11fe:	71 05       	cpc	r23, r1
    1200:	61 05       	cpc	r22, r1
    1202:	08 94       	sec
    1204:	08 95       	ret

00001206 <__fp_zero>:
    1206:	e8 94       	clt

00001208 <__fp_szero>:
    1208:	bb 27       	eor	r27, r27
    120a:	66 27       	eor	r22, r22
    120c:	77 27       	eor	r23, r23
    120e:	cb 01       	movw	r24, r22
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret

00001214 <__mulsf3>:
    1214:	0b d0       	rcall	.+22     	; 0x122c <__mulsf3x>
    1216:	b3 cf       	rjmp	.-154    	; 0x117e <__fp_round>
    1218:	7c df       	rcall	.-264    	; 0x1112 <__fp_pscA>
    121a:	28 f0       	brcs	.+10     	; 0x1226 <__mulsf3+0x12>
    121c:	81 df       	rcall	.-254    	; 0x1120 <__fp_pscB>
    121e:	18 f0       	brcs	.+6      	; 0x1226 <__mulsf3+0x12>
    1220:	95 23       	and	r25, r21
    1222:	09 f0       	breq	.+2      	; 0x1226 <__mulsf3+0x12>
    1224:	6d cf       	rjmp	.-294    	; 0x1100 <__fp_inf>
    1226:	72 cf       	rjmp	.-284    	; 0x110c <__fp_nan>
    1228:	11 24       	eor	r1, r1
    122a:	ee cf       	rjmp	.-36     	; 0x1208 <__fp_szero>

0000122c <__mulsf3x>:
    122c:	ca df       	rcall	.-108    	; 0x11c2 <__fp_split3>
    122e:	a0 f3       	brcs	.-24     	; 0x1218 <__mulsf3+0x4>

00001230 <__mulsf3_pse>:
    1230:	95 9f       	mul	r25, r21
    1232:	d1 f3       	breq	.-12     	; 0x1228 <__mulsf3+0x14>
    1234:	95 0f       	add	r25, r21
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	55 1f       	adc	r21, r21
    123a:	62 9f       	mul	r22, r18
    123c:	f0 01       	movw	r30, r0
    123e:	72 9f       	mul	r23, r18
    1240:	bb 27       	eor	r27, r27
    1242:	f0 0d       	add	r31, r0
    1244:	b1 1d       	adc	r27, r1
    1246:	63 9f       	mul	r22, r19
    1248:	aa 27       	eor	r26, r26
    124a:	f0 0d       	add	r31, r0
    124c:	b1 1d       	adc	r27, r1
    124e:	aa 1f       	adc	r26, r26
    1250:	64 9f       	mul	r22, r20
    1252:	66 27       	eor	r22, r22
    1254:	b0 0d       	add	r27, r0
    1256:	a1 1d       	adc	r26, r1
    1258:	66 1f       	adc	r22, r22
    125a:	82 9f       	mul	r24, r18
    125c:	22 27       	eor	r18, r18
    125e:	b0 0d       	add	r27, r0
    1260:	a1 1d       	adc	r26, r1
    1262:	62 1f       	adc	r22, r18
    1264:	73 9f       	mul	r23, r19
    1266:	b0 0d       	add	r27, r0
    1268:	a1 1d       	adc	r26, r1
    126a:	62 1f       	adc	r22, r18
    126c:	83 9f       	mul	r24, r19
    126e:	a0 0d       	add	r26, r0
    1270:	61 1d       	adc	r22, r1
    1272:	22 1f       	adc	r18, r18
    1274:	74 9f       	mul	r23, r20
    1276:	33 27       	eor	r19, r19
    1278:	a0 0d       	add	r26, r0
    127a:	61 1d       	adc	r22, r1
    127c:	23 1f       	adc	r18, r19
    127e:	84 9f       	mul	r24, r20
    1280:	60 0d       	add	r22, r0
    1282:	21 1d       	adc	r18, r1
    1284:	82 2f       	mov	r24, r18
    1286:	76 2f       	mov	r23, r22
    1288:	6a 2f       	mov	r22, r26
    128a:	11 24       	eor	r1, r1
    128c:	9f 57       	subi	r25, 0x7F	; 127
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	8a f0       	brmi	.+34     	; 0x12b4 <__mulsf3_pse+0x84>
    1292:	e1 f0       	breq	.+56     	; 0x12cc <__mulsf3_pse+0x9c>
    1294:	88 23       	and	r24, r24
    1296:	4a f0       	brmi	.+18     	; 0x12aa <__mulsf3_pse+0x7a>
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	bb 1f       	adc	r27, r27
    129e:	66 1f       	adc	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	50 40       	sbci	r21, 0x00	; 0
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__mulsf3_pse+0x64>
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	51 05       	cpc	r21, r1
    12ae:	70 f0       	brcs	.+28     	; 0x12cc <__mulsf3_pse+0x9c>
    12b0:	27 cf       	rjmp	.-434    	; 0x1100 <__fp_inf>
    12b2:	aa cf       	rjmp	.-172    	; 0x1208 <__fp_szero>
    12b4:	5f 3f       	cpi	r21, 0xFF	; 255
    12b6:	ec f3       	brlt	.-6      	; 0x12b2 <__mulsf3_pse+0x82>
    12b8:	98 3e       	cpi	r25, 0xE8	; 232
    12ba:	dc f3       	brlt	.-10     	; 0x12b2 <__mulsf3_pse+0x82>
    12bc:	86 95       	lsr	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	b7 95       	ror	r27
    12c4:	f7 95       	ror	r31
    12c6:	e7 95       	ror	r30
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	c1 f7       	brne	.-16     	; 0x12bc <__mulsf3_pse+0x8c>
    12cc:	fe 2b       	or	r31, r30
    12ce:	88 0f       	add	r24, r24
    12d0:	91 1d       	adc	r25, r1
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret

000012da <pow>:
    12da:	fa 01       	movw	r30, r20
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	30 96       	adiw	r30, 0x00	; 0
    12e2:	21 05       	cpc	r18, r1
    12e4:	31 05       	cpc	r19, r1
    12e6:	99 f1       	breq	.+102    	; 0x134e <pow+0x74>
    12e8:	61 15       	cp	r22, r1
    12ea:	71 05       	cpc	r23, r1
    12ec:	61 f4       	brne	.+24     	; 0x1306 <pow+0x2c>
    12ee:	80 38       	cpi	r24, 0x80	; 128
    12f0:	bf e3       	ldi	r27, 0x3F	; 63
    12f2:	9b 07       	cpc	r25, r27
    12f4:	49 f1       	breq	.+82     	; 0x1348 <pow+0x6e>
    12f6:	68 94       	set
    12f8:	90 38       	cpi	r25, 0x80	; 128
    12fa:	81 05       	cpc	r24, r1
    12fc:	61 f0       	breq	.+24     	; 0x1316 <pow+0x3c>
    12fe:	80 38       	cpi	r24, 0x80	; 128
    1300:	bf ef       	ldi	r27, 0xFF	; 255
    1302:	9b 07       	cpc	r25, r27
    1304:	41 f0       	breq	.+16     	; 0x1316 <pow+0x3c>
    1306:	99 23       	and	r25, r25
    1308:	42 f5       	brpl	.+80     	; 0x135a <pow+0x80>
    130a:	ff 3f       	cpi	r31, 0xFF	; 255
    130c:	e1 05       	cpc	r30, r1
    130e:	31 05       	cpc	r19, r1
    1310:	21 05       	cpc	r18, r1
    1312:	11 f1       	breq	.+68     	; 0x1358 <pow+0x7e>
    1314:	e8 94       	clt
    1316:	08 94       	sec
    1318:	e7 95       	ror	r30
    131a:	d9 01       	movw	r26, r18
    131c:	aa 23       	and	r26, r26
    131e:	29 f4       	brne	.+10     	; 0x132a <pow+0x50>
    1320:	ab 2f       	mov	r26, r27
    1322:	be 2f       	mov	r27, r30
    1324:	f8 5f       	subi	r31, 0xF8	; 248
    1326:	d0 f3       	brcs	.-12     	; 0x131c <pow+0x42>
    1328:	10 c0       	rjmp	.+32     	; 0x134a <pow+0x70>
    132a:	ff 5f       	subi	r31, 0xFF	; 255
    132c:	70 f4       	brcc	.+28     	; 0x134a <pow+0x70>
    132e:	a6 95       	lsr	r26
    1330:	e0 f7       	brcc	.-8      	; 0x132a <pow+0x50>
    1332:	f7 39       	cpi	r31, 0x97	; 151
    1334:	50 f0       	brcs	.+20     	; 0x134a <pow+0x70>
    1336:	19 f0       	breq	.+6      	; 0x133e <pow+0x64>
    1338:	ff 3a       	cpi	r31, 0xAF	; 175
    133a:	38 f4       	brcc	.+14     	; 0x134a <pow+0x70>
    133c:	9f 77       	andi	r25, 0x7F	; 127
    133e:	9f 93       	push	r25
    1340:	0c d0       	rcall	.+24     	; 0x135a <pow+0x80>
    1342:	0f 90       	pop	r0
    1344:	07 fc       	sbrc	r0, 7
    1346:	90 58       	subi	r25, 0x80	; 128
    1348:	08 95       	ret
    134a:	3e f0       	brts	.+14     	; 0x135a <pow+0x80>
    134c:	df ce       	rjmp	.-578    	; 0x110c <__fp_nan>
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	80 e8       	ldi	r24, 0x80	; 128
    1354:	9f e3       	ldi	r25, 0x3F	; 63
    1356:	08 95       	ret
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	9f 77       	andi	r25, 0x7F	; 127
    135c:	5f 93       	push	r21
    135e:	4f 93       	push	r20
    1360:	3f 93       	push	r19
    1362:	2f 93       	push	r18
    1364:	06 d1       	rcall	.+524    	; 0x1572 <log>
    1366:	2f 91       	pop	r18
    1368:	3f 91       	pop	r19
    136a:	4f 91       	pop	r20
    136c:	5f 91       	pop	r21
    136e:	52 df       	rcall	.-348    	; 0x1214 <__mulsf3>
    1370:	47 c0       	rjmp	.+142    	; 0x1400 <exp>
    1372:	11 f4       	brne	.+4      	; 0x1378 <pow+0x9e>
    1374:	0e f4       	brtc	.+2      	; 0x1378 <pow+0x9e>
    1376:	ca ce       	rjmp	.-620    	; 0x110c <__fp_nan>
    1378:	6f c0       	rjmp	.+222    	; 0x1458 <__fp_mpack>

0000137a <sqrt>:
    137a:	2b df       	rcall	.-426    	; 0x11d2 <__fp_splitA>
    137c:	d0 f3       	brcs	.-12     	; 0x1372 <pow+0x98>
    137e:	99 23       	and	r25, r25
    1380:	d9 f3       	breq	.-10     	; 0x1378 <pow+0x9e>
    1382:	ce f3       	brts	.-14     	; 0x1376 <pow+0x9c>
    1384:	9f 57       	subi	r25, 0x7F	; 127
    1386:	55 0b       	sbc	r21, r21
    1388:	87 ff       	sbrs	r24, 7
    138a:	74 d0       	rcall	.+232    	; 0x1474 <__fp_norm2>
    138c:	00 24       	eor	r0, r0
    138e:	a0 e6       	ldi	r26, 0x60	; 96
    1390:	40 ea       	ldi	r20, 0xA0	; 160
    1392:	90 01       	movw	r18, r0
    1394:	80 58       	subi	r24, 0x80	; 128
    1396:	56 95       	lsr	r21
    1398:	97 95       	ror	r25
    139a:	28 f4       	brcc	.+10     	; 0x13a6 <sqrt+0x2c>
    139c:	80 5c       	subi	r24, 0xC0	; 192
    139e:	66 0f       	add	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <sqrt+0x34>
    13a6:	26 17       	cp	r18, r22
    13a8:	37 07       	cpc	r19, r23
    13aa:	48 07       	cpc	r20, r24
    13ac:	30 f4       	brcc	.+12     	; 0x13ba <sqrt+0x40>
    13ae:	62 1b       	sub	r22, r18
    13b0:	73 0b       	sbc	r23, r19
    13b2:	84 0b       	sbc	r24, r20
    13b4:	20 29       	or	r18, r0
    13b6:	31 29       	or	r19, r1
    13b8:	4a 2b       	or	r20, r26
    13ba:	a6 95       	lsr	r26
    13bc:	17 94       	ror	r1
    13be:	07 94       	ror	r0
    13c0:	20 25       	eor	r18, r0
    13c2:	31 25       	eor	r19, r1
    13c4:	4a 27       	eor	r20, r26
    13c6:	58 f7       	brcc	.-42     	; 0x139e <sqrt+0x24>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	20 f0       	brcs	.+8      	; 0x13d8 <sqrt+0x5e>
    13d0:	26 17       	cp	r18, r22
    13d2:	37 07       	cpc	r19, r23
    13d4:	48 07       	cpc	r20, r24
    13d6:	30 f4       	brcc	.+12     	; 0x13e4 <sqrt+0x6a>
    13d8:	62 0b       	sbc	r22, r18
    13da:	73 0b       	sbc	r23, r19
    13dc:	84 0b       	sbc	r24, r20
    13de:	20 0d       	add	r18, r0
    13e0:	31 1d       	adc	r19, r1
    13e2:	41 1d       	adc	r20, r1
    13e4:	a0 95       	com	r26
    13e6:	81 f7       	brne	.-32     	; 0x13c8 <sqrt+0x4e>
    13e8:	b9 01       	movw	r22, r18
    13ea:	84 2f       	mov	r24, r20
    13ec:	91 58       	subi	r25, 0x81	; 129
    13ee:	88 0f       	add	r24, r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	08 95       	ret
    13f6:	19 f4       	brne	.+6      	; 0x13fe <sqrt+0x84>
    13f8:	0e f0       	brts	.+2      	; 0x13fc <sqrt+0x82>
    13fa:	82 ce       	rjmp	.-764    	; 0x1100 <__fp_inf>
    13fc:	04 cf       	rjmp	.-504    	; 0x1206 <__fp_zero>
    13fe:	86 ce       	rjmp	.-756    	; 0x110c <__fp_nan>

00001400 <exp>:
    1400:	e8 de       	rcall	.-560    	; 0x11d2 <__fp_splitA>
    1402:	c8 f3       	brcs	.-14     	; 0x13f6 <sqrt+0x7c>
    1404:	96 38       	cpi	r25, 0x86	; 134
    1406:	c0 f7       	brcc	.-16     	; 0x13f8 <sqrt+0x7e>
    1408:	07 f8       	bld	r0, 7
    140a:	0f 92       	push	r0
    140c:	e8 94       	clt
    140e:	2b e3       	ldi	r18, 0x3B	; 59
    1410:	3a ea       	ldi	r19, 0xAA	; 170
    1412:	48 eb       	ldi	r20, 0xB8	; 184
    1414:	5f e7       	ldi	r21, 0x7F	; 127
    1416:	0c df       	rcall	.-488    	; 0x1230 <__mulsf3_pse>
    1418:	0f 92       	push	r0
    141a:	0f 92       	push	r0
    141c:	0f 92       	push	r0
    141e:	4d b7       	in	r20, 0x3d	; 61
    1420:	5e b7       	in	r21, 0x3e	; 62
    1422:	0f 92       	push	r0
    1424:	e6 d0       	rcall	.+460    	; 0x15f2 <modf>
    1426:	ea ea       	ldi	r30, 0xAA	; 170
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	2b d0       	rcall	.+86     	; 0x1482 <__fp_powser>
    142c:	4f 91       	pop	r20
    142e:	5f 91       	pop	r21
    1430:	ef 91       	pop	r30
    1432:	ff 91       	pop	r31
    1434:	e5 95       	asr	r30
    1436:	ee 1f       	adc	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	49 f0       	breq	.+18     	; 0x144e <exp+0x4e>
    143c:	fe 57       	subi	r31, 0x7E	; 126
    143e:	e0 68       	ori	r30, 0x80	; 128
    1440:	44 27       	eor	r20, r20
    1442:	ee 0f       	add	r30, r30
    1444:	44 1f       	adc	r20, r20
    1446:	fa 95       	dec	r31
    1448:	e1 f7       	brne	.-8      	; 0x1442 <exp+0x42>
    144a:	41 95       	neg	r20
    144c:	55 0b       	sbc	r21, r21
    144e:	58 d0       	rcall	.+176    	; 0x1500 <ldexp>
    1450:	0f 90       	pop	r0
    1452:	07 fe       	sbrs	r0, 7
    1454:	4c c0       	rjmp	.+152    	; 0x14ee <inverse>
    1456:	08 95       	ret

00001458 <__fp_mpack>:
    1458:	9f 3f       	cpi	r25, 0xFF	; 255
    145a:	31 f0       	breq	.+12     	; 0x1468 <__fp_mpack_finite+0xc>

0000145c <__fp_mpack_finite>:
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	20 f4       	brcc	.+8      	; 0x1468 <__fp_mpack_finite+0xc>
    1460:	87 95       	ror	r24
    1462:	77 95       	ror	r23
    1464:	67 95       	ror	r22
    1466:	b7 95       	ror	r27
    1468:	88 0f       	add	r24, r24
    146a:	91 1d       	adc	r25, r1
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	97 f9       	bld	r25, 7
    1472:	08 95       	ret

00001474 <__fp_norm2>:
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	88 1f       	adc	r24, r24
    147e:	d2 f7       	brpl	.-12     	; 0x1474 <__fp_norm2>
    1480:	08 95       	ret

00001482 <__fp_powser>:
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	1f 93       	push	r17
    1488:	0f 93       	push	r16
    148a:	ff 92       	push	r15
    148c:	ef 92       	push	r14
    148e:	df 92       	push	r13
    1490:	7b 01       	movw	r14, r22
    1492:	8c 01       	movw	r16, r24
    1494:	68 94       	set
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <__fp_powser+0x20>
    1498:	da 2e       	mov	r13, r26
    149a:	ef 01       	movw	r28, r30
    149c:	c7 de       	rcall	.-626    	; 0x122c <__mulsf3x>
    149e:	fe 01       	movw	r30, r28
    14a0:	e8 94       	clt
    14a2:	a5 91       	lpm	r26, Z+
    14a4:	25 91       	lpm	r18, Z+
    14a6:	35 91       	lpm	r19, Z+
    14a8:	45 91       	lpm	r20, Z+
    14aa:	55 91       	lpm	r21, Z+
    14ac:	ae f3       	brts	.-22     	; 0x1498 <__fp_powser+0x16>
    14ae:	ef 01       	movw	r28, r30
    14b0:	fb dc       	rcall	.-1546   	; 0xea8 <__addsf3x>
    14b2:	fe 01       	movw	r30, r28
    14b4:	97 01       	movw	r18, r14
    14b6:	a8 01       	movw	r20, r16
    14b8:	da 94       	dec	r13
    14ba:	79 f7       	brne	.-34     	; 0x149a <__fp_powser+0x18>
    14bc:	df 90       	pop	r13
    14be:	ef 90       	pop	r14
    14c0:	ff 90       	pop	r15
    14c2:	0f 91       	pop	r16
    14c4:	1f 91       	pop	r17
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <__fp_powsodd>:
    14cc:	9f 93       	push	r25
    14ce:	8f 93       	push	r24
    14d0:	7f 93       	push	r23
    14d2:	6f 93       	push	r22
    14d4:	ff 93       	push	r31
    14d6:	ef 93       	push	r30
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	9b de       	rcall	.-714    	; 0x1214 <__mulsf3>
    14de:	ef 91       	pop	r30
    14e0:	ff 91       	pop	r31
    14e2:	cf df       	rcall	.-98     	; 0x1482 <__fp_powser>
    14e4:	2f 91       	pop	r18
    14e6:	3f 91       	pop	r19
    14e8:	4f 91       	pop	r20
    14ea:	5f 91       	pop	r21
    14ec:	93 ce       	rjmp	.-730    	; 0x1214 <__mulsf3>

000014ee <inverse>:
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	80 e8       	ldi	r24, 0x80	; 128
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	2c cd       	rjmp	.-1448   	; 0xf54 <__divsf3>
    14fc:	01 ce       	rjmp	.-1022   	; 0x1100 <__fp_inf>
    14fe:	ac cf       	rjmp	.-168    	; 0x1458 <__fp_mpack>

00001500 <ldexp>:
    1500:	68 de       	rcall	.-816    	; 0x11d2 <__fp_splitA>
    1502:	e8 f3       	brcs	.-6      	; 0x14fe <inverse+0x10>
    1504:	99 23       	and	r25, r25
    1506:	d9 f3       	breq	.-10     	; 0x14fe <inverse+0x10>
    1508:	94 0f       	add	r25, r20
    150a:	51 1d       	adc	r21, r1
    150c:	bb f3       	brvs	.-18     	; 0x14fc <inverse+0xe>
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	50 40       	sbci	r21, 0x00	; 0
    1512:	94 f0       	brlt	.+36     	; 0x1538 <ldexp+0x38>
    1514:	59 f0       	breq	.+22     	; 0x152c <ldexp+0x2c>
    1516:	88 23       	and	r24, r24
    1518:	32 f0       	brmi	.+12     	; 0x1526 <ldexp+0x26>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	91 50       	subi	r25, 0x01	; 1
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	c1 f7       	brne	.-16     	; 0x1516 <ldexp+0x16>
    1526:	9e 3f       	cpi	r25, 0xFE	; 254
    1528:	51 05       	cpc	r21, r1
    152a:	44 f7       	brge	.-48     	; 0x14fc <inverse+0xe>
    152c:	88 0f       	add	r24, r24
    152e:	91 1d       	adc	r25, r1
    1530:	96 95       	lsr	r25
    1532:	87 95       	ror	r24
    1534:	97 f9       	bld	r25, 7
    1536:	08 95       	ret
    1538:	5f 3f       	cpi	r21, 0xFF	; 255
    153a:	ac f0       	brlt	.+42     	; 0x1566 <ldexp+0x66>
    153c:	98 3e       	cpi	r25, 0xE8	; 232
    153e:	9c f0       	brlt	.+38     	; 0x1566 <ldexp+0x66>
    1540:	bb 27       	eor	r27, r27
    1542:	86 95       	lsr	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b7 95       	ror	r27
    154a:	08 f4       	brcc	.+2      	; 0x154e <ldexp+0x4e>
    154c:	b1 60       	ori	r27, 0x01	; 1
    154e:	93 95       	inc	r25
    1550:	c1 f7       	brne	.-16     	; 0x1542 <ldexp+0x42>
    1552:	bb 0f       	add	r27, r27
    1554:	58 f7       	brcc	.-42     	; 0x152c <ldexp+0x2c>
    1556:	11 f4       	brne	.+4      	; 0x155c <ldexp+0x5c>
    1558:	60 ff       	sbrs	r22, 0
    155a:	e8 cf       	rjmp	.-48     	; 0x152c <ldexp+0x2c>
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	8f 4f       	sbci	r24, 0xFF	; 255
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	e3 cf       	rjmp	.-58     	; 0x152c <ldexp+0x2c>
    1566:	50 ce       	rjmp	.-864    	; 0x1208 <__fp_szero>
    1568:	0e f0       	brts	.+2      	; 0x156c <ldexp+0x6c>
    156a:	76 cf       	rjmp	.-276    	; 0x1458 <__fp_mpack>
    156c:	cf cd       	rjmp	.-1122   	; 0x110c <__fp_nan>
    156e:	68 94       	set
    1570:	c7 cd       	rjmp	.-1138   	; 0x1100 <__fp_inf>

00001572 <log>:
    1572:	2f de       	rcall	.-930    	; 0x11d2 <__fp_splitA>
    1574:	c8 f3       	brcs	.-14     	; 0x1568 <ldexp+0x68>
    1576:	99 23       	and	r25, r25
    1578:	d1 f3       	breq	.-12     	; 0x156e <ldexp+0x6e>
    157a:	c6 f3       	brts	.-16     	; 0x156c <ldexp+0x6c>
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	1f 93       	push	r17
    1582:	0f 93       	push	r16
    1584:	ff 92       	push	r15
    1586:	c9 2f       	mov	r28, r25
    1588:	dd 27       	eor	r29, r29
    158a:	88 23       	and	r24, r24
    158c:	2a f0       	brmi	.+10     	; 0x1598 <log+0x26>
    158e:	21 97       	sbiw	r28, 0x01	; 1
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	88 1f       	adc	r24, r24
    1596:	da f7       	brpl	.-10     	; 0x158e <log+0x1c>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f eb       	ldi	r21, 0xBF	; 191
    15a0:	9f e3       	ldi	r25, 0x3F	; 63
    15a2:	88 39       	cpi	r24, 0x98	; 152
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <log+0x3c>
    15a6:	80 3e       	cpi	r24, 0xE0	; 224
    15a8:	30 f0       	brcs	.+12     	; 0x15b6 <log+0x44>
    15aa:	21 96       	adiw	r28, 0x01	; 1
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	6b dc       	rcall	.-1834   	; 0xe86 <__addsf3>
    15b0:	e2 ed       	ldi	r30, 0xD2	; 210
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <log+0x4a>
    15b6:	67 dc       	rcall	.-1842   	; 0xe86 <__addsf3>
    15b8:	ef ef       	ldi	r30, 0xFF	; 255
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	62 df       	rcall	.-316    	; 0x1482 <__fp_powser>
    15be:	8b 01       	movw	r16, r22
    15c0:	be 01       	movw	r22, r28
    15c2:	ec 01       	movw	r28, r24
    15c4:	fb 2e       	mov	r15, r27
    15c6:	6f 57       	subi	r22, 0x7F	; 127
    15c8:	71 09       	sbc	r23, r1
    15ca:	75 95       	asr	r23
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 0b       	sbc	r24, r24
    15d0:	99 0b       	sbc	r25, r25
    15d2:	5b dd       	rcall	.-1354   	; 0x108a <__floatsisf>
    15d4:	28 e1       	ldi	r18, 0x18	; 24
    15d6:	32 e7       	ldi	r19, 0x72	; 114
    15d8:	41 e3       	ldi	r20, 0x31	; 49
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	27 de       	rcall	.-946    	; 0x122c <__mulsf3x>
    15de:	af 2d       	mov	r26, r15
    15e0:	98 01       	movw	r18, r16
    15e2:	ae 01       	movw	r20, r28
    15e4:	ff 90       	pop	r15
    15e6:	0f 91       	pop	r16
    15e8:	1f 91       	pop	r17
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	5c dc       	rcall	.-1864   	; 0xea8 <__addsf3x>
    15f0:	c6 cd       	rjmp	.-1140   	; 0x117e <__fp_round>

000015f2 <modf>:
    15f2:	fa 01       	movw	r30, r20
    15f4:	dc 01       	movw	r26, r24
    15f6:	aa 0f       	add	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	bf 57       	subi	r27, 0x7F	; 127
    1600:	28 f4       	brcc	.+10     	; 0x160c <modf+0x1a>
    1602:	22 27       	eor	r18, r18
    1604:	33 27       	eor	r19, r19
    1606:	44 27       	eor	r20, r20
    1608:	50 78       	andi	r21, 0x80	; 128
    160a:	1f c0       	rjmp	.+62     	; 0x164a <modf+0x58>
    160c:	b7 51       	subi	r27, 0x17	; 23
    160e:	88 f4       	brcc	.+34     	; 0x1632 <modf+0x40>
    1610:	ab 2f       	mov	r26, r27
    1612:	00 24       	eor	r0, r0
    1614:	46 95       	lsr	r20
    1616:	37 95       	ror	r19
    1618:	27 95       	ror	r18
    161a:	01 1c       	adc	r0, r1
    161c:	a3 95       	inc	r26
    161e:	d2 f3       	brmi	.-12     	; 0x1614 <modf+0x22>
    1620:	00 20       	and	r0, r0
    1622:	69 f0       	breq	.+26     	; 0x163e <modf+0x4c>
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	44 1f       	adc	r20, r20
    162a:	b3 95       	inc	r27
    162c:	da f3       	brmi	.-10     	; 0x1624 <modf+0x32>
    162e:	0d d0       	rcall	.+26     	; 0x164a <modf+0x58>
    1630:	29 cc       	rjmp	.-1966   	; 0xe84 <__subsf3>
    1632:	61 30       	cpi	r22, 0x01	; 1
    1634:	71 05       	cpc	r23, r1
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	8a 07       	cpc	r24, r26
    163a:	b9 46       	sbci	r27, 0x69	; 105
    163c:	30 f4       	brcc	.+12     	; 0x164a <modf+0x58>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	66 27       	eor	r22, r22
    1644:	77 27       	eor	r23, r23
    1646:	88 27       	eor	r24, r24
    1648:	90 78       	andi	r25, 0x80	; 128
    164a:	30 96       	adiw	r30, 0x00	; 0
    164c:	21 f0       	breq	.+8      	; 0x1656 <modf+0x64>
    164e:	20 83       	st	Z, r18
    1650:	31 83       	std	Z+1, r19	; 0x01
    1652:	42 83       	std	Z+2, r20	; 0x02
    1654:	53 83       	std	Z+3, r21	; 0x03
    1656:	08 95       	ret

00001658 <__divmodhi4>:
    1658:	97 fb       	bst	r25, 7
    165a:	07 2e       	mov	r0, r23
    165c:	16 f4       	brtc	.+4      	; 0x1662 <__divmodhi4+0xa>
    165e:	00 94       	com	r0
    1660:	06 d0       	rcall	.+12     	; 0x166e <__divmodhi4_neg1>
    1662:	77 fd       	sbrc	r23, 7
    1664:	08 d0       	rcall	.+16     	; 0x1676 <__divmodhi4_neg2>
    1666:	0b d0       	rcall	.+22     	; 0x167e <__udivmodhi4>
    1668:	07 fc       	sbrc	r0, 7
    166a:	05 d0       	rcall	.+10     	; 0x1676 <__divmodhi4_neg2>
    166c:	3e f4       	brtc	.+14     	; 0x167c <__divmodhi4_exit>

0000166e <__divmodhi4_neg1>:
    166e:	90 95       	com	r25
    1670:	81 95       	neg	r24
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	08 95       	ret

00001676 <__divmodhi4_neg2>:
    1676:	70 95       	com	r23
    1678:	61 95       	neg	r22
    167a:	7f 4f       	sbci	r23, 0xFF	; 255

0000167c <__divmodhi4_exit>:
    167c:	08 95       	ret

0000167e <__udivmodhi4>:
    167e:	aa 1b       	sub	r26, r26
    1680:	bb 1b       	sub	r27, r27
    1682:	51 e1       	ldi	r21, 0x11	; 17
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <__udivmodhi4_ep>

00001686 <__udivmodhi4_loop>:
    1686:	aa 1f       	adc	r26, r26
    1688:	bb 1f       	adc	r27, r27
    168a:	a6 17       	cp	r26, r22
    168c:	b7 07       	cpc	r27, r23
    168e:	10 f0       	brcs	.+4      	; 0x1694 <__udivmodhi4_ep>
    1690:	a6 1b       	sub	r26, r22
    1692:	b7 0b       	sbc	r27, r23

00001694 <__udivmodhi4_ep>:
    1694:	88 1f       	adc	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	5a 95       	dec	r21
    169a:	a9 f7       	brne	.-22     	; 0x1686 <__udivmodhi4_loop>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	08 95       	ret

000016a6 <calloc>:
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	86 9f       	mul	r24, r22
    16b0:	80 01       	movw	r16, r0
    16b2:	87 9f       	mul	r24, r23
    16b4:	10 0d       	add	r17, r0
    16b6:	96 9f       	mul	r25, r22
    16b8:	10 0d       	add	r17, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	c8 01       	movw	r24, r16
    16be:	0d d0       	rcall	.+26     	; 0x16da <malloc>
    16c0:	ec 01       	movw	r28, r24
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	21 f0       	breq	.+8      	; 0x16ce <calloc+0x28>
    16c6:	a8 01       	movw	r20, r16
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	4a d1       	rcall	.+660    	; 0x1962 <memset>
    16ce:	ce 01       	movw	r24, r28
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <malloc>:
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	91 05       	cpc	r25, r1
    16e2:	10 f4       	brcc	.+4      	; 0x16e8 <malloc+0xe>
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	e0 91 88 02 	lds	r30, 0x0288
    16ec:	f0 91 89 02 	lds	r31, 0x0289
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	a0 e0       	ldi	r26, 0x00	; 0
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	30 97       	sbiw	r30, 0x00	; 0
    16fa:	39 f1       	breq	.+78     	; 0x174a <malloc+0x70>
    16fc:	40 81       	ld	r20, Z
    16fe:	51 81       	ldd	r21, Z+1	; 0x01
    1700:	48 17       	cp	r20, r24
    1702:	59 07       	cpc	r21, r25
    1704:	b8 f0       	brcs	.+46     	; 0x1734 <malloc+0x5a>
    1706:	48 17       	cp	r20, r24
    1708:	59 07       	cpc	r21, r25
    170a:	71 f4       	brne	.+28     	; 0x1728 <malloc+0x4e>
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	10 97       	sbiw	r26, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <malloc+0x44>
    1714:	13 96       	adiw	r26, 0x03	; 3
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
    171a:	12 97       	sbiw	r26, 0x02	; 2
    171c:	2c c0       	rjmp	.+88     	; 0x1776 <malloc+0x9c>
    171e:	90 93 89 02 	sts	0x0289, r25
    1722:	80 93 88 02 	sts	0x0288, r24
    1726:	27 c0       	rjmp	.+78     	; 0x1776 <malloc+0x9c>
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	31 f0       	breq	.+12     	; 0x173a <malloc+0x60>
    172e:	42 17       	cp	r20, r18
    1730:	53 07       	cpc	r21, r19
    1732:	18 f0       	brcs	.+6      	; 0x173a <malloc+0x60>
    1734:	a9 01       	movw	r20, r18
    1736:	db 01       	movw	r26, r22
    1738:	01 c0       	rjmp	.+2      	; 0x173c <malloc+0x62>
    173a:	ef 01       	movw	r28, r30
    173c:	9a 01       	movw	r18, r20
    173e:	bd 01       	movw	r22, r26
    1740:	df 01       	movw	r26, r30
    1742:	02 80       	ldd	r0, Z+2	; 0x02
    1744:	f3 81       	ldd	r31, Z+3	; 0x03
    1746:	e0 2d       	mov	r30, r0
    1748:	d7 cf       	rjmp	.-82     	; 0x16f8 <malloc+0x1e>
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	f9 f0       	breq	.+62     	; 0x178e <malloc+0xb4>
    1750:	28 1b       	sub	r18, r24
    1752:	39 0b       	sbc	r19, r25
    1754:	24 30       	cpi	r18, 0x04	; 4
    1756:	31 05       	cpc	r19, r1
    1758:	80 f4       	brcc	.+32     	; 0x177a <malloc+0xa0>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	61 15       	cp	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	21 f0       	breq	.+8      	; 0x176c <malloc+0x92>
    1764:	fb 01       	movw	r30, r22
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	82 83       	std	Z+2, r24	; 0x02
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <malloc+0x9a>
    176c:	90 93 89 02 	sts	0x0289, r25
    1770:	80 93 88 02 	sts	0x0288, r24
    1774:	fe 01       	movw	r30, r28
    1776:	32 96       	adiw	r30, 0x02	; 2
    1778:	44 c0       	rjmp	.+136    	; 0x1802 <malloc+0x128>
    177a:	fe 01       	movw	r30, r28
    177c:	e2 0f       	add	r30, r18
    177e:	f3 1f       	adc	r31, r19
    1780:	81 93       	st	Z+, r24
    1782:	91 93       	st	Z+, r25
    1784:	22 50       	subi	r18, 0x02	; 2
    1786:	31 09       	sbc	r19, r1
    1788:	39 83       	std	Y+1, r19	; 0x01
    178a:	28 83       	st	Y, r18
    178c:	3a c0       	rjmp	.+116    	; 0x1802 <malloc+0x128>
    178e:	20 91 86 02 	lds	r18, 0x0286
    1792:	30 91 87 02 	lds	r19, 0x0287
    1796:	23 2b       	or	r18, r19
    1798:	41 f4       	brne	.+16     	; 0x17aa <malloc+0xd0>
    179a:	20 91 02 01 	lds	r18, 0x0102
    179e:	30 91 03 01 	lds	r19, 0x0103
    17a2:	30 93 87 02 	sts	0x0287, r19
    17a6:	20 93 86 02 	sts	0x0286, r18
    17aa:	20 91 00 01 	lds	r18, 0x0100
    17ae:	30 91 01 01 	lds	r19, 0x0101
    17b2:	21 15       	cp	r18, r1
    17b4:	31 05       	cpc	r19, r1
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <malloc+0xee>
    17b8:	2d b7       	in	r18, 0x3d	; 61
    17ba:	3e b7       	in	r19, 0x3e	; 62
    17bc:	40 91 04 01 	lds	r20, 0x0104
    17c0:	50 91 05 01 	lds	r21, 0x0105
    17c4:	24 1b       	sub	r18, r20
    17c6:	35 0b       	sbc	r19, r21
    17c8:	e0 91 86 02 	lds	r30, 0x0286
    17cc:	f0 91 87 02 	lds	r31, 0x0287
    17d0:	e2 17       	cp	r30, r18
    17d2:	f3 07       	cpc	r31, r19
    17d4:	a0 f4       	brcc	.+40     	; 0x17fe <malloc+0x124>
    17d6:	2e 1b       	sub	r18, r30
    17d8:	3f 0b       	sbc	r19, r31
    17da:	28 17       	cp	r18, r24
    17dc:	39 07       	cpc	r19, r25
    17de:	78 f0       	brcs	.+30     	; 0x17fe <malloc+0x124>
    17e0:	ac 01       	movw	r20, r24
    17e2:	4e 5f       	subi	r20, 0xFE	; 254
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	24 17       	cp	r18, r20
    17e8:	35 07       	cpc	r19, r21
    17ea:	48 f0       	brcs	.+18     	; 0x17fe <malloc+0x124>
    17ec:	4e 0f       	add	r20, r30
    17ee:	5f 1f       	adc	r21, r31
    17f0:	50 93 87 02 	sts	0x0287, r21
    17f4:	40 93 86 02 	sts	0x0286, r20
    17f8:	81 93       	st	Z+, r24
    17fa:	91 93       	st	Z+, r25
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <malloc+0x128>
    17fe:	e0 e0       	ldi	r30, 0x00	; 0
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	cf 01       	movw	r24, r30
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <free>:
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	09 f4       	brne	.+2      	; 0x1814 <free+0xa>
    1812:	87 c0       	rjmp	.+270    	; 0x1922 <free+0x118>
    1814:	fc 01       	movw	r30, r24
    1816:	32 97       	sbiw	r30, 0x02	; 2
    1818:	13 82       	std	Z+3, r1	; 0x03
    181a:	12 82       	std	Z+2, r1	; 0x02
    181c:	c0 91 88 02 	lds	r28, 0x0288
    1820:	d0 91 89 02 	lds	r29, 0x0289
    1824:	20 97       	sbiw	r28, 0x00	; 0
    1826:	81 f4       	brne	.+32     	; 0x1848 <free+0x3e>
    1828:	20 81       	ld	r18, Z
    182a:	31 81       	ldd	r19, Z+1	; 0x01
    182c:	28 0f       	add	r18, r24
    182e:	39 1f       	adc	r19, r25
    1830:	80 91 86 02 	lds	r24, 0x0286
    1834:	90 91 87 02 	lds	r25, 0x0287
    1838:	82 17       	cp	r24, r18
    183a:	93 07       	cpc	r25, r19
    183c:	79 f5       	brne	.+94     	; 0x189c <free+0x92>
    183e:	f0 93 87 02 	sts	0x0287, r31
    1842:	e0 93 86 02 	sts	0x0286, r30
    1846:	6d c0       	rjmp	.+218    	; 0x1922 <free+0x118>
    1848:	de 01       	movw	r26, r28
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	ae 17       	cp	r26, r30
    1850:	bf 07       	cpc	r27, r31
    1852:	50 f4       	brcc	.+20     	; 0x1868 <free+0x5e>
    1854:	12 96       	adiw	r26, 0x02	; 2
    1856:	4d 91       	ld	r20, X+
    1858:	5c 91       	ld	r21, X
    185a:	13 97       	sbiw	r26, 0x03	; 3
    185c:	9d 01       	movw	r18, r26
    185e:	41 15       	cp	r20, r1
    1860:	51 05       	cpc	r21, r1
    1862:	09 f1       	breq	.+66     	; 0x18a6 <free+0x9c>
    1864:	da 01       	movw	r26, r20
    1866:	f3 cf       	rjmp	.-26     	; 0x184e <free+0x44>
    1868:	b3 83       	std	Z+3, r27	; 0x03
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	40 81       	ld	r20, Z
    186e:	51 81       	ldd	r21, Z+1	; 0x01
    1870:	84 0f       	add	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	8a 17       	cp	r24, r26
    1876:	9b 07       	cpc	r25, r27
    1878:	71 f4       	brne	.+28     	; 0x1896 <free+0x8c>
    187a:	8d 91       	ld	r24, X+
    187c:	9c 91       	ld	r25, X
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	84 0f       	add	r24, r20
    1882:	95 1f       	adc	r25, r21
    1884:	02 96       	adiw	r24, 0x02	; 2
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	12 96       	adiw	r26, 0x02	; 2
    188c:	8d 91       	ld	r24, X+
    188e:	9c 91       	ld	r25, X
    1890:	13 97       	sbiw	r26, 0x03	; 3
    1892:	93 83       	std	Z+3, r25	; 0x03
    1894:	82 83       	std	Z+2, r24	; 0x02
    1896:	21 15       	cp	r18, r1
    1898:	31 05       	cpc	r19, r1
    189a:	29 f4       	brne	.+10     	; 0x18a6 <free+0x9c>
    189c:	f0 93 89 02 	sts	0x0289, r31
    18a0:	e0 93 88 02 	sts	0x0288, r30
    18a4:	3e c0       	rjmp	.+124    	; 0x1922 <free+0x118>
    18a6:	d9 01       	movw	r26, r18
    18a8:	13 96       	adiw	r26, 0x03	; 3
    18aa:	fc 93       	st	X, r31
    18ac:	ee 93       	st	-X, r30
    18ae:	12 97       	sbiw	r26, 0x02	; 2
    18b0:	4d 91       	ld	r20, X+
    18b2:	5d 91       	ld	r21, X+
    18b4:	a4 0f       	add	r26, r20
    18b6:	b5 1f       	adc	r27, r21
    18b8:	ea 17       	cp	r30, r26
    18ba:	fb 07       	cpc	r31, r27
    18bc:	79 f4       	brne	.+30     	; 0x18dc <free+0xd2>
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	84 0f       	add	r24, r20
    18c4:	95 1f       	adc	r25, r21
    18c6:	02 96       	adiw	r24, 0x02	; 2
    18c8:	d9 01       	movw	r26, r18
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	9c 93       	st	X, r25
    18ce:	8e 93       	st	-X, r24
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	13 96       	adiw	r26, 0x03	; 3
    18d6:	9c 93       	st	X, r25
    18d8:	8e 93       	st	-X, r24
    18da:	12 97       	sbiw	r26, 0x02	; 2
    18dc:	e0 e0       	ldi	r30, 0x00	; 0
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	19 f0       	breq	.+6      	; 0x18ee <free+0xe4>
    18e8:	fe 01       	movw	r30, r28
    18ea:	ec 01       	movw	r28, r24
    18ec:	f9 cf       	rjmp	.-14     	; 0x18e0 <free+0xd6>
    18ee:	ce 01       	movw	r24, r28
    18f0:	02 96       	adiw	r24, 0x02	; 2
    18f2:	28 81       	ld	r18, Y
    18f4:	39 81       	ldd	r19, Y+1	; 0x01
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	20 91 86 02 	lds	r18, 0x0286
    18fe:	30 91 87 02 	lds	r19, 0x0287
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	69 f4       	brne	.+26     	; 0x1922 <free+0x118>
    1908:	30 97       	sbiw	r30, 0x00	; 0
    190a:	29 f4       	brne	.+10     	; 0x1916 <free+0x10c>
    190c:	10 92 89 02 	sts	0x0289, r1
    1910:	10 92 88 02 	sts	0x0288, r1
    1914:	02 c0       	rjmp	.+4      	; 0x191a <free+0x110>
    1916:	13 82       	std	Z+3, r1	; 0x03
    1918:	12 82       	std	Z+2, r1	; 0x02
    191a:	d0 93 87 02 	sts	0x0287, r29
    191e:	c0 93 86 02 	sts	0x0286, r28
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <atoi>:
    1928:	fc 01       	movw	r30, r24
    192a:	88 27       	eor	r24, r24
    192c:	99 27       	eor	r25, r25
    192e:	e8 94       	clt
    1930:	21 91       	ld	r18, Z+
    1932:	20 32       	cpi	r18, 0x20	; 32
    1934:	e9 f3       	breq	.-6      	; 0x1930 <atoi+0x8>
    1936:	29 30       	cpi	r18, 0x09	; 9
    1938:	10 f0       	brcs	.+4      	; 0x193e <atoi+0x16>
    193a:	2e 30       	cpi	r18, 0x0E	; 14
    193c:	c8 f3       	brcs	.-14     	; 0x1930 <atoi+0x8>
    193e:	2b 32       	cpi	r18, 0x2B	; 43
    1940:	39 f0       	breq	.+14     	; 0x1950 <atoi+0x28>
    1942:	2d 32       	cpi	r18, 0x2D	; 45
    1944:	31 f4       	brne	.+12     	; 0x1952 <atoi+0x2a>
    1946:	68 94       	set
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <atoi+0x28>
    194a:	22 d0       	rcall	.+68     	; 0x1990 <__mulhi_const_10>
    194c:	82 0f       	add	r24, r18
    194e:	91 1d       	adc	r25, r1
    1950:	21 91       	ld	r18, Z+
    1952:	20 53       	subi	r18, 0x30	; 48
    1954:	2a 30       	cpi	r18, 0x0A	; 10
    1956:	c8 f3       	brcs	.-14     	; 0x194a <atoi+0x22>
    1958:	1e f4       	brtc	.+6      	; 0x1960 <atoi+0x38>
    195a:	90 95       	com	r25
    195c:	81 95       	neg	r24
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	08 95       	ret

00001962 <memset>:
    1962:	dc 01       	movw	r26, r24
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <memset+0x6>
    1966:	6d 93       	st	X+, r22
    1968:	41 50       	subi	r20, 0x01	; 1
    196a:	50 40       	sbci	r21, 0x00	; 0
    196c:	e0 f7       	brcc	.-8      	; 0x1966 <memset+0x4>
    196e:	08 95       	ret

00001970 <strcmp>:
    1970:	fb 01       	movw	r30, r22
    1972:	dc 01       	movw	r26, r24
    1974:	8d 91       	ld	r24, X+
    1976:	01 90       	ld	r0, Z+
    1978:	80 19       	sub	r24, r0
    197a:	01 10       	cpse	r0, r1
    197c:	d9 f3       	breq	.-10     	; 0x1974 <strcmp+0x4>
    197e:	99 0b       	sbc	r25, r25
    1980:	08 95       	ret

00001982 <strcpy>:
    1982:	fb 01       	movw	r30, r22
    1984:	dc 01       	movw	r26, r24
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	00 20       	and	r0, r0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <strcpy+0x4>
    198e:	08 95       	ret

00001990 <__mulhi_const_10>:
    1990:	7a e0       	ldi	r23, 0x0A	; 10
    1992:	97 9f       	mul	r25, r23
    1994:	90 2d       	mov	r25, r0
    1996:	87 9f       	mul	r24, r23
    1998:	80 2d       	mov	r24, r0
    199a:	91 0d       	add	r25, r1
    199c:	11 24       	eor	r1, r1
    199e:	08 95       	ret

000019a0 <sprintf>:
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	2e 97       	sbiw	r28, 0x0e	; 14
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	0d 89       	ldd	r16, Y+21	; 0x15
    19ba:	1e 89       	ldd	r17, Y+22	; 0x16
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	8c 83       	std	Y+4, r24	; 0x04
    19c0:	1a 83       	std	Y+2, r17	; 0x02
    19c2:	09 83       	std	Y+1, r16	; 0x01
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	9f e7       	ldi	r25, 0x7F	; 127
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	ae 01       	movw	r20, r28
    19ce:	47 5e       	subi	r20, 0xE7	; 231
    19d0:	5f 4f       	sbci	r21, 0xFF	; 255
    19d2:	6f 89       	ldd	r22, Y+23	; 0x17
    19d4:	78 8d       	ldd	r23, Y+24	; 0x18
    19d6:	ce 01       	movw	r24, r28
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	48 d0       	rcall	.+144    	; 0x1a6c <vfprintf>
    19dc:	ef 81       	ldd	r30, Y+7	; 0x07
    19de:	f8 85       	ldd	r31, Y+8	; 0x08
    19e0:	e0 0f       	add	r30, r16
    19e2:	f1 1f       	adc	r31, r17
    19e4:	10 82       	st	Z, r1
    19e6:	2e 96       	adiw	r28, 0x0e	; 14
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <vsnprintf>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	2e 97       	sbiw	r28, 0x0e	; 14
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	8c 01       	movw	r16, r24
    1a16:	ca 01       	movw	r24, r20
    1a18:	46 e0       	ldi	r20, 0x06	; 6
    1a1a:	4c 83       	std	Y+4, r20	; 0x04
    1a1c:	1a 83       	std	Y+2, r17	; 0x02
    1a1e:	09 83       	std	Y+1, r16	; 0x01
    1a20:	77 ff       	sbrs	r23, 7
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vsnprintf+0x2c>
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e8       	ldi	r23, 0x80	; 128
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	71 09       	sbc	r23, r1
    1a2c:	7e 83       	std	Y+6, r23	; 0x06
    1a2e:	6d 83       	std	Y+5, r22	; 0x05
    1a30:	a9 01       	movw	r20, r18
    1a32:	bc 01       	movw	r22, r24
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	19 d0       	rcall	.+50     	; 0x1a6c <vfprintf>
    1a3a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a3c:	5e 81       	ldd	r21, Y+6	; 0x06
    1a3e:	57 fd       	sbrc	r21, 7
    1a40:	0a c0       	rjmp	.+20     	; 0x1a56 <vsnprintf+0x5a>
    1a42:	2f 81       	ldd	r18, Y+7	; 0x07
    1a44:	38 85       	ldd	r19, Y+8	; 0x08
    1a46:	42 17       	cp	r20, r18
    1a48:	53 07       	cpc	r21, r19
    1a4a:	0c f4       	brge	.+2      	; 0x1a4e <vsnprintf+0x52>
    1a4c:	9a 01       	movw	r18, r20
    1a4e:	f8 01       	movw	r30, r16
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	10 82       	st	Z, r1
    1a56:	2e 96       	adiw	r28, 0x0e	; 14
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <vfprintf>:
    1a6c:	2f 92       	push	r2
    1a6e:	3f 92       	push	r3
    1a70:	4f 92       	push	r4
    1a72:	5f 92       	push	r5
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	2c 97       	sbiw	r28, 0x0c	; 12
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	6b 01       	movw	r12, r22
    1aa4:	8a 01       	movw	r16, r20
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	17 82       	std	Z+7, r1	; 0x07
    1aaa:	16 82       	std	Z+6, r1	; 0x06
    1aac:	83 81       	ldd	r24, Z+3	; 0x03
    1aae:	81 ff       	sbrs	r24, 1
    1ab0:	b0 c1       	rjmp	.+864    	; 0x1e12 <vfprintf+0x3a6>
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	4c 01       	movw	r8, r24
    1ab8:	f7 01       	movw	r30, r14
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	f6 01       	movw	r30, r12
    1abe:	93 fd       	sbrc	r25, 3
    1ac0:	85 91       	lpm	r24, Z+
    1ac2:	93 ff       	sbrs	r25, 3
    1ac4:	81 91       	ld	r24, Z+
    1ac6:	6f 01       	movw	r12, r30
    1ac8:	88 23       	and	r24, r24
    1aca:	09 f4       	brne	.+2      	; 0x1ace <vfprintf+0x62>
    1acc:	9e c1       	rjmp	.+828    	; 0x1e0a <vfprintf+0x39e>
    1ace:	85 32       	cpi	r24, 0x25	; 37
    1ad0:	39 f4       	brne	.+14     	; 0x1ae0 <vfprintf+0x74>
    1ad2:	93 fd       	sbrc	r25, 3
    1ad4:	85 91       	lpm	r24, Z+
    1ad6:	93 ff       	sbrs	r25, 3
    1ad8:	81 91       	ld	r24, Z+
    1ada:	6f 01       	movw	r12, r30
    1adc:	85 32       	cpi	r24, 0x25	; 37
    1ade:	21 f4       	brne	.+8      	; 0x1ae8 <vfprintf+0x7c>
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	c7 d1       	rcall	.+910    	; 0x1e74 <fputc>
    1ae6:	e8 cf       	rjmp	.-48     	; 0x1ab8 <vfprintf+0x4c>
    1ae8:	51 2c       	mov	r5, r1
    1aea:	31 2c       	mov	r3, r1
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	20 32       	cpi	r18, 0x20	; 32
    1af0:	a0 f4       	brcc	.+40     	; 0x1b1a <vfprintf+0xae>
    1af2:	8b 32       	cpi	r24, 0x2B	; 43
    1af4:	69 f0       	breq	.+26     	; 0x1b10 <vfprintf+0xa4>
    1af6:	30 f4       	brcc	.+12     	; 0x1b04 <vfprintf+0x98>
    1af8:	80 32       	cpi	r24, 0x20	; 32
    1afa:	59 f0       	breq	.+22     	; 0x1b12 <vfprintf+0xa6>
    1afc:	83 32       	cpi	r24, 0x23	; 35
    1afe:	69 f4       	brne	.+26     	; 0x1b1a <vfprintf+0xae>
    1b00:	20 61       	ori	r18, 0x10	; 16
    1b02:	2c c0       	rjmp	.+88     	; 0x1b5c <vfprintf+0xf0>
    1b04:	8d 32       	cpi	r24, 0x2D	; 45
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <vfprintf+0xaa>
    1b08:	80 33       	cpi	r24, 0x30	; 48
    1b0a:	39 f4       	brne	.+14     	; 0x1b1a <vfprintf+0xae>
    1b0c:	21 60       	ori	r18, 0x01	; 1
    1b0e:	26 c0       	rjmp	.+76     	; 0x1b5c <vfprintf+0xf0>
    1b10:	22 60       	ori	r18, 0x02	; 2
    1b12:	24 60       	ori	r18, 0x04	; 4
    1b14:	23 c0       	rjmp	.+70     	; 0x1b5c <vfprintf+0xf0>
    1b16:	28 60       	ori	r18, 0x08	; 8
    1b18:	21 c0       	rjmp	.+66     	; 0x1b5c <vfprintf+0xf0>
    1b1a:	27 fd       	sbrc	r18, 7
    1b1c:	27 c0       	rjmp	.+78     	; 0x1b6c <vfprintf+0x100>
    1b1e:	30 ed       	ldi	r19, 0xD0	; 208
    1b20:	38 0f       	add	r19, r24
    1b22:	3a 30       	cpi	r19, 0x0A	; 10
    1b24:	78 f4       	brcc	.+30     	; 0x1b44 <vfprintf+0xd8>
    1b26:	26 ff       	sbrs	r18, 6
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0xca>
    1b2a:	fa e0       	ldi	r31, 0x0A	; 10
    1b2c:	5f 9e       	mul	r5, r31
    1b2e:	30 0d       	add	r19, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	53 2e       	mov	r5, r19
    1b34:	13 c0       	rjmp	.+38     	; 0x1b5c <vfprintf+0xf0>
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	38 9e       	mul	r3, r24
    1b3a:	30 0d       	add	r19, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	33 2e       	mov	r3, r19
    1b40:	20 62       	ori	r18, 0x20	; 32
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <vfprintf+0xf0>
    1b44:	8e 32       	cpi	r24, 0x2E	; 46
    1b46:	21 f4       	brne	.+8      	; 0x1b50 <vfprintf+0xe4>
    1b48:	26 fd       	sbrc	r18, 6
    1b4a:	5f c1       	rjmp	.+702    	; 0x1e0a <vfprintf+0x39e>
    1b4c:	20 64       	ori	r18, 0x40	; 64
    1b4e:	06 c0       	rjmp	.+12     	; 0x1b5c <vfprintf+0xf0>
    1b50:	8c 36       	cpi	r24, 0x6C	; 108
    1b52:	11 f4       	brne	.+4      	; 0x1b58 <vfprintf+0xec>
    1b54:	20 68       	ori	r18, 0x80	; 128
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0xf0>
    1b58:	88 36       	cpi	r24, 0x68	; 104
    1b5a:	41 f4       	brne	.+16     	; 0x1b6c <vfprintf+0x100>
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	93 fd       	sbrc	r25, 3
    1b60:	85 91       	lpm	r24, Z+
    1b62:	93 ff       	sbrs	r25, 3
    1b64:	81 91       	ld	r24, Z+
    1b66:	6f 01       	movw	r12, r30
    1b68:	81 11       	cpse	r24, r1
    1b6a:	c1 cf       	rjmp	.-126    	; 0x1aee <vfprintf+0x82>
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	9f 7d       	andi	r25, 0xDF	; 223
    1b70:	95 54       	subi	r25, 0x45	; 69
    1b72:	93 30       	cpi	r25, 0x03	; 3
    1b74:	28 f4       	brcc	.+10     	; 0x1b80 <vfprintf+0x114>
    1b76:	0c 5f       	subi	r16, 0xFC	; 252
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	ff e3       	ldi	r31, 0x3F	; 63
    1b7c:	f9 83       	std	Y+1, r31	; 0x01
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <vfprintf+0x12e>
    1b80:	83 36       	cpi	r24, 0x63	; 99
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <vfprintf+0x124>
    1b84:	83 37       	cpi	r24, 0x73	; 115
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <vfprintf+0x138>
    1b88:	83 35       	cpi	r24, 0x53	; 83
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <vfprintf+0x122>
    1b8c:	57 c0       	rjmp	.+174    	; 0x1c3c <vfprintf+0x1d0>
    1b8e:	21 c0       	rjmp	.+66     	; 0x1bd2 <vfprintf+0x166>
    1b90:	f8 01       	movw	r30, r16
    1b92:	80 81       	ld	r24, Z
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	0e 5f       	subi	r16, 0xFE	; 254
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	44 24       	eor	r4, r4
    1b9c:	43 94       	inc	r4
    1b9e:	51 2c       	mov	r5, r1
    1ba0:	54 01       	movw	r10, r8
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <vfprintf+0x160>
    1ba4:	38 01       	movw	r6, r16
    1ba6:	f2 e0       	ldi	r31, 0x02	; 2
    1ba8:	6f 0e       	add	r6, r31
    1baa:	71 1c       	adc	r7, r1
    1bac:	f8 01       	movw	r30, r16
    1bae:	a0 80       	ld	r10, Z
    1bb0:	b1 80       	ldd	r11, Z+1	; 0x01
    1bb2:	26 ff       	sbrs	r18, 6
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <vfprintf+0x150>
    1bb6:	65 2d       	mov	r22, r5
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x154>
    1bbc:	6f ef       	ldi	r22, 0xFF	; 255
    1bbe:	7f ef       	ldi	r23, 0xFF	; 255
    1bc0:	c5 01       	movw	r24, r10
    1bc2:	2c 87       	std	Y+12, r18	; 0x0c
    1bc4:	4c d1       	rcall	.+664    	; 0x1e5e <strnlen>
    1bc6:	2c 01       	movw	r4, r24
    1bc8:	83 01       	movw	r16, r6
    1bca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bcc:	2f 77       	andi	r18, 0x7F	; 127
    1bce:	22 2e       	mov	r2, r18
    1bd0:	16 c0       	rjmp	.+44     	; 0x1bfe <vfprintf+0x192>
    1bd2:	38 01       	movw	r6, r16
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
    1bd6:	6f 0e       	add	r6, r31
    1bd8:	71 1c       	adc	r7, r1
    1bda:	f8 01       	movw	r30, r16
    1bdc:	a0 80       	ld	r10, Z
    1bde:	b1 80       	ldd	r11, Z+1	; 0x01
    1be0:	26 ff       	sbrs	r18, 6
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <vfprintf+0x17e>
    1be4:	65 2d       	mov	r22, r5
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <vfprintf+0x182>
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f ef       	ldi	r23, 0xFF	; 255
    1bee:	c5 01       	movw	r24, r10
    1bf0:	2c 87       	std	Y+12, r18	; 0x0c
    1bf2:	2a d1       	rcall	.+596    	; 0x1e48 <strnlen_P>
    1bf4:	2c 01       	movw	r4, r24
    1bf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf8:	20 68       	ori	r18, 0x80	; 128
    1bfa:	22 2e       	mov	r2, r18
    1bfc:	83 01       	movw	r16, r6
    1bfe:	23 fc       	sbrc	r2, 3
    1c00:	19 c0       	rjmp	.+50     	; 0x1c34 <vfprintf+0x1c8>
    1c02:	83 2d       	mov	r24, r3
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	48 16       	cp	r4, r24
    1c08:	59 06       	cpc	r5, r25
    1c0a:	a0 f4       	brcc	.+40     	; 0x1c34 <vfprintf+0x1c8>
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	30 d1       	rcall	.+608    	; 0x1e74 <fputc>
    1c14:	3a 94       	dec	r3
    1c16:	f5 cf       	rjmp	.-22     	; 0x1c02 <vfprintf+0x196>
    1c18:	f5 01       	movw	r30, r10
    1c1a:	27 fc       	sbrc	r2, 7
    1c1c:	85 91       	lpm	r24, Z+
    1c1e:	27 fe       	sbrs	r2, 7
    1c20:	81 91       	ld	r24, Z+
    1c22:	5f 01       	movw	r10, r30
    1c24:	b7 01       	movw	r22, r14
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	25 d1       	rcall	.+586    	; 0x1e74 <fputc>
    1c2a:	31 10       	cpse	r3, r1
    1c2c:	3a 94       	dec	r3
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	4f 1a       	sub	r4, r31
    1c32:	51 08       	sbc	r5, r1
    1c34:	41 14       	cp	r4, r1
    1c36:	51 04       	cpc	r5, r1
    1c38:	79 f7       	brne	.-34     	; 0x1c18 <vfprintf+0x1ac>
    1c3a:	de c0       	rjmp	.+444    	; 0x1df8 <vfprintf+0x38c>
    1c3c:	84 36       	cpi	r24, 0x64	; 100
    1c3e:	11 f0       	breq	.+4      	; 0x1c44 <vfprintf+0x1d8>
    1c40:	89 36       	cpi	r24, 0x69	; 105
    1c42:	31 f5       	brne	.+76     	; 0x1c90 <vfprintf+0x224>
    1c44:	f8 01       	movw	r30, r16
    1c46:	27 ff       	sbrs	r18, 7
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <vfprintf+0x1ec>
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	0c 5f       	subi	r16, 0xFC	; 252
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <vfprintf+0x1fc>
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	88 27       	eor	r24, r24
    1c5e:	77 fd       	sbrc	r23, 7
    1c60:	80 95       	com	r24
    1c62:	98 2f       	mov	r25, r24
    1c64:	0e 5f       	subi	r16, 0xFE	; 254
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	2f 76       	andi	r18, 0x6F	; 111
    1c6a:	b2 2e       	mov	r11, r18
    1c6c:	97 ff       	sbrs	r25, 7
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <vfprintf+0x216>
    1c70:	90 95       	com	r25
    1c72:	80 95       	com	r24
    1c74:	70 95       	com	r23
    1c76:	61 95       	neg	r22
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	20 68       	ori	r18, 0x80	; 128
    1c80:	b2 2e       	mov	r11, r18
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	a4 01       	movw	r20, r8
    1c88:	27 d1       	rcall	.+590    	; 0x1ed8 <__ultoa_invert>
    1c8a:	a8 2e       	mov	r10, r24
    1c8c:	a8 18       	sub	r10, r8
    1c8e:	43 c0       	rjmp	.+134    	; 0x1d16 <vfprintf+0x2aa>
    1c90:	85 37       	cpi	r24, 0x75	; 117
    1c92:	29 f4       	brne	.+10     	; 0x1c9e <vfprintf+0x232>
    1c94:	2f 7e       	andi	r18, 0xEF	; 239
    1c96:	b2 2e       	mov	r11, r18
    1c98:	2a e0       	ldi	r18, 0x0A	; 10
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	25 c0       	rjmp	.+74     	; 0x1ce8 <vfprintf+0x27c>
    1c9e:	f2 2f       	mov	r31, r18
    1ca0:	f9 7f       	andi	r31, 0xF9	; 249
    1ca2:	bf 2e       	mov	r11, r31
    1ca4:	8f 36       	cpi	r24, 0x6F	; 111
    1ca6:	c1 f0       	breq	.+48     	; 0x1cd8 <vfprintf+0x26c>
    1ca8:	18 f4       	brcc	.+6      	; 0x1cb0 <vfprintf+0x244>
    1caa:	88 35       	cpi	r24, 0x58	; 88
    1cac:	79 f0       	breq	.+30     	; 0x1ccc <vfprintf+0x260>
    1cae:	ad c0       	rjmp	.+346    	; 0x1e0a <vfprintf+0x39e>
    1cb0:	80 37       	cpi	r24, 0x70	; 112
    1cb2:	19 f0       	breq	.+6      	; 0x1cba <vfprintf+0x24e>
    1cb4:	88 37       	cpi	r24, 0x78	; 120
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <vfprintf+0x254>
    1cb8:	a8 c0       	rjmp	.+336    	; 0x1e0a <vfprintf+0x39e>
    1cba:	2f 2f       	mov	r18, r31
    1cbc:	20 61       	ori	r18, 0x10	; 16
    1cbe:	b2 2e       	mov	r11, r18
    1cc0:	b4 fe       	sbrs	r11, 4
    1cc2:	0d c0       	rjmp	.+26     	; 0x1cde <vfprintf+0x272>
    1cc4:	8b 2d       	mov	r24, r11
    1cc6:	84 60       	ori	r24, 0x04	; 4
    1cc8:	b8 2e       	mov	r11, r24
    1cca:	09 c0       	rjmp	.+18     	; 0x1cde <vfprintf+0x272>
    1ccc:	24 ff       	sbrs	r18, 4
    1cce:	0a c0       	rjmp	.+20     	; 0x1ce4 <vfprintf+0x278>
    1cd0:	9f 2f       	mov	r25, r31
    1cd2:	96 60       	ori	r25, 0x06	; 6
    1cd4:	b9 2e       	mov	r11, r25
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <vfprintf+0x278>
    1cd8:	28 e0       	ldi	r18, 0x08	; 8
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <vfprintf+0x27c>
    1cde:	20 e1       	ldi	r18, 0x10	; 16
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <vfprintf+0x27c>
    1ce4:	20 e1       	ldi	r18, 0x10	; 16
    1ce6:	32 e0       	ldi	r19, 0x02	; 2
    1ce8:	f8 01       	movw	r30, r16
    1cea:	b7 fe       	sbrs	r11, 7
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <vfprintf+0x290>
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	0c 5f       	subi	r16, 0xFC	; 252
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <vfprintf+0x29c>
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 5f       	subi	r16, 0xFE	; 254
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	a4 01       	movw	r20, r8
    1d0a:	e6 d0       	rcall	.+460    	; 0x1ed8 <__ultoa_invert>
    1d0c:	a8 2e       	mov	r10, r24
    1d0e:	a8 18       	sub	r10, r8
    1d10:	fb 2d       	mov	r31, r11
    1d12:	ff 77       	andi	r31, 0x7F	; 127
    1d14:	bf 2e       	mov	r11, r31
    1d16:	b6 fe       	sbrs	r11, 6
    1d18:	0b c0       	rjmp	.+22     	; 0x1d30 <vfprintf+0x2c4>
    1d1a:	2b 2d       	mov	r18, r11
    1d1c:	2e 7f       	andi	r18, 0xFE	; 254
    1d1e:	a5 14       	cp	r10, r5
    1d20:	50 f4       	brcc	.+20     	; 0x1d36 <vfprintf+0x2ca>
    1d22:	b4 fe       	sbrs	r11, 4
    1d24:	0a c0       	rjmp	.+20     	; 0x1d3a <vfprintf+0x2ce>
    1d26:	b2 fc       	sbrc	r11, 2
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <vfprintf+0x2ce>
    1d2a:	2b 2d       	mov	r18, r11
    1d2c:	2e 7e       	andi	r18, 0xEE	; 238
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <vfprintf+0x2ce>
    1d30:	7a 2c       	mov	r7, r10
    1d32:	2b 2d       	mov	r18, r11
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <vfprintf+0x2d0>
    1d36:	7a 2c       	mov	r7, r10
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <vfprintf+0x2d0>
    1d3a:	75 2c       	mov	r7, r5
    1d3c:	24 ff       	sbrs	r18, 4
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <vfprintf+0x2ee>
    1d40:	fe 01       	movw	r30, r28
    1d42:	ea 0d       	add	r30, r10
    1d44:	f1 1d       	adc	r31, r1
    1d46:	80 81       	ld	r24, Z
    1d48:	80 33       	cpi	r24, 0x30	; 48
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <vfprintf+0x2e4>
    1d4c:	29 7e       	andi	r18, 0xE9	; 233
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <vfprintf+0x2f6>
    1d50:	22 ff       	sbrs	r18, 2
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <vfprintf+0x2f4>
    1d54:	73 94       	inc	r7
    1d56:	73 94       	inc	r7
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <vfprintf+0x2f6>
    1d5a:	82 2f       	mov	r24, r18
    1d5c:	86 78       	andi	r24, 0x86	; 134
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <vfprintf+0x2f6>
    1d60:	73 94       	inc	r7
    1d62:	23 fd       	sbrc	r18, 3
    1d64:	12 c0       	rjmp	.+36     	; 0x1d8a <vfprintf+0x31e>
    1d66:	20 ff       	sbrs	r18, 0
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0x30a>
    1d6a:	5a 2c       	mov	r5, r10
    1d6c:	73 14       	cp	r7, r3
    1d6e:	18 f4       	brcc	.+6      	; 0x1d76 <vfprintf+0x30a>
    1d70:	53 0c       	add	r5, r3
    1d72:	57 18       	sub	r5, r7
    1d74:	73 2c       	mov	r7, r3
    1d76:	73 14       	cp	r7, r3
    1d78:	60 f4       	brcc	.+24     	; 0x1d92 <vfprintf+0x326>
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	80 e2       	ldi	r24, 0x20	; 32
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	2c 87       	std	Y+12, r18	; 0x0c
    1d82:	78 d0       	rcall	.+240    	; 0x1e74 <fputc>
    1d84:	73 94       	inc	r7
    1d86:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d88:	f6 cf       	rjmp	.-20     	; 0x1d76 <vfprintf+0x30a>
    1d8a:	73 14       	cp	r7, r3
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <vfprintf+0x326>
    1d8e:	37 18       	sub	r3, r7
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <vfprintf+0x328>
    1d92:	31 2c       	mov	r3, r1
    1d94:	24 ff       	sbrs	r18, 4
    1d96:	11 c0       	rjmp	.+34     	; 0x1dba <vfprintf+0x34e>
    1d98:	b7 01       	movw	r22, r14
    1d9a:	80 e3       	ldi	r24, 0x30	; 48
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	2c 87       	std	Y+12, r18	; 0x0c
    1da0:	69 d0       	rcall	.+210    	; 0x1e74 <fputc>
    1da2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da4:	22 ff       	sbrs	r18, 2
    1da6:	16 c0       	rjmp	.+44     	; 0x1dd4 <vfprintf+0x368>
    1da8:	21 ff       	sbrs	r18, 1
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <vfprintf+0x346>
    1dac:	88 e5       	ldi	r24, 0x58	; 88
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <vfprintf+0x34a>
    1db2:	88 e7       	ldi	r24, 0x78	; 120
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	b7 01       	movw	r22, r14
    1db8:	0c c0       	rjmp	.+24     	; 0x1dd2 <vfprintf+0x366>
    1dba:	82 2f       	mov	r24, r18
    1dbc:	86 78       	andi	r24, 0x86	; 134
    1dbe:	51 f0       	breq	.+20     	; 0x1dd4 <vfprintf+0x368>
    1dc0:	21 fd       	sbrc	r18, 1
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <vfprintf+0x35c>
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <vfprintf+0x35e>
    1dc8:	8b e2       	ldi	r24, 0x2B	; 43
    1dca:	27 fd       	sbrc	r18, 7
    1dcc:	8d e2       	ldi	r24, 0x2D	; 45
    1dce:	b7 01       	movw	r22, r14
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	50 d0       	rcall	.+160    	; 0x1e74 <fputc>
    1dd4:	a5 14       	cp	r10, r5
    1dd6:	30 f4       	brcc	.+12     	; 0x1de4 <vfprintf+0x378>
    1dd8:	b7 01       	movw	r22, r14
    1dda:	80 e3       	ldi	r24, 0x30	; 48
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	4a d0       	rcall	.+148    	; 0x1e74 <fputc>
    1de0:	5a 94       	dec	r5
    1de2:	f8 cf       	rjmp	.-16     	; 0x1dd4 <vfprintf+0x368>
    1de4:	aa 94       	dec	r10
    1de6:	f4 01       	movw	r30, r8
    1de8:	ea 0d       	add	r30, r10
    1dea:	f1 1d       	adc	r31, r1
    1dec:	80 81       	ld	r24, Z
    1dee:	b7 01       	movw	r22, r14
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	40 d0       	rcall	.+128    	; 0x1e74 <fputc>
    1df4:	a1 10       	cpse	r10, r1
    1df6:	f6 cf       	rjmp	.-20     	; 0x1de4 <vfprintf+0x378>
    1df8:	33 20       	and	r3, r3
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <vfprintf+0x392>
    1dfc:	5d ce       	rjmp	.-838    	; 0x1ab8 <vfprintf+0x4c>
    1dfe:	b7 01       	movw	r22, r14
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	37 d0       	rcall	.+110    	; 0x1e74 <fputc>
    1e06:	3a 94       	dec	r3
    1e08:	f7 cf       	rjmp	.-18     	; 0x1df8 <vfprintf+0x38c>
    1e0a:	f7 01       	movw	r30, r14
    1e0c:	86 81       	ldd	r24, Z+6	; 0x06
    1e0e:	97 81       	ldd	r25, Z+7	; 0x07
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <vfprintf+0x3aa>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	9f ef       	ldi	r25, 0xFF	; 255
    1e16:	2c 96       	adiw	r28, 0x0c	; 12
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
    1e32:	bf 90       	pop	r11
    1e34:	af 90       	pop	r10
    1e36:	9f 90       	pop	r9
    1e38:	8f 90       	pop	r8
    1e3a:	7f 90       	pop	r7
    1e3c:	6f 90       	pop	r6
    1e3e:	5f 90       	pop	r5
    1e40:	4f 90       	pop	r4
    1e42:	3f 90       	pop	r3
    1e44:	2f 90       	pop	r2
    1e46:	08 95       	ret

00001e48 <strnlen_P>:
    1e48:	fc 01       	movw	r30, r24
    1e4a:	05 90       	lpm	r0, Z+
    1e4c:	61 50       	subi	r22, 0x01	; 1
    1e4e:	70 40       	sbci	r23, 0x00	; 0
    1e50:	01 10       	cpse	r0, r1
    1e52:	d8 f7       	brcc	.-10     	; 0x1e4a <strnlen_P+0x2>
    1e54:	80 95       	com	r24
    1e56:	90 95       	com	r25
    1e58:	8e 0f       	add	r24, r30
    1e5a:	9f 1f       	adc	r25, r31
    1e5c:	08 95       	ret

00001e5e <strnlen>:
    1e5e:	fc 01       	movw	r30, r24
    1e60:	61 50       	subi	r22, 0x01	; 1
    1e62:	70 40       	sbci	r23, 0x00	; 0
    1e64:	01 90       	ld	r0, Z+
    1e66:	01 10       	cpse	r0, r1
    1e68:	d8 f7       	brcc	.-10     	; 0x1e60 <strnlen+0x2>
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	8e 0f       	add	r24, r30
    1e70:	9f 1f       	adc	r25, r31
    1e72:	08 95       	ret

00001e74 <fputc>:
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	18 2f       	mov	r17, r24
    1e7e:	09 2f       	mov	r16, r25
    1e80:	eb 01       	movw	r28, r22
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	81 fd       	sbrc	r24, 1
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <fputc+0x1a>
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	9f ef       	ldi	r25, 0xFF	; 255
    1e8c:	20 c0       	rjmp	.+64     	; 0x1ece <fputc+0x5a>
    1e8e:	82 ff       	sbrs	r24, 2
    1e90:	10 c0       	rjmp	.+32     	; 0x1eb2 <fputc+0x3e>
    1e92:	4e 81       	ldd	r20, Y+6	; 0x06
    1e94:	5f 81       	ldd	r21, Y+7	; 0x07
    1e96:	2c 81       	ldd	r18, Y+4	; 0x04
    1e98:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9a:	42 17       	cp	r20, r18
    1e9c:	53 07       	cpc	r21, r19
    1e9e:	7c f4       	brge	.+30     	; 0x1ebe <fputc+0x4a>
    1ea0:	e8 81       	ld	r30, Y
    1ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea4:	9f 01       	movw	r18, r30
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	39 83       	std	Y+1, r19	; 0x01
    1eac:	28 83       	st	Y, r18
    1eae:	10 83       	st	Z, r17
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <fputc+0x4a>
    1eb2:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb4:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb6:	81 2f       	mov	r24, r17
    1eb8:	09 95       	icall
    1eba:	89 2b       	or	r24, r25
    1ebc:	29 f7       	brne	.-54     	; 0x1e88 <fputc+0x14>
    1ebe:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec2:	2f 5f       	subi	r18, 0xFF	; 255
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	3f 83       	std	Y+7, r19	; 0x07
    1ec8:	2e 83       	std	Y+6, r18	; 0x06
    1eca:	81 2f       	mov	r24, r17
    1ecc:	90 2f       	mov	r25, r16
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <__ultoa_invert>:
    1ed8:	fa 01       	movw	r30, r20
    1eda:	aa 27       	eor	r26, r26
    1edc:	28 30       	cpi	r18, 0x08	; 8
    1ede:	51 f1       	breq	.+84     	; 0x1f34 <__ultoa_invert+0x5c>
    1ee0:	20 31       	cpi	r18, 0x10	; 16
    1ee2:	81 f1       	breq	.+96     	; 0x1f44 <__ultoa_invert+0x6c>
    1ee4:	e8 94       	clt
    1ee6:	6f 93       	push	r22
    1ee8:	6e 7f       	andi	r22, 0xFE	; 254
    1eea:	6e 5f       	subi	r22, 0xFE	; 254
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	af 4f       	sbci	r26, 0xFF	; 255
    1ef4:	b1 e0       	ldi	r27, 0x01	; 1
    1ef6:	3e d0       	rcall	.+124    	; 0x1f74 <__ultoa_invert+0x9c>
    1ef8:	b4 e0       	ldi	r27, 0x04	; 4
    1efa:	3c d0       	rcall	.+120    	; 0x1f74 <__ultoa_invert+0x9c>
    1efc:	67 0f       	add	r22, r23
    1efe:	78 1f       	adc	r23, r24
    1f00:	89 1f       	adc	r24, r25
    1f02:	9a 1f       	adc	r25, r26
    1f04:	a1 1d       	adc	r26, r1
    1f06:	68 0f       	add	r22, r24
    1f08:	79 1f       	adc	r23, r25
    1f0a:	8a 1f       	adc	r24, r26
    1f0c:	91 1d       	adc	r25, r1
    1f0e:	a1 1d       	adc	r26, r1
    1f10:	6a 0f       	add	r22, r26
    1f12:	71 1d       	adc	r23, r1
    1f14:	81 1d       	adc	r24, r1
    1f16:	91 1d       	adc	r25, r1
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	20 d0       	rcall	.+64     	; 0x1f5c <__ultoa_invert+0x84>
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <__ultoa_invert+0x48>
    1f1e:	68 94       	set
    1f20:	3f 91       	pop	r19
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	26 9f       	mul	r18, r22
    1f26:	11 24       	eor	r1, r1
    1f28:	30 19       	sub	r19, r0
    1f2a:	30 5d       	subi	r19, 0xD0	; 208
    1f2c:	31 93       	st	Z+, r19
    1f2e:	de f6       	brtc	.-74     	; 0x1ee6 <__ultoa_invert+0xe>
    1f30:	cf 01       	movw	r24, r30
    1f32:	08 95       	ret
    1f34:	46 2f       	mov	r20, r22
    1f36:	47 70       	andi	r20, 0x07	; 7
    1f38:	40 5d       	subi	r20, 0xD0	; 208
    1f3a:	41 93       	st	Z+, r20
    1f3c:	b3 e0       	ldi	r27, 0x03	; 3
    1f3e:	0f d0       	rcall	.+30     	; 0x1f5e <__ultoa_invert+0x86>
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__ultoa_invert+0x5c>
    1f42:	f6 cf       	rjmp	.-20     	; 0x1f30 <__ultoa_invert+0x58>
    1f44:	46 2f       	mov	r20, r22
    1f46:	4f 70       	andi	r20, 0x0F	; 15
    1f48:	40 5d       	subi	r20, 0xD0	; 208
    1f4a:	4a 33       	cpi	r20, 0x3A	; 58
    1f4c:	18 f0       	brcs	.+6      	; 0x1f54 <__ultoa_invert+0x7c>
    1f4e:	49 5d       	subi	r20, 0xD9	; 217
    1f50:	31 fd       	sbrc	r19, 1
    1f52:	40 52       	subi	r20, 0x20	; 32
    1f54:	41 93       	st	Z+, r20
    1f56:	02 d0       	rcall	.+4      	; 0x1f5c <__ultoa_invert+0x84>
    1f58:	a9 f7       	brne	.-22     	; 0x1f44 <__ultoa_invert+0x6c>
    1f5a:	ea cf       	rjmp	.-44     	; 0x1f30 <__ultoa_invert+0x58>
    1f5c:	b4 e0       	ldi	r27, 0x04	; 4
    1f5e:	a6 95       	lsr	r26
    1f60:	97 95       	ror	r25
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	ba 95       	dec	r27
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <__ultoa_invert+0x86>
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	61 05       	cpc	r22, r1
    1f70:	71 05       	cpc	r23, r1
    1f72:	08 95       	ret
    1f74:	9b 01       	movw	r18, r22
    1f76:	ac 01       	movw	r20, r24
    1f78:	0a 2e       	mov	r0, r26
    1f7a:	06 94       	lsr	r0
    1f7c:	57 95       	ror	r21
    1f7e:	47 95       	ror	r20
    1f80:	37 95       	ror	r19
    1f82:	27 95       	ror	r18
    1f84:	ba 95       	dec	r27
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__ultoa_invert+0xa2>
    1f88:	62 0f       	add	r22, r18
    1f8a:	73 1f       	adc	r23, r19
    1f8c:	84 1f       	adc	r24, r20
    1f8e:	95 1f       	adc	r25, r21
    1f90:	a0 1d       	adc	r26, r0
    1f92:	08 95       	ret

00001f94 <_exit>:
    1f94:	f8 94       	cli

00001f96 <__stop_program>:
    1f96:	ff cf       	rjmp	.-2      	; 0x1f96 <__stop_program>
