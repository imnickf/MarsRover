
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00001d80  00001e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008001b8  008001b8  00001ecc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000259a  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000886  00000000  00000000  000046e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000128e  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  000061f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b8  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015f2  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  000087d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	1f c5       	rjmp	.+2622   	; 0xa64 <__vector_9>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c5       	rjmp	.+2786   	; 0xb10 <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <oi_init+0x4e>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <oi_update+0xf4>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e0 e8       	ldi	r30, 0x80	; 128
     140:	fd e1       	ldi	r31, 0x1D	; 29
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a8 3b       	cpi	r26, 0xB8	; 184
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	22 e0       	ldi	r18, 0x02	; 2
     154:	a8 eb       	ldi	r26, 0xB8	; 184
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ac 31       	cpi	r26, 0x1C	; 28
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	82 d1       	rcall	.+772    	; 0x468 <main>
     164:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <scanForObjects>:
		USART_Transmit(cliffSignals[i]);
	}
}

object_t * scanForObjects()
{
     16a:	2f 92       	push	r2
     16c:	3f 92       	push	r3
     16e:	4f 92       	push	r4
     170:	5f 92       	push	r5
     172:	6f 92       	push	r6
     174:	7f 92       	push	r7
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	e0 97       	sbiw	r28, 0x30	; 48
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     19e:	88 e2       	ldi	r24, 0x28	; 40
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <malloc>
     1a6:	3c 01       	movw	r6, r24
		for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
			USART_Transmit(heading[i]);
		}
		*/
		
		move_servo(degrees);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	86 d4       	rcall	.+2316   	; 0xaba <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	93 e0       	ldi	r25, 0x03	; 3
     1b2:	42 d4       	rcall	.+2180   	; 0xa38 <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	10 e0       	ldi	r17, 0x00	; 0
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     1b8:	c1 2c       	mov	r12, r1
     1ba:	d1 2c       	mov	r13, r1
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     1bc:	81 2c       	mov	r8, r1
     1be:	91 2c       	mov	r9, r1
	int currObjectIndex = -1;
	//int currDiam = 0;
	//int smallestObjectIndex = 0;
	//int smallestDiam = 0;
	//int smallestLocation = 0;
	int inObject = 0;
     1c0:	e1 2c       	mov	r14, r1
     1c2:	f1 2c       	mov	r15, r1
	int irDistance = 0;
	/*
	char heading[]="\r\nDegrees\t     IRDistance\tSonarDistance";   //   \r\n for new line, \t and spaces to line up text and numbers on output
	char output[50];
	*/
	int currObjectIndex = -1;
     1c4:	aa 24       	eor	r10, r10
     1c6:	aa 94       	dec	r10
     1c8:	ba 2c       	mov	r11, r10
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     1ca:	c8 01       	movw	r24, r16
     1cc:	76 d4       	rcall	.+2284   	; 0xaba <move_servo>
			sonarDistance = getPingDistance();
     1ce:	e3 d4       	rcall	.+2502   	; 0xb96 <getPingDistance>
     1d0:	48 2e       	mov	r4, r24
     1d2:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     1d4:	1b d5       	rcall	.+2614   	; 0xc0c <getIrDistance>
			for(int i = 0; i < strlen(output); i++){		//  Print output data
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     1d6:	85 36       	cpi	r24, 0x65	; 101
     1d8:	91 05       	cpc	r25, r1
     1da:	0c f0       	brlt	.+2      	; 0x1de <scanForObjects+0x74>
     1dc:	b3 c0       	rjmp	.+358    	; 0x344 <scanForObjects+0x1da>
     1de:	e1 14       	cp	r14, r1
     1e0:	f1 04       	cpc	r15, r1
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <scanForObjects+0x7c>
     1e4:	4f c0       	rjmp	.+158    	; 0x284 <scanForObjects+0x11a>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	a8 1a       	sub	r10, r24
     1ea:	b8 0a       	sbc	r11, r24
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     1ec:	c4 2c       	mov	r12, r4
     1ee:	d5 2c       	mov	r13, r5
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     1f0:	48 01       	movw	r8, r16
				USART_Transmit(output[i]);				
			}											
			*/
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     1f2:	ee 24       	eor	r14, r14
     1f4:	e3 94       	inc	r14
     1f6:	f1 2c       	mov	r15, r1
     1f8:	45 c0       	rjmp	.+138    	; 0x284 <scanForObjects+0x11a>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     1fa:	75 01       	movw	r14, r10
     1fc:	ee 0c       	add	r14, r14
     1fe:	ff 1c       	adc	r15, r15
     200:	ee 0c       	add	r14, r14
     202:	ff 1c       	adc	r15, r15
     204:	e6 0c       	add	r14, r6
     206:	f7 1c       	adc	r15, r7
     208:	c4 01       	movw	r24, r8
     20a:	80 0f       	add	r24, r16
     20c:	91 1f       	adc	r25, r17
     20e:	99 23       	and	r25, r25
     210:	0c f4       	brge	.+2      	; 0x214 <scanForObjects+0xaa>
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	95 95       	asr	r25
     216:	87 95       	ror	r24
     218:	f7 01       	movw	r30, r14
     21a:	93 83       	std	Z+3, r25	; 0x03
     21c:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     21e:	b6 01       	movw	r22, r12
     220:	88 27       	eor	r24, r24
     222:	77 fd       	sbrc	r23, 7
     224:	80 95       	com	r24
     226:	98 2f       	mov	r25, r24
     228:	24 d6       	rcall	.+3144   	; 0xe72 <__floatsisf>
     22a:	9b 01       	movw	r18, r22
     22c:	ac 01       	movw	r20, r24
     22e:	e6 d6       	rcall	.+3532   	; 0xffc <__mulsf3>
     230:	9b 01       	movw	r18, r22
     232:	ac 01       	movw	r20, r24
     234:	1c d5       	rcall	.+2616   	; 0xc6e <__addsf3>
     236:	1b 01       	movw	r2, r22
     238:	2c 01       	movw	r4, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     23a:	c4 01       	movw	r24, r8
     23c:	80 1b       	sub	r24, r16
     23e:	91 0b       	sbc	r25, r17
     240:	bc 01       	movw	r22, r24
     242:	22 f4       	brpl	.+8      	; 0x24c <scanForObjects+0xe2>
     244:	66 27       	eor	r22, r22
     246:	77 27       	eor	r23, r23
     248:	68 1b       	sub	r22, r24
     24a:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation						
     24c:	88 27       	eor	r24, r24
     24e:	77 fd       	sbrc	r23, 7
     250:	80 95       	com	r24
     252:	98 2f       	mov	r25, r24
     254:	0e d6       	rcall	.+3100   	; 0xe72 <__floatsisf>
     256:	6f d5       	rcall	.+2782   	; 0xd36 <cos>
     258:	9b 01       	movw	r18, r22
     25a:	ac 01       	movw	r20, r24
     25c:	c2 01       	movw	r24, r4
     25e:	b1 01       	movw	r22, r2
     260:	cd d6       	rcall	.+3482   	; 0xffc <__mulsf3>
     262:	9b 01       	movw	r18, r22
     264:	ac 01       	movw	r20, r24
     266:	c2 01       	movw	r24, r4
     268:	b1 01       	movw	r22, r2
     26a:	00 d5       	rcall	.+2560   	; 0xc6c <__subsf3>
     26c:	7a d7       	rcall	.+3828   	; 0x1162 <sqrt>
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 eb       	ldi	r20, 0xB0	; 176
     274:	50 e4       	ldi	r21, 0x40	; 64
     276:	62 d5       	rcall	.+2756   	; 0xd3c <__divsf3>
     278:	c9 d5       	rcall	.+2962   	; 0xe0c <__fixsfsi>
     27a:	f7 01       	movw	r30, r14
     27c:	71 83       	std	Z+1, r23	; 0x01
     27e:	60 83       	st	Z, r22
				inObject = 0;											//Sensor is no longer on an object
     280:	e1 2c       	mov	r14, r1
     282:	f1 2c       	mov	r15, r1
			}	
		
			degrees += 2;
     284:	0e 5f       	subi	r16, 0xFE	; 254
     286:	1f 4f       	sbci	r17, 0xFF	; 255
			wait_ms(200);
     288:	88 ec       	ldi	r24, 0xC8	; 200
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	d5 d3       	rcall	.+1962   	; 0xa38 <wait_ms>
		}
		*/
		
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     28e:	06 3b       	cpi	r16, 0xB6	; 182
     290:	11 05       	cpc	r17, r1
     292:	09 f0       	breq	.+2      	; 0x296 <scanForObjects+0x12c>
     294:	9a cf       	rjmp	.-204    	; 0x1ca <scanForObjects+0x60>
     296:	5c c0       	rjmp	.+184    	; 0x350 <scanForObjects+0x1e6>
		}
    }
	
	char heading[] = "FOund objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
		USART_Transmit(heading[i]);
     298:	f6 01       	movw	r30, r12
     29a:	81 91       	ld	r24, Z+
     29c:	6f 01       	movw	r12, r30
     29e:	09 d4       	rcall	.+2066   	; 0xab2 <USART_Transmit>
			wait_ms(200);
		}
    }
	
	char heading[] = "FOund objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
     2a0:	0f 5f       	subi	r16, 0xFF	; 255
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	f7 01       	movw	r30, r14
     2a6:	01 90       	ld	r0, Z+
     2a8:	00 20       	and	r0, r0
     2aa:	e9 f7       	brne	.-6      	; 0x2a6 <scanForObjects+0x13c>
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	ee 19       	sub	r30, r14
     2b0:	ff 09       	sbc	r31, r15
     2b2:	0e 17       	cp	r16, r30
     2b4:	1f 07       	cpc	r17, r31
     2b6:	80 f3       	brcs	.-32     	; 0x298 <scanForObjects+0x12e>
		USART_Transmit(heading[i]);
	}
	
	for (int i = 0; i < currObjectIndex; i++) {
     2b8:	1a 14       	cp	r1, r10
     2ba:	1b 04       	cpc	r1, r11
     2bc:	0c f0       	brlt	.+2      	; 0x2c0 <scanForObjects+0x156>
     2be:	58 c0       	rjmp	.+176    	; 0x370 <scanForObjects+0x206>
     2c0:	43 01       	movw	r8, r6
     2c2:	41 2c       	mov	r4, r1
     2c4:	51 2c       	mov	r5, r1
		char output[30];
		sprintf(output, "Diameter: %2d Angle: %3d\r\n", objects[i].diameter, objects[i].location);
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f3 e7       	ldi	r31, 0x73	; 115
     2ca:	2f 2e       	mov	r2, r31
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	3f 2e       	mov	r3, r31
     2d0:	f0 2d       	mov	r31, r0
     2d2:	7e 01       	movw	r14, r28
     2d4:	f1 e1       	ldi	r31, 0x11	; 17
     2d6:	ef 0e       	add	r14, r31
     2d8:	f1 1c       	adc	r15, r1
     2da:	ef a6       	std	Y+47, r14	; 0x2f
     2dc:	f8 aa       	std	Y+48, r15	; 0x30
     2de:	f4 01       	movw	r30, r8
     2e0:	83 81       	ldd	r24, Z+3	; 0x03
     2e2:	8f 93       	push	r24
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	8f 93       	push	r24
     2e8:	81 81       	ldd	r24, Z+1	; 0x01
     2ea:	8f 93       	push	r24
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 93       	push	r24
     2f0:	3f 92       	push	r3
     2f2:	2f 92       	push	r2
     2f4:	ff 92       	push	r15
     2f6:	ef 92       	push	r14
     2f8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <sprintf>
     2fc:	cf a4       	ldd	r12, Y+47	; 0x2f
     2fe:	d8 a8       	ldd	r13, Y+48	; 0x30
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	06 c0       	rjmp	.+12     	; 0x31c <scanForObjects+0x1b2>
			USART_Transmit(output[i]);
     310:	f6 01       	movw	r30, r12
     312:	81 91       	ld	r24, Z+
     314:	6f 01       	movw	r12, r30
     316:	cd d3       	rcall	.+1946   	; 0xab2 <USART_Transmit>
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[30];
		sprintf(output, "Diameter: %2d Angle: %3d\r\n", objects[i].diameter, objects[i].location);
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	f7 01       	movw	r30, r14
     31e:	01 90       	ld	r0, Z+
     320:	00 20       	and	r0, r0
     322:	e9 f7       	brne	.-6      	; 0x31e <scanForObjects+0x1b4>
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	ee 19       	sub	r30, r14
     328:	ff 09       	sbc	r31, r15
     32a:	0e 17       	cp	r16, r30
     32c:	1f 07       	cpc	r17, r31
     32e:	80 f3       	brcs	.-32     	; 0x310 <scanForObjects+0x1a6>
	char heading[] = "FOund objects\r\n";
	for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
		USART_Transmit(heading[i]);
	}
	
	for (int i = 0; i < currObjectIndex; i++) {
     330:	ff ef       	ldi	r31, 0xFF	; 255
     332:	4f 1a       	sub	r4, r31
     334:	5f 0a       	sbc	r5, r31
     336:	84 e0       	ldi	r24, 0x04	; 4
     338:	88 0e       	add	r8, r24
     33a:	91 1c       	adc	r9, r1
     33c:	4a 14       	cp	r4, r10
     33e:	5b 04       	cpc	r5, r11
     340:	71 f6       	brne	.-100    	; 0x2de <scanForObjects+0x174>
     342:	16 c0       	rjmp	.+44     	; 0x370 <scanForObjects+0x206>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	e9 16       	cp	r14, r25
     348:	f1 04       	cpc	r15, r1
     34a:	09 f0       	breq	.+2      	; 0x34e <scanForObjects+0x1e4>
     34c:	9b cf       	rjmp	.-202    	; 0x284 <scanForObjects+0x11a>
     34e:	55 cf       	rjmp	.-342    	; 0x1fa <scanForObjects+0x90>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	char heading[] = "FOund objects\r\n";
     350:	80 e1       	ldi	r24, 0x10	; 16
     352:	ee e8       	ldi	r30, 0x8E	; 142
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	de 01       	movw	r26, r28
     358:	11 96       	adiw	r26, 0x01	; 1
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	8a 95       	dec	r24
     360:	e1 f7       	brne	.-8      	; 0x35a <scanForObjects+0x1f0>
     362:	fe 01       	movw	r30, r28
     364:	31 96       	adiw	r30, 0x01	; 1
     366:	6f 01       	movw	r12, r30
	for(int i = 0; i < strlen(heading); i++) {     //  Put this inside loop so it would reprint for each iteration
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	7f 01       	movw	r14, r30
     36e:	9a cf       	rjmp	.-204    	; 0x2a4 <scanForObjects+0x13a>
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
			USART_Transmit(output[i]);
		}
	}
	return objects;
     370:	c3 01       	movw	r24, r6
     372:	e0 96       	adiw	r28, 0x30	; 48
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	bf 90       	pop	r11
     390:	af 90       	pop	r10
     392:	9f 90       	pop	r9
     394:	8f 90       	pop	r8
     396:	7f 90       	pop	r7
     398:	6f 90       	pop	r6
     39a:	5f 90       	pop	r5
     39c:	4f 90       	pop	r4
     39e:	3f 90       	pop	r3
     3a0:	2f 90       	pop	r2
     3a2:	08 95       	ret

000003a4 <getCommand>:
		//TODO:: Please write your application code 
    }
}

void getCommand(oi_t *sensor_data)
{
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	27 97       	sbiw	r28, 0x07	; 7
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     3c2:	73 d3       	rcall	.+1766   	; 0xaaa <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     3c4:	82 37       	cpi	r24, 0x72	; 114
     3c6:	39 f0       	breq	.+14     	; 0x3d6 <getCommand+0x32>
     3c8:	83 37       	cpi	r24, 0x73	; 115
     3ca:	09 f4       	brne	.+2      	; 0x3ce <getCommand+0x2a>
     3cc:	3a c0       	rjmp	.+116    	; 0x442 <getCommand+0x9e>
     3ce:	8d 36       	cpi	r24, 0x6D	; 109
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <getCommand+0x30>
     3d2:	3b c0       	rjmp	.+118    	; 0x44a <getCommand+0xa6>
     3d4:	1c c0       	rjmp	.+56     	; 0x40e <getCommand+0x6a>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     3d6:	69 d3       	rcall	.+1746   	; 0xaaa <USART_Receive>
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	67 d3       	rcall	.+1742   	; 0xaaa <USART_Receive>
     3dc:	8a 83       	std	Y+2, r24	; 0x02
     3de:	65 d3       	rcall	.+1738   	; 0xaaa <USART_Receive>
     3e0:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	0e 94 88 0b 	call	0x1710	; 0x1710 <atoi>
     3ea:	e8 2e       	mov	r14, r24
     3ec:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	2e e9       	ldi	r18, 0x9E	; 158
     3f4:	31 e0       	ldi	r19, 0x01	; 1
     3f6:	3f 93       	push	r19
     3f8:	2f 93       	push	r18
     3fa:	b7 d0       	rcall	.+366    	; 0x56a <lprintf>
				turn_clockwise(sensor_data, degrees);
     3fc:	6e 2d       	mov	r22, r14
     3fe:	7f 2d       	mov	r23, r15
     400:	c8 01       	movw	r24, r16
     402:	ac d1       	rcall	.+856    	; 0x75c <turn_clockwise>
				commandRecieved = 1;
				break;
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	20 c0       	rjmp	.+64     	; 0x44e <getCommand+0xaa>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     40e:	4d d3       	rcall	.+1690   	; 0xaaa <USART_Receive>
     410:	8d 83       	std	Y+5, r24	; 0x05
     412:	4b d3       	rcall	.+1686   	; 0xaaa <USART_Receive>
     414:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     416:	ce 01       	movw	r24, r28
     418:	05 96       	adiw	r24, 0x05	; 5
     41a:	0e 94 88 0b 	call	0x1710	; 0x1710 <atoi>
     41e:	e8 2e       	mov	r14, r24
     420:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	2a ea       	ldi	r18, 0xAA	; 170
     428:	31 e0       	ldi	r19, 0x01	; 1
     42a:	3f 93       	push	r19
     42c:	2f 93       	push	r18
     42e:	9d d0       	rcall	.+314    	; 0x56a <lprintf>
				move_forward(sensor_data, distance);
     430:	6e 2d       	mov	r22, r14
     432:	7f 2d       	mov	r23, r15
     434:	c8 01       	movw	r24, r16
     436:	3c d1       	rcall	.+632    	; 0x6b0 <move_forward>
				commandRecieved = 1;
				break;
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	06 c0       	rjmp	.+12     	; 0x44e <getCommand+0xaa>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     442:	93 de       	rcall	.-730    	; 0x16a <scanForObjects>
				commandRecieved = 1;
				free(foundObjects);
     444:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <free>
				break;
     448:	02 c0       	rjmp	.+4      	; 0x44e <getCommand+0xaa>
			default:
				command = USART_Receive();
     44a:	2f d3       	rcall	.+1630   	; 0xaaa <USART_Receive>
     44c:	bb cf       	rjmp	.-138    	; 0x3c4 <getCommand+0x20>
		}	
	}
}
     44e:	27 96       	adiw	r28, 0x07	; 7
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	08 95       	ret

00000468 <main>:

unsigned long time_diff;

int main(void)
{
    lcd_init();
     468:	2f d0       	rcall	.+94     	; 0x4c8 <lcd_init>
    ADC_init();
     46a:	c5 d3       	rcall	.+1930   	; 0xbf6 <ADC_init>
    pinginit();
     46c:	90 d3       	rcall	.+1824   	; 0xb8e <pinginit>
    timer3_init();
     46e:	33 d3       	rcall	.+1638   	; 0xad6 <timer3_init>
	USART_init();
     470:	10 d3       	rcall	.+1568   	; 0xa92 <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     472:	96 d1       	rcall	.+812    	; 0x7a0 <oi_alloc>
     474:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
     476:	98 d2       	rcall	.+1328   	; 0x9a8 <oi_init>
	
	while(1)
    {
		getCommand(sensor_data);
     478:	ce 01       	movw	r24, r28
     47a:	94 df       	rcall	.-216    	; 0x3a4 <getCommand>
     47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0x10>

0000047e <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     47e:	de 9a       	sbi	0x1b, 6	; 27
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	da d2       	rcall	.+1460   	; 0xa38 <wait_ms>
     484:	de 98       	cbi	0x1b, 6	; 27
     486:	8b b3       	in	r24, 0x1b	; 27
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	8b bb       	out	0x1b, r24	; 27
     48c:	08 95       	ret

0000048e <lcd_command>:
     48e:	cf 93       	push	r28
     490:	c8 2f       	mov	r28, r24
     492:	dc 98       	cbi	0x1b, 4	; 27
     494:	8b b3       	in	r24, 0x1b	; 27
     496:	9c 2f       	mov	r25, r28
     498:	92 95       	swap	r25
     49a:	9f 70       	andi	r25, 0x0F	; 15
     49c:	89 2b       	or	r24, r25
     49e:	8b bb       	out	0x1b, r24	; 27
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	ed df       	rcall	.-38     	; 0x47e <lcd_toggle_clear>
     4a4:	8b b3       	in	r24, 0x1b	; 27
     4a6:	cf 70       	andi	r28, 0x0F	; 15
     4a8:	c8 2b       	or	r28, r24
     4aa:	cb bb       	out	0x1b, r28	; 27
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	e7 df       	rcall	.-50     	; 0x47e <lcd_toggle_clear>
     4b0:	dc 9a       	sbi	0x1b, 4	; 27
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <lcd_clear>:
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	ea df       	rcall	.-44     	; 0x48e <lcd_command>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	bc c2       	rjmp	.+1400   	; 0xa38 <wait_ms>
     4c0:	08 95       	ret

000004c2 <lcd_home_line1>:
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	e4 cf       	rjmp	.-56     	; 0x48e <lcd_command>
     4c6:	08 95       	ret

000004c8 <lcd_init>:
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	8a bb       	out	0x1a, r24	; 26
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	8b bb       	out	0x1b, r24	; 27
     4d0:	de 9a       	sbi	0x1b, 6	; 27
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	b0 d2       	rcall	.+1376   	; 0xa38 <wait_ms>
     4d8:	de 98       	cbi	0x1b, 6	; 27
     4da:	85 e0       	ldi	r24, 0x05	; 5
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	ac d2       	rcall	.+1368   	; 0xa38 <wait_ms>
     4e0:	de 9a       	sbi	0x1b, 6	; 27
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a8 d2       	rcall	.+1360   	; 0xa38 <wait_ms>
     4e8:	de 98       	cbi	0x1b, 6	; 27
     4ea:	de 9a       	sbi	0x1b, 6	; 27
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a3 d2       	rcall	.+1350   	; 0xa38 <wait_ms>
     4f2:	de 98       	cbi	0x1b, 6	; 27
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	8b bb       	out	0x1b, r24	; 27
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	c1 df       	rcall	.-126    	; 0x47e <lcd_toggle_clear>
     4fc:	8b b3       	in	r24, 0x1b	; 27
     4fe:	8b bb       	out	0x1b, r24	; 27
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	bd df       	rcall	.-134    	; 0x47e <lcd_toggle_clear>
     504:	8b b3       	in	r24, 0x1b	; 27
     506:	8e 60       	ori	r24, 0x0E	; 14
     508:	8b bb       	out	0x1b, r24	; 27
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	b8 df       	rcall	.-144    	; 0x47e <lcd_toggle_clear>
     50e:	8b b3       	in	r24, 0x1b	; 27
     510:	8b bb       	out	0x1b, r24	; 27
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	b4 df       	rcall	.-152    	; 0x47e <lcd_toggle_clear>
     516:	8b b3       	in	r24, 0x1b	; 27
     518:	86 60       	ori	r24, 0x06	; 6
     51a:	8b bb       	out	0x1b, r24	; 27
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	af df       	rcall	.-162    	; 0x47e <lcd_toggle_clear>
     520:	8b b3       	in	r24, 0x1b	; 27
     522:	8b bb       	out	0x1b, r24	; 27
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	ab df       	rcall	.-170    	; 0x47e <lcd_toggle_clear>
     528:	d8 9a       	sbi	0x1b, 0	; 27
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	a8 df       	rcall	.-176    	; 0x47e <lcd_toggle_clear>
     52e:	dc 9a       	sbi	0x1b, 4	; 27
     530:	c8 cf       	rjmp	.-112    	; 0x4c2 <lcd_home_line1>
     532:	08 95       	ret

00000534 <lcd_home_line2>:
     534:	80 ec       	ldi	r24, 0xC0	; 192
     536:	ab cf       	rjmp	.-170    	; 0x48e <lcd_command>
     538:	08 95       	ret

0000053a <lcd_home_line3>:
     53a:	84 e9       	ldi	r24, 0x94	; 148
     53c:	a8 cf       	rjmp	.-176    	; 0x48e <lcd_command>
     53e:	08 95       	ret

00000540 <lcd_home_line4>:
     540:	84 ed       	ldi	r24, 0xD4	; 212
     542:	a5 cf       	rjmp	.-182    	; 0x48e <lcd_command>
     544:	08 95       	ret

00000546 <lcd_putc>:
     546:	cf 93       	push	r28
     548:	c8 2f       	mov	r28, r24
     54a:	8b b3       	in	r24, 0x1b	; 27
     54c:	9c 2f       	mov	r25, r28
     54e:	92 95       	swap	r25
     550:	9f 70       	andi	r25, 0x0F	; 15
     552:	89 2b       	or	r24, r25
     554:	8b bb       	out	0x1b, r24	; 27
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	92 df       	rcall	.-220    	; 0x47e <lcd_toggle_clear>
     55a:	8b b3       	in	r24, 0x1b	; 27
     55c:	cf 70       	andi	r28, 0x0F	; 15
     55e:	c8 2b       	or	r28, r24
     560:	cb bb       	out	0x1b, r28	; 27
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8c df       	rcall	.-232    	; 0x47e <lcd_toggle_clear>
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	c1 55       	subi	r28, 0x51	; 81
     580:	d1 09       	sbc	r29, r1
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	fe 01       	movw	r30, r28
     58e:	e4 5a       	subi	r30, 0xA4	; 164
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	41 91       	ld	r20, Z+
     594:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     596:	9f 01       	movw	r18, r30
     598:	61 e5       	ldi	r22, 0x51	; 81
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	88 eb       	ldi	r24, 0xB8	; 184
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 ac 0b 	call	0x1758	; 0x1758 <strcmp>
     5b2:	89 2b       	or	r24, r25
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <lprintf+0x4e>
     5b6:	40 c0       	rjmp	.+128    	; 0x638 <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	88 eb       	ldi	r24, 0xB8	; 184
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <strcpy>
	lcd_clear();
     5c6:	77 df       	rcall	.-274    	; 0x4b6 <lcd_clear>
     5c8:	9e 01       	movw	r18, r28
     5ca:	2f 5f       	subi	r18, 0xFF	; 255
     5cc:	3f 4f       	sbci	r19, 0xFF	; 255
     5ce:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     5d0:	00 e0       	ldi	r16, 0x00	; 0
     5d2:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f4 e1       	ldi	r31, 0x14	; 20
     5d8:	ef 2e       	mov	r14, r31
     5da:	f1 2c       	mov	r15, r1
     5dc:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     5de:	24 c0       	rjmp	.+72     	; 0x628 <lprintf+0xbe>
		if (*str == '\n') {
     5e0:	8a 30       	cpi	r24, 0x0A	; 10
     5e2:	49 f4       	brne	.+18     	; 0x5f6 <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5e4:	c8 01       	movw	r24, r16
     5e6:	b7 01       	movw	r22, r14
     5e8:	2b d7       	rcall	.+3670   	; 0x1440 <__divmodhi4>
     5ea:	f7 01       	movw	r30, r14
     5ec:	e8 1b       	sub	r30, r24
     5ee:	f9 0b       	sbc	r31, r25
     5f0:	0e 0f       	add	r16, r30
     5f2:	1f 1f       	adc	r17, r31
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <lprintf+0x92>
		} else {
			lcd_putc(*str);
     5f6:	a7 df       	rcall	.-178    	; 0x546 <lcd_putc>
			charnum++;
     5f8:	0f 5f       	subi	r16, 0xFF	; 255
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     5fc:	c8 01       	movw	r24, r16
     5fe:	b7 01       	movw	r22, r14
     600:	1f d7       	rcall	.+3646   	; 0x1440 <__divmodhi4>
     602:	89 2b       	or	r24, r25
     604:	89 f4       	brne	.+34     	; 0x628 <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     606:	c8 01       	movw	r24, r16
     608:	b7 01       	movw	r22, r14
     60a:	1a d7       	rcall	.+3636   	; 0x1440 <__divmodhi4>
     60c:	62 30       	cpi	r22, 0x02	; 2
     60e:	71 05       	cpc	r23, r1
     610:	41 f0       	breq	.+16     	; 0x622 <lprintf+0xb8>
     612:	63 30       	cpi	r22, 0x03	; 3
     614:	71 05       	cpc	r23, r1
     616:	39 f0       	breq	.+14     	; 0x626 <lprintf+0xbc>
     618:	61 30       	cpi	r22, 0x01	; 1
     61a:	71 05       	cpc	r23, r1
     61c:	29 f4       	brne	.+10     	; 0x628 <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     61e:	8a df       	rcall	.-236    	; 0x534 <lcd_home_line2>
				break;
     620:	03 c0       	rjmp	.+6      	; 0x628 <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     622:	8b df       	rcall	.-234    	; 0x53a <lcd_home_line3>
				break;
     624:	01 c0       	rjmp	.+2      	; 0x628 <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     626:	8c df       	rcall	.-232    	; 0x540 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     628:	f6 01       	movw	r30, r12
     62a:	81 91       	ld	r24, Z+
     62c:	6f 01       	movw	r12, r30
     62e:	88 23       	and	r24, r24
     630:	19 f0       	breq	.+6      	; 0x638 <lprintf+0xce>
     632:	00 35       	cpi	r16, 0x50	; 80
     634:	11 05       	cpc	r17, r1
     636:	a4 f2       	brlt	.-88     	; 0x5e0 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     638:	cf 5a       	subi	r28, 0xAF	; 175
     63a:	df 4f       	sbci	r29, 0xFF	; 255
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	08 95       	ret

00000658 <move_backward>:
		sum += sensor->distance;
	}
}

void move_backward(oi_t *sensor, int centimeters)
{
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     662:	eb 01       	movw	r28, r22
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	66 0f       	add	r22, r22
     66a:	77 1f       	adc	r23, r23
     66c:	66 0f       	add	r22, r22
     66e:	77 1f       	adc	r23, r23
     670:	66 0f       	add	r22, r22
     672:	77 1f       	adc	r23, r23
     674:	c6 0f       	add	r28, r22
     676:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     678:	68 e3       	ldi	r22, 0x38	; 56
     67a:	7f ef       	ldi	r23, 0xFF	; 255
     67c:	88 e3       	ldi	r24, 0x38	; 56
     67e:	9f ef       	ldi	r25, 0xFF	; 255
     680:	b9 d0       	rcall	.+370    	; 0x7f4 <oi_set_wheels>
	while (sum > 0) {
     682:	1c 16       	cp	r1, r28
     684:	1d 06       	cpc	r1, r29
     686:	54 f4       	brge	.+20     	; 0x69c <move_backward+0x44>
		oi_update(sensor);
     688:	c8 01       	movw	r24, r16
     68a:	d3 d0       	rcall	.+422    	; 0x832 <oi_update>
		sum += sensor->distance;
     68c:	f8 01       	movw	r30, r16
     68e:	84 85       	ldd	r24, Z+12	; 0x0c
     690:	95 85       	ldd	r25, Z+13	; 0x0d
     692:	c8 0f       	add	r28, r24
     694:	d9 1f       	adc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     696:	1c 16       	cp	r1, r28
     698:	1d 06       	cpc	r1, r29
     69a:	b4 f3       	brlt	.-20     	; 0x688 <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	a7 d0       	rcall	.+334    	; 0x7f4 <oi_set_wheels>
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <move_forward>:
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
     6be:	8b 01       	movw	r16, r22
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
     6c0:	68 ec       	ldi	r22, 0xC8	; 200
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	88 ec       	ldi	r24, 0xC8	; 200
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	95 d0       	rcall	.+298    	; 0x7f4 <oi_set_wheels>
	while (sum < centimeters * 10) {
     6ca:	78 01       	movw	r14, r16
     6cc:	ee 0c       	add	r14, r14
     6ce:	ff 1c       	adc	r15, r15
     6d0:	00 0f       	add	r16, r16
     6d2:	11 1f       	adc	r17, r17
     6d4:	00 0f       	add	r16, r16
     6d6:	11 1f       	adc	r17, r17
     6d8:	00 0f       	add	r16, r16
     6da:	11 1f       	adc	r17, r17
     6dc:	e0 0e       	add	r14, r16
     6de:	f1 1e       	adc	r15, r17
     6e0:	1e 14       	cp	r1, r14
     6e2:	1f 04       	cpc	r1, r15
     6e4:	7c f5       	brge	.+94     	; 0x744 <move_forward+0x94>
		if (sensor->bumper_left || sensor->bumper_right || sensor->cliff_left || sensor->cliff_right || sensor->cliff_frontleft || sensor ->cliff_frontright) {
     6e6:	88 81       	ld	r24, Y
     6e8:	83 70       	andi	r24, 0x03	; 3
     6ea:	e1 f4       	brne	.+56     	; 0x724 <move_forward+0x74>
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	81 11       	cpse	r24, r1
     6f0:	19 c0       	rjmp	.+50     	; 0x724 <move_forward+0x74>
     6f2:	8d 81       	ldd	r24, Y+5	; 0x05
     6f4:	81 11       	cpse	r24, r1
     6f6:	16 c0       	rjmp	.+44     	; 0x724 <move_forward+0x74>
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	81 11       	cpse	r24, r1
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <move_forward+0x74>
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	88 23       	and	r24, r24
     702:	a9 f0       	breq	.+42     	; 0x72e <move_forward+0x7e>
     704:	0f c0       	rjmp	.+30     	; 0x724 <move_forward+0x74>
     706:	88 81       	ld	r24, Y
     708:	83 70       	andi	r24, 0x03	; 3
     70a:	61 f4       	brne	.+24     	; 0x724 <move_forward+0x74>
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	81 11       	cpse	r24, r1
     710:	09 c0       	rjmp	.+18     	; 0x724 <move_forward+0x74>
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	81 11       	cpse	r24, r1
     716:	06 c0       	rjmp	.+12     	; 0x724 <move_forward+0x74>
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	81 11       	cpse	r24, r1
     71c:	03 c0       	rjmp	.+6      	; 0x724 <move_forward+0x74>
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	88 23       	and	r24, r24
     722:	39 f0       	breq	.+14     	; 0x732 <move_forward+0x82>
			move_backward(sensor, 15);
     724:	6f e0       	ldi	r22, 0x0F	; 15
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	ce 01       	movw	r24, r28
     72a:	96 df       	rcall	.-212    	; 0x658 <move_backward>
			//turn_clockwise(sensor, 87);
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
     72c:	0b c0       	rjmp	.+22     	; 0x744 <move_forward+0x94>
#include "movement.h"

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	10 e0       	ldi	r17, 0x00	; 0
			//move_forward(sensor, 25);
			//turn_counterClockwise(sensor, 87);
			//move_forward(sensor, (centimeters - (sum / 10)));
			break;
		}
		oi_update(sensor);
     732:	ce 01       	movw	r24, r28
     734:	7e d0       	rcall	.+252    	; 0x832 <oi_update>
		sum += sensor->distance;
     736:	8c 85       	ldd	r24, Y+12	; 0x0c
     738:	9d 85       	ldd	r25, Y+13	; 0x0d
     73a:	08 0f       	add	r16, r24
     73c:	19 1f       	adc	r17, r25

void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     73e:	0e 15       	cp	r16, r14
     740:	1f 05       	cpc	r17, r15
     742:	0c f3       	brlt	.-62     	; 0x706 <move_forward+0x56>
			break;
		}
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	53 d0       	rcall	.+166    	; 0x7f4 <oi_set_wheels>
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	08 95       	ret

0000075c <turn_clockwise>:
	}
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	8c 01       	movw	r16, r24
     766:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     768:	66 e9       	ldi	r22, 0x96	; 150
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	8a e6       	ldi	r24, 0x6A	; 106
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	41 d0       	rcall	.+130    	; 0x7f4 <oi_set_wheels>
	while (sum > 0) {
     772:	1c 16       	cp	r1, r28
     774:	1d 06       	cpc	r1, r29
     776:	54 f4       	brge	.+20     	; 0x78c <turn_clockwise+0x30>
		oi_update(sensor);
     778:	c8 01       	movw	r24, r16
     77a:	5b d0       	rcall	.+182    	; 0x832 <oi_update>
		sum += sensor->angle;
     77c:	f8 01       	movw	r30, r16
     77e:	86 85       	ldd	r24, Z+14	; 0x0e
     780:	97 85       	ldd	r25, Z+15	; 0x0f
     782:	c8 0f       	add	r28, r24
     784:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     786:	1c 16       	cp	r1, r28
     788:	1d 06       	cpc	r1, r29
     78a:	b4 f3       	brlt	.-20     	; 0x778 <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	2f d0       	rcall	.+94     	; 0x7f4 <oi_set_wheels>
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     7a0:	64 e3       	ldi	r22, 0x34	; 52
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	72 c6       	rjmp	.+3300   	; 0x148e <calloc>
     7aa:	08 95       	ret

000007ac <oi_byte_tx>:
     7ac:	eb e9       	ldi	r30, 0x9B	; 155
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	90 81       	ld	r25, Z
     7b2:	95 ff       	sbrs	r25, 5
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <oi_byte_tx+0x4>
     7b6:	80 93 9c 00 	sts	0x009C, r24
     7ba:	08 95       	ret

000007bc <oi_set_leds>:
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	08 2f       	mov	r16, r24
     7c6:	16 2f       	mov	r17, r22
     7c8:	d4 2f       	mov	r29, r20
     7ca:	c2 2f       	mov	r28, r18
     7cc:	8b e8       	ldi	r24, 0x8B	; 139
     7ce:	ee df       	rcall	.-36     	; 0x7ac <oi_byte_tx>
     7d0:	11 23       	and	r17, r17
     7d2:	29 f0       	breq	.+10     	; 0x7de <oi_set_leds+0x22>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	01 11       	cpse	r16, r1
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <oi_set_leds+0x24>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <oi_set_leds+0x24>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	e5 df       	rcall	.-54     	; 0x7ac <oi_byte_tx>
     7e2:	8d 2f       	mov	r24, r29
     7e4:	e3 df       	rcall	.-58     	; 0x7ac <oi_byte_tx>
     7e6:	8c 2f       	mov	r24, r28
     7e8:	e1 df       	rcall	.-62     	; 0x7ac <oi_byte_tx>
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <oi_set_wheels>:
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	18 2f       	mov	r17, r24
     7fe:	09 2f       	mov	r16, r25
     800:	c6 2f       	mov	r28, r22
     802:	d7 2f       	mov	r29, r23
     804:	81 e9       	ldi	r24, 0x91	; 145
     806:	d2 df       	rcall	.-92     	; 0x7ac <oi_byte_tx>
     808:	80 2f       	mov	r24, r16
     80a:	d0 df       	rcall	.-96     	; 0x7ac <oi_byte_tx>
     80c:	81 2f       	mov	r24, r17
     80e:	ce df       	rcall	.-100    	; 0x7ac <oi_byte_tx>
     810:	8d 2f       	mov	r24, r29
     812:	cc df       	rcall	.-104    	; 0x7ac <oi_byte_tx>
     814:	8c 2f       	mov	r24, r28
     816:	ca df       	rcall	.-108    	; 0x7ac <oi_byte_tx>
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     822:	eb e9       	ldi	r30, 0x9B	; 155
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	88 23       	and	r24, r24
     82a:	ec f7       	brge	.-6      	; 0x826 <oi_byte_rx+0x4>

	return UDR1;
     82c:	80 91 9c 00 	lds	r24, 0x009C
}
     830:	08 95       	ret

00000832 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     840:	80 91 9b 00 	lds	r24, 0x009B
     844:	88 23       	and	r24, r24
     846:	44 f4       	brge	.+16     	; 0x858 <oi_update+0x26>
		i = UDR1;
     848:	ac e9       	ldi	r26, 0x9C	; 156
     84a:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     84c:	eb e9       	ldi	r30, 0x9B	; 155
     84e:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     850:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     852:	80 81       	ld	r24, Z
     854:	88 23       	and	r24, r24
     856:	e4 f3       	brlt	.-8      	; 0x850 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     858:	8e e8       	ldi	r24, 0x8E	; 142
     85a:	a8 df       	rcall	.-176    	; 0x7ac <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	a6 df       	rcall	.-180    	; 0x7ac <oi_byte_tx>
     860:	e7 01       	movw	r28, r14
     862:	87 01       	movw	r16, r14
     864:	0c 5c       	subi	r16, 0xCC	; 204
     866:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     868:	dc df       	rcall	.-72     	; 0x822 <oi_byte_rx>
     86a:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     86c:	c0 17       	cp	r28, r16
     86e:	d1 07       	cpc	r29, r17
     870:	d9 f7       	brne	.-10     	; 0x868 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     872:	f7 01       	movw	r30, r14
     874:	84 85       	ldd	r24, Z+12	; 0x0c
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	98 2f       	mov	r25, r24
     87a:	88 27       	eor	r24, r24
     87c:	25 85       	ldd	r18, Z+13	; 0x0d
     87e:	82 0f       	add	r24, r18
     880:	91 1d       	adc	r25, r1
     882:	95 87       	std	Z+13, r25	; 0x0d
     884:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     886:	86 85       	ldd	r24, Z+14	; 0x0e
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	98 2f       	mov	r25, r24
     88c:	88 27       	eor	r24, r24
     88e:	27 85       	ldd	r18, Z+15	; 0x0f
     890:	82 0f       	add	r24, r18
     892:	91 1d       	adc	r25, r1
     894:	97 87       	std	Z+15, r25	; 0x0f
     896:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     898:	81 89       	ldd	r24, Z+17	; 0x11
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	98 2f       	mov	r25, r24
     89e:	88 27       	eor	r24, r24
     8a0:	22 89       	ldd	r18, Z+18	; 0x12
     8a2:	82 0f       	add	r24, r18
     8a4:	91 1d       	adc	r25, r1
     8a6:	92 8b       	std	Z+18, r25	; 0x12
     8a8:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     8aa:	83 89       	ldd	r24, Z+19	; 0x13
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	98 2f       	mov	r25, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	24 89       	ldd	r18, Z+20	; 0x14
     8b4:	82 0f       	add	r24, r18
     8b6:	91 1d       	adc	r25, r1
     8b8:	94 8b       	std	Z+20, r25	; 0x14
     8ba:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     8bc:	86 89       	ldd	r24, Z+22	; 0x16
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	98 2f       	mov	r25, r24
     8c2:	88 27       	eor	r24, r24
     8c4:	27 89       	ldd	r18, Z+23	; 0x17
     8c6:	82 0f       	add	r24, r18
     8c8:	91 1d       	adc	r25, r1
     8ca:	97 8b       	std	Z+23, r25	; 0x17
     8cc:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     8ce:	80 8d       	ldd	r24, Z+24	; 0x18
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	98 2f       	mov	r25, r24
     8d4:	88 27       	eor	r24, r24
     8d6:	21 8d       	ldd	r18, Z+25	; 0x19
     8d8:	82 0f       	add	r24, r18
     8da:	91 1d       	adc	r25, r1
     8dc:	91 8f       	std	Z+25, r25	; 0x19
     8de:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     8e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	98 2f       	mov	r25, r24
     8e6:	88 27       	eor	r24, r24
     8e8:	23 8d       	ldd	r18, Z+27	; 0x1b
     8ea:	82 0f       	add	r24, r18
     8ec:	91 1d       	adc	r25, r1
     8ee:	93 8f       	std	Z+27, r25	; 0x1b
     8f0:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     8f2:	84 8d       	ldd	r24, Z+28	; 0x1c
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	98 2f       	mov	r25, r24
     8f8:	88 27       	eor	r24, r24
     8fa:	25 8d       	ldd	r18, Z+29	; 0x1d
     8fc:	82 0f       	add	r24, r18
     8fe:	91 1d       	adc	r25, r1
     900:	95 8f       	std	Z+29, r25	; 0x1d
     902:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     904:	86 8d       	ldd	r24, Z+30	; 0x1e
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	98 2f       	mov	r25, r24
     90a:	88 27       	eor	r24, r24
     90c:	27 8d       	ldd	r18, Z+31	; 0x1f
     90e:	82 0f       	add	r24, r18
     910:	91 1d       	adc	r25, r1
     912:	97 8f       	std	Z+31, r25	; 0x1f
     914:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     916:	80 a1       	ldd	r24, Z+32	; 0x20
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	98 2f       	mov	r25, r24
     91c:	88 27       	eor	r24, r24
     91e:	21 a1       	ldd	r18, Z+33	; 0x21
     920:	82 0f       	add	r24, r18
     922:	91 1d       	adc	r25, r1
     924:	91 a3       	std	Z+33, r25	; 0x21
     926:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     928:	82 a1       	ldd	r24, Z+34	; 0x22
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	98 2f       	mov	r25, r24
     92e:	88 27       	eor	r24, r24
     930:	23 a1       	ldd	r18, Z+35	; 0x23
     932:	82 0f       	add	r24, r18
     934:	91 1d       	adc	r25, r1
     936:	93 a3       	std	Z+35, r25	; 0x23
     938:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     93a:	82 a5       	ldd	r24, Z+42	; 0x2a
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	21 a5       	ldd	r18, Z+41	; 0x29
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	32 2f       	mov	r19, r18
     944:	22 27       	eor	r18, r18
     946:	28 0f       	add	r18, r24
     948:	39 1f       	adc	r19, r25
     94a:	36 a3       	std	Z+38, r19	; 0x26
     94c:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     94e:	20 a9       	ldd	r18, Z+48	; 0x30
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	32 2f       	mov	r19, r18
     954:	22 27       	eor	r18, r18
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	95 a7       	std	Z+45, r25	; 0x2d
     95c:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     95e:	82 a9       	ldd	r24, Z+50	; 0x32
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	98 2f       	mov	r25, r24
     964:	88 27       	eor	r24, r24
     966:	23 a9       	ldd	r18, Z+51	; 0x33
     968:	82 0f       	add	r24, r18
     96a:	91 1d       	adc	r25, r1
     96c:	97 a7       	std	Z+47, r25	; 0x2f
     96e:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     970:	84 a9       	ldd	r24, Z+52	; 0x34
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	98 2f       	mov	r25, r24
     976:	88 27       	eor	r24, r24
     978:	25 a9       	ldd	r18, Z+53	; 0x35
     97a:	82 0f       	add	r24, r18
     97c:	91 1d       	adc	r25, r1
     97e:	91 ab       	std	Z+49, r25	; 0x31
     980:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     982:	86 a9       	ldd	r24, Z+54	; 0x36
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	98 2f       	mov	r25, r24
     988:	88 27       	eor	r24, r24
     98a:	27 a9       	ldd	r18, Z+55	; 0x37
     98c:	82 0f       	add	r24, r18
     98e:	91 1d       	adc	r25, r1
     990:	93 ab       	std	Z+51, r25	; 0x33
     992:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     994:	83 e2       	ldi	r24, 0x23	; 35
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	4f d0       	rcall	.+158    	; 0xa38 <wait_ms>
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	08 95       	ret

000009a8 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     9b2:	09 e9       	ldi	r16, 0x99	; 153
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	80 e1       	ldi	r24, 0x10	; 16
     9b8:	f8 01       	movw	r30, r16
     9ba:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     9bc:	88 e1       	ldi	r24, 0x18	; 24
     9be:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	f0 de       	rcall	.-544    	; 0x7ac <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     9cc:	81 e8       	ldi	r24, 0x81	; 129
     9ce:	ee de       	rcall	.-548    	; 0x7ac <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	ec de       	rcall	.-552    	; 0x7ac <oi_byte_tx>
	wait_ms(100);
     9d4:	84 e6       	ldi	r24, 0x64	; 100
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	2f d0       	rcall	.+94     	; 0xa38 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     9da:	81 e2       	ldi	r24, 0x21	; 33
     9dc:	f8 01       	movw	r30, r16
     9de:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     9e0:	84 e8       	ldi	r24, 0x84	; 132
     9e2:	e4 de       	rcall	.-568    	; 0x7ac <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	47 e0       	ldi	r20, 0x07	; 7
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	e7 de       	rcall	.-562    	; 0x7bc <oi_set_leds>
	
	oi_update(self);
     9ee:	ce 01       	movw	r24, r28
     9f0:	20 df       	rcall	.-448    	; 0x832 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     9f2:	ce 01       	movw	r24, r28
     9f4:	1e df       	rcall	.-452    	; 0x832 <oi_update>
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <timer2_start>:
 * -1 = CCW rotation
 */
char read_shaft_encoder(void) 
{
	return 0;
}
     a00:	10 92 17 02 	sts	0x0217, r1
     a04:	10 92 16 02 	sts	0x0216, r1
     a08:	81 11       	cpse	r24, r1
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <timer2_start+0x18>
     a0c:	8b e0       	ldi	r24, 0x0B	; 11
     a0e:	85 bd       	out	0x25, r24	; 37
     a10:	87 b7       	in	r24, 0x37	; 55
     a12:	80 68       	ori	r24, 0x80	; 128
     a14:	87 bf       	out	0x37, r24	; 55
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <timer2_start+0x26>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	29 f4       	brne	.+10     	; 0xa26 <timer2_start+0x26>
     a1c:	89 e0       	ldi	r24, 0x09	; 9
     a1e:	85 bd       	out	0x25, r24	; 37
     a20:	87 b7       	in	r24, 0x37	; 55
     a22:	80 68       	ori	r24, 0x80	; 128
     a24:	87 bf       	out	0x37, r24	; 55
     a26:	78 94       	sei
     a28:	08 95       	ret

00000a2a <timer2_stop>:
     a2a:	87 b7       	in	r24, 0x37	; 55
     a2c:	8f 77       	andi	r24, 0x7F	; 127
     a2e:	87 bf       	out	0x37, r24	; 55
     a30:	85 b5       	in	r24, 0x25	; 37
     a32:	8f 77       	andi	r24, 0x7F	; 127
     a34:	85 bd       	out	0x25, r24	; 37
     a36:	08 95       	ret

00000a38 <wait_ms>:
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
     a3e:	8a ef       	ldi	r24, 0xFA	; 250
     a40:	83 bd       	out	0x23, r24	; 35
     a42:	10 92 17 02 	sts	0x0217, r1
     a46:	10 92 16 02 	sts	0x0216, r1
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	d9 df       	rcall	.-78     	; 0xa00 <timer2_start>
     a4e:	20 91 16 02 	lds	r18, 0x0216
     a52:	30 91 17 02 	lds	r19, 0x0217
     a56:	2c 17       	cp	r18, r28
     a58:	3d 07       	cpc	r19, r29
     a5a:	c8 f3       	brcs	.-14     	; 0xa4e <wait_ms+0x16>
     a5c:	e6 df       	rcall	.-52     	; 0xa2a <timer2_stop>
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <__vector_9>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	80 91 16 02 	lds	r24, 0x0216
     a76:	90 91 17 02 	lds	r25, 0x0217
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 17 02 	sts	0x0217, r25
     a80:	80 93 16 02 	sts	0x0216, r24
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <USART_init>:

void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
     a92:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
     a96:	82 e2       	ldi	r24, 0x22	; 34
     a98:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
     a9e:	8e e0       	ldi	r24, 0x0E	; 14
     aa0:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
     aa4:	88 e1       	ldi	r24, 0x18	; 24
     aa6:	8a b9       	out	0x0a, r24	; 10
     aa8:	08 95       	ret

00000aaa <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
     aaa:	5f 9b       	sbis	0x0b, 7	; 11
     aac:	fe cf       	rjmp	.-4      	; 0xaaa <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     aae:	8c b1       	in	r24, 0x0c	; 12
}
     ab0:	08 95       	ret

00000ab2 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
     ab2:	5d 9b       	sbis	0x0b, 5	; 11
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     ab6:	8c b9       	out	0x0c, r24	; 12
     ab8:	08 95       	ret

00000aba <move_servo>:
}
		
int move_servo(int degree)
{
	int conv = 20*degree+800;
     aba:	24 e1       	ldi	r18, 0x14	; 20
     abc:	ac 01       	movw	r20, r24
     abe:	24 9f       	mul	r18, r20
     ac0:	c0 01       	movw	r24, r0
     ac2:	25 9f       	mul	r18, r21
     ac4:	90 0d       	add	r25, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	80 5e       	subi	r24, 0xE0	; 224
     aca:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
     acc:	90 93 85 00 	sts	0x0085, r25
     ad0:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
     ad4:	08 95       	ret

00000ad6 <timer3_init>:

void timer3_init(void)
{
	TCCR3A = 0b00100011;
     ad6:	83 e2       	ldi	r24, 0x23	; 35
     ad8:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
     adc:	8a e1       	ldi	r24, 0x1A	; 26
     ade:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
     ae2:	88 ef       	ldi	r24, 0xF8	; 248
     ae4:	97 ea       	ldi	r25, 0xA7	; 167
     ae6:	90 93 87 00 	sts	0x0087, r25
     aea:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	//4250=180d //3500= 135d //2600=90d //1700 = 45d //0800 = 0d
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	90 93 85 00 	sts	0x0085, r25
     af6:	80 93 84 00 	sts	0x0084, r24
	//wait_ms(2000);
	//OCR3B = 0b0000011111010000;
	DDRE = 0b00010000;
     afa:	80 e1       	ldi	r24, 0x10	; 16
     afc:	82 b9       	out	0x02, r24	; 2
     afe:	08 95       	ret

00000b00 <send_pulse>:
}

void send_pulse(void)
{
	DDRD |=0x10;
     b00:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     b02:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	97 df       	rcall	.-210    	; 0xa38 <wait_ms>
	PORTD &=0xEF;
     b0a:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
     b0c:	8c 98       	cbi	0x11, 4	; 17
     b0e:	08 95       	ret

00000b10 <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
	if(State==RISING){
     b22:	80 91 15 02 	lds	r24, 0x0215
     b26:	81 11       	cpse	r24, r1
     b28:	13 c0       	rjmp	.+38     	; 0xb50 <__vector_11+0x40>
		rising_time=ICR1;
     b2a:	86 b5       	in	r24, 0x26	; 38
     b2c:	97 b5       	in	r25, 0x27	; 39
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	80 93 11 02 	sts	0x0211, r24
     b36:	90 93 12 02 	sts	0x0212, r25
     b3a:	a0 93 13 02 	sts	0x0213, r26
     b3e:	b0 93 14 02 	sts	0x0214, r27
		State = FALLING;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 15 02 	sts	0x0215, r24
		TCCR1B &= 0b10111111;
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	8f 7b       	andi	r24, 0xBF	; 191
     b4c:	8e bd       	out	0x2e, r24	; 46
     b4e:	16 c0       	rjmp	.+44     	; 0xb7c <__vector_11+0x6c>
	}
	else if(State==FALLING){
     b50:	80 91 15 02 	lds	r24, 0x0215
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 f4       	brne	.+36     	; 0xb7c <__vector_11+0x6c>
		falling_time=ICR1;
     b58:	86 b5       	in	r24, 0x26	; 38
     b5a:	97 b5       	in	r25, 0x27	; 39
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	80 93 0d 02 	sts	0x020D, r24
     b64:	90 93 0e 02 	sts	0x020E, r25
     b68:	a0 93 0f 02 	sts	0x020F, r26
     b6c:	b0 93 10 02 	sts	0x0210, r27
		State = DONE;
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 93 15 02 	sts	0x0215, r24
		TCCR1B |= 0b01000000;
     b76:	8e b5       	in	r24, 0x2e	; 46
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	8e bd       	out	0x2e, r24	; 46
	}
}
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <pinginit>:

void pinginit(void)
{
	TIFR = 0b00000000;
     b8e:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
     b90:	83 ec       	ldi	r24, 0xC3	; 195
     b92:	8e bd       	out	0x2e, r24	; 46
     b94:	08 95       	ret

00000b96 <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
     b96:	10 92 15 02 	sts	0x0215, r1
	TIMSK &= 0b11011111;
     b9a:	87 b7       	in	r24, 0x37	; 55
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	87 bf       	out	0x37, r24	; 55
	send_pulse();
     ba0:	af df       	rcall	.-162    	; 0xb00 <send_pulse>
	TIFR |= 0b00100000;
     ba2:	86 b7       	in	r24, 0x36	; 54
     ba4:	80 62       	ori	r24, 0x20	; 32
     ba6:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
     ba8:	87 b7       	in	r24, 0x37	; 55
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
     bae:	80 91 15 02 	lds	r24, 0x0215
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	e1 f7       	brne	.-8      	; 0xbae <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
     bb6:	40 91 0d 02 	lds	r20, 0x020D
     bba:	50 91 0e 02 	lds	r21, 0x020E
     bbe:	60 91 0f 02 	lds	r22, 0x020F
     bc2:	70 91 10 02 	lds	r23, 0x0210
     bc6:	80 91 11 02 	lds	r24, 0x0211
     bca:	90 91 12 02 	lds	r25, 0x0212
     bce:	a0 91 13 02 	lds	r26, 0x0213
     bd2:	b0 91 14 02 	lds	r27, 0x0214
     bd6:	ba 01       	movw	r22, r20
     bd8:	68 1b       	sub	r22, r24
     bda:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
     bdc:	88 27       	eor	r24, r24
     bde:	77 fd       	sbrc	r23, 7
     be0:	80 95       	com	r24
     be2:	98 2f       	mov	r25, r24
     be4:	46 d1       	rcall	.+652    	; 0xe72 <__floatsisf>
     be6:	29 e4       	ldi	r18, 0x49	; 73
     be8:	3b e4       	ldi	r19, 0x4B	; 75
     bea:	4b e6       	ldi	r20, 0x6B	; 107
     bec:	51 e4       	ldi	r21, 0x41	; 65
     bee:	a6 d0       	rcall	.+332    	; 0xd3c <__divsf3>
     bf0:	0d d1       	rcall	.+538    	; 0xe0c <__fixsfsi>
	
	return centimeters;
}
     bf2:	cb 01       	movw	r24, r22
     bf4:	08 95       	ret

00000bf6 <ADC_init>:

void ADC_init(void)
{
	ADMUX=0b11000010;
     bf6:	82 ec       	ldi	r24, 0xC2	; 194
     bf8:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
     bfa:	87 e8       	ldi	r24, 0x87	; 135
     bfc:	86 b9       	out	0x06, r24	; 6
     bfe:	08 95       	ret

00000c00 <ADC_read>:
}

int ADC_read(void)
{
	ADCSRA |= 0b01000000;
     c00:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
     c02:	36 99       	sbic	0x06, 6	; 6
     c04:	fe cf       	rjmp	.-4      	; 0xc02 <ADC_read+0x2>
	return ADC;
     c06:	84 b1       	in	r24, 0x04	; 4
     c08:	95 b1       	in	r25, 0x05	; 5
}
     c0a:	08 95       	ret

00000c0c <getIrDistance>:

int distance=0;
int value1=0;

int getIrDistance(void)
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	c5 e0       	ldi	r28, 0x05	; 5
     c16:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
     c1c:	f1 df       	rcall	.-30     	; 0xc00 <ADC_read>
     c1e:	08 0f       	add	r16, r24
     c20:	19 1f       	adc	r17, r25
     c22:	21 97       	sbiw	r28, 0x01	; 1
int value1=0;

int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
     c24:	20 97       	sbiw	r28, 0x00	; 0
     c26:	d1 f7       	brne	.-12     	; 0xc1c <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
     c28:	c8 01       	movw	r24, r16
     c2a:	65 e0       	ldi	r22, 0x05	; 5
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	08 d4       	rcall	.+2064   	; 0x1440 <__divmodhi4>
     c30:	70 93 0a 02 	sts	0x020A, r23
     c34:	60 93 09 02 	sts	0x0209, r22
	distance = 24443*pow(value1,(-1.156));
     c38:	88 27       	eor	r24, r24
     c3a:	77 fd       	sbrc	r23, 7
     c3c:	80 95       	com	r24
     c3e:	98 2f       	mov	r25, r24
     c40:	18 d1       	rcall	.+560    	; 0xe72 <__floatsisf>
     c42:	2f ec       	ldi	r18, 0xCF	; 207
     c44:	37 ef       	ldi	r19, 0xF7	; 247
     c46:	43 e9       	ldi	r20, 0x93	; 147
     c48:	5f eb       	ldi	r21, 0xBF	; 191
     c4a:	3b d2       	rcall	.+1142   	; 0x10c2 <pow>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	36 ef       	ldi	r19, 0xF6	; 246
     c50:	4e eb       	ldi	r20, 0xBE	; 190
     c52:	56 e4       	ldi	r21, 0x46	; 70
     c54:	d3 d1       	rcall	.+934    	; 0xffc <__mulsf3>
     c56:	da d0       	rcall	.+436    	; 0xe0c <__fixsfsi>
     c58:	70 93 0c 02 	sts	0x020C, r23
     c5c:	60 93 0b 02 	sts	0x020B, r22
	return distance;
     c60:	cb 01       	movw	r24, r22
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <__subsf3>:
     c6c:	50 58       	subi	r21, 0x80	; 128

00000c6e <__addsf3>:
     c6e:	bb 27       	eor	r27, r27
     c70:	aa 27       	eor	r26, r26
     c72:	0e d0       	rcall	.+28     	; 0xc90 <__addsf3x>
     c74:	78 c1       	rjmp	.+752    	; 0xf66 <__fp_round>
     c76:	41 d1       	rcall	.+642    	; 0xefa <__fp_pscA>
     c78:	30 f0       	brcs	.+12     	; 0xc86 <__addsf3+0x18>
     c7a:	46 d1       	rcall	.+652    	; 0xf08 <__fp_pscB>
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__addsf3+0x18>
     c7e:	31 f4       	brne	.+12     	; 0xc8c <__addsf3+0x1e>
     c80:	9f 3f       	cpi	r25, 0xFF	; 255
     c82:	11 f4       	brne	.+4      	; 0xc88 <__addsf3+0x1a>
     c84:	1e f4       	brtc	.+6      	; 0xc8c <__addsf3+0x1e>
     c86:	36 c1       	rjmp	.+620    	; 0xef4 <__fp_nan>
     c88:	0e f4       	brtc	.+2      	; 0xc8c <__addsf3+0x1e>
     c8a:	e0 95       	com	r30
     c8c:	e7 fb       	bst	r30, 7
     c8e:	2c c1       	rjmp	.+600    	; 0xee8 <__fp_inf>

00000c90 <__addsf3x>:
     c90:	e9 2f       	mov	r30, r25
     c92:	8b d1       	rcall	.+790    	; 0xfaa <__fp_split3>
     c94:	80 f3       	brcs	.-32     	; 0xc76 <__addsf3+0x8>
     c96:	ba 17       	cp	r27, r26
     c98:	62 07       	cpc	r22, r18
     c9a:	73 07       	cpc	r23, r19
     c9c:	84 07       	cpc	r24, r20
     c9e:	95 07       	cpc	r25, r21
     ca0:	18 f0       	brcs	.+6      	; 0xca8 <__addsf3x+0x18>
     ca2:	71 f4       	brne	.+28     	; 0xcc0 <__addsf3x+0x30>
     ca4:	9e f5       	brtc	.+102    	; 0xd0c <__addsf3x+0x7c>
     ca6:	a3 c1       	rjmp	.+838    	; 0xfee <__fp_zero>
     ca8:	0e f4       	brtc	.+2      	; 0xcac <__addsf3x+0x1c>
     caa:	e0 95       	com	r30
     cac:	0b 2e       	mov	r0, r27
     cae:	ba 2f       	mov	r27, r26
     cb0:	a0 2d       	mov	r26, r0
     cb2:	0b 01       	movw	r0, r22
     cb4:	b9 01       	movw	r22, r18
     cb6:	90 01       	movw	r18, r0
     cb8:	0c 01       	movw	r0, r24
     cba:	ca 01       	movw	r24, r20
     cbc:	a0 01       	movw	r20, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	ff 27       	eor	r31, r31
     cc2:	59 1b       	sub	r21, r25
     cc4:	99 f0       	breq	.+38     	; 0xcec <__addsf3x+0x5c>
     cc6:	59 3f       	cpi	r21, 0xF9	; 249
     cc8:	50 f4       	brcc	.+20     	; 0xcde <__addsf3x+0x4e>
     cca:	50 3e       	cpi	r21, 0xE0	; 224
     ccc:	68 f1       	brcs	.+90     	; 0xd28 <__addsf3x+0x98>
     cce:	1a 16       	cp	r1, r26
     cd0:	f0 40       	sbci	r31, 0x00	; 0
     cd2:	a2 2f       	mov	r26, r18
     cd4:	23 2f       	mov	r18, r19
     cd6:	34 2f       	mov	r19, r20
     cd8:	44 27       	eor	r20, r20
     cda:	58 5f       	subi	r21, 0xF8	; 248
     cdc:	f3 cf       	rjmp	.-26     	; 0xcc4 <__addsf3x+0x34>
     cde:	46 95       	lsr	r20
     ce0:	37 95       	ror	r19
     ce2:	27 95       	ror	r18
     ce4:	a7 95       	ror	r26
     ce6:	f0 40       	sbci	r31, 0x00	; 0
     ce8:	53 95       	inc	r21
     cea:	c9 f7       	brne	.-14     	; 0xcde <__addsf3x+0x4e>
     cec:	7e f4       	brtc	.+30     	; 0xd0c <__addsf3x+0x7c>
     cee:	1f 16       	cp	r1, r31
     cf0:	ba 0b       	sbc	r27, r26
     cf2:	62 0b       	sbc	r22, r18
     cf4:	73 0b       	sbc	r23, r19
     cf6:	84 0b       	sbc	r24, r20
     cf8:	ba f0       	brmi	.+46     	; 0xd28 <__addsf3x+0x98>
     cfa:	91 50       	subi	r25, 0x01	; 1
     cfc:	a1 f0       	breq	.+40     	; 0xd26 <__addsf3x+0x96>
     cfe:	ff 0f       	add	r31, r31
     d00:	bb 1f       	adc	r27, r27
     d02:	66 1f       	adc	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	c2 f7       	brpl	.-16     	; 0xcfa <__addsf3x+0x6a>
     d0a:	0e c0       	rjmp	.+28     	; 0xd28 <__addsf3x+0x98>
     d0c:	ba 0f       	add	r27, r26
     d0e:	62 1f       	adc	r22, r18
     d10:	73 1f       	adc	r23, r19
     d12:	84 1f       	adc	r24, r20
     d14:	48 f4       	brcc	.+18     	; 0xd28 <__addsf3x+0x98>
     d16:	87 95       	ror	r24
     d18:	77 95       	ror	r23
     d1a:	67 95       	ror	r22
     d1c:	b7 95       	ror	r27
     d1e:	f7 95       	ror	r31
     d20:	9e 3f       	cpi	r25, 0xFE	; 254
     d22:	08 f0       	brcs	.+2      	; 0xd26 <__addsf3x+0x96>
     d24:	b3 cf       	rjmp	.-154    	; 0xc8c <__addsf3+0x1e>
     d26:	93 95       	inc	r25
     d28:	88 0f       	add	r24, r24
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <__addsf3x+0x9e>
     d2c:	99 27       	eor	r25, r25
     d2e:	ee 0f       	add	r30, r30
     d30:	97 95       	ror	r25
     d32:	87 95       	ror	r24
     d34:	08 95       	ret

00000d36 <cos>:
     d36:	f0 d0       	rcall	.+480    	; 0xf18 <__fp_rempio2>
     d38:	e3 95       	inc	r30
     d3a:	26 c1       	rjmp	.+588    	; 0xf88 <__fp_sinus>

00000d3c <__divsf3>:
     d3c:	0c d0       	rcall	.+24     	; 0xd56 <__divsf3x>
     d3e:	13 c1       	rjmp	.+550    	; 0xf66 <__fp_round>
     d40:	e3 d0       	rcall	.+454    	; 0xf08 <__fp_pscB>
     d42:	40 f0       	brcs	.+16     	; 0xd54 <__divsf3+0x18>
     d44:	da d0       	rcall	.+436    	; 0xefa <__fp_pscA>
     d46:	30 f0       	brcs	.+12     	; 0xd54 <__divsf3+0x18>
     d48:	21 f4       	brne	.+8      	; 0xd52 <__divsf3+0x16>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	19 f0       	breq	.+6      	; 0xd54 <__divsf3+0x18>
     d4e:	cc c0       	rjmp	.+408    	; 0xee8 <__fp_inf>
     d50:	51 11       	cpse	r21, r1
     d52:	4e c1       	rjmp	.+668    	; 0xff0 <__fp_szero>
     d54:	cf c0       	rjmp	.+414    	; 0xef4 <__fp_nan>

00000d56 <__divsf3x>:
     d56:	29 d1       	rcall	.+594    	; 0xfaa <__fp_split3>
     d58:	98 f3       	brcs	.-26     	; 0xd40 <__divsf3+0x4>

00000d5a <__divsf3_pse>:
     d5a:	99 23       	and	r25, r25
     d5c:	c9 f3       	breq	.-14     	; 0xd50 <__divsf3+0x14>
     d5e:	55 23       	and	r21, r21
     d60:	b1 f3       	breq	.-20     	; 0xd4e <__divsf3+0x12>
     d62:	95 1b       	sub	r25, r21
     d64:	55 0b       	sbc	r21, r21
     d66:	bb 27       	eor	r27, r27
     d68:	aa 27       	eor	r26, r26
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__divsf3_pse+0x26>
     d72:	9f 5f       	subi	r25, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	aa 1f       	adc	r26, r26
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <__divsf3_pse+0x10>
     d80:	33 d0       	rcall	.+102    	; 0xde8 <__divsf3_pse+0x8e>
     d82:	0e 2e       	mov	r0, r30
     d84:	3a f0       	brmi	.+14     	; 0xd94 <__divsf3_pse+0x3a>
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	30 d0       	rcall	.+96     	; 0xdea <__divsf3_pse+0x90>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	50 40       	sbci	r21, 0x00	; 0
     d8e:	e6 95       	lsr	r30
     d90:	00 1c       	adc	r0, r0
     d92:	ca f7       	brpl	.-14     	; 0xd86 <__divsf3_pse+0x2c>
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x8e>
     d96:	fe 2f       	mov	r31, r30
     d98:	27 d0       	rcall	.+78     	; 0xde8 <__divsf3_pse+0x8e>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	ab 07       	cpc	r26, r27
     daa:	b0 e8       	ldi	r27, 0x80	; 128
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__divsf3_pse+0x56>
     dae:	bb 0b       	sbc	r27, r27
     db0:	80 2d       	mov	r24, r0
     db2:	bf 01       	movw	r22, r30
     db4:	ff 27       	eor	r31, r31
     db6:	93 58       	subi	r25, 0x83	; 131
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__divsf3_pse+0x6c>
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	51 05       	cpc	r21, r1
     dc0:	68 f0       	brcs	.+26     	; 0xddc <__divsf3_pse+0x82>
     dc2:	92 c0       	rjmp	.+292    	; 0xee8 <__fp_inf>
     dc4:	15 c1       	rjmp	.+554    	; 0xff0 <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	ec f3       	brlt	.-6      	; 0xdc4 <__divsf3_pse+0x6a>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	dc f3       	brlt	.-10     	; 0xdc4 <__divsf3_pse+0x6a>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x74>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xaa>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x90>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixsfsi>:
     e0c:	04 d0       	rcall	.+8      	; 0xe16 <__fixunssfsi>
     e0e:	68 94       	set
     e10:	b1 11       	cpse	r27, r1
     e12:	ee c0       	rjmp	.+476    	; 0xff0 <__fp_szero>
     e14:	08 95       	ret

00000e16 <__fixunssfsi>:
     e16:	d1 d0       	rcall	.+418    	; 0xfba <__fp_splitA>
     e18:	88 f0       	brcs	.+34     	; 0xe3c <__fixunssfsi+0x26>
     e1a:	9f 57       	subi	r25, 0x7F	; 127
     e1c:	90 f0       	brcs	.+36     	; 0xe42 <__fixunssfsi+0x2c>
     e1e:	b9 2f       	mov	r27, r25
     e20:	99 27       	eor	r25, r25
     e22:	b7 51       	subi	r27, 0x17	; 23
     e24:	a0 f0       	brcs	.+40     	; 0xe4e <__fixunssfsi+0x38>
     e26:	d1 f0       	breq	.+52     	; 0xe5c <__fixunssfsi+0x46>
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	1a f0       	brmi	.+6      	; 0xe38 <__fixunssfsi+0x22>
     e32:	ba 95       	dec	r27
     e34:	c9 f7       	brne	.-14     	; 0xe28 <__fixunssfsi+0x12>
     e36:	12 c0       	rjmp	.+36     	; 0xe5c <__fixunssfsi+0x46>
     e38:	b1 30       	cpi	r27, 0x01	; 1
     e3a:	81 f0       	breq	.+32     	; 0xe5c <__fixunssfsi+0x46>
     e3c:	d8 d0       	rcall	.+432    	; 0xfee <__fp_zero>
     e3e:	b1 e0       	ldi	r27, 0x01	; 1
     e40:	08 95       	ret
     e42:	d5 c0       	rjmp	.+426    	; 0xfee <__fp_zero>
     e44:	67 2f       	mov	r22, r23
     e46:	78 2f       	mov	r23, r24
     e48:	88 27       	eor	r24, r24
     e4a:	b8 5f       	subi	r27, 0xF8	; 248
     e4c:	39 f0       	breq	.+14     	; 0xe5c <__fixunssfsi+0x46>
     e4e:	b9 3f       	cpi	r27, 0xF9	; 249
     e50:	cc f3       	brlt	.-14     	; 0xe44 <__fixunssfsi+0x2e>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b3 95       	inc	r27
     e5a:	d9 f7       	brne	.-10     	; 0xe52 <__fixunssfsi+0x3c>
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__fixunssfsi+0x56>
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <__floatunsisf>:
     e6e:	e8 94       	clt
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <__floatsisf+0x12>

00000e72 <__floatsisf>:
     e72:	97 fb       	bst	r25, 7
     e74:	3e f4       	brtc	.+14     	; 0xe84 <__floatsisf+0x12>
     e76:	90 95       	com	r25
     e78:	80 95       	com	r24
     e7a:	70 95       	com	r23
     e7c:	61 95       	neg	r22
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	99 23       	and	r25, r25
     e86:	a9 f0       	breq	.+42     	; 0xeb2 <__floatsisf+0x40>
     e88:	f9 2f       	mov	r31, r25
     e8a:	96 e9       	ldi	r25, 0x96	; 150
     e8c:	bb 27       	eor	r27, r27
     e8e:	93 95       	inc	r25
     e90:	f6 95       	lsr	r31
     e92:	87 95       	ror	r24
     e94:	77 95       	ror	r23
     e96:	67 95       	ror	r22
     e98:	b7 95       	ror	r27
     e9a:	f1 11       	cpse	r31, r1
     e9c:	f8 cf       	rjmp	.-16     	; 0xe8e <__floatsisf+0x1c>
     e9e:	fa f4       	brpl	.+62     	; 0xede <__floatsisf+0x6c>
     ea0:	bb 0f       	add	r27, r27
     ea2:	11 f4       	brne	.+4      	; 0xea8 <__floatsisf+0x36>
     ea4:	60 ff       	sbrs	r22, 0
     ea6:	1b c0       	rjmp	.+54     	; 0xede <__floatsisf+0x6c>
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	16 c0       	rjmp	.+44     	; 0xede <__floatsisf+0x6c>
     eb2:	88 23       	and	r24, r24
     eb4:	11 f0       	breq	.+4      	; 0xeba <__floatsisf+0x48>
     eb6:	96 e9       	ldi	r25, 0x96	; 150
     eb8:	11 c0       	rjmp	.+34     	; 0xedc <__floatsisf+0x6a>
     eba:	77 23       	and	r23, r23
     ebc:	21 f0       	breq	.+8      	; 0xec6 <__floatsisf+0x54>
     ebe:	9e e8       	ldi	r25, 0x8E	; 142
     ec0:	87 2f       	mov	r24, r23
     ec2:	76 2f       	mov	r23, r22
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <__floatsisf+0x5e>
     ec6:	66 23       	and	r22, r22
     ec8:	71 f0       	breq	.+28     	; 0xee6 <__floatsisf+0x74>
     eca:	96 e8       	ldi	r25, 0x86	; 134
     ecc:	86 2f       	mov	r24, r22
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	2a f0       	brmi	.+10     	; 0xede <__floatsisf+0x6c>
     ed4:	9a 95       	dec	r25
     ed6:	66 0f       	add	r22, r22
     ed8:	77 1f       	adc	r23, r23
     eda:	88 1f       	adc	r24, r24
     edc:	da f7       	brpl	.-10     	; 0xed4 <__floatsisf+0x62>
     ede:	88 0f       	add	r24, r24
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret

00000ee8 <__fp_inf>:
     ee8:	97 f9       	bld	r25, 7
     eea:	9f 67       	ori	r25, 0x7F	; 127
     eec:	80 e8       	ldi	r24, 0x80	; 128
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	08 95       	ret

00000ef4 <__fp_nan>:
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	80 ec       	ldi	r24, 0xC0	; 192
     ef8:	08 95       	ret

00000efa <__fp_pscA>:
     efa:	00 24       	eor	r0, r0
     efc:	0a 94       	dec	r0
     efe:	16 16       	cp	r1, r22
     f00:	17 06       	cpc	r1, r23
     f02:	18 06       	cpc	r1, r24
     f04:	09 06       	cpc	r0, r25
     f06:	08 95       	ret

00000f08 <__fp_pscB>:
     f08:	00 24       	eor	r0, r0
     f0a:	0a 94       	dec	r0
     f0c:	12 16       	cp	r1, r18
     f0e:	13 06       	cpc	r1, r19
     f10:	14 06       	cpc	r1, r20
     f12:	05 06       	cpc	r0, r21
     f14:	08 95       	ret
     f16:	ee cf       	rjmp	.-36     	; 0xef4 <__fp_nan>

00000f18 <__fp_rempio2>:
     f18:	50 d0       	rcall	.+160    	; 0xfba <__fp_splitA>
     f1a:	e8 f3       	brcs	.-6      	; 0xf16 <__fp_pscB+0xe>
     f1c:	e8 94       	clt
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	bb 27       	eor	r27, r27
     f22:	9f 57       	subi	r25, 0x7F	; 127
     f24:	f0 f0       	brcs	.+60     	; 0xf62 <__fp_rempio2+0x4a>
     f26:	2a ed       	ldi	r18, 0xDA	; 218
     f28:	3f e0       	ldi	r19, 0x0F	; 15
     f2a:	49 ec       	ldi	r20, 0xC9	; 201
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <__fp_rempio2+0x22>
     f2e:	ee 0f       	add	r30, r30
     f30:	bb 0f       	add	r27, r27
     f32:	66 1f       	adc	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	28 f0       	brcs	.+10     	; 0xf44 <__fp_rempio2+0x2c>
     f3a:	b2 3a       	cpi	r27, 0xA2	; 162
     f3c:	62 07       	cpc	r22, r18
     f3e:	73 07       	cpc	r23, r19
     f40:	84 07       	cpc	r24, r20
     f42:	28 f0       	brcs	.+10     	; 0xf4e <__fp_rempio2+0x36>
     f44:	b2 5a       	subi	r27, 0xA2	; 162
     f46:	62 0b       	sbc	r22, r18
     f48:	73 0b       	sbc	r23, r19
     f4a:	84 0b       	sbc	r24, r20
     f4c:	e3 95       	inc	r30
     f4e:	9a 95       	dec	r25
     f50:	72 f7       	brpl	.-36     	; 0xf2e <__fp_rempio2+0x16>
     f52:	80 38       	cpi	r24, 0x80	; 128
     f54:	30 f4       	brcc	.+12     	; 0xf62 <__fp_rempio2+0x4a>
     f56:	9a 95       	dec	r25
     f58:	bb 0f       	add	r27, r27
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	d2 f7       	brpl	.-12     	; 0xf56 <__fp_rempio2+0x3e>
     f62:	90 48       	sbci	r25, 0x80	; 128
     f64:	6f c1       	rjmp	.+734    	; 0x1244 <__fp_mpack_finite>

00000f66 <__fp_round>:
     f66:	09 2e       	mov	r0, r25
     f68:	03 94       	inc	r0
     f6a:	00 0c       	add	r0, r0
     f6c:	11 f4       	brne	.+4      	; 0xf72 <__fp_round+0xc>
     f6e:	88 23       	and	r24, r24
     f70:	52 f0       	brmi	.+20     	; 0xf86 <__fp_round+0x20>
     f72:	bb 0f       	add	r27, r27
     f74:	40 f4       	brcc	.+16     	; 0xf86 <__fp_round+0x20>
     f76:	bf 2b       	or	r27, r31
     f78:	11 f4       	brne	.+4      	; 0xf7e <__fp_round+0x18>
     f7a:	60 ff       	sbrs	r22, 0
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <__fp_round+0x20>
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	08 95       	ret

00000f88 <__fp_sinus>:
     f88:	ef 93       	push	r30
     f8a:	e0 ff       	sbrs	r30, 0
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <__fp_sinus+0x12>
     f8e:	a2 ea       	ldi	r26, 0xA2	; 162
     f90:	2a ed       	ldi	r18, 0xDA	; 218
     f92:	3f e0       	ldi	r19, 0x0F	; 15
     f94:	49 ec       	ldi	r20, 0xC9	; 201
     f96:	5f eb       	ldi	r21, 0xBF	; 191
     f98:	7b de       	rcall	.-778    	; 0xc90 <__addsf3x>
     f9a:	e5 df       	rcall	.-54     	; 0xf66 <__fp_round>
     f9c:	0f 90       	pop	r0
     f9e:	03 94       	inc	r0
     fa0:	01 fc       	sbrc	r0, 1
     fa2:	90 58       	subi	r25, 0x80	; 128
     fa4:	ec e8       	ldi	r30, 0x8C	; 140
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	85 c1       	rjmp	.+778    	; 0x12b4 <__fp_powsodd>

00000faa <__fp_split3>:
     faa:	57 fd       	sbrc	r21, 7
     fac:	90 58       	subi	r25, 0x80	; 128
     fae:	44 0f       	add	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	59 f0       	breq	.+22     	; 0xfca <__fp_splitA+0x10>
     fb4:	5f 3f       	cpi	r21, 0xFF	; 255
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <__fp_splitA+0x1a>
     fb8:	47 95       	ror	r20

00000fba <__fp_splitA>:
     fba:	88 0f       	add	r24, r24
     fbc:	97 fb       	bst	r25, 7
     fbe:	99 1f       	adc	r25, r25
     fc0:	61 f0       	breq	.+24     	; 0xfda <__fp_splitA+0x20>
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <__fp_splitA+0x2a>
     fc6:	87 95       	ror	r24
     fc8:	08 95       	ret
     fca:	12 16       	cp	r1, r18
     fcc:	13 06       	cpc	r1, r19
     fce:	14 06       	cpc	r1, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	f2 cf       	rjmp	.-28     	; 0xfb8 <__fp_split3+0xe>
     fd4:	46 95       	lsr	r20
     fd6:	f1 df       	rcall	.-30     	; 0xfba <__fp_splitA>
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <__fp_splitA+0x30>
     fda:	16 16       	cp	r1, r22
     fdc:	17 06       	cpc	r1, r23
     fde:	18 06       	cpc	r1, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	f1 cf       	rjmp	.-30     	; 0xfc6 <__fp_splitA+0xc>
     fe4:	86 95       	lsr	r24
     fe6:	71 05       	cpc	r23, r1
     fe8:	61 05       	cpc	r22, r1
     fea:	08 94       	sec
     fec:	08 95       	ret

00000fee <__fp_zero>:
     fee:	e8 94       	clt

00000ff0 <__fp_szero>:
     ff0:	bb 27       	eor	r27, r27
     ff2:	66 27       	eor	r22, r22
     ff4:	77 27       	eor	r23, r23
     ff6:	cb 01       	movw	r24, r22
     ff8:	97 f9       	bld	r25, 7
     ffa:	08 95       	ret

00000ffc <__mulsf3>:
     ffc:	0b d0       	rcall	.+22     	; 0x1014 <__mulsf3x>
     ffe:	b3 cf       	rjmp	.-154    	; 0xf66 <__fp_round>
    1000:	7c df       	rcall	.-264    	; 0xefa <__fp_pscA>
    1002:	28 f0       	brcs	.+10     	; 0x100e <__mulsf3+0x12>
    1004:	81 df       	rcall	.-254    	; 0xf08 <__fp_pscB>
    1006:	18 f0       	brcs	.+6      	; 0x100e <__mulsf3+0x12>
    1008:	95 23       	and	r25, r21
    100a:	09 f0       	breq	.+2      	; 0x100e <__mulsf3+0x12>
    100c:	6d cf       	rjmp	.-294    	; 0xee8 <__fp_inf>
    100e:	72 cf       	rjmp	.-284    	; 0xef4 <__fp_nan>
    1010:	11 24       	eor	r1, r1
    1012:	ee cf       	rjmp	.-36     	; 0xff0 <__fp_szero>

00001014 <__mulsf3x>:
    1014:	ca df       	rcall	.-108    	; 0xfaa <__fp_split3>
    1016:	a0 f3       	brcs	.-24     	; 0x1000 <__mulsf3+0x4>

00001018 <__mulsf3_pse>:
    1018:	95 9f       	mul	r25, r21
    101a:	d1 f3       	breq	.-12     	; 0x1010 <__mulsf3+0x14>
    101c:	95 0f       	add	r25, r21
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	55 1f       	adc	r21, r21
    1022:	62 9f       	mul	r22, r18
    1024:	f0 01       	movw	r30, r0
    1026:	72 9f       	mul	r23, r18
    1028:	bb 27       	eor	r27, r27
    102a:	f0 0d       	add	r31, r0
    102c:	b1 1d       	adc	r27, r1
    102e:	63 9f       	mul	r22, r19
    1030:	aa 27       	eor	r26, r26
    1032:	f0 0d       	add	r31, r0
    1034:	b1 1d       	adc	r27, r1
    1036:	aa 1f       	adc	r26, r26
    1038:	64 9f       	mul	r22, r20
    103a:	66 27       	eor	r22, r22
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	66 1f       	adc	r22, r22
    1042:	82 9f       	mul	r24, r18
    1044:	22 27       	eor	r18, r18
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	62 1f       	adc	r22, r18
    104c:	73 9f       	mul	r23, r19
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	62 1f       	adc	r22, r18
    1054:	83 9f       	mul	r24, r19
    1056:	a0 0d       	add	r26, r0
    1058:	61 1d       	adc	r22, r1
    105a:	22 1f       	adc	r18, r18
    105c:	74 9f       	mul	r23, r20
    105e:	33 27       	eor	r19, r19
    1060:	a0 0d       	add	r26, r0
    1062:	61 1d       	adc	r22, r1
    1064:	23 1f       	adc	r18, r19
    1066:	84 9f       	mul	r24, r20
    1068:	60 0d       	add	r22, r0
    106a:	21 1d       	adc	r18, r1
    106c:	82 2f       	mov	r24, r18
    106e:	76 2f       	mov	r23, r22
    1070:	6a 2f       	mov	r22, r26
    1072:	11 24       	eor	r1, r1
    1074:	9f 57       	subi	r25, 0x7F	; 127
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	8a f0       	brmi	.+34     	; 0x109c <__mulsf3_pse+0x84>
    107a:	e1 f0       	breq	.+56     	; 0x10b4 <__mulsf3_pse+0x9c>
    107c:	88 23       	and	r24, r24
    107e:	4a f0       	brmi	.+18     	; 0x1092 <__mulsf3_pse+0x7a>
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	bb 1f       	adc	r27, r27
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	a9 f7       	brne	.-22     	; 0x107c <__mulsf3_pse+0x64>
    1092:	9e 3f       	cpi	r25, 0xFE	; 254
    1094:	51 05       	cpc	r21, r1
    1096:	70 f0       	brcs	.+28     	; 0x10b4 <__mulsf3_pse+0x9c>
    1098:	27 cf       	rjmp	.-434    	; 0xee8 <__fp_inf>
    109a:	aa cf       	rjmp	.-172    	; 0xff0 <__fp_szero>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	ec f3       	brlt	.-6      	; 0x109a <__mulsf3_pse+0x82>
    10a0:	98 3e       	cpi	r25, 0xE8	; 232
    10a2:	dc f3       	brlt	.-10     	; 0x109a <__mulsf3_pse+0x82>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	e7 95       	ror	r30
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	c1 f7       	brne	.-16     	; 0x10a4 <__mulsf3_pse+0x8c>
    10b4:	fe 2b       	or	r31, r30
    10b6:	88 0f       	add	r24, r24
    10b8:	91 1d       	adc	r25, r1
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <pow>:
    10c2:	fa 01       	movw	r30, r20
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	30 96       	adiw	r30, 0x00	; 0
    10ca:	21 05       	cpc	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	99 f1       	breq	.+102    	; 0x1136 <__stack+0x37>
    10d0:	61 15       	cp	r22, r1
    10d2:	71 05       	cpc	r23, r1
    10d4:	61 f4       	brne	.+24     	; 0x10ee <pow+0x2c>
    10d6:	80 38       	cpi	r24, 0x80	; 128
    10d8:	bf e3       	ldi	r27, 0x3F	; 63
    10da:	9b 07       	cpc	r25, r27
    10dc:	49 f1       	breq	.+82     	; 0x1130 <__stack+0x31>
    10de:	68 94       	set
    10e0:	90 38       	cpi	r25, 0x80	; 128
    10e2:	81 05       	cpc	r24, r1
    10e4:	61 f0       	breq	.+24     	; 0x10fe <pow+0x3c>
    10e6:	80 38       	cpi	r24, 0x80	; 128
    10e8:	bf ef       	ldi	r27, 0xFF	; 255
    10ea:	9b 07       	cpc	r25, r27
    10ec:	41 f0       	breq	.+16     	; 0x10fe <pow+0x3c>
    10ee:	99 23       	and	r25, r25
    10f0:	42 f5       	brpl	.+80     	; 0x1142 <__stack+0x43>
    10f2:	ff 3f       	cpi	r31, 0xFF	; 255
    10f4:	e1 05       	cpc	r30, r1
    10f6:	31 05       	cpc	r19, r1
    10f8:	21 05       	cpc	r18, r1
    10fa:	11 f1       	breq	.+68     	; 0x1140 <__stack+0x41>
    10fc:	e8 94       	clt
    10fe:	08 94       	sec
    1100:	e7 95       	ror	r30
    1102:	d9 01       	movw	r26, r18
    1104:	aa 23       	and	r26, r26
    1106:	29 f4       	brne	.+10     	; 0x1112 <__stack+0x13>
    1108:	ab 2f       	mov	r26, r27
    110a:	be 2f       	mov	r27, r30
    110c:	f8 5f       	subi	r31, 0xF8	; 248
    110e:	d0 f3       	brcs	.-12     	; 0x1104 <__stack+0x5>
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <__stack+0x33>
    1112:	ff 5f       	subi	r31, 0xFF	; 255
    1114:	70 f4       	brcc	.+28     	; 0x1132 <__stack+0x33>
    1116:	a6 95       	lsr	r26
    1118:	e0 f7       	brcc	.-8      	; 0x1112 <__stack+0x13>
    111a:	f7 39       	cpi	r31, 0x97	; 151
    111c:	50 f0       	brcs	.+20     	; 0x1132 <__stack+0x33>
    111e:	19 f0       	breq	.+6      	; 0x1126 <__stack+0x27>
    1120:	ff 3a       	cpi	r31, 0xAF	; 175
    1122:	38 f4       	brcc	.+14     	; 0x1132 <__stack+0x33>
    1124:	9f 77       	andi	r25, 0x7F	; 127
    1126:	9f 93       	push	r25
    1128:	0c d0       	rcall	.+24     	; 0x1142 <__stack+0x43>
    112a:	0f 90       	pop	r0
    112c:	07 fc       	sbrc	r0, 7
    112e:	90 58       	subi	r25, 0x80	; 128
    1130:	08 95       	ret
    1132:	3e f0       	brts	.+14     	; 0x1142 <__stack+0x43>
    1134:	df ce       	rjmp	.-578    	; 0xef4 <__fp_nan>
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	80 e8       	ldi	r24, 0x80	; 128
    113c:	9f e3       	ldi	r25, 0x3F	; 63
    113e:	08 95       	ret
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	9f 77       	andi	r25, 0x7F	; 127
    1144:	5f 93       	push	r21
    1146:	4f 93       	push	r20
    1148:	3f 93       	push	r19
    114a:	2f 93       	push	r18
    114c:	06 d1       	rcall	.+524    	; 0x135a <log>
    114e:	2f 91       	pop	r18
    1150:	3f 91       	pop	r19
    1152:	4f 91       	pop	r20
    1154:	5f 91       	pop	r21
    1156:	52 df       	rcall	.-348    	; 0xffc <__mulsf3>
    1158:	47 c0       	rjmp	.+142    	; 0x11e8 <exp>
    115a:	11 f4       	brne	.+4      	; 0x1160 <__stack+0x61>
    115c:	0e f4       	brtc	.+2      	; 0x1160 <__stack+0x61>
    115e:	ca ce       	rjmp	.-620    	; 0xef4 <__fp_nan>
    1160:	6f c0       	rjmp	.+222    	; 0x1240 <__fp_mpack>

00001162 <sqrt>:
    1162:	2b df       	rcall	.-426    	; 0xfba <__fp_splitA>
    1164:	d0 f3       	brcs	.-12     	; 0x115a <__stack+0x5b>
    1166:	99 23       	and	r25, r25
    1168:	d9 f3       	breq	.-10     	; 0x1160 <__stack+0x61>
    116a:	ce f3       	brts	.-14     	; 0x115e <__stack+0x5f>
    116c:	9f 57       	subi	r25, 0x7F	; 127
    116e:	55 0b       	sbc	r21, r21
    1170:	87 ff       	sbrs	r24, 7
    1172:	74 d0       	rcall	.+232    	; 0x125c <__fp_norm2>
    1174:	00 24       	eor	r0, r0
    1176:	a0 e6       	ldi	r26, 0x60	; 96
    1178:	40 ea       	ldi	r20, 0xA0	; 160
    117a:	90 01       	movw	r18, r0
    117c:	80 58       	subi	r24, 0x80	; 128
    117e:	56 95       	lsr	r21
    1180:	97 95       	ror	r25
    1182:	28 f4       	brcc	.+10     	; 0x118e <sqrt+0x2c>
    1184:	80 5c       	subi	r24, 0xC0	; 192
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	20 f0       	brcs	.+8      	; 0x1196 <sqrt+0x34>
    118e:	26 17       	cp	r18, r22
    1190:	37 07       	cpc	r19, r23
    1192:	48 07       	cpc	r20, r24
    1194:	30 f4       	brcc	.+12     	; 0x11a2 <sqrt+0x40>
    1196:	62 1b       	sub	r22, r18
    1198:	73 0b       	sbc	r23, r19
    119a:	84 0b       	sbc	r24, r20
    119c:	20 29       	or	r18, r0
    119e:	31 29       	or	r19, r1
    11a0:	4a 2b       	or	r20, r26
    11a2:	a6 95       	lsr	r26
    11a4:	17 94       	ror	r1
    11a6:	07 94       	ror	r0
    11a8:	20 25       	eor	r18, r0
    11aa:	31 25       	eor	r19, r1
    11ac:	4a 27       	eor	r20, r26
    11ae:	58 f7       	brcc	.-42     	; 0x1186 <sqrt+0x24>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <sqrt+0x5e>
    11b8:	26 17       	cp	r18, r22
    11ba:	37 07       	cpc	r19, r23
    11bc:	48 07       	cpc	r20, r24
    11be:	30 f4       	brcc	.+12     	; 0x11cc <sqrt+0x6a>
    11c0:	62 0b       	sbc	r22, r18
    11c2:	73 0b       	sbc	r23, r19
    11c4:	84 0b       	sbc	r24, r20
    11c6:	20 0d       	add	r18, r0
    11c8:	31 1d       	adc	r19, r1
    11ca:	41 1d       	adc	r20, r1
    11cc:	a0 95       	com	r26
    11ce:	81 f7       	brne	.-32     	; 0x11b0 <sqrt+0x4e>
    11d0:	b9 01       	movw	r22, r18
    11d2:	84 2f       	mov	r24, r20
    11d4:	91 58       	subi	r25, 0x81	; 129
    11d6:	88 0f       	add	r24, r24
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	08 95       	ret
    11de:	19 f4       	brne	.+6      	; 0x11e6 <sqrt+0x84>
    11e0:	0e f0       	brts	.+2      	; 0x11e4 <sqrt+0x82>
    11e2:	82 ce       	rjmp	.-764    	; 0xee8 <__fp_inf>
    11e4:	04 cf       	rjmp	.-504    	; 0xfee <__fp_zero>
    11e6:	86 ce       	rjmp	.-756    	; 0xef4 <__fp_nan>

000011e8 <exp>:
    11e8:	e8 de       	rcall	.-560    	; 0xfba <__fp_splitA>
    11ea:	c8 f3       	brcs	.-14     	; 0x11de <sqrt+0x7c>
    11ec:	96 38       	cpi	r25, 0x86	; 134
    11ee:	c0 f7       	brcc	.-16     	; 0x11e0 <sqrt+0x7e>
    11f0:	07 f8       	bld	r0, 7
    11f2:	0f 92       	push	r0
    11f4:	e8 94       	clt
    11f6:	2b e3       	ldi	r18, 0x3B	; 59
    11f8:	3a ea       	ldi	r19, 0xAA	; 170
    11fa:	48 eb       	ldi	r20, 0xB8	; 184
    11fc:	5f e7       	ldi	r21, 0x7F	; 127
    11fe:	0c df       	rcall	.-488    	; 0x1018 <__mulsf3_pse>
    1200:	0f 92       	push	r0
    1202:	0f 92       	push	r0
    1204:	0f 92       	push	r0
    1206:	4d b7       	in	r20, 0x3d	; 61
    1208:	5e b7       	in	r21, 0x3e	; 62
    120a:	0f 92       	push	r0
    120c:	e6 d0       	rcall	.+460    	; 0x13da <modf>
    120e:	ea ea       	ldi	r30, 0xAA	; 170
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	2b d0       	rcall	.+86     	; 0x126a <__fp_powser>
    1214:	4f 91       	pop	r20
    1216:	5f 91       	pop	r21
    1218:	ef 91       	pop	r30
    121a:	ff 91       	pop	r31
    121c:	e5 95       	asr	r30
    121e:	ee 1f       	adc	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	49 f0       	breq	.+18     	; 0x1236 <exp+0x4e>
    1224:	fe 57       	subi	r31, 0x7E	; 126
    1226:	e0 68       	ori	r30, 0x80	; 128
    1228:	44 27       	eor	r20, r20
    122a:	ee 0f       	add	r30, r30
    122c:	44 1f       	adc	r20, r20
    122e:	fa 95       	dec	r31
    1230:	e1 f7       	brne	.-8      	; 0x122a <exp+0x42>
    1232:	41 95       	neg	r20
    1234:	55 0b       	sbc	r21, r21
    1236:	58 d0       	rcall	.+176    	; 0x12e8 <ldexp>
    1238:	0f 90       	pop	r0
    123a:	07 fe       	sbrs	r0, 7
    123c:	4c c0       	rjmp	.+152    	; 0x12d6 <inverse>
    123e:	08 95       	ret

00001240 <__fp_mpack>:
    1240:	9f 3f       	cpi	r25, 0xFF	; 255
    1242:	31 f0       	breq	.+12     	; 0x1250 <__fp_mpack_finite+0xc>

00001244 <__fp_mpack_finite>:
    1244:	91 50       	subi	r25, 0x01	; 1
    1246:	20 f4       	brcc	.+8      	; 0x1250 <__fp_mpack_finite+0xc>
    1248:	87 95       	ror	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b7 95       	ror	r27
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <__fp_norm2>:
    125c:	91 50       	subi	r25, 0x01	; 1
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	66 0f       	add	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	d2 f7       	brpl	.-12     	; 0x125c <__fp_norm2>
    1268:	08 95       	ret

0000126a <__fp_powser>:
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	1f 93       	push	r17
    1270:	0f 93       	push	r16
    1272:	ff 92       	push	r15
    1274:	ef 92       	push	r14
    1276:	df 92       	push	r13
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
    127c:	68 94       	set
    127e:	05 c0       	rjmp	.+10     	; 0x128a <__fp_powser+0x20>
    1280:	da 2e       	mov	r13, r26
    1282:	ef 01       	movw	r28, r30
    1284:	c7 de       	rcall	.-626    	; 0x1014 <__mulsf3x>
    1286:	fe 01       	movw	r30, r28
    1288:	e8 94       	clt
    128a:	a5 91       	lpm	r26, Z+
    128c:	25 91       	lpm	r18, Z+
    128e:	35 91       	lpm	r19, Z+
    1290:	45 91       	lpm	r20, Z+
    1292:	55 91       	lpm	r21, Z+
    1294:	ae f3       	brts	.-22     	; 0x1280 <__fp_powser+0x16>
    1296:	ef 01       	movw	r28, r30
    1298:	fb dc       	rcall	.-1546   	; 0xc90 <__addsf3x>
    129a:	fe 01       	movw	r30, r28
    129c:	97 01       	movw	r18, r14
    129e:	a8 01       	movw	r20, r16
    12a0:	da 94       	dec	r13
    12a2:	79 f7       	brne	.-34     	; 0x1282 <__fp_powser+0x18>
    12a4:	df 90       	pop	r13
    12a6:	ef 90       	pop	r14
    12a8:	ff 90       	pop	r15
    12aa:	0f 91       	pop	r16
    12ac:	1f 91       	pop	r17
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <__fp_powsodd>:
    12b4:	9f 93       	push	r25
    12b6:	8f 93       	push	r24
    12b8:	7f 93       	push	r23
    12ba:	6f 93       	push	r22
    12bc:	ff 93       	push	r31
    12be:	ef 93       	push	r30
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	9b de       	rcall	.-714    	; 0xffc <__mulsf3>
    12c6:	ef 91       	pop	r30
    12c8:	ff 91       	pop	r31
    12ca:	cf df       	rcall	.-98     	; 0x126a <__fp_powser>
    12cc:	2f 91       	pop	r18
    12ce:	3f 91       	pop	r19
    12d0:	4f 91       	pop	r20
    12d2:	5f 91       	pop	r21
    12d4:	93 ce       	rjmp	.-730    	; 0xffc <__mulsf3>

000012d6 <inverse>:
    12d6:	9b 01       	movw	r18, r22
    12d8:	ac 01       	movw	r20, r24
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e8       	ldi	r24, 0x80	; 128
    12e0:	9f e3       	ldi	r25, 0x3F	; 63
    12e2:	2c cd       	rjmp	.-1448   	; 0xd3c <__divsf3>
    12e4:	01 ce       	rjmp	.-1022   	; 0xee8 <__fp_inf>
    12e6:	ac cf       	rjmp	.-168    	; 0x1240 <__fp_mpack>

000012e8 <ldexp>:
    12e8:	68 de       	rcall	.-816    	; 0xfba <__fp_splitA>
    12ea:	e8 f3       	brcs	.-6      	; 0x12e6 <inverse+0x10>
    12ec:	99 23       	and	r25, r25
    12ee:	d9 f3       	breq	.-10     	; 0x12e6 <inverse+0x10>
    12f0:	94 0f       	add	r25, r20
    12f2:	51 1d       	adc	r21, r1
    12f4:	bb f3       	brvs	.-18     	; 0x12e4 <inverse+0xe>
    12f6:	91 50       	subi	r25, 0x01	; 1
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	94 f0       	brlt	.+36     	; 0x1320 <ldexp+0x38>
    12fc:	59 f0       	breq	.+22     	; 0x1314 <ldexp+0x2c>
    12fe:	88 23       	and	r24, r24
    1300:	32 f0       	brmi	.+12     	; 0x130e <ldexp+0x26>
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	c1 f7       	brne	.-16     	; 0x12fe <ldexp+0x16>
    130e:	9e 3f       	cpi	r25, 0xFE	; 254
    1310:	51 05       	cpc	r21, r1
    1312:	44 f7       	brge	.-48     	; 0x12e4 <inverse+0xe>
    1314:	88 0f       	add	r24, r24
    1316:	91 1d       	adc	r25, r1
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	97 f9       	bld	r25, 7
    131e:	08 95       	ret
    1320:	5f 3f       	cpi	r21, 0xFF	; 255
    1322:	ac f0       	brlt	.+42     	; 0x134e <ldexp+0x66>
    1324:	98 3e       	cpi	r25, 0xE8	; 232
    1326:	9c f0       	brlt	.+38     	; 0x134e <ldexp+0x66>
    1328:	bb 27       	eor	r27, r27
    132a:	86 95       	lsr	r24
    132c:	77 95       	ror	r23
    132e:	67 95       	ror	r22
    1330:	b7 95       	ror	r27
    1332:	08 f4       	brcc	.+2      	; 0x1336 <ldexp+0x4e>
    1334:	b1 60       	ori	r27, 0x01	; 1
    1336:	93 95       	inc	r25
    1338:	c1 f7       	brne	.-16     	; 0x132a <ldexp+0x42>
    133a:	bb 0f       	add	r27, r27
    133c:	58 f7       	brcc	.-42     	; 0x1314 <ldexp+0x2c>
    133e:	11 f4       	brne	.+4      	; 0x1344 <ldexp+0x5c>
    1340:	60 ff       	sbrs	r22, 0
    1342:	e8 cf       	rjmp	.-48     	; 0x1314 <ldexp+0x2c>
    1344:	6f 5f       	subi	r22, 0xFF	; 255
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	e3 cf       	rjmp	.-58     	; 0x1314 <ldexp+0x2c>
    134e:	50 ce       	rjmp	.-864    	; 0xff0 <__fp_szero>
    1350:	0e f0       	brts	.+2      	; 0x1354 <ldexp+0x6c>
    1352:	76 cf       	rjmp	.-276    	; 0x1240 <__fp_mpack>
    1354:	cf cd       	rjmp	.-1122   	; 0xef4 <__fp_nan>
    1356:	68 94       	set
    1358:	c7 cd       	rjmp	.-1138   	; 0xee8 <__fp_inf>

0000135a <log>:
    135a:	2f de       	rcall	.-930    	; 0xfba <__fp_splitA>
    135c:	c8 f3       	brcs	.-14     	; 0x1350 <ldexp+0x68>
    135e:	99 23       	and	r25, r25
    1360:	d1 f3       	breq	.-12     	; 0x1356 <ldexp+0x6e>
    1362:	c6 f3       	brts	.-16     	; 0x1354 <ldexp+0x6c>
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	1f 93       	push	r17
    136a:	0f 93       	push	r16
    136c:	ff 92       	push	r15
    136e:	c9 2f       	mov	r28, r25
    1370:	dd 27       	eor	r29, r29
    1372:	88 23       	and	r24, r24
    1374:	2a f0       	brmi	.+10     	; 0x1380 <log+0x26>
    1376:	21 97       	sbiw	r28, 0x01	; 1
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	da f7       	brpl	.-10     	; 0x1376 <log+0x1c>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f eb       	ldi	r21, 0xBF	; 191
    1388:	9f e3       	ldi	r25, 0x3F	; 63
    138a:	88 39       	cpi	r24, 0x98	; 152
    138c:	20 f0       	brcs	.+8      	; 0x1396 <log+0x3c>
    138e:	80 3e       	cpi	r24, 0xE0	; 224
    1390:	30 f0       	brcs	.+12     	; 0x139e <log+0x44>
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	8f 77       	andi	r24, 0x7F	; 127
    1396:	6b dc       	rcall	.-1834   	; 0xc6e <__addsf3>
    1398:	e2 ed       	ldi	r30, 0xD2	; 210
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <log+0x4a>
    139e:	67 dc       	rcall	.-1842   	; 0xc6e <__addsf3>
    13a0:	ef ef       	ldi	r30, 0xFF	; 255
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	62 df       	rcall	.-316    	; 0x126a <__fp_powser>
    13a6:	8b 01       	movw	r16, r22
    13a8:	be 01       	movw	r22, r28
    13aa:	ec 01       	movw	r28, r24
    13ac:	fb 2e       	mov	r15, r27
    13ae:	6f 57       	subi	r22, 0x7F	; 127
    13b0:	71 09       	sbc	r23, r1
    13b2:	75 95       	asr	r23
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 0b       	sbc	r24, r24
    13b8:	99 0b       	sbc	r25, r25
    13ba:	5b dd       	rcall	.-1354   	; 0xe72 <__floatsisf>
    13bc:	28 e1       	ldi	r18, 0x18	; 24
    13be:	32 e7       	ldi	r19, 0x72	; 114
    13c0:	41 e3       	ldi	r20, 0x31	; 49
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	27 de       	rcall	.-946    	; 0x1014 <__mulsf3x>
    13c6:	af 2d       	mov	r26, r15
    13c8:	98 01       	movw	r18, r16
    13ca:	ae 01       	movw	r20, r28
    13cc:	ff 90       	pop	r15
    13ce:	0f 91       	pop	r16
    13d0:	1f 91       	pop	r17
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	5c dc       	rcall	.-1864   	; 0xc90 <__addsf3x>
    13d8:	c6 cd       	rjmp	.-1140   	; 0xf66 <__fp_round>

000013da <modf>:
    13da:	fa 01       	movw	r30, r20
    13dc:	dc 01       	movw	r26, r24
    13de:	aa 0f       	add	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	bf 57       	subi	r27, 0x7F	; 127
    13e8:	28 f4       	brcc	.+10     	; 0x13f4 <modf+0x1a>
    13ea:	22 27       	eor	r18, r18
    13ec:	33 27       	eor	r19, r19
    13ee:	44 27       	eor	r20, r20
    13f0:	50 78       	andi	r21, 0x80	; 128
    13f2:	1f c0       	rjmp	.+62     	; 0x1432 <modf+0x58>
    13f4:	b7 51       	subi	r27, 0x17	; 23
    13f6:	88 f4       	brcc	.+34     	; 0x141a <modf+0x40>
    13f8:	ab 2f       	mov	r26, r27
    13fa:	00 24       	eor	r0, r0
    13fc:	46 95       	lsr	r20
    13fe:	37 95       	ror	r19
    1400:	27 95       	ror	r18
    1402:	01 1c       	adc	r0, r1
    1404:	a3 95       	inc	r26
    1406:	d2 f3       	brmi	.-12     	; 0x13fc <modf+0x22>
    1408:	00 20       	and	r0, r0
    140a:	69 f0       	breq	.+26     	; 0x1426 <modf+0x4c>
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	44 1f       	adc	r20, r20
    1412:	b3 95       	inc	r27
    1414:	da f3       	brmi	.-10     	; 0x140c <modf+0x32>
    1416:	0d d0       	rcall	.+26     	; 0x1432 <modf+0x58>
    1418:	29 cc       	rjmp	.-1966   	; 0xc6c <__subsf3>
    141a:	61 30       	cpi	r22, 0x01	; 1
    141c:	71 05       	cpc	r23, r1
    141e:	a0 e8       	ldi	r26, 0x80	; 128
    1420:	8a 07       	cpc	r24, r26
    1422:	b9 46       	sbci	r27, 0x69	; 105
    1424:	30 f4       	brcc	.+12     	; 0x1432 <modf+0x58>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	66 27       	eor	r22, r22
    142c:	77 27       	eor	r23, r23
    142e:	88 27       	eor	r24, r24
    1430:	90 78       	andi	r25, 0x80	; 128
    1432:	30 96       	adiw	r30, 0x00	; 0
    1434:	21 f0       	breq	.+8      	; 0x143e <modf+0x64>
    1436:	20 83       	st	Z, r18
    1438:	31 83       	std	Z+1, r19	; 0x01
    143a:	42 83       	std	Z+2, r20	; 0x02
    143c:	53 83       	std	Z+3, r21	; 0x03
    143e:	08 95       	ret

00001440 <__divmodhi4>:
    1440:	97 fb       	bst	r25, 7
    1442:	07 2e       	mov	r0, r23
    1444:	16 f4       	brtc	.+4      	; 0x144a <__divmodhi4+0xa>
    1446:	00 94       	com	r0
    1448:	06 d0       	rcall	.+12     	; 0x1456 <__divmodhi4_neg1>
    144a:	77 fd       	sbrc	r23, 7
    144c:	08 d0       	rcall	.+16     	; 0x145e <__divmodhi4_neg2>
    144e:	0b d0       	rcall	.+22     	; 0x1466 <__udivmodhi4>
    1450:	07 fc       	sbrc	r0, 7
    1452:	05 d0       	rcall	.+10     	; 0x145e <__divmodhi4_neg2>
    1454:	3e f4       	brtc	.+14     	; 0x1464 <__divmodhi4_exit>

00001456 <__divmodhi4_neg1>:
    1456:	90 95       	com	r25
    1458:	81 95       	neg	r24
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	08 95       	ret

0000145e <__divmodhi4_neg2>:
    145e:	70 95       	com	r23
    1460:	61 95       	neg	r22
    1462:	7f 4f       	sbci	r23, 0xFF	; 255

00001464 <__divmodhi4_exit>:
    1464:	08 95       	ret

00001466 <__udivmodhi4>:
    1466:	aa 1b       	sub	r26, r26
    1468:	bb 1b       	sub	r27, r27
    146a:	51 e1       	ldi	r21, 0x11	; 17
    146c:	07 c0       	rjmp	.+14     	; 0x147c <__udivmodhi4_ep>

0000146e <__udivmodhi4_loop>:
    146e:	aa 1f       	adc	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	a6 17       	cp	r26, r22
    1474:	b7 07       	cpc	r27, r23
    1476:	10 f0       	brcs	.+4      	; 0x147c <__udivmodhi4_ep>
    1478:	a6 1b       	sub	r26, r22
    147a:	b7 0b       	sbc	r27, r23

0000147c <__udivmodhi4_ep>:
    147c:	88 1f       	adc	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	5a 95       	dec	r21
    1482:	a9 f7       	brne	.-22     	; 0x146e <__udivmodhi4_loop>
    1484:	80 95       	com	r24
    1486:	90 95       	com	r25
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	08 95       	ret

0000148e <calloc>:
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	86 9f       	mul	r24, r22
    1498:	80 01       	movw	r16, r0
    149a:	87 9f       	mul	r24, r23
    149c:	10 0d       	add	r17, r0
    149e:	96 9f       	mul	r25, r22
    14a0:	10 0d       	add	r17, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	c8 01       	movw	r24, r16
    14a6:	0d d0       	rcall	.+26     	; 0x14c2 <malloc>
    14a8:	ec 01       	movw	r28, r24
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	21 f0       	breq	.+8      	; 0x14b6 <calloc+0x28>
    14ae:	a8 01       	movw	r20, r16
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	4a d1       	rcall	.+660    	; 0x174a <memset>
    14b6:	ce 01       	movw	r24, r28
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <malloc>:
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	10 f4       	brcc	.+4      	; 0x14d0 <malloc+0xe>
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	e0 91 1a 02 	lds	r30, 0x021A
    14d4:	f0 91 1b 02 	lds	r31, 0x021B
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	a0 e0       	ldi	r26, 0x00	; 0
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	39 f1       	breq	.+78     	; 0x1532 <malloc+0x70>
    14e4:	40 81       	ld	r20, Z
    14e6:	51 81       	ldd	r21, Z+1	; 0x01
    14e8:	48 17       	cp	r20, r24
    14ea:	59 07       	cpc	r21, r25
    14ec:	b8 f0       	brcs	.+46     	; 0x151c <malloc+0x5a>
    14ee:	48 17       	cp	r20, r24
    14f0:	59 07       	cpc	r21, r25
    14f2:	71 f4       	brne	.+28     	; 0x1510 <malloc+0x4e>
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	10 97       	sbiw	r26, 0x00	; 0
    14fa:	29 f0       	breq	.+10     	; 0x1506 <malloc+0x44>
    14fc:	13 96       	adiw	r26, 0x03	; 3
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
    1502:	12 97       	sbiw	r26, 0x02	; 2
    1504:	2c c0       	rjmp	.+88     	; 0x155e <malloc+0x9c>
    1506:	90 93 1b 02 	sts	0x021B, r25
    150a:	80 93 1a 02 	sts	0x021A, r24
    150e:	27 c0       	rjmp	.+78     	; 0x155e <malloc+0x9c>
    1510:	21 15       	cp	r18, r1
    1512:	31 05       	cpc	r19, r1
    1514:	31 f0       	breq	.+12     	; 0x1522 <malloc+0x60>
    1516:	42 17       	cp	r20, r18
    1518:	53 07       	cpc	r21, r19
    151a:	18 f0       	brcs	.+6      	; 0x1522 <malloc+0x60>
    151c:	a9 01       	movw	r20, r18
    151e:	db 01       	movw	r26, r22
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <malloc+0x62>
    1522:	ef 01       	movw	r28, r30
    1524:	9a 01       	movw	r18, r20
    1526:	bd 01       	movw	r22, r26
    1528:	df 01       	movw	r26, r30
    152a:	02 80       	ldd	r0, Z+2	; 0x02
    152c:	f3 81       	ldd	r31, Z+3	; 0x03
    152e:	e0 2d       	mov	r30, r0
    1530:	d7 cf       	rjmp	.-82     	; 0x14e0 <malloc+0x1e>
    1532:	21 15       	cp	r18, r1
    1534:	31 05       	cpc	r19, r1
    1536:	f9 f0       	breq	.+62     	; 0x1576 <malloc+0xb4>
    1538:	28 1b       	sub	r18, r24
    153a:	39 0b       	sbc	r19, r25
    153c:	24 30       	cpi	r18, 0x04	; 4
    153e:	31 05       	cpc	r19, r1
    1540:	80 f4       	brcc	.+32     	; 0x1562 <malloc+0xa0>
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	61 15       	cp	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	21 f0       	breq	.+8      	; 0x1554 <malloc+0x92>
    154c:	fb 01       	movw	r30, r22
    154e:	93 83       	std	Z+3, r25	; 0x03
    1550:	82 83       	std	Z+2, r24	; 0x02
    1552:	04 c0       	rjmp	.+8      	; 0x155c <malloc+0x9a>
    1554:	90 93 1b 02 	sts	0x021B, r25
    1558:	80 93 1a 02 	sts	0x021A, r24
    155c:	fe 01       	movw	r30, r28
    155e:	32 96       	adiw	r30, 0x02	; 2
    1560:	44 c0       	rjmp	.+136    	; 0x15ea <malloc+0x128>
    1562:	fe 01       	movw	r30, r28
    1564:	e2 0f       	add	r30, r18
    1566:	f3 1f       	adc	r31, r19
    1568:	81 93       	st	Z+, r24
    156a:	91 93       	st	Z+, r25
    156c:	22 50       	subi	r18, 0x02	; 2
    156e:	31 09       	sbc	r19, r1
    1570:	39 83       	std	Y+1, r19	; 0x01
    1572:	28 83       	st	Y, r18
    1574:	3a c0       	rjmp	.+116    	; 0x15ea <malloc+0x128>
    1576:	20 91 18 02 	lds	r18, 0x0218
    157a:	30 91 19 02 	lds	r19, 0x0219
    157e:	23 2b       	or	r18, r19
    1580:	41 f4       	brne	.+16     	; 0x1592 <malloc+0xd0>
    1582:	20 91 02 01 	lds	r18, 0x0102
    1586:	30 91 03 01 	lds	r19, 0x0103
    158a:	30 93 19 02 	sts	0x0219, r19
    158e:	20 93 18 02 	sts	0x0218, r18
    1592:	20 91 00 01 	lds	r18, 0x0100
    1596:	30 91 01 01 	lds	r19, 0x0101
    159a:	21 15       	cp	r18, r1
    159c:	31 05       	cpc	r19, r1
    159e:	41 f4       	brne	.+16     	; 0x15b0 <malloc+0xee>
    15a0:	2d b7       	in	r18, 0x3d	; 61
    15a2:	3e b7       	in	r19, 0x3e	; 62
    15a4:	40 91 04 01 	lds	r20, 0x0104
    15a8:	50 91 05 01 	lds	r21, 0x0105
    15ac:	24 1b       	sub	r18, r20
    15ae:	35 0b       	sbc	r19, r21
    15b0:	e0 91 18 02 	lds	r30, 0x0218
    15b4:	f0 91 19 02 	lds	r31, 0x0219
    15b8:	e2 17       	cp	r30, r18
    15ba:	f3 07       	cpc	r31, r19
    15bc:	a0 f4       	brcc	.+40     	; 0x15e6 <malloc+0x124>
    15be:	2e 1b       	sub	r18, r30
    15c0:	3f 0b       	sbc	r19, r31
    15c2:	28 17       	cp	r18, r24
    15c4:	39 07       	cpc	r19, r25
    15c6:	78 f0       	brcs	.+30     	; 0x15e6 <malloc+0x124>
    15c8:	ac 01       	movw	r20, r24
    15ca:	4e 5f       	subi	r20, 0xFE	; 254
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	24 17       	cp	r18, r20
    15d0:	35 07       	cpc	r19, r21
    15d2:	48 f0       	brcs	.+18     	; 0x15e6 <malloc+0x124>
    15d4:	4e 0f       	add	r20, r30
    15d6:	5f 1f       	adc	r21, r31
    15d8:	50 93 19 02 	sts	0x0219, r21
    15dc:	40 93 18 02 	sts	0x0218, r20
    15e0:	81 93       	st	Z+, r24
    15e2:	91 93       	st	Z+, r25
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <malloc+0x128>
    15e6:	e0 e0       	ldi	r30, 0x00	; 0
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	cf 01       	movw	r24, r30
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <free>:
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	09 f4       	brne	.+2      	; 0x15fc <free+0xa>
    15fa:	87 c0       	rjmp	.+270    	; 0x170a <free+0x118>
    15fc:	fc 01       	movw	r30, r24
    15fe:	32 97       	sbiw	r30, 0x02	; 2
    1600:	13 82       	std	Z+3, r1	; 0x03
    1602:	12 82       	std	Z+2, r1	; 0x02
    1604:	c0 91 1a 02 	lds	r28, 0x021A
    1608:	d0 91 1b 02 	lds	r29, 0x021B
    160c:	20 97       	sbiw	r28, 0x00	; 0
    160e:	81 f4       	brne	.+32     	; 0x1630 <free+0x3e>
    1610:	20 81       	ld	r18, Z
    1612:	31 81       	ldd	r19, Z+1	; 0x01
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	80 91 18 02 	lds	r24, 0x0218
    161c:	90 91 19 02 	lds	r25, 0x0219
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	79 f5       	brne	.+94     	; 0x1684 <free+0x92>
    1626:	f0 93 19 02 	sts	0x0219, r31
    162a:	e0 93 18 02 	sts	0x0218, r30
    162e:	6d c0       	rjmp	.+218    	; 0x170a <free+0x118>
    1630:	de 01       	movw	r26, r28
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	ae 17       	cp	r26, r30
    1638:	bf 07       	cpc	r27, r31
    163a:	50 f4       	brcc	.+20     	; 0x1650 <free+0x5e>
    163c:	12 96       	adiw	r26, 0x02	; 2
    163e:	4d 91       	ld	r20, X+
    1640:	5c 91       	ld	r21, X
    1642:	13 97       	sbiw	r26, 0x03	; 3
    1644:	9d 01       	movw	r18, r26
    1646:	41 15       	cp	r20, r1
    1648:	51 05       	cpc	r21, r1
    164a:	09 f1       	breq	.+66     	; 0x168e <free+0x9c>
    164c:	da 01       	movw	r26, r20
    164e:	f3 cf       	rjmp	.-26     	; 0x1636 <free+0x44>
    1650:	b3 83       	std	Z+3, r27	; 0x03
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	40 81       	ld	r20, Z
    1656:	51 81       	ldd	r21, Z+1	; 0x01
    1658:	84 0f       	add	r24, r20
    165a:	95 1f       	adc	r25, r21
    165c:	8a 17       	cp	r24, r26
    165e:	9b 07       	cpc	r25, r27
    1660:	71 f4       	brne	.+28     	; 0x167e <free+0x8c>
    1662:	8d 91       	ld	r24, X+
    1664:	9c 91       	ld	r25, X
    1666:	11 97       	sbiw	r26, 0x01	; 1
    1668:	84 0f       	add	r24, r20
    166a:	95 1f       	adc	r25, r21
    166c:	02 96       	adiw	r24, 0x02	; 2
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	12 96       	adiw	r26, 0x02	; 2
    1674:	8d 91       	ld	r24, X+
    1676:	9c 91       	ld	r25, X
    1678:	13 97       	sbiw	r26, 0x03	; 3
    167a:	93 83       	std	Z+3, r25	; 0x03
    167c:	82 83       	std	Z+2, r24	; 0x02
    167e:	21 15       	cp	r18, r1
    1680:	31 05       	cpc	r19, r1
    1682:	29 f4       	brne	.+10     	; 0x168e <free+0x9c>
    1684:	f0 93 1b 02 	sts	0x021B, r31
    1688:	e0 93 1a 02 	sts	0x021A, r30
    168c:	3e c0       	rjmp	.+124    	; 0x170a <free+0x118>
    168e:	d9 01       	movw	r26, r18
    1690:	13 96       	adiw	r26, 0x03	; 3
    1692:	fc 93       	st	X, r31
    1694:	ee 93       	st	-X, r30
    1696:	12 97       	sbiw	r26, 0x02	; 2
    1698:	4d 91       	ld	r20, X+
    169a:	5d 91       	ld	r21, X+
    169c:	a4 0f       	add	r26, r20
    169e:	b5 1f       	adc	r27, r21
    16a0:	ea 17       	cp	r30, r26
    16a2:	fb 07       	cpc	r31, r27
    16a4:	79 f4       	brne	.+30     	; 0x16c4 <free+0xd2>
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	84 0f       	add	r24, r20
    16ac:	95 1f       	adc	r25, r21
    16ae:	02 96       	adiw	r24, 0x02	; 2
    16b0:	d9 01       	movw	r26, r18
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	9c 93       	st	X, r25
    16b6:	8e 93       	st	-X, r24
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	13 96       	adiw	r26, 0x03	; 3
    16be:	9c 93       	st	X, r25
    16c0:	8e 93       	st	-X, r24
    16c2:	12 97       	sbiw	r26, 0x02	; 2
    16c4:	e0 e0       	ldi	r30, 0x00	; 0
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <free+0xe4>
    16d0:	fe 01       	movw	r30, r28
    16d2:	ec 01       	movw	r28, r24
    16d4:	f9 cf       	rjmp	.-14     	; 0x16c8 <free+0xd6>
    16d6:	ce 01       	movw	r24, r28
    16d8:	02 96       	adiw	r24, 0x02	; 2
    16da:	28 81       	ld	r18, Y
    16dc:	39 81       	ldd	r19, Y+1	; 0x01
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	20 91 18 02 	lds	r18, 0x0218
    16e6:	30 91 19 02 	lds	r19, 0x0219
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	69 f4       	brne	.+26     	; 0x170a <free+0x118>
    16f0:	30 97       	sbiw	r30, 0x00	; 0
    16f2:	29 f4       	brne	.+10     	; 0x16fe <free+0x10c>
    16f4:	10 92 1b 02 	sts	0x021B, r1
    16f8:	10 92 1a 02 	sts	0x021A, r1
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <free+0x110>
    16fe:	13 82       	std	Z+3, r1	; 0x03
    1700:	12 82       	std	Z+2, r1	; 0x02
    1702:	d0 93 19 02 	sts	0x0219, r29
    1706:	c0 93 18 02 	sts	0x0218, r28
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <atoi>:
    1710:	fc 01       	movw	r30, r24
    1712:	88 27       	eor	r24, r24
    1714:	99 27       	eor	r25, r25
    1716:	e8 94       	clt
    1718:	21 91       	ld	r18, Z+
    171a:	20 32       	cpi	r18, 0x20	; 32
    171c:	e9 f3       	breq	.-6      	; 0x1718 <atoi+0x8>
    171e:	29 30       	cpi	r18, 0x09	; 9
    1720:	10 f0       	brcs	.+4      	; 0x1726 <atoi+0x16>
    1722:	2e 30       	cpi	r18, 0x0E	; 14
    1724:	c8 f3       	brcs	.-14     	; 0x1718 <atoi+0x8>
    1726:	2b 32       	cpi	r18, 0x2B	; 43
    1728:	39 f0       	breq	.+14     	; 0x1738 <atoi+0x28>
    172a:	2d 32       	cpi	r18, 0x2D	; 45
    172c:	31 f4       	brne	.+12     	; 0x173a <atoi+0x2a>
    172e:	68 94       	set
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <atoi+0x28>
    1732:	22 d0       	rcall	.+68     	; 0x1778 <__mulhi_const_10>
    1734:	82 0f       	add	r24, r18
    1736:	91 1d       	adc	r25, r1
    1738:	21 91       	ld	r18, Z+
    173a:	20 53       	subi	r18, 0x30	; 48
    173c:	2a 30       	cpi	r18, 0x0A	; 10
    173e:	c8 f3       	brcs	.-14     	; 0x1732 <atoi+0x22>
    1740:	1e f4       	brtc	.+6      	; 0x1748 <atoi+0x38>
    1742:	90 95       	com	r25
    1744:	81 95       	neg	r24
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	08 95       	ret

0000174a <memset>:
    174a:	dc 01       	movw	r26, r24
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <memset+0x6>
    174e:	6d 93       	st	X+, r22
    1750:	41 50       	subi	r20, 0x01	; 1
    1752:	50 40       	sbci	r21, 0x00	; 0
    1754:	e0 f7       	brcc	.-8      	; 0x174e <memset+0x4>
    1756:	08 95       	ret

00001758 <strcmp>:
    1758:	fb 01       	movw	r30, r22
    175a:	dc 01       	movw	r26, r24
    175c:	8d 91       	ld	r24, X+
    175e:	01 90       	ld	r0, Z+
    1760:	80 19       	sub	r24, r0
    1762:	01 10       	cpse	r0, r1
    1764:	d9 f3       	breq	.-10     	; 0x175c <strcmp+0x4>
    1766:	99 0b       	sbc	r25, r25
    1768:	08 95       	ret

0000176a <strcpy>:
    176a:	fb 01       	movw	r30, r22
    176c:	dc 01       	movw	r26, r24
    176e:	01 90       	ld	r0, Z+
    1770:	0d 92       	st	X+, r0
    1772:	00 20       	and	r0, r0
    1774:	e1 f7       	brne	.-8      	; 0x176e <strcpy+0x4>
    1776:	08 95       	ret

00001778 <__mulhi_const_10>:
    1778:	7a e0       	ldi	r23, 0x0A	; 10
    177a:	97 9f       	mul	r25, r23
    177c:	90 2d       	mov	r25, r0
    177e:	87 9f       	mul	r24, r23
    1780:	80 2d       	mov	r24, r0
    1782:	91 0d       	add	r25, r1
    1784:	11 24       	eor	r1, r1
    1786:	08 95       	ret

00001788 <sprintf>:
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	2e 97       	sbiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	0d 89       	ldd	r16, Y+21	; 0x15
    17a2:	1e 89       	ldd	r17, Y+22	; 0x16
    17a4:	86 e0       	ldi	r24, 0x06	; 6
    17a6:	8c 83       	std	Y+4, r24	; 0x04
    17a8:	1a 83       	std	Y+2, r17	; 0x02
    17aa:	09 83       	std	Y+1, r16	; 0x01
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f e7       	ldi	r25, 0x7F	; 127
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	ae 01       	movw	r20, r28
    17b6:	47 5e       	subi	r20, 0xE7	; 231
    17b8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ba:	6f 89       	ldd	r22, Y+23	; 0x17
    17bc:	78 8d       	ldd	r23, Y+24	; 0x18
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	48 d0       	rcall	.+144    	; 0x1854 <vfprintf>
    17c4:	ef 81       	ldd	r30, Y+7	; 0x07
    17c6:	f8 85       	ldd	r31, Y+8	; 0x08
    17c8:	e0 0f       	add	r30, r16
    17ca:	f1 1f       	adc	r31, r17
    17cc:	10 82       	st	Z, r1
    17ce:	2e 96       	adiw	r28, 0x0e	; 14
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	08 95       	ret

000017e4 <vsnprintf>:
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	2e 97       	sbiw	r28, 0x0e	; 14
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8c 01       	movw	r16, r24
    17fe:	ca 01       	movw	r24, r20
    1800:	46 e0       	ldi	r20, 0x06	; 6
    1802:	4c 83       	std	Y+4, r20	; 0x04
    1804:	1a 83       	std	Y+2, r17	; 0x02
    1806:	09 83       	std	Y+1, r16	; 0x01
    1808:	77 ff       	sbrs	r23, 7
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vsnprintf+0x2c>
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	70 e8       	ldi	r23, 0x80	; 128
    1810:	61 50       	subi	r22, 0x01	; 1
    1812:	71 09       	sbc	r23, r1
    1814:	7e 83       	std	Y+6, r23	; 0x06
    1816:	6d 83       	std	Y+5, r22	; 0x05
    1818:	a9 01       	movw	r20, r18
    181a:	bc 01       	movw	r22, r24
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	19 d0       	rcall	.+50     	; 0x1854 <vfprintf>
    1822:	4d 81       	ldd	r20, Y+5	; 0x05
    1824:	5e 81       	ldd	r21, Y+6	; 0x06
    1826:	57 fd       	sbrc	r21, 7
    1828:	0a c0       	rjmp	.+20     	; 0x183e <vsnprintf+0x5a>
    182a:	2f 81       	ldd	r18, Y+7	; 0x07
    182c:	38 85       	ldd	r19, Y+8	; 0x08
    182e:	42 17       	cp	r20, r18
    1830:	53 07       	cpc	r21, r19
    1832:	0c f4       	brge	.+2      	; 0x1836 <vsnprintf+0x52>
    1834:	9a 01       	movw	r18, r20
    1836:	f8 01       	movw	r30, r16
    1838:	e2 0f       	add	r30, r18
    183a:	f3 1f       	adc	r31, r19
    183c:	10 82       	st	Z, r1
    183e:	2e 96       	adiw	r28, 0x0e	; 14
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	08 95       	ret

00001854 <vfprintf>:
    1854:	2f 92       	push	r2
    1856:	3f 92       	push	r3
    1858:	4f 92       	push	r4
    185a:	5f 92       	push	r5
    185c:	6f 92       	push	r6
    185e:	7f 92       	push	r7
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2c 97       	sbiw	r28, 0x0c	; 12
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	7c 01       	movw	r14, r24
    188a:	6b 01       	movw	r12, r22
    188c:	8a 01       	movw	r16, r20
    188e:	fc 01       	movw	r30, r24
    1890:	17 82       	std	Z+7, r1	; 0x07
    1892:	16 82       	std	Z+6, r1	; 0x06
    1894:	83 81       	ldd	r24, Z+3	; 0x03
    1896:	81 ff       	sbrs	r24, 1
    1898:	b0 c1       	rjmp	.+864    	; 0x1bfa <vfprintf+0x3a6>
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	4c 01       	movw	r8, r24
    18a0:	f7 01       	movw	r30, r14
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	f6 01       	movw	r30, r12
    18a6:	93 fd       	sbrc	r25, 3
    18a8:	85 91       	lpm	r24, Z+
    18aa:	93 ff       	sbrs	r25, 3
    18ac:	81 91       	ld	r24, Z+
    18ae:	6f 01       	movw	r12, r30
    18b0:	88 23       	and	r24, r24
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <vfprintf+0x62>
    18b4:	9e c1       	rjmp	.+828    	; 0x1bf2 <vfprintf+0x39e>
    18b6:	85 32       	cpi	r24, 0x25	; 37
    18b8:	39 f4       	brne	.+14     	; 0x18c8 <vfprintf+0x74>
    18ba:	93 fd       	sbrc	r25, 3
    18bc:	85 91       	lpm	r24, Z+
    18be:	93 ff       	sbrs	r25, 3
    18c0:	81 91       	ld	r24, Z+
    18c2:	6f 01       	movw	r12, r30
    18c4:	85 32       	cpi	r24, 0x25	; 37
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <vfprintf+0x7c>
    18c8:	b7 01       	movw	r22, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	c7 d1       	rcall	.+910    	; 0x1c5c <fputc>
    18ce:	e8 cf       	rjmp	.-48     	; 0x18a0 <vfprintf+0x4c>
    18d0:	51 2c       	mov	r5, r1
    18d2:	31 2c       	mov	r3, r1
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	20 32       	cpi	r18, 0x20	; 32
    18d8:	a0 f4       	brcc	.+40     	; 0x1902 <vfprintf+0xae>
    18da:	8b 32       	cpi	r24, 0x2B	; 43
    18dc:	69 f0       	breq	.+26     	; 0x18f8 <vfprintf+0xa4>
    18de:	30 f4       	brcc	.+12     	; 0x18ec <vfprintf+0x98>
    18e0:	80 32       	cpi	r24, 0x20	; 32
    18e2:	59 f0       	breq	.+22     	; 0x18fa <vfprintf+0xa6>
    18e4:	83 32       	cpi	r24, 0x23	; 35
    18e6:	69 f4       	brne	.+26     	; 0x1902 <vfprintf+0xae>
    18e8:	20 61       	ori	r18, 0x10	; 16
    18ea:	2c c0       	rjmp	.+88     	; 0x1944 <vfprintf+0xf0>
    18ec:	8d 32       	cpi	r24, 0x2D	; 45
    18ee:	39 f0       	breq	.+14     	; 0x18fe <vfprintf+0xaa>
    18f0:	80 33       	cpi	r24, 0x30	; 48
    18f2:	39 f4       	brne	.+14     	; 0x1902 <vfprintf+0xae>
    18f4:	21 60       	ori	r18, 0x01	; 1
    18f6:	26 c0       	rjmp	.+76     	; 0x1944 <vfprintf+0xf0>
    18f8:	22 60       	ori	r18, 0x02	; 2
    18fa:	24 60       	ori	r18, 0x04	; 4
    18fc:	23 c0       	rjmp	.+70     	; 0x1944 <vfprintf+0xf0>
    18fe:	28 60       	ori	r18, 0x08	; 8
    1900:	21 c0       	rjmp	.+66     	; 0x1944 <vfprintf+0xf0>
    1902:	27 fd       	sbrc	r18, 7
    1904:	27 c0       	rjmp	.+78     	; 0x1954 <vfprintf+0x100>
    1906:	30 ed       	ldi	r19, 0xD0	; 208
    1908:	38 0f       	add	r19, r24
    190a:	3a 30       	cpi	r19, 0x0A	; 10
    190c:	78 f4       	brcc	.+30     	; 0x192c <vfprintf+0xd8>
    190e:	26 ff       	sbrs	r18, 6
    1910:	06 c0       	rjmp	.+12     	; 0x191e <vfprintf+0xca>
    1912:	fa e0       	ldi	r31, 0x0A	; 10
    1914:	5f 9e       	mul	r5, r31
    1916:	30 0d       	add	r19, r0
    1918:	11 24       	eor	r1, r1
    191a:	53 2e       	mov	r5, r19
    191c:	13 c0       	rjmp	.+38     	; 0x1944 <vfprintf+0xf0>
    191e:	8a e0       	ldi	r24, 0x0A	; 10
    1920:	38 9e       	mul	r3, r24
    1922:	30 0d       	add	r19, r0
    1924:	11 24       	eor	r1, r1
    1926:	33 2e       	mov	r3, r19
    1928:	20 62       	ori	r18, 0x20	; 32
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <vfprintf+0xf0>
    192c:	8e 32       	cpi	r24, 0x2E	; 46
    192e:	21 f4       	brne	.+8      	; 0x1938 <vfprintf+0xe4>
    1930:	26 fd       	sbrc	r18, 6
    1932:	5f c1       	rjmp	.+702    	; 0x1bf2 <vfprintf+0x39e>
    1934:	20 64       	ori	r18, 0x40	; 64
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <vfprintf+0xf0>
    1938:	8c 36       	cpi	r24, 0x6C	; 108
    193a:	11 f4       	brne	.+4      	; 0x1940 <vfprintf+0xec>
    193c:	20 68       	ori	r18, 0x80	; 128
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0xf0>
    1940:	88 36       	cpi	r24, 0x68	; 104
    1942:	41 f4       	brne	.+16     	; 0x1954 <vfprintf+0x100>
    1944:	f6 01       	movw	r30, r12
    1946:	93 fd       	sbrc	r25, 3
    1948:	85 91       	lpm	r24, Z+
    194a:	93 ff       	sbrs	r25, 3
    194c:	81 91       	ld	r24, Z+
    194e:	6f 01       	movw	r12, r30
    1950:	81 11       	cpse	r24, r1
    1952:	c1 cf       	rjmp	.-126    	; 0x18d6 <vfprintf+0x82>
    1954:	98 2f       	mov	r25, r24
    1956:	9f 7d       	andi	r25, 0xDF	; 223
    1958:	95 54       	subi	r25, 0x45	; 69
    195a:	93 30       	cpi	r25, 0x03	; 3
    195c:	28 f4       	brcc	.+10     	; 0x1968 <vfprintf+0x114>
    195e:	0c 5f       	subi	r16, 0xFC	; 252
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	ff e3       	ldi	r31, 0x3F	; 63
    1964:	f9 83       	std	Y+1, r31	; 0x01
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x12e>
    1968:	83 36       	cpi	r24, 0x63	; 99
    196a:	31 f0       	breq	.+12     	; 0x1978 <vfprintf+0x124>
    196c:	83 37       	cpi	r24, 0x73	; 115
    196e:	71 f0       	breq	.+28     	; 0x198c <vfprintf+0x138>
    1970:	83 35       	cpi	r24, 0x53	; 83
    1972:	09 f0       	breq	.+2      	; 0x1976 <vfprintf+0x122>
    1974:	57 c0       	rjmp	.+174    	; 0x1a24 <vfprintf+0x1d0>
    1976:	21 c0       	rjmp	.+66     	; 0x19ba <vfprintf+0x166>
    1978:	f8 01       	movw	r30, r16
    197a:	80 81       	ld	r24, Z
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	0e 5f       	subi	r16, 0xFE	; 254
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	44 24       	eor	r4, r4
    1984:	43 94       	inc	r4
    1986:	51 2c       	mov	r5, r1
    1988:	54 01       	movw	r10, r8
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <vfprintf+0x160>
    198c:	38 01       	movw	r6, r16
    198e:	f2 e0       	ldi	r31, 0x02	; 2
    1990:	6f 0e       	add	r6, r31
    1992:	71 1c       	adc	r7, r1
    1994:	f8 01       	movw	r30, r16
    1996:	a0 80       	ld	r10, Z
    1998:	b1 80       	ldd	r11, Z+1	; 0x01
    199a:	26 ff       	sbrs	r18, 6
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <vfprintf+0x150>
    199e:	65 2d       	mov	r22, r5
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vfprintf+0x154>
    19a4:	6f ef       	ldi	r22, 0xFF	; 255
    19a6:	7f ef       	ldi	r23, 0xFF	; 255
    19a8:	c5 01       	movw	r24, r10
    19aa:	2c 87       	std	Y+12, r18	; 0x0c
    19ac:	4c d1       	rcall	.+664    	; 0x1c46 <strnlen>
    19ae:	2c 01       	movw	r4, r24
    19b0:	83 01       	movw	r16, r6
    19b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    19b4:	2f 77       	andi	r18, 0x7F	; 127
    19b6:	22 2e       	mov	r2, r18
    19b8:	16 c0       	rjmp	.+44     	; 0x19e6 <vfprintf+0x192>
    19ba:	38 01       	movw	r6, r16
    19bc:	f2 e0       	ldi	r31, 0x02	; 2
    19be:	6f 0e       	add	r6, r31
    19c0:	71 1c       	adc	r7, r1
    19c2:	f8 01       	movw	r30, r16
    19c4:	a0 80       	ld	r10, Z
    19c6:	b1 80       	ldd	r11, Z+1	; 0x01
    19c8:	26 ff       	sbrs	r18, 6
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <vfprintf+0x17e>
    19cc:	65 2d       	mov	r22, r5
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x182>
    19d2:	6f ef       	ldi	r22, 0xFF	; 255
    19d4:	7f ef       	ldi	r23, 0xFF	; 255
    19d6:	c5 01       	movw	r24, r10
    19d8:	2c 87       	std	Y+12, r18	; 0x0c
    19da:	2a d1       	rcall	.+596    	; 0x1c30 <strnlen_P>
    19dc:	2c 01       	movw	r4, r24
    19de:	2c 85       	ldd	r18, Y+12	; 0x0c
    19e0:	20 68       	ori	r18, 0x80	; 128
    19e2:	22 2e       	mov	r2, r18
    19e4:	83 01       	movw	r16, r6
    19e6:	23 fc       	sbrc	r2, 3
    19e8:	19 c0       	rjmp	.+50     	; 0x1a1c <vfprintf+0x1c8>
    19ea:	83 2d       	mov	r24, r3
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	48 16       	cp	r4, r24
    19f0:	59 06       	cpc	r5, r25
    19f2:	a0 f4       	brcc	.+40     	; 0x1a1c <vfprintf+0x1c8>
    19f4:	b7 01       	movw	r22, r14
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	30 d1       	rcall	.+608    	; 0x1c5c <fputc>
    19fc:	3a 94       	dec	r3
    19fe:	f5 cf       	rjmp	.-22     	; 0x19ea <vfprintf+0x196>
    1a00:	f5 01       	movw	r30, r10
    1a02:	27 fc       	sbrc	r2, 7
    1a04:	85 91       	lpm	r24, Z+
    1a06:	27 fe       	sbrs	r2, 7
    1a08:	81 91       	ld	r24, Z+
    1a0a:	5f 01       	movw	r10, r30
    1a0c:	b7 01       	movw	r22, r14
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	25 d1       	rcall	.+586    	; 0x1c5c <fputc>
    1a12:	31 10       	cpse	r3, r1
    1a14:	3a 94       	dec	r3
    1a16:	f1 e0       	ldi	r31, 0x01	; 1
    1a18:	4f 1a       	sub	r4, r31
    1a1a:	51 08       	sbc	r5, r1
    1a1c:	41 14       	cp	r4, r1
    1a1e:	51 04       	cpc	r5, r1
    1a20:	79 f7       	brne	.-34     	; 0x1a00 <vfprintf+0x1ac>
    1a22:	de c0       	rjmp	.+444    	; 0x1be0 <vfprintf+0x38c>
    1a24:	84 36       	cpi	r24, 0x64	; 100
    1a26:	11 f0       	breq	.+4      	; 0x1a2c <vfprintf+0x1d8>
    1a28:	89 36       	cpi	r24, 0x69	; 105
    1a2a:	31 f5       	brne	.+76     	; 0x1a78 <vfprintf+0x224>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	27 ff       	sbrs	r18, 7
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <vfprintf+0x1ec>
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	0c 5f       	subi	r16, 0xFC	; 252
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <vfprintf+0x1fc>
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	88 27       	eor	r24, r24
    1a46:	77 fd       	sbrc	r23, 7
    1a48:	80 95       	com	r24
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	0e 5f       	subi	r16, 0xFE	; 254
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	2f 76       	andi	r18, 0x6F	; 111
    1a52:	b2 2e       	mov	r11, r18
    1a54:	97 ff       	sbrs	r25, 7
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <vfprintf+0x216>
    1a58:	90 95       	com	r25
    1a5a:	80 95       	com	r24
    1a5c:	70 95       	com	r23
    1a5e:	61 95       	neg	r22
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	20 68       	ori	r18, 0x80	; 128
    1a68:	b2 2e       	mov	r11, r18
    1a6a:	2a e0       	ldi	r18, 0x0A	; 10
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	a4 01       	movw	r20, r8
    1a70:	27 d1       	rcall	.+590    	; 0x1cc0 <__ultoa_invert>
    1a72:	a8 2e       	mov	r10, r24
    1a74:	a8 18       	sub	r10, r8
    1a76:	43 c0       	rjmp	.+134    	; 0x1afe <vfprintf+0x2aa>
    1a78:	85 37       	cpi	r24, 0x75	; 117
    1a7a:	29 f4       	brne	.+10     	; 0x1a86 <vfprintf+0x232>
    1a7c:	2f 7e       	andi	r18, 0xEF	; 239
    1a7e:	b2 2e       	mov	r11, r18
    1a80:	2a e0       	ldi	r18, 0x0A	; 10
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	25 c0       	rjmp	.+74     	; 0x1ad0 <vfprintf+0x27c>
    1a86:	f2 2f       	mov	r31, r18
    1a88:	f9 7f       	andi	r31, 0xF9	; 249
    1a8a:	bf 2e       	mov	r11, r31
    1a8c:	8f 36       	cpi	r24, 0x6F	; 111
    1a8e:	c1 f0       	breq	.+48     	; 0x1ac0 <vfprintf+0x26c>
    1a90:	18 f4       	brcc	.+6      	; 0x1a98 <vfprintf+0x244>
    1a92:	88 35       	cpi	r24, 0x58	; 88
    1a94:	79 f0       	breq	.+30     	; 0x1ab4 <vfprintf+0x260>
    1a96:	ad c0       	rjmp	.+346    	; 0x1bf2 <vfprintf+0x39e>
    1a98:	80 37       	cpi	r24, 0x70	; 112
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <vfprintf+0x24e>
    1a9c:	88 37       	cpi	r24, 0x78	; 120
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <vfprintf+0x254>
    1aa0:	a8 c0       	rjmp	.+336    	; 0x1bf2 <vfprintf+0x39e>
    1aa2:	2f 2f       	mov	r18, r31
    1aa4:	20 61       	ori	r18, 0x10	; 16
    1aa6:	b2 2e       	mov	r11, r18
    1aa8:	b4 fe       	sbrs	r11, 4
    1aaa:	0d c0       	rjmp	.+26     	; 0x1ac6 <vfprintf+0x272>
    1aac:	8b 2d       	mov	r24, r11
    1aae:	84 60       	ori	r24, 0x04	; 4
    1ab0:	b8 2e       	mov	r11, r24
    1ab2:	09 c0       	rjmp	.+18     	; 0x1ac6 <vfprintf+0x272>
    1ab4:	24 ff       	sbrs	r18, 4
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <vfprintf+0x278>
    1ab8:	9f 2f       	mov	r25, r31
    1aba:	96 60       	ori	r25, 0x06	; 6
    1abc:	b9 2e       	mov	r11, r25
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <vfprintf+0x278>
    1ac0:	28 e0       	ldi	r18, 0x08	; 8
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <vfprintf+0x27c>
    1ac6:	20 e1       	ldi	r18, 0x10	; 16
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <vfprintf+0x27c>
    1acc:	20 e1       	ldi	r18, 0x10	; 16
    1ace:	32 e0       	ldi	r19, 0x02	; 2
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	b7 fe       	sbrs	r11, 7
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <vfprintf+0x290>
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0c 5f       	subi	r16, 0xFC	; 252
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0x29c>
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 5f       	subi	r16, 0xFE	; 254
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	a4 01       	movw	r20, r8
    1af2:	e6 d0       	rcall	.+460    	; 0x1cc0 <__ultoa_invert>
    1af4:	a8 2e       	mov	r10, r24
    1af6:	a8 18       	sub	r10, r8
    1af8:	fb 2d       	mov	r31, r11
    1afa:	ff 77       	andi	r31, 0x7F	; 127
    1afc:	bf 2e       	mov	r11, r31
    1afe:	b6 fe       	sbrs	r11, 6
    1b00:	0b c0       	rjmp	.+22     	; 0x1b18 <vfprintf+0x2c4>
    1b02:	2b 2d       	mov	r18, r11
    1b04:	2e 7f       	andi	r18, 0xFE	; 254
    1b06:	a5 14       	cp	r10, r5
    1b08:	50 f4       	brcc	.+20     	; 0x1b1e <vfprintf+0x2ca>
    1b0a:	b4 fe       	sbrs	r11, 4
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <vfprintf+0x2ce>
    1b0e:	b2 fc       	sbrc	r11, 2
    1b10:	08 c0       	rjmp	.+16     	; 0x1b22 <vfprintf+0x2ce>
    1b12:	2b 2d       	mov	r18, r11
    1b14:	2e 7e       	andi	r18, 0xEE	; 238
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <vfprintf+0x2ce>
    1b18:	7a 2c       	mov	r7, r10
    1b1a:	2b 2d       	mov	r18, r11
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <vfprintf+0x2d0>
    1b1e:	7a 2c       	mov	r7, r10
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <vfprintf+0x2d0>
    1b22:	75 2c       	mov	r7, r5
    1b24:	24 ff       	sbrs	r18, 4
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <vfprintf+0x2ee>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ea 0d       	add	r30, r10
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 33       	cpi	r24, 0x30	; 48
    1b32:	11 f4       	brne	.+4      	; 0x1b38 <vfprintf+0x2e4>
    1b34:	29 7e       	andi	r18, 0xE9	; 233
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <vfprintf+0x2f6>
    1b38:	22 ff       	sbrs	r18, 2
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <vfprintf+0x2f4>
    1b3c:	73 94       	inc	r7
    1b3e:	73 94       	inc	r7
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <vfprintf+0x2f6>
    1b42:	82 2f       	mov	r24, r18
    1b44:	86 78       	andi	r24, 0x86	; 134
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <vfprintf+0x2f6>
    1b48:	73 94       	inc	r7
    1b4a:	23 fd       	sbrc	r18, 3
    1b4c:	12 c0       	rjmp	.+36     	; 0x1b72 <vfprintf+0x31e>
    1b4e:	20 ff       	sbrs	r18, 0
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <vfprintf+0x30a>
    1b52:	5a 2c       	mov	r5, r10
    1b54:	73 14       	cp	r7, r3
    1b56:	18 f4       	brcc	.+6      	; 0x1b5e <vfprintf+0x30a>
    1b58:	53 0c       	add	r5, r3
    1b5a:	57 18       	sub	r5, r7
    1b5c:	73 2c       	mov	r7, r3
    1b5e:	73 14       	cp	r7, r3
    1b60:	60 f4       	brcc	.+24     	; 0x1b7a <vfprintf+0x326>
    1b62:	b7 01       	movw	r22, r14
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	2c 87       	std	Y+12, r18	; 0x0c
    1b6a:	78 d0       	rcall	.+240    	; 0x1c5c <fputc>
    1b6c:	73 94       	inc	r7
    1b6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b70:	f6 cf       	rjmp	.-20     	; 0x1b5e <vfprintf+0x30a>
    1b72:	73 14       	cp	r7, r3
    1b74:	10 f4       	brcc	.+4      	; 0x1b7a <vfprintf+0x326>
    1b76:	37 18       	sub	r3, r7
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <vfprintf+0x328>
    1b7a:	31 2c       	mov	r3, r1
    1b7c:	24 ff       	sbrs	r18, 4
    1b7e:	11 c0       	rjmp	.+34     	; 0x1ba2 <vfprintf+0x34e>
    1b80:	b7 01       	movw	r22, r14
    1b82:	80 e3       	ldi	r24, 0x30	; 48
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	2c 87       	std	Y+12, r18	; 0x0c
    1b88:	69 d0       	rcall	.+210    	; 0x1c5c <fputc>
    1b8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b8c:	22 ff       	sbrs	r18, 2
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <vfprintf+0x368>
    1b90:	21 ff       	sbrs	r18, 1
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <vfprintf+0x346>
    1b94:	88 e5       	ldi	r24, 0x58	; 88
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <vfprintf+0x34a>
    1b9a:	88 e7       	ldi	r24, 0x78	; 120
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	b7 01       	movw	r22, r14
    1ba0:	0c c0       	rjmp	.+24     	; 0x1bba <vfprintf+0x366>
    1ba2:	82 2f       	mov	r24, r18
    1ba4:	86 78       	andi	r24, 0x86	; 134
    1ba6:	51 f0       	breq	.+20     	; 0x1bbc <vfprintf+0x368>
    1ba8:	21 fd       	sbrc	r18, 1
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfprintf+0x35c>
    1bac:	80 e2       	ldi	r24, 0x20	; 32
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <vfprintf+0x35e>
    1bb0:	8b e2       	ldi	r24, 0x2B	; 43
    1bb2:	27 fd       	sbrc	r18, 7
    1bb4:	8d e2       	ldi	r24, 0x2D	; 45
    1bb6:	b7 01       	movw	r22, r14
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	50 d0       	rcall	.+160    	; 0x1c5c <fputc>
    1bbc:	a5 14       	cp	r10, r5
    1bbe:	30 f4       	brcc	.+12     	; 0x1bcc <vfprintf+0x378>
    1bc0:	b7 01       	movw	r22, r14
    1bc2:	80 e3       	ldi	r24, 0x30	; 48
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	4a d0       	rcall	.+148    	; 0x1c5c <fputc>
    1bc8:	5a 94       	dec	r5
    1bca:	f8 cf       	rjmp	.-16     	; 0x1bbc <vfprintf+0x368>
    1bcc:	aa 94       	dec	r10
    1bce:	f4 01       	movw	r30, r8
    1bd0:	ea 0d       	add	r30, r10
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	80 81       	ld	r24, Z
    1bd6:	b7 01       	movw	r22, r14
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	40 d0       	rcall	.+128    	; 0x1c5c <fputc>
    1bdc:	a1 10       	cpse	r10, r1
    1bde:	f6 cf       	rjmp	.-20     	; 0x1bcc <vfprintf+0x378>
    1be0:	33 20       	and	r3, r3
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <vfprintf+0x392>
    1be4:	5d ce       	rjmp	.-838    	; 0x18a0 <vfprintf+0x4c>
    1be6:	b7 01       	movw	r22, r14
    1be8:	80 e2       	ldi	r24, 0x20	; 32
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	37 d0       	rcall	.+110    	; 0x1c5c <fputc>
    1bee:	3a 94       	dec	r3
    1bf0:	f7 cf       	rjmp	.-18     	; 0x1be0 <vfprintf+0x38c>
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	97 81       	ldd	r25, Z+7	; 0x07
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <vfprintf+0x3aa>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	2c 96       	adiw	r28, 0x0c	; 12
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	9f 90       	pop	r9
    1c20:	8f 90       	pop	r8
    1c22:	7f 90       	pop	r7
    1c24:	6f 90       	pop	r6
    1c26:	5f 90       	pop	r5
    1c28:	4f 90       	pop	r4
    1c2a:	3f 90       	pop	r3
    1c2c:	2f 90       	pop	r2
    1c2e:	08 95       	ret

00001c30 <strnlen_P>:
    1c30:	fc 01       	movw	r30, r24
    1c32:	05 90       	lpm	r0, Z+
    1c34:	61 50       	subi	r22, 0x01	; 1
    1c36:	70 40       	sbci	r23, 0x00	; 0
    1c38:	01 10       	cpse	r0, r1
    1c3a:	d8 f7       	brcc	.-10     	; 0x1c32 <strnlen_P+0x2>
    1c3c:	80 95       	com	r24
    1c3e:	90 95       	com	r25
    1c40:	8e 0f       	add	r24, r30
    1c42:	9f 1f       	adc	r25, r31
    1c44:	08 95       	ret

00001c46 <strnlen>:
    1c46:	fc 01       	movw	r30, r24
    1c48:	61 50       	subi	r22, 0x01	; 1
    1c4a:	70 40       	sbci	r23, 0x00	; 0
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	01 10       	cpse	r0, r1
    1c50:	d8 f7       	brcc	.-10     	; 0x1c48 <strnlen+0x2>
    1c52:	80 95       	com	r24
    1c54:	90 95       	com	r25
    1c56:	8e 0f       	add	r24, r30
    1c58:	9f 1f       	adc	r25, r31
    1c5a:	08 95       	ret

00001c5c <fputc>:
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	18 2f       	mov	r17, r24
    1c66:	09 2f       	mov	r16, r25
    1c68:	eb 01       	movw	r28, r22
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 fd       	sbrc	r24, 1
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <fputc+0x1a>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	20 c0       	rjmp	.+64     	; 0x1cb6 <fputc+0x5a>
    1c76:	82 ff       	sbrs	r24, 2
    1c78:	10 c0       	rjmp	.+32     	; 0x1c9a <fputc+0x3e>
    1c7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1c7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c80:	3d 81       	ldd	r19, Y+5	; 0x05
    1c82:	42 17       	cp	r20, r18
    1c84:	53 07       	cpc	r21, r19
    1c86:	7c f4       	brge	.+30     	; 0x1ca6 <fputc+0x4a>
    1c88:	e8 81       	ld	r30, Y
    1c8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c8c:	9f 01       	movw	r18, r30
    1c8e:	2f 5f       	subi	r18, 0xFF	; 255
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	39 83       	std	Y+1, r19	; 0x01
    1c94:	28 83       	st	Y, r18
    1c96:	10 83       	st	Z, r17
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <fputc+0x4a>
    1c9a:	e8 85       	ldd	r30, Y+8	; 0x08
    1c9c:	f9 85       	ldd	r31, Y+9	; 0x09
    1c9e:	81 2f       	mov	r24, r17
    1ca0:	09 95       	icall
    1ca2:	89 2b       	or	r24, r25
    1ca4:	29 f7       	brne	.-54     	; 0x1c70 <fputc+0x14>
    1ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	3f 83       	std	Y+7, r19	; 0x07
    1cb0:	2e 83       	std	Y+6, r18	; 0x06
    1cb2:	81 2f       	mov	r24, r17
    1cb4:	90 2f       	mov	r25, r16
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <__ultoa_invert>:
    1cc0:	fa 01       	movw	r30, r20
    1cc2:	aa 27       	eor	r26, r26
    1cc4:	28 30       	cpi	r18, 0x08	; 8
    1cc6:	51 f1       	breq	.+84     	; 0x1d1c <__ultoa_invert+0x5c>
    1cc8:	20 31       	cpi	r18, 0x10	; 16
    1cca:	81 f1       	breq	.+96     	; 0x1d2c <__ultoa_invert+0x6c>
    1ccc:	e8 94       	clt
    1cce:	6f 93       	push	r22
    1cd0:	6e 7f       	andi	r22, 0xFE	; 254
    1cd2:	6e 5f       	subi	r22, 0xFE	; 254
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	af 4f       	sbci	r26, 0xFF	; 255
    1cdc:	b1 e0       	ldi	r27, 0x01	; 1
    1cde:	3e d0       	rcall	.+124    	; 0x1d5c <__ultoa_invert+0x9c>
    1ce0:	b4 e0       	ldi	r27, 0x04	; 4
    1ce2:	3c d0       	rcall	.+120    	; 0x1d5c <__ultoa_invert+0x9c>
    1ce4:	67 0f       	add	r22, r23
    1ce6:	78 1f       	adc	r23, r24
    1ce8:	89 1f       	adc	r24, r25
    1cea:	9a 1f       	adc	r25, r26
    1cec:	a1 1d       	adc	r26, r1
    1cee:	68 0f       	add	r22, r24
    1cf0:	79 1f       	adc	r23, r25
    1cf2:	8a 1f       	adc	r24, r26
    1cf4:	91 1d       	adc	r25, r1
    1cf6:	a1 1d       	adc	r26, r1
    1cf8:	6a 0f       	add	r22, r26
    1cfa:	71 1d       	adc	r23, r1
    1cfc:	81 1d       	adc	r24, r1
    1cfe:	91 1d       	adc	r25, r1
    1d00:	a1 1d       	adc	r26, r1
    1d02:	20 d0       	rcall	.+64     	; 0x1d44 <__ultoa_invert+0x84>
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <__ultoa_invert+0x48>
    1d06:	68 94       	set
    1d08:	3f 91       	pop	r19
    1d0a:	2a e0       	ldi	r18, 0x0A	; 10
    1d0c:	26 9f       	mul	r18, r22
    1d0e:	11 24       	eor	r1, r1
    1d10:	30 19       	sub	r19, r0
    1d12:	30 5d       	subi	r19, 0xD0	; 208
    1d14:	31 93       	st	Z+, r19
    1d16:	de f6       	brtc	.-74     	; 0x1cce <__ultoa_invert+0xe>
    1d18:	cf 01       	movw	r24, r30
    1d1a:	08 95       	ret
    1d1c:	46 2f       	mov	r20, r22
    1d1e:	47 70       	andi	r20, 0x07	; 7
    1d20:	40 5d       	subi	r20, 0xD0	; 208
    1d22:	41 93       	st	Z+, r20
    1d24:	b3 e0       	ldi	r27, 0x03	; 3
    1d26:	0f d0       	rcall	.+30     	; 0x1d46 <__ultoa_invert+0x86>
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__ultoa_invert+0x5c>
    1d2a:	f6 cf       	rjmp	.-20     	; 0x1d18 <__ultoa_invert+0x58>
    1d2c:	46 2f       	mov	r20, r22
    1d2e:	4f 70       	andi	r20, 0x0F	; 15
    1d30:	40 5d       	subi	r20, 0xD0	; 208
    1d32:	4a 33       	cpi	r20, 0x3A	; 58
    1d34:	18 f0       	brcs	.+6      	; 0x1d3c <__ultoa_invert+0x7c>
    1d36:	49 5d       	subi	r20, 0xD9	; 217
    1d38:	31 fd       	sbrc	r19, 1
    1d3a:	40 52       	subi	r20, 0x20	; 32
    1d3c:	41 93       	st	Z+, r20
    1d3e:	02 d0       	rcall	.+4      	; 0x1d44 <__ultoa_invert+0x84>
    1d40:	a9 f7       	brne	.-22     	; 0x1d2c <__ultoa_invert+0x6c>
    1d42:	ea cf       	rjmp	.-44     	; 0x1d18 <__ultoa_invert+0x58>
    1d44:	b4 e0       	ldi	r27, 0x04	; 4
    1d46:	a6 95       	lsr	r26
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	77 95       	ror	r23
    1d4e:	67 95       	ror	r22
    1d50:	ba 95       	dec	r27
    1d52:	c9 f7       	brne	.-14     	; 0x1d46 <__ultoa_invert+0x86>
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	61 05       	cpc	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	08 95       	ret
    1d5c:	9b 01       	movw	r18, r22
    1d5e:	ac 01       	movw	r20, r24
    1d60:	0a 2e       	mov	r0, r26
    1d62:	06 94       	lsr	r0
    1d64:	57 95       	ror	r21
    1d66:	47 95       	ror	r20
    1d68:	37 95       	ror	r19
    1d6a:	27 95       	ror	r18
    1d6c:	ba 95       	dec	r27
    1d6e:	c9 f7       	brne	.-14     	; 0x1d62 <__ultoa_invert+0xa2>
    1d70:	62 0f       	add	r22, r18
    1d72:	73 1f       	adc	r23, r19
    1d74:	84 1f       	adc	r24, r20
    1d76:	95 1f       	adc	r25, r21
    1d78:	a0 1d       	adc	r26, r0
    1d7a:	08 95       	ret

00001d7c <_exit>:
    1d7c:	f8 94       	cli

00001d7e <__stop_program>:
    1d7e:	ff cf       	rjmp	.-2      	; 0x1d7e <__stop_program>
