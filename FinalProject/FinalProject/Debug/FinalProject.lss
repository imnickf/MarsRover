
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00002366  000023fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008002e6  008002e6  000025e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ae0  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013bd  00000000  00000000  00005beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000618  00000000  00000000  00006fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000971  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018b7  00000000  00000000  00007f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_9>
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_11>
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <move_forward+0x110>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <move_forward+0x40>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e1       	ldi	r29, 0x10	; 16
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e6 e6       	ldi	r30, 0x66	; 102
     140:	f3 e2       	ldi	r31, 0x23	; 35
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a6 3e       	cpi	r26, 0xE6	; 230
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	23 e0       	ldi	r18, 0x03	; 3
     154:	a6 ee       	ldi	r26, 0xE6	; 230
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	aa 34       	cpi	r26, 0x4A	; 74
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	40 d2       	rcall	.+1152   	; 0x5e4 <main>
     164:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <transmitSensorData>:
 *  Transmits the values of the bump sensors, cliff sensors, and cliff signals to the GUI
 *
 *  @param sensor_data struct containing all the sensor data for the Create
 */
void transmitSensorData(oi_t *sensor_data)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	ca 5f       	subi	r28, 0xFA	; 250
     180:	d1 09       	sbc	r29, r1
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	8c 01       	movw	r16, r24
	oi_update(sensor_data);
     18e:	44 d6       	rcall	.+3208   	; 0xe18 <oi_update>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
     190:	f8 01       	movw	r30, r16
     192:	80 81       	ld	r24, Z
     194:	86 95       	lsr	r24
     196:	81 70       	andi	r24, 0x01	; 1
     198:	1f 92       	push	r1
     19a:	8f 93       	push	r24
     19c:	80 81       	ld	r24, Z
     19e:	81 70       	andi	r24, 0x01	; 1
     1a0:	1f 92       	push	r1
     1a2:	8f 93       	push	r24
     1a4:	86 e0       	ldi	r24, 0x06	; 6
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	9f 93       	push	r25
     1aa:	8f 93       	push	r24
     1ac:	ce 01       	movw	r24, r28
     1ae:	01 96       	adiw	r24, 0x01	; 1
     1b0:	6c 01       	movw	r12, r24
     1b2:	df 92       	push	r13
     1b4:	8f 93       	push	r24
     1b6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <sprintf>
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
     1ba:	f8 01       	movw	r30, r16
     1bc:	85 81       	ldd	r24, Z+5	; 0x05
     1be:	1f 92       	push	r1
     1c0:	8f 93       	push	r24
     1c2:	84 81       	ldd	r24, Z+4	; 0x04
     1c4:	1f 92       	push	r1
     1c6:	8f 93       	push	r24
     1c8:	83 81       	ldd	r24, Z+3	; 0x03
     1ca:	1f 92       	push	r1
     1cc:	8f 93       	push	r24
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	1f 92       	push	r1
     1d2:	8f 93       	push	r24
     1d4:	82 e3       	ldi	r24, 0x32	; 50
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	ce 01       	movw	r24, r28
     1de:	c3 96       	adiw	r24, 0x33	; 51
     1e0:	9f 93       	push	r25
     1e2:	8f 93       	push	r24
     1e4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <sprintf>
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
     1e8:	f8 01       	movw	r30, r16
     1ea:	83 a1       	ldd	r24, Z+35	; 0x23
     1ec:	8f 93       	push	r24
     1ee:	82 a1       	ldd	r24, Z+34	; 0x22
     1f0:	8f 93       	push	r24
     1f2:	81 a1       	ldd	r24, Z+33	; 0x21
     1f4:	8f 93       	push	r24
     1f6:	80 a1       	ldd	r24, Z+32	; 0x20
     1f8:	8f 93       	push	r24
     1fa:	87 8d       	ldd	r24, Z+31	; 0x1f
     1fc:	8f 93       	push	r24
     1fe:	86 8d       	ldd	r24, Z+30	; 0x1e
     200:	8f 93       	push	r24
     202:	85 8d       	ldd	r24, Z+29	; 0x1d
     204:	8f 93       	push	r24
     206:	84 8d       	ldd	r24, Z+28	; 0x1c
     208:	8f 93       	push	r24
     20a:	85 e7       	ldi	r24, 0x75	; 117
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	9f 93       	push	r25
     210:	8f 93       	push	r24
     212:	ce 01       	movw	r24, r28
     214:	89 56       	subi	r24, 0x69	; 105
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <sprintf>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	76 01       	movw	r14, r12
     230:	06 c0       	rjmp	.+12     	; 0x23e <transmitSensorData+0xd4>
		USART_Transmit(bumpSensors[i]);
     232:	f6 01       	movw	r30, r12
     234:	81 91       	ld	r24, Z+
     236:	6f 01       	movw	r12, r30
     238:	2f d7       	rcall	.+3678   	; 0x1098 <USART_Transmit>
	char bumpSensors[50], cliffSensors[100], cliffSignals[100];
	sprintf(bumpSensors, "\r\nBump Sensor (r, l) values: R: %d, L: %d\r\n", sensor_data->bumper_right, sensor_data->bumper_left);
	sprintf(cliffSensors, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
	sprintf(cliffSignals, "Cliff Sensor (l, fl, fr, r) values: L: %d, FL: %d, FR: %d, R: %d\r\n\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
     23a:	0f 5f       	subi	r16, 0xFF	; 255
     23c:	1f 4f       	sbci	r17, 0xFF	; 255
     23e:	f7 01       	movw	r30, r14
     240:	01 90       	ld	r0, Z+
     242:	00 20       	and	r0, r0
     244:	e9 f7       	brne	.-6      	; 0x240 <transmitSensorData+0xd6>
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	ee 19       	sub	r30, r14
     24a:	ff 09       	sbc	r31, r15
     24c:	0e 17       	cp	r16, r30
     24e:	1f 07       	cpc	r17, r31
     250:	80 f3       	brcs	.-32     	; 0x232 <transmitSensorData+0xc8>
     252:	6e 01       	movw	r12, r28
     254:	f3 e3       	ldi	r31, 0x33	; 51
     256:	cf 0e       	add	r12, r31
     258:	d1 1c       	adc	r13, r1
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     25e:	76 01       	movw	r14, r12
     260:	06 c0       	rjmp	.+12     	; 0x26e <transmitSensorData+0x104>
		USART_Transmit(cliffSensors[i]); 
     262:	f6 01       	movw	r30, r12
     264:	81 91       	ld	r24, Z+
     266:	6f 01       	movw	r12, r30
     268:	17 d7       	rcall	.+3630   	; 0x1098 <USART_Transmit>
	
	for(int i = 0; i < strlen(bumpSensors); i++) {
		USART_Transmit(bumpSensors[i]);
	}
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
     26a:	0f 5f       	subi	r16, 0xFF	; 255
     26c:	1f 4f       	sbci	r17, 0xFF	; 255
     26e:	f7 01       	movw	r30, r14
     270:	01 90       	ld	r0, Z+
     272:	00 20       	and	r0, r0
     274:	e9 f7       	brne	.-6      	; 0x270 <transmitSensorData+0x106>
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	ee 19       	sub	r30, r14
     27a:	ff 09       	sbc	r31, r15
     27c:	0e 17       	cp	r16, r30
     27e:	1f 07       	cpc	r17, r31
     280:	80 f3       	brcs	.-32     	; 0x262 <transmitSensorData+0xf8>
     282:	6e 01       	movw	r12, r28
     284:	f7 e9       	ldi	r31, 0x97	; 151
     286:	cf 0e       	add	r12, r31
     288:	d1 1c       	adc	r13, r1
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     28e:	76 01       	movw	r14, r12
     290:	06 c0       	rjmp	.+12     	; 0x29e <transmitSensorData+0x134>
		USART_Transmit(cliffSignals[i]);
     292:	f6 01       	movw	r30, r12
     294:	81 91       	ld	r24, Z+
     296:	6f 01       	movw	r12, r30
     298:	ff d6       	rcall	.+3582   	; 0x1098 <USART_Transmit>
	
	for(int i = 0; i < strlen(cliffSensors); i++) {	
		USART_Transmit(cliffSensors[i]); 
	}
	
	for(int i = 0; i < strlen(cliffSignals); i++) {	
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	f7 01       	movw	r30, r14
     2a0:	01 90       	ld	r0, Z+
     2a2:	00 20       	and	r0, r0
     2a4:	e9 f7       	brne	.-6      	; 0x2a0 <transmitSensorData+0x136>
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	ee 19       	sub	r30, r14
     2aa:	ff 09       	sbc	r31, r15
     2ac:	0e 17       	cp	r16, r30
     2ae:	1f 07       	cpc	r17, r31
     2b0:	80 f3       	brcs	.-32     	; 0x292 <transmitSensorData+0x128>
		USART_Transmit(cliffSignals[i]);
	}
}
     2b2:	c6 50       	subi	r28, 0x06	; 6
     2b4:	df 4f       	sbci	r29, 0xFF	; 255
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <scanForObjects>:
 *  the found objects. Each object contains a diameter, distance from the Create, and an angle.
 *
 *  @return the found objects
 */
object_t * scanForObjects()
{
     2d2:	2f 92       	push	r2
     2d4:	3f 92       	push	r3
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	c6 54       	subi	r28, 0x46	; 70
     2fc:	d1 09       	sbc	r29, r1
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
	
	object_t *objects = malloc(sizeof(object_t) * 10);
     308:	8c e3       	ldi	r24, 0x3C	; 60
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <malloc>
     310:	3c 01       	movw	r6, r24

	while(degrees <= 180)
    {	
		move_servo(degrees);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	c4 d6       	rcall	.+3464   	; 0x10a0 <move_servo>
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	80 d6       	rcall	.+3328   	; 0x101e <wait_ms>
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
	int degrees = 0;
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	10 e0       	ldi	r17, 0x00	; 0
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
	int degreeWidth = 0;
	int lastSonarDistance = 0;
     322:	a1 2c       	mov	r10, r1
     324:	b1 2c       	mov	r11, r1
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
	int lastIRDistance = 0;
	int firstDegrees = 0;
     326:	81 2c       	mov	r8, r1
     328:	91 2c       	mov	r9, r1
object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
	int inObject = 0;
     32a:	e1 2c       	mov	r14, r1
     32c:	f1 2c       	mov	r15, r1
 */
object_t * scanForObjects()
{
	int sonarDistance =0;
	int irDistance = 0;
	int currObjectIndex = -1;
     32e:	cc 24       	eor	r12, r12
     330:	ca 94       	dec	r12
     332:	dc 2c       	mov	r13, r12
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
			
			move_servo(degrees);
     334:	c8 01       	movw	r24, r16
     336:	b4 d6       	rcall	.+3432   	; 0x10a0 <move_servo>
			sonarDistance = getPingDistance();
     338:	21 d7       	rcall	.+3650   	; 0x117c <getPingDistance>
     33a:	48 2e       	mov	r4, r24
     33c:	59 2e       	mov	r5, r25
			irDistance = getIrDistance();			
     33e:	59 d7       	rcall	.+3762   	; 0x11f2 <getIrDistance>
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
     340:	85 36       	cpi	r24, 0x65	; 101
     342:	91 05       	cpc	r25, r1
     344:	0c f0       	brlt	.+2      	; 0x348 <scanForObjects+0x76>
     346:	9b c0       	rjmp	.+310    	; 0x47e <scanForObjects+0x1ac>
     348:	e1 14       	cp	r14, r1
     34a:	f1 04       	cpc	r15, r1
     34c:	09 f0       	breq	.+2      	; 0x350 <scanForObjects+0x7e>
     34e:	59 c0       	rjmp	.+178    	; 0x402 <scanForObjects+0x130>
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	c8 1a       	sub	r12, r24
     354:	d8 0a       	sbc	r13, r24
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
     356:	a4 2c       	mov	r10, r4
     358:	b5 2c       	mov	r11, r5
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
				currObjectIndex++;							// Index of this object
     35a:	48 01       	movw	r8, r16
			move_servo(degrees);
			sonarDistance = getPingDistance();
			irDistance = getIrDistance();			
							
			if(irDistance <= 100 && inObject == 0){			// Going into object
				inObject = 1;								// Sensor is now detecting an object
     35c:	ee 24       	eor	r14, r14
     35e:	e3 94       	inc	r14
     360:	f1 2c       	mov	r15, r1
     362:	4f c0       	rjmp	.+158    	; 0x402 <scanForObjects+0x130>
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
     364:	76 01       	movw	r14, r12
     366:	ee 0c       	add	r14, r14
     368:	ff 1c       	adc	r15, r15
     36a:	ec 0c       	add	r14, r12
     36c:	fd 1c       	adc	r15, r13
     36e:	ee 0c       	add	r14, r14
     370:	ff 1c       	adc	r15, r15
     372:	e6 0c       	add	r14, r6
     374:	f7 1c       	adc	r15, r7
     376:	c4 01       	movw	r24, r8
     378:	80 0f       	add	r24, r16
     37a:	91 1f       	adc	r25, r17
     37c:	99 23       	and	r25, r25
     37e:	0c f4       	brge	.+2      	; 0x382 <scanForObjects+0xb0>
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	95 95       	asr	r25
     384:	87 95       	ror	r24
     386:	f7 01       	movw	r30, r14
     388:	93 83       	std	Z+3, r25	; 0x03
     38a:	82 83       	std	Z+2, r24	; 0x02
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     38c:	b5 01       	movw	r22, r10
     38e:	88 27       	eor	r24, r24
     390:	77 fd       	sbrc	r23, 7
     392:	80 95       	com	r24
     394:	98 2f       	mov	r25, r24
     396:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatsisf>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	56 d7       	rcall	.+3756   	; 0x1254 <__addsf3>
     3a8:	1b 01       	movw	r2, r22
     3aa:	2c 01       	movw	r4, r24
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
				degreeWidth = abs(firstDegrees - degrees);	
     3ac:	c4 01       	movw	r24, r8
     3ae:	80 1b       	sub	r24, r16
     3b0:	91 0b       	sbc	r25, r17
     3b2:	bc 01       	movw	r22, r24
     3b4:	22 f4       	brpl	.+8      	; 0x3be <scanForObjects+0xec>
     3b6:	66 27       	eor	r22, r22
     3b8:	77 27       	eor	r23, r23
     3ba:	68 1b       	sub	r22, r24
     3bc:	79 0b       	sbc	r23, r25
				objects[currObjectIndex].location = (firstDegrees + degrees) / 2;
				objects[currObjectIndex].diameter = (sqrt(2*pow(lastSonarDistance,2) - 2*pow(lastSonarDistance,2) * cos(degreeWidth)) / 5.5);   //Actual diameter calculation	
     3be:	88 27       	eor	r24, r24
     3c0:	77 fd       	sbrc	r23, 7
     3c2:	80 95       	com	r24
     3c4:	98 2f       	mov	r25, r24
     3c6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatsisf>
     3ca:	a8 d7       	rcall	.+3920   	; 0x131c <cos>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c2 01       	movw	r24, r4
     3d2:	b1 01       	movw	r22, r2
     3d4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3d8:	9b 01       	movw	r18, r22
     3da:	ac 01       	movw	r20, r24
     3dc:	c2 01       	movw	r24, r4
     3de:	b1 01       	movw	r22, r2
     3e0:	38 d7       	rcall	.+3696   	; 0x1252 <__subsf3>
     3e2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <sqrt>
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 eb       	ldi	r20, 0xB0	; 176
     3ec:	50 e4       	ldi	r21, 0x40	; 64
     3ee:	99 d7       	rcall	.+3890   	; 0x1322 <__divsf3>
     3f0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixsfsi>
     3f4:	f7 01       	movw	r30, r14
     3f6:	71 83       	std	Z+1, r23	; 0x01
     3f8:	60 83       	st	Z, r22
				objects[currObjectIndex].distance = lastSonarDistance;					
     3fa:	b5 82       	std	Z+5, r11	; 0x05
     3fc:	a4 82       	std	Z+4, r10	; 0x04
				inObject = 0;											//Sensor is no longer on an object
     3fe:	e1 2c       	mov	r14, r1
     400:	f1 2c       	mov	r15, r1
			}	
		
			degrees += 2;
     402:	0e 5f       	subi	r16, 0xFE	; 254
     404:	1f 4f       	sbci	r17, 0xFF	; 255
			wait_ms(200);
     406:	88 ec       	ldi	r24, 0xC8	; 200
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	09 d6       	rcall	.+3090   	; 0x101e <wait_ms>

	while(degrees <= 180)
    {	
		move_servo(degrees);
		wait_ms(800);									//  Allows time for servo to move back to the 0 position
		while (degrees <= 180) {
     40c:	06 3b       	cpi	r16, 0xB6	; 182
     40e:	11 05       	cpc	r17, r1
     410:	09 f0       	breq	.+2      	; 0x414 <scanForObjects+0x142>
     412:	90 cf       	rjmp	.-224    	; 0x334 <scanForObjects+0x62>
     414:	3a c0       	rjmp	.+116    	; 0x48a <scanForObjects+0x1b8>
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     416:	f5 01       	movw	r30, r10
     418:	83 81       	ldd	r24, Z+3	; 0x03
     41a:	8f 93       	push	r24
     41c:	82 81       	ldd	r24, Z+2	; 0x02
     41e:	8f 93       	push	r24
     420:	81 81       	ldd	r24, Z+1	; 0x01
     422:	8f 93       	push	r24
     424:	80 81       	ld	r24, Z
     426:	8f 93       	push	r24
     428:	85 81       	ldd	r24, Z+5	; 0x05
     42a:	8f 93       	push	r24
     42c:	84 81       	ldd	r24, Z+4	; 0x04
     42e:	8f 93       	push	r24
     430:	5f 92       	push	r5
     432:	4f 92       	push	r4
     434:	ff 92       	push	r15
     436:	ef 92       	push	r14
     438:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <sprintf>
     43c:	c2 2c       	mov	r12, r2
     43e:	d3 2c       	mov	r13, r3
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	10 e0       	ldi	r17, 0x00	; 0
     44e:	06 c0       	rjmp	.+12     	; 0x45c <scanForObjects+0x18a>
			USART_Transmit(output[i]);
     450:	f6 01       	movw	r30, r12
     452:	81 91       	ld	r24, Z+
     454:	6f 01       	movw	r12, r30
     456:	20 d6       	rcall	.+3136   	; 0x1098 <USART_Transmit>
	
	for (int i = 0; i < currObjectIndex; i++) {
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
		
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	f7 01       	movw	r30, r14
     45e:	01 90       	ld	r0, Z+
     460:	00 20       	and	r0, r0
     462:	e9 f7       	brne	.-6      	; 0x45e <scanForObjects+0x18c>
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	ee 19       	sub	r30, r14
     468:	ff 09       	sbc	r31, r15
     46a:	0e 17       	cp	r16, r30
     46c:	1f 07       	cpc	r17, r31
     46e:	80 f3       	brcs	.-32     	; 0x450 <scanForObjects+0x17e>
     470:	f6 e0       	ldi	r31, 0x06	; 6
     472:	af 0e       	add	r10, r31
     474:	b1 1c       	adc	r11, r1
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     476:	a8 14       	cp	r10, r8
     478:	b9 04       	cpc	r11, r9
     47a:	69 f6       	brne	.-102    	; 0x416 <scanForObjects+0x144>
     47c:	20 c0       	rjmp	.+64     	; 0x4be <scanForObjects+0x1ec>
				lastIRDistance = irDistance;
				firstDegrees = degrees;
				lastSonarDistance = sonarDistance;	
			}
			
			if(irDistance > 100 && inObject == 1){			// Going out of object	
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	e8 16       	cp	r14, r24
     482:	f1 04       	cpc	r15, r1
     484:	09 f0       	breq	.+2      	; 0x488 <scanForObjects+0x1b6>
     486:	bd cf       	rjmp	.-134    	; 0x402 <scanForObjects+0x130>
     488:	6d cf       	rjmp	.-294    	; 0x364 <scanForObjects+0x92>
			degrees += 2;
			wait_ms(200);
		}
    }
	
	for (int i = 0; i < currObjectIndex; i++) {
     48a:	1c 14       	cp	r1, r12
     48c:	1d 04       	cpc	r1, r13
     48e:	bc f4       	brge	.+46     	; 0x4be <scanForObjects+0x1ec>
     490:	53 01       	movw	r10, r6
     492:	46 01       	movw	r8, r12
     494:	88 0c       	add	r8, r8
     496:	99 1c       	adc	r9, r9
     498:	c8 0c       	add	r12, r8
     49a:	d9 1c       	adc	r13, r9
     49c:	46 01       	movw	r8, r12
     49e:	88 0c       	add	r8, r8
     4a0:	99 1c       	adc	r9, r9
     4a2:	86 0c       	add	r8, r6
     4a4:	97 1c       	adc	r9, r7
		char output[70];
		sprintf(output, "Distance: %-3d cm Diameter: %-2d cm Angle: %-3d degrees\r\n", objects[i].distance, objects[i].diameter, objects[i].location);
     4a6:	0f 2e       	mov	r0, r31
     4a8:	fa eb       	ldi	r31, 0xBA	; 186
     4aa:	4f 2e       	mov	r4, r31
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	5f 2e       	mov	r5, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	fe 01       	movw	r30, r28
     4b4:	31 96       	adiw	r30, 0x01	; 1
     4b6:	7f 01       	movw	r14, r30
     4b8:	2e 2e       	mov	r2, r30
     4ba:	3f 2c       	mov	r3, r15
     4bc:	ac cf       	rjmp	.-168    	; 0x416 <scanForObjects+0x144>
		for(int i = 0; i < strlen(output); i++){		//  Transmit object data
			USART_Transmit(output[i]);
		}
	}
	return objects;
}
     4be:	c3 01       	movw	r24, r6
     4c0:	ca 5b       	subi	r28, 0xBA	; 186
     4c2:	df 4f       	sbci	r29, 0xFF	; 255
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	df 90       	pop	r13
     4dc:	cf 90       	pop	r12
     4de:	bf 90       	pop	r11
     4e0:	af 90       	pop	r10
     4e2:	9f 90       	pop	r9
     4e4:	8f 90       	pop	r8
     4e6:	7f 90       	pop	r7
     4e8:	6f 90       	pop	r6
     4ea:	5f 90       	pop	r5
     4ec:	4f 90       	pop	r4
     4ee:	3f 90       	pop	r3
     4f0:	2f 90       	pop	r2
     4f2:	08 95       	ret

000004f4 <getCommand>:
*  Gets and parses the command from the GUI to control the iRobot Create
*
*  @param sensor_data struct containing all the sensor data for the Create
*/
void getCommand(oi_t *sensor_data)
{
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	27 97       	sbiw	r28, 0x07	; 7
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	8c 01       	movw	r16, r24
	unsigned char command = USART_Receive();
     512:	be d5       	rcall	.+2940   	; 0x1090 <USART_Receive>
	char angleString[4];
	char distanceString[3];
	object_t *foundObjects;
		
	while (!commandRecieved) {
		switch (command) {
     514:	82 37       	cpi	r24, 0x72	; 114
     516:	71 f0       	breq	.+28     	; 0x534 <getCommand+0x40>
     518:	30 f4       	brcc	.+12     	; 0x526 <getCommand+0x32>
     51a:	8d 36       	cpi	r24, 0x6D	; 109
     51c:	49 f1       	breq	.+82     	; 0x570 <getCommand+0x7c>
     51e:	80 37       	cpi	r24, 0x70	; 112
     520:	09 f4       	brne	.+2      	; 0x524 <getCommand+0x30>
     522:	4a c0       	rjmp	.+148    	; 0x5b8 <getCommand+0xc4>
     524:	50 c0       	rjmp	.+160    	; 0x5c6 <getCommand+0xd2>
     526:	83 37       	cpi	r24, 0x73	; 115
     528:	09 f4       	brne	.+2      	; 0x52c <getCommand+0x38>
     52a:	3e c0       	rjmp	.+124    	; 0x5a8 <getCommand+0xb4>
     52c:	86 37       	cpi	r24, 0x76	; 118
     52e:	09 f4       	brne	.+2      	; 0x532 <getCommand+0x3e>
     530:	47 c0       	rjmp	.+142    	; 0x5c0 <getCommand+0xcc>
     532:	49 c0       	rjmp	.+146    	; 0x5c6 <getCommand+0xd2>
			case 'r':			// Rotate iRobot
				for (int i = 0; i < 3; i++) {
					angleString[i] = USART_Receive();
     534:	ad d5       	rcall	.+2906   	; 0x1090 <USART_Receive>
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	ab d5       	rcall	.+2902   	; 0x1090 <USART_Receive>
     53a:	8a 83       	std	Y+2, r24	; 0x02
     53c:	a9 d5       	rcall	.+2898   	; 0x1090 <USART_Receive>
     53e:	8b 83       	std	Y+3, r24	; 0x03
				}
				int degrees = atoi(angleString);
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <atoi>
     548:	e8 2e       	mov	r14, r24
     54a:	f9 2e       	mov	r15, r25
				lprintf("Degrees: %d", degrees);
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	24 ef       	ldi	r18, 0xF4	; 244
     552:	31 e0       	ldi	r19, 0x01	; 1
     554:	3f 93       	push	r19
     556:	2f 93       	push	r18
     558:	20 d1       	rcall	.+576    	; 0x79a <lprintf>
				turn_clockwise(sensor_data, degrees);
     55a:	6e 2d       	mov	r22, r14
     55c:	7f 2d       	mov	r23, r15
     55e:	c8 01       	movw	r24, r16
     560:	b7 d3       	rcall	.+1902   	; 0xcd0 <turn_clockwise>
				transmitSensorData(sensor_data);
     562:	c8 01       	movw	r24, r16
     564:	02 de       	rcall	.-1020   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	2d c0       	rjmp	.+90     	; 0x5ca <getCommand+0xd6>
			case 'm':			// Move iRobot
				for (int i = 0; i < 2; i++) {
					distanceString[i] = USART_Receive();
     570:	8f d5       	rcall	.+2846   	; 0x1090 <USART_Receive>
     572:	8d 83       	std	Y+5, r24	; 0x05
     574:	8d d5       	rcall	.+2842   	; 0x1090 <USART_Receive>
     576:	8e 83       	std	Y+6, r24	; 0x06
				}
				int distance = atoi(distanceString);
     578:	ce 01       	movw	r24, r28
     57a:	05 96       	adiw	r24, 0x05	; 5
     57c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <atoi>
     580:	e8 2e       	mov	r14, r24
     582:	f9 2e       	mov	r15, r25
				lprintf("Distance: %d", distance);
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	32 e0       	ldi	r19, 0x02	; 2
     58c:	3f 93       	push	r19
     58e:	2f 93       	push	r18
     590:	04 d1       	rcall	.+520    	; 0x79a <lprintf>
				move_forward(sensor_data, distance);
     592:	6e 2d       	mov	r22, r14
     594:	7f 2d       	mov	r23, r15
     596:	c8 01       	movw	r24, r16
     598:	a6 d1       	rcall	.+844    	; 0x8e6 <move_forward>
				transmitSensorData(sensor_data);
     59a:	c8 01       	movw	r24, r16
     59c:	e6 dd       	rcall	.-1076   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	11 c0       	rjmp	.+34     	; 0x5ca <getCommand+0xd6>
			case 's':			// Scan for objects
				foundObjects = scanForObjects();
     5a8:	94 de       	rcall	.-728    	; 0x2d2 <scanForObjects>
     5aa:	7c 01       	movw	r14, r24
				transmitSensorData(sensor_data);
     5ac:	c8 01       	movw	r24, r16
     5ae:	dd dd       	rcall	.-1094   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				free(foundObjects);
     5b0:	c7 01       	movw	r24, r14
     5b2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <free>
				break;
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <getCommand+0xd6>
			case 'p':
				oi_play_song(0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	1d d4       	rcall	.+2106   	; 0xdf8 <oi_play_song>
				commandRecieved = 1;
				break;
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <getCommand+0xd6>
			case 'v':
				transmitSensorData(sensor_data);
     5c0:	c8 01       	movw	r24, r16
     5c2:	d3 dd       	rcall	.-1114   	; 0x16a <transmitSensorData>
				commandRecieved = 1;
				break;
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <getCommand+0xd6>
			default:
				command = USART_Receive();
     5c6:	64 d5       	rcall	.+2760   	; 0x1090 <USART_Receive>
     5c8:	a5 cf       	rjmp	.-182    	; 0x514 <getCommand+0x20>
		}	
	}
}
     5ca:	27 96       	adiw	r28, 0x07	; 7
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	08 95       	ret

000005e4 <main>:

}
*/

int main(void)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	e4 97       	sbiw	r28, 0x34	; 52
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
    lcd_init();
     5f8:	7f d0       	rcall	.+254    	; 0x6f8 <lcd_init>
    ADC_init();
     5fa:	f0 d5       	rcall	.+3040   	; 0x11dc <ADC_init>
    pinginit();
     5fc:	bb d5       	rcall	.+2934   	; 0x1174 <pinginit>
    timer3_init();
     5fe:	5e d5       	rcall	.+2748   	; 0x10bc <timer3_init>
	USART_init();
     600:	3b d5       	rcall	.+2678   	; 0x1078 <USART_init>
	
	oi_t *sensor_data = oi_alloc();
     602:	88 d3       	rcall	.+1808   	; 0xd14 <oi_alloc>
     604:	8c 01       	movw	r16, r24
	oi_init(sensor_data);
     606:	c3 d4       	rcall	.+2438   	; 0xf8e <oi_init>
	oi_update(sensor_data);
     608:	c8 01       	movw	r24, r16
     60a:	06 d4       	rcall	.+2060   	; 0xe18 <oi_update>
	
	unsigned char notes[26]  = {72, 67, 69, 67,  0, 72, 67, 69, 67,  0, 72, 72, 72, 72,  0, 72, 72, 72, 72,  0, 72, 71, 72, 71, 72};
     60c:	6a e1       	ldi	r22, 0x1A	; 26
     60e:	ae 01       	movw	r20, r28
     610:	4f 5f       	subi	r20, 0xFF	; 255
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	fa 01       	movw	r30, r20
     616:	86 2f       	mov	r24, r22
     618:	11 92       	st	Z+, r1
     61a:	8a 95       	dec	r24
     61c:	e9 f7       	brne	.-6      	; 0x618 <main+0x34>
     61e:	88 e4       	ldi	r24, 0x48	; 72
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	93 e4       	ldi	r25, 0x43	; 67
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	25 e4       	ldi	r18, 0x45	; 69
     628:	2b 83       	std	Y+3, r18	; 0x03
     62a:	9c 83       	std	Y+4, r25	; 0x04
     62c:	8e 83       	std	Y+6, r24	; 0x06
     62e:	9f 83       	std	Y+7, r25	; 0x07
     630:	28 87       	std	Y+8, r18	; 0x08
     632:	99 87       	std	Y+9, r25	; 0x09
     634:	8b 87       	std	Y+11, r24	; 0x0b
     636:	8c 87       	std	Y+12, r24	; 0x0c
     638:	8d 87       	std	Y+13, r24	; 0x0d
     63a:	8e 87       	std	Y+14, r24	; 0x0e
     63c:	88 8b       	std	Y+16, r24	; 0x10
     63e:	89 8b       	std	Y+17, r24	; 0x11
     640:	8a 8b       	std	Y+18, r24	; 0x12
     642:	8b 8b       	std	Y+19, r24	; 0x13
     644:	8d 8b       	std	Y+21, r24	; 0x15
     646:	97 e4       	ldi	r25, 0x47	; 71
     648:	9e 8b       	std	Y+22, r25	; 0x16
     64a:	8f 8b       	std	Y+23, r24	; 0x17
     64c:	98 8f       	std	Y+24, r25	; 0x18
     64e:	89 8f       	std	Y+25, r24	; 0x19
	unsigned char duration[26]={64, 16, 16, 16, 40, 64, 16, 16, 16, 40, 8,   8, 16, 16, 16, 8,   8, 16, 16, 16, 20, 20, 32, 20, 96};
     650:	9e 01       	movw	r18, r28
     652:	25 5e       	subi	r18, 0xE5	; 229
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	f9 01       	movw	r30, r18
     658:	11 92       	st	Z+, r1
     65a:	6a 95       	dec	r22
     65c:	e9 f7       	brne	.-6      	; 0x658 <main+0x74>
     65e:	60 e4       	ldi	r22, 0x40	; 64
     660:	6b 8f       	std	Y+27, r22	; 0x1b
     662:	80 e1       	ldi	r24, 0x10	; 16
     664:	8c 8f       	std	Y+28, r24	; 0x1c
     666:	8d 8f       	std	Y+29, r24	; 0x1d
     668:	8e 8f       	std	Y+30, r24	; 0x1e
     66a:	98 e2       	ldi	r25, 0x28	; 40
     66c:	9f 8f       	std	Y+31, r25	; 0x1f
     66e:	68 a3       	std	Y+32, r22	; 0x20
     670:	89 a3       	std	Y+33, r24	; 0x21
     672:	8a a3       	std	Y+34, r24	; 0x22
     674:	8b a3       	std	Y+35, r24	; 0x23
     676:	9c a3       	std	Y+36, r25	; 0x24
     678:	98 e0       	ldi	r25, 0x08	; 8
     67a:	9d a3       	std	Y+37, r25	; 0x25
     67c:	9e a3       	std	Y+38, r25	; 0x26
     67e:	8f a3       	std	Y+39, r24	; 0x27
     680:	88 a7       	std	Y+40, r24	; 0x28
     682:	89 a7       	std	Y+41, r24	; 0x29
     684:	9a a7       	std	Y+42, r25	; 0x2a
     686:	9b a7       	std	Y+43, r25	; 0x2b
     688:	8c a7       	std	Y+44, r24	; 0x2c
     68a:	8d a7       	std	Y+45, r24	; 0x2d
     68c:	8e a7       	std	Y+46, r24	; 0x2e
     68e:	84 e1       	ldi	r24, 0x14	; 20
     690:	8f a7       	std	Y+47, r24	; 0x2f
     692:	88 ab       	std	Y+48, r24	; 0x30
     694:	90 e2       	ldi	r25, 0x20	; 32
     696:	99 ab       	std	Y+49, r25	; 0x31
     698:	8a ab       	std	Y+50, r24	; 0x32
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	8b ab       	std	Y+51, r24	; 0x33
 		
	oi_load_song(0, 26, notes, duration);
     69e:	6a e1       	ldi	r22, 0x1A	; 26
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	77 d3       	rcall	.+1774   	; 0xd96 <oi_load_song>
	
	while(1)
    {
		getCommand(sensor_data);
     6a8:	c8 01       	movw	r24, r16
     6aa:	24 df       	rcall	.-440    	; 0x4f4 <getCommand>
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <main+0xc4>

000006ae <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     6ae:	de 9a       	sbi	0x1b, 6	; 27
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	b5 d4       	rcall	.+2410   	; 0x101e <wait_ms>
     6b4:	de 98       	cbi	0x1b, 6	; 27
     6b6:	8b b3       	in	r24, 0x1b	; 27
     6b8:	80 7f       	andi	r24, 0xF0	; 240
     6ba:	8b bb       	out	0x1b, r24	; 27
     6bc:	08 95       	ret

000006be <lcd_command>:
     6be:	cf 93       	push	r28
     6c0:	c8 2f       	mov	r28, r24
     6c2:	dc 98       	cbi	0x1b, 4	; 27
     6c4:	8b b3       	in	r24, 0x1b	; 27
     6c6:	9c 2f       	mov	r25, r28
     6c8:	92 95       	swap	r25
     6ca:	9f 70       	andi	r25, 0x0F	; 15
     6cc:	89 2b       	or	r24, r25
     6ce:	8b bb       	out	0x1b, r24	; 27
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	ed df       	rcall	.-38     	; 0x6ae <lcd_toggle_clear>
     6d4:	8b b3       	in	r24, 0x1b	; 27
     6d6:	cf 70       	andi	r28, 0x0F	; 15
     6d8:	c8 2b       	or	r28, r24
     6da:	cb bb       	out	0x1b, r28	; 27
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	e7 df       	rcall	.-50     	; 0x6ae <lcd_toggle_clear>
     6e0:	dc 9a       	sbi	0x1b, 4	; 27
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <lcd_clear>:
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	ea df       	rcall	.-44     	; 0x6be <lcd_command>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	97 c4       	rjmp	.+2350   	; 0x101e <wait_ms>
     6f0:	08 95       	ret

000006f2 <lcd_home_line1>:
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	e4 cf       	rjmp	.-56     	; 0x6be <lcd_command>
     6f6:	08 95       	ret

000006f8 <lcd_init>:
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	8a bb       	out	0x1a, r24	; 26
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	8b bb       	out	0x1b, r24	; 27
     700:	de 9a       	sbi	0x1b, 6	; 27
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	8b d4       	rcall	.+2326   	; 0x101e <wait_ms>
     708:	de 98       	cbi	0x1b, 6	; 27
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	87 d4       	rcall	.+2318   	; 0x101e <wait_ms>
     710:	de 9a       	sbi	0x1b, 6	; 27
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	83 d4       	rcall	.+2310   	; 0x101e <wait_ms>
     718:	de 98       	cbi	0x1b, 6	; 27
     71a:	de 9a       	sbi	0x1b, 6	; 27
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	7e d4       	rcall	.+2300   	; 0x101e <wait_ms>
     722:	de 98       	cbi	0x1b, 6	; 27
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	8b bb       	out	0x1b, r24	; 27
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	c1 df       	rcall	.-126    	; 0x6ae <lcd_toggle_clear>
     72c:	8b b3       	in	r24, 0x1b	; 27
     72e:	8b bb       	out	0x1b, r24	; 27
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	bd df       	rcall	.-134    	; 0x6ae <lcd_toggle_clear>
     734:	8b b3       	in	r24, 0x1b	; 27
     736:	8e 60       	ori	r24, 0x0E	; 14
     738:	8b bb       	out	0x1b, r24	; 27
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	b8 df       	rcall	.-144    	; 0x6ae <lcd_toggle_clear>
     73e:	8b b3       	in	r24, 0x1b	; 27
     740:	8b bb       	out	0x1b, r24	; 27
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	b4 df       	rcall	.-152    	; 0x6ae <lcd_toggle_clear>
     746:	8b b3       	in	r24, 0x1b	; 27
     748:	86 60       	ori	r24, 0x06	; 6
     74a:	8b bb       	out	0x1b, r24	; 27
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	af df       	rcall	.-162    	; 0x6ae <lcd_toggle_clear>
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	8b bb       	out	0x1b, r24	; 27
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	ab df       	rcall	.-170    	; 0x6ae <lcd_toggle_clear>
     758:	d8 9a       	sbi	0x1b, 0	; 27
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	a8 df       	rcall	.-176    	; 0x6ae <lcd_toggle_clear>
     75e:	dc 9a       	sbi	0x1b, 4	; 27
     760:	c8 cf       	rjmp	.-112    	; 0x6f2 <lcd_home_line1>
     762:	08 95       	ret

00000764 <lcd_home_line2>:
     764:	80 ec       	ldi	r24, 0xC0	; 192
     766:	ab cf       	rjmp	.-170    	; 0x6be <lcd_command>
     768:	08 95       	ret

0000076a <lcd_home_line3>:
     76a:	84 e9       	ldi	r24, 0x94	; 148
     76c:	a8 cf       	rjmp	.-176    	; 0x6be <lcd_command>
     76e:	08 95       	ret

00000770 <lcd_home_line4>:
     770:	84 ed       	ldi	r24, 0xD4	; 212
     772:	a5 cf       	rjmp	.-182    	; 0x6be <lcd_command>
     774:	08 95       	ret

00000776 <lcd_putc>:
     776:	cf 93       	push	r28
     778:	c8 2f       	mov	r28, r24
     77a:	8b b3       	in	r24, 0x1b	; 27
     77c:	9c 2f       	mov	r25, r28
     77e:	92 95       	swap	r25
     780:	9f 70       	andi	r25, 0x0F	; 15
     782:	89 2b       	or	r24, r25
     784:	8b bb       	out	0x1b, r24	; 27
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	92 df       	rcall	.-220    	; 0x6ae <lcd_toggle_clear>
     78a:	8b b3       	in	r24, 0x1b	; 27
     78c:	cf 70       	andi	r28, 0x0F	; 15
     78e:	c8 2b       	or	r28, r24
     790:	cb bb       	out	0x1b, r28	; 27
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	8c df       	rcall	.-232    	; 0x6ae <lcd_toggle_clear>
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	c1 55       	subi	r28, 0x51	; 81
     7b0:	d1 09       	sbc	r29, r1
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	fe 01       	movw	r30, r28
     7be:	e4 5a       	subi	r30, 0xA4	; 164
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	41 91       	ld	r20, Z+
     7c4:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     7c6:	9f 01       	movw	r18, r30
     7c8:	61 e5       	ldi	r22, 0x51	; 81
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	86 ee       	ldi	r24, 0xE6	; 230
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <strcmp>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <lprintf+0x4e>
     7e6:	43 c0       	rjmp	.+134    	; 0x86e <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	86 ee       	ldi	r24, 0xE6	; 230
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <strcpy>
	lcd_clear();
     7f6:	77 df       	rcall	.-274    	; 0x6e6 <lcd_clear>
     7f8:	9e 01       	movw	r18, r28
     7fa:	2f 5f       	subi	r18, 0xFF	; 255
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     800:	00 e0       	ldi	r16, 0x00	; 0
     802:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     804:	0f 2e       	mov	r0, r31
     806:	f4 e1       	ldi	r31, 0x14	; 20
     808:	ef 2e       	mov	r14, r31
     80a:	f1 2c       	mov	r15, r1
     80c:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     80e:	27 c0       	rjmp	.+78     	; 0x85e <lprintf+0xc4>
		if (*str == '\n') {
     810:	8a 30       	cpi	r24, 0x0A	; 10
     812:	51 f4       	brne	.+20     	; 0x828 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     814:	c8 01       	movw	r24, r16
     816:	b7 01       	movw	r22, r14
     818:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divmodhi4>
     81c:	f7 01       	movw	r30, r14
     81e:	e8 1b       	sub	r30, r24
     820:	f9 0b       	sbc	r31, r25
     822:	0e 0f       	add	r16, r30
     824:	1f 1f       	adc	r17, r31
     826:	03 c0       	rjmp	.+6      	; 0x82e <lprintf+0x94>
		} else {
			lcd_putc(*str);
     828:	a6 df       	rcall	.-180    	; 0x776 <lcd_putc>
			charnum++;
     82a:	0f 5f       	subi	r16, 0xFF	; 255
     82c:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     82e:	c8 01       	movw	r24, r16
     830:	b7 01       	movw	r22, r14
     832:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divmodhi4>
     836:	89 2b       	or	r24, r25
     838:	91 f4       	brne	.+36     	; 0x85e <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     83a:	c8 01       	movw	r24, r16
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divmodhi4>
     842:	62 30       	cpi	r22, 0x02	; 2
     844:	71 05       	cpc	r23, r1
     846:	41 f0       	breq	.+16     	; 0x858 <lprintf+0xbe>
     848:	63 30       	cpi	r22, 0x03	; 3
     84a:	71 05       	cpc	r23, r1
     84c:	39 f0       	breq	.+14     	; 0x85c <lprintf+0xc2>
     84e:	61 30       	cpi	r22, 0x01	; 1
     850:	71 05       	cpc	r23, r1
     852:	29 f4       	brne	.+10     	; 0x85e <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     854:	87 df       	rcall	.-242    	; 0x764 <lcd_home_line2>
				break;
     856:	03 c0       	rjmp	.+6      	; 0x85e <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     858:	88 df       	rcall	.-240    	; 0x76a <lcd_home_line3>
				break;
     85a:	01 c0       	rjmp	.+2      	; 0x85e <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     85c:	89 df       	rcall	.-238    	; 0x770 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     85e:	f6 01       	movw	r30, r12
     860:	81 91       	ld	r24, Z+
     862:	6f 01       	movw	r12, r30
     864:	88 23       	and	r24, r24
     866:	19 f0       	breq	.+6      	; 0x86e <lprintf+0xd4>
     868:	00 35       	cpi	r16, 0x50	; 80
     86a:	11 05       	cpc	r17, r1
     86c:	8c f2       	brlt	.-94     	; 0x810 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     86e:	cf 5a       	subi	r28, 0xAF	; 175
     870:	df 4f       	sbci	r29, 0xFF	; 255
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <move_backward>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create backward
 */
void move_backward(oi_t *sensor, int centimeters)
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	8c 01       	movw	r16, r24
	int sum = centimeters * 10;
     898:	eb 01       	movw	r28, r22
     89a:	cc 0f       	add	r28, r28
     89c:	dd 1f       	adc	r29, r29
     89e:	66 0f       	add	r22, r22
     8a0:	77 1f       	adc	r23, r23
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	c6 0f       	add	r28, r22
     8ac:	d7 1f       	adc	r29, r23
	oi_set_wheels(-200, -200); // move backwards
     8ae:	68 e3       	ldi	r22, 0x38	; 56
     8b0:	7f ef       	ldi	r23, 0xFF	; 255
     8b2:	88 e3       	ldi	r24, 0x38	; 56
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	58 d2       	rcall	.+1200   	; 0xd68 <oi_set_wheels>
	while (sum > 0) {
     8b8:	1c 16       	cp	r1, r28
     8ba:	1d 06       	cpc	r1, r29
     8bc:	54 f4       	brge	.+20     	; 0x8d2 <move_backward+0x44>
		oi_update(sensor);
     8be:	c8 01       	movw	r24, r16
     8c0:	ab d2       	rcall	.+1366   	; 0xe18 <oi_update>
		sum += sensor->distance;
     8c2:	f8 01       	movw	r30, r16
     8c4:	84 85       	ldd	r24, Z+12	; 0x0c
     8c6:	95 85       	ldd	r25, Z+13	; 0x0d
     8c8:	c8 0f       	add	r28, r24
     8ca:	d9 1f       	adc	r29, r25
 */
void move_backward(oi_t *sensor, int centimeters)
{
	int sum = centimeters * 10;
	oi_set_wheels(-200, -200); // move backwards
	while (sum > 0) {
     8cc:	1c 16       	cp	r1, r28
     8ce:	1d 06       	cpc	r1, r29
     8d0:	b4 f3       	brlt	.-20     	; 0x8be <move_backward+0x30>
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	46 d2       	rcall	.+1164   	; 0xd68 <oi_set_wheels>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <move_forward>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create forward
 */
void move_forward(oi_t *sensor, int centimeters) 
{
     8e6:	af 92       	push	r10
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	a0 97       	sbiw	r28, 0x20	; 32
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	8c 01       	movw	r16, r24
     90c:	7b 01       	movw	r14, r22
	int sum = 0;
	oi_update(sensor);
     90e:	84 d2       	rcall	.+1288   	; 0xe18 <oi_update>
	oi_set_wheels(200, 200); // move forward
     910:	68 ec       	ldi	r22, 0xC8	; 200
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	88 ec       	ldi	r24, 0xC8	; 200
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	27 d2       	rcall	.+1102   	; 0xd68 <oi_set_wheels>
	while (sum < centimeters * 10) {
     91a:	67 01       	movw	r12, r14
     91c:	cc 0c       	add	r12, r12
     91e:	dd 1c       	adc	r13, r13
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	ee 0c       	add	r14, r14
     926:	ff 1c       	adc	r15, r15
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	ce 0c       	add	r12, r14
     92e:	df 1c       	adc	r13, r15
     930:	1c 14       	cp	r1, r12
     932:	1d 04       	cpc	r1, r13
     934:	0c f0       	brlt	.+2      	; 0x938 <move_forward+0x52>
     936:	b6 c1       	rjmp	.+876    	; 0xca4 <move_forward+0x3be>
			char message[]="RED DOT -> DONE!";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			//enter_lz(sensor);
			break;
		} */
		if (sensor->bumper_left==1){
     938:	f8 01       	movw	r30, r16
     93a:	80 81       	ld	r24, Z
     93c:	81 fd       	sbrc	r24, 1
     93e:	13 c0       	rjmp	.+38     	; 0x966 <move_forward+0x80>
			char message[]="bumper_left";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->bumper_right==1){
     940:	80 fd       	sbrc	r24, 0
     942:	39 c0       	rjmp	.+114    	; 0x9b6 <move_forward+0xd0>
			char message[]="bumper_right";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_left==1){
     944:	82 81       	ldd	r24, Z+2	; 0x02
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	09 f4       	brne	.+2      	; 0x94c <move_forward+0x66>
     94a:	5f c0       	rjmp	.+190    	; 0xa0a <move_forward+0x124>
			char message[]="cliff_leftCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_frontleft==1){
     94c:	83 81       	ldd	r24, Z+3	; 0x03
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	09 f4       	brne	.+2      	; 0x954 <move_forward+0x6e>
     952:	85 c0       	rjmp	.+266    	; 0xa5e <move_forward+0x178>
			char message[]="cliff_frontleftCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
	    else if(sensor->cliff_right==1){
     954:	85 81       	ldd	r24, Z+5	; 0x05
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	09 f0       	breq	.+2      	; 0x95c <move_forward+0x76>
     95a:	d1 c0       	rjmp	.+418    	; 0xafe <move_forward+0x218>
     95c:	aa c0       	rjmp	.+340    	; 0xab2 <move_forward+0x1cc>
			char message[]="RED DOT -> DONE!";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			//enter_lz(sensor);
			break;
		} */
		if (sensor->bumper_left==1){
     95e:	f8 01       	movw	r30, r16
     960:	80 81       	ld	r24, Z
     962:	81 ff       	sbrs	r24, 1
     964:	26 c0       	rjmp	.+76     	; 0x9b2 <move_forward+0xcc>
			char message[]="bumper_left";
     966:	8c e0       	ldi	r24, 0x0C	; 12
     968:	ed e0       	ldi	r30, 0x0D	; 13
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	de 01       	movw	r26, r28
     96e:	11 96       	adiw	r26, 0x01	; 1
     970:	01 90       	ld	r0, Z+
     972:	0d 92       	st	X+, r0
     974:	8a 95       	dec	r24
     976:	e1 f7       	brne	.-8      	; 0x970 <move_forward+0x8a>
     978:	ce 01       	movw	r24, r28
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     97e:	e1 2c       	mov	r14, r1
     980:	f1 2c       	mov	r15, r1
     982:	6c 01       	movw	r12, r24
     984:	07 c0       	rjmp	.+14     	; 0x994 <move_forward+0xae>
     986:	f5 01       	movw	r30, r10
     988:	81 91       	ld	r24, Z+
     98a:	5f 01       	movw	r10, r30
     98c:	85 d3       	rcall	.+1802   	; 0x1098 <USART_Transmit>
     98e:	ff ef       	ldi	r31, 0xFF	; 255
     990:	ef 1a       	sub	r14, r31
     992:	ff 0a       	sbc	r15, r31
     994:	f6 01       	movw	r30, r12
     996:	01 90       	ld	r0, Z+
     998:	00 20       	and	r0, r0
     99a:	e9 f7       	brne	.-6      	; 0x996 <move_forward+0xb0>
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	ec 19       	sub	r30, r12
     9a0:	fd 09       	sbc	r31, r13
     9a2:	ee 16       	cp	r14, r30
     9a4:	ff 06       	cpc	r15, r31
     9a6:	78 f3       	brcs	.-34     	; 0x986 <move_forward+0xa0>
			move_backward(sensor, 10);
     9a8:	6a e0       	ldi	r22, 0x0A	; 10
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	c8 01       	movw	r24, r16
     9ae:	6f df       	rcall	.-290    	; 0x88e <move_backward>
     9b0:	79 c1       	rjmp	.+754    	; 0xca4 <move_forward+0x3be>
			break;
		}
		else if(sensor->bumper_right==1){
     9b2:	80 ff       	sbrs	r24, 0
     9b4:	26 c0       	rjmp	.+76     	; 0xa02 <move_forward+0x11c>
			char message[]="bumper_right";
     9b6:	8d e0       	ldi	r24, 0x0D	; 13
     9b8:	e9 e1       	ldi	r30, 0x19	; 25
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	de 01       	movw	r26, r28
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	8a 95       	dec	r24
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <move_forward+0xda>
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     9ce:	e1 2c       	mov	r14, r1
     9d0:	f1 2c       	mov	r15, r1
     9d2:	6c 01       	movw	r12, r24
     9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <move_forward+0xfe>
     9d6:	f5 01       	movw	r30, r10
     9d8:	81 91       	ld	r24, Z+
     9da:	5f 01       	movw	r10, r30
     9dc:	5d d3       	rcall	.+1722   	; 0x1098 <USART_Transmit>
     9de:	ff ef       	ldi	r31, 0xFF	; 255
     9e0:	ef 1a       	sub	r14, r31
     9e2:	ff 0a       	sbc	r15, r31
     9e4:	f6 01       	movw	r30, r12
     9e6:	01 90       	ld	r0, Z+
     9e8:	00 20       	and	r0, r0
     9ea:	e9 f7       	brne	.-6      	; 0x9e6 <move_forward+0x100>
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	ec 19       	sub	r30, r12
     9f0:	fd 09       	sbc	r31, r13
     9f2:	ee 16       	cp	r14, r30
     9f4:	ff 06       	cpc	r15, r31
     9f6:	78 f3       	brcs	.-34     	; 0x9d6 <move_forward+0xf0>
			move_backward(sensor, 10);
     9f8:	6a e0       	ldi	r22, 0x0A	; 10
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	c8 01       	movw	r24, r16
     9fe:	47 df       	rcall	.-370    	; 0x88e <move_backward>
     a00:	51 c1       	rjmp	.+674    	; 0xca4 <move_forward+0x3be>
			break;
		}
		else if(sensor->cliff_left==1){
     a02:	f8 01       	movw	r30, r16
     a04:	82 81       	ldd	r24, Z+2	; 0x02
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	31 f5       	brne	.+76     	; 0xa56 <move_forward+0x170>
			char message[]="cliff_leftCLIFF";
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	e6 e2       	ldi	r30, 0x26	; 38
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	de 01       	movw	r26, r28
     a12:	11 96       	adiw	r26, 0x01	; 1
     a14:	01 90       	ld	r0, Z+
     a16:	0d 92       	st	X+, r0
     a18:	8a 95       	dec	r24
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <move_forward+0x12e>
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     a22:	e1 2c       	mov	r14, r1
     a24:	f1 2c       	mov	r15, r1
     a26:	6c 01       	movw	r12, r24
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <move_forward+0x152>
     a2a:	f5 01       	movw	r30, r10
     a2c:	81 91       	ld	r24, Z+
     a2e:	5f 01       	movw	r10, r30
     a30:	33 d3       	rcall	.+1638   	; 0x1098 <USART_Transmit>
     a32:	ff ef       	ldi	r31, 0xFF	; 255
     a34:	ef 1a       	sub	r14, r31
     a36:	ff 0a       	sbc	r15, r31
     a38:	f6 01       	movw	r30, r12
     a3a:	01 90       	ld	r0, Z+
     a3c:	00 20       	and	r0, r0
     a3e:	e9 f7       	brne	.-6      	; 0xa3a <move_forward+0x154>
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	ec 19       	sub	r30, r12
     a44:	fd 09       	sbc	r31, r13
     a46:	ee 16       	cp	r14, r30
     a48:	ff 06       	cpc	r15, r31
     a4a:	78 f3       	brcs	.-34     	; 0xa2a <move_forward+0x144>
			move_backward(sensor, 10);
     a4c:	6a e0       	ldi	r22, 0x0A	; 10
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	c8 01       	movw	r24, r16
     a52:	1d df       	rcall	.-454    	; 0x88e <move_backward>
     a54:	27 c1       	rjmp	.+590    	; 0xca4 <move_forward+0x3be>
			break;
		}
		else if(sensor->cliff_frontleft==1){
     a56:	f8 01       	movw	r30, r16
     a58:	83 81       	ldd	r24, Z+3	; 0x03
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	31 f5       	brne	.+76     	; 0xaaa <move_forward+0x1c4>
			char message[]="cliff_frontleftCLIFF";
     a5e:	85 e1       	ldi	r24, 0x15	; 21
     a60:	e6 e3       	ldi	r30, 0x36	; 54
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	de 01       	movw	r26, r28
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <move_forward+0x182>
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     a76:	e1 2c       	mov	r14, r1
     a78:	f1 2c       	mov	r15, r1
     a7a:	6c 01       	movw	r12, r24
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <move_forward+0x1a6>
     a7e:	f5 01       	movw	r30, r10
     a80:	81 91       	ld	r24, Z+
     a82:	5f 01       	movw	r10, r30
     a84:	09 d3       	rcall	.+1554   	; 0x1098 <USART_Transmit>
     a86:	ff ef       	ldi	r31, 0xFF	; 255
     a88:	ef 1a       	sub	r14, r31
     a8a:	ff 0a       	sbc	r15, r31
     a8c:	f6 01       	movw	r30, r12
     a8e:	01 90       	ld	r0, Z+
     a90:	00 20       	and	r0, r0
     a92:	e9 f7       	brne	.-6      	; 0xa8e <move_forward+0x1a8>
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	ec 19       	sub	r30, r12
     a98:	fd 09       	sbc	r31, r13
     a9a:	ee 16       	cp	r14, r30
     a9c:	ff 06       	cpc	r15, r31
     a9e:	78 f3       	brcs	.-34     	; 0xa7e <move_forward+0x198>
			move_backward(sensor, 10);
     aa0:	6a e0       	ldi	r22, 0x0A	; 10
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	c8 01       	movw	r24, r16
     aa6:	f3 de       	rcall	.-538    	; 0x88e <move_backward>
     aa8:	fd c0       	rjmp	.+506    	; 0xca4 <move_forward+0x3be>
			break;
		}
	    else if(sensor->cliff_right==1){
     aaa:	f8 01       	movw	r30, r16
     aac:	85 81       	ldd	r24, Z+5	; 0x05
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	41 f5       	brne	.+80     	; 0xb02 <move_forward+0x21c>
			char message[]="cliff_rightCLIFF";
     ab2:	81 e1       	ldi	r24, 0x11	; 17
     ab4:	eb e4       	ldi	r30, 0x4B	; 75
     ab6:	f2 e0       	ldi	r31, 0x02	; 2
     ab8:	de 01       	movw	r26, r28
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	01 90       	ld	r0, Z+
     abe:	0d 92       	st	X+, r0
     ac0:	8a 95       	dec	r24
     ac2:	e1 f7       	brne	.-8      	; 0xabc <move_forward+0x1d6>
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     aca:	e1 2c       	mov	r14, r1
     acc:	f1 2c       	mov	r15, r1
     ace:	6c 01       	movw	r12, r24
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <move_forward+0x1fa>
     ad2:	f5 01       	movw	r30, r10
     ad4:	81 91       	ld	r24, Z+
     ad6:	5f 01       	movw	r10, r30
     ad8:	df d2       	rcall	.+1470   	; 0x1098 <USART_Transmit>
     ada:	ff ef       	ldi	r31, 0xFF	; 255
     adc:	ef 1a       	sub	r14, r31
     ade:	ff 0a       	sbc	r15, r31
     ae0:	f6 01       	movw	r30, r12
     ae2:	01 90       	ld	r0, Z+
     ae4:	00 20       	and	r0, r0
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <move_forward+0x1fc>
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	ec 19       	sub	r30, r12
     aec:	fd 09       	sbc	r31, r13
     aee:	ee 16       	cp	r14, r30
     af0:	ff 06       	cpc	r15, r31
     af2:	78 f3       	brcs	.-34     	; 0xad2 <move_forward+0x1ec>
			move_backward(sensor, 10);
     af4:	6a e0       	ldi	r22, 0x0A	; 10
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	c8 01       	movw	r24, r16
     afa:	c9 de       	rcall	.-622    	; 0x88e <move_backward>
     afc:	d3 c0       	rjmp	.+422    	; 0xca4 <move_forward+0x3be>
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param centimeters the number of centimeters to move the Create forward
 */
void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
     afe:	e1 2c       	mov	r14, r1
     b00:	f1 2c       	mov	r15, r1
			char message[]="cliff_rightCLIFF";
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
			move_backward(sensor, 10);
			break;
		}
		else if(sensor->cliff_frontright==1){
     b02:	f8 01       	movw	r30, r16
     b04:	84 81       	ldd	r24, Z+4	; 0x04
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	31 f5       	brne	.+76     	; 0xb56 <move_forward+0x270>
			char message[]="cliff_frontrightCLIFF";
     b0a:	86 e1       	ldi	r24, 0x16	; 22
     b0c:	ec e5       	ldi	r30, 0x5C	; 92
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
     b10:	de 01       	movw	r26, r28
     b12:	11 96       	adiw	r26, 0x01	; 1
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	8a 95       	dec	r24
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <move_forward+0x22e>
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	5c 01       	movw	r10, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     b22:	e1 2c       	mov	r14, r1
     b24:	f1 2c       	mov	r15, r1
     b26:	6c 01       	movw	r12, r24
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <move_forward+0x252>
     b2a:	f5 01       	movw	r30, r10
     b2c:	81 91       	ld	r24, Z+
     b2e:	5f 01       	movw	r10, r30
     b30:	b3 d2       	rcall	.+1382   	; 0x1098 <USART_Transmit>
     b32:	ff ef       	ldi	r31, 0xFF	; 255
     b34:	ef 1a       	sub	r14, r31
     b36:	ff 0a       	sbc	r15, r31
     b38:	f6 01       	movw	r30, r12
     b3a:	01 90       	ld	r0, Z+
     b3c:	00 20       	and	r0, r0
     b3e:	e9 f7       	brne	.-6      	; 0xb3a <move_forward+0x254>
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	ec 19       	sub	r30, r12
     b44:	fd 09       	sbc	r31, r13
     b46:	ee 16       	cp	r14, r30
     b48:	ff 06       	cpc	r15, r31
     b4a:	78 f3       	brcs	.-34     	; 0xb2a <move_forward+0x244>
			move_backward(sensor, 10);
     b4c:	6a e0       	ldi	r22, 0x0A	; 10
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	c8 01       	movw	r24, r16
     b52:	9d de       	rcall	.-710    	; 0x88e <move_backward>
     b54:	a7 c0       	rjmp	.+334    	; 0xca4 <move_forward+0x3be>
			break;
		}
//		else if(sensor->cliff_left_signal>400 && sensor->cliff_left_signal<700){   robot 17
	else if(sensor->cliff_left_signal>700){
     b56:	f8 01       	movw	r30, r16
     b58:	84 8d       	ldd	r24, Z+28	; 0x1c
     b5a:	95 8d       	ldd	r25, Z+29	; 0x1d
     b5c:	8d 3b       	cpi	r24, 0xBD	; 189
     b5e:	92 40       	sbci	r25, 0x02	; 2
     b60:	08 f1       	brcs	.+66     	; 0xba4 <move_forward+0x2be>
			char message[]="cliff_left_signal>600WALL";
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	e2 e7       	ldi	r30, 0x72	; 114
     b66:	f2 e0       	ldi	r31, 0x02	; 2
     b68:	de 01       	movw	r26, r28
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	01 90       	ld	r0, Z+
     b6e:	0d 92       	st	X+, r0
     b70:	8a 95       	dec	r24
     b72:	e1 f7       	brne	.-8      	; 0xb6c <move_forward+0x286>
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     b7a:	00 e0       	ldi	r16, 0x00	; 0
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	7c 01       	movw	r14, r24
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <move_forward+0x2a8>
     b82:	f6 01       	movw	r30, r12
     b84:	81 91       	ld	r24, Z+
     b86:	6f 01       	movw	r12, r30
     b88:	87 d2       	rcall	.+1294   	; 0x1098 <USART_Transmit>
     b8a:	0f 5f       	subi	r16, 0xFF	; 255
     b8c:	1f 4f       	sbci	r17, 0xFF	; 255
     b8e:	f7 01       	movw	r30, r14
     b90:	01 90       	ld	r0, Z+
     b92:	00 20       	and	r0, r0
     b94:	e9 f7       	brne	.-6      	; 0xb90 <move_forward+0x2aa>
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	ee 19       	sub	r30, r14
     b9a:	ff 09       	sbc	r31, r15
     b9c:	0e 17       	cp	r16, r30
     b9e:	1f 07       	cpc	r17, r31
     ba0:	80 f3       	brcs	.-32     	; 0xb82 <move_forward+0x29c>
     ba2:	80 c0       	rjmp	.+256    	; 0xca4 <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_frontleft_signal>700 && sensor->cliff_frontleft_signal<950){
		else if(sensor->cliff_frontleft_signal>700){
     ba4:	f8 01       	movw	r30, r16
     ba6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ba8:	97 8d       	ldd	r25, Z+31	; 0x1f
     baa:	8d 3b       	cpi	r24, 0xBD	; 189
     bac:	92 40       	sbci	r25, 0x02	; 2
     bae:	08 f1       	brcs	.+66     	; 0xbf2 <move_forward+0x30c>
			char message[]="cliff_frontleft_signal>600WALL";
     bb0:	8f e1       	ldi	r24, 0x1F	; 31
     bb2:	ec e8       	ldi	r30, 0x8C	; 140
     bb4:	f2 e0       	ldi	r31, 0x02	; 2
     bb6:	de 01       	movw	r26, r28
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	01 90       	ld	r0, Z+
     bbc:	0d 92       	st	X+, r0
     bbe:	8a 95       	dec	r24
     bc0:	e1 f7       	brne	.-8      	; 0xbba <move_forward+0x2d4>
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	7c 01       	movw	r14, r24
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <move_forward+0x2f6>
     bd0:	f6 01       	movw	r30, r12
     bd2:	81 91       	ld	r24, Z+
     bd4:	6f 01       	movw	r12, r30
     bd6:	60 d2       	rcall	.+1216   	; 0x1098 <USART_Transmit>
     bd8:	0f 5f       	subi	r16, 0xFF	; 255
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	f7 01       	movw	r30, r14
     bde:	01 90       	ld	r0, Z+
     be0:	00 20       	and	r0, r0
     be2:	e9 f7       	brne	.-6      	; 0xbde <move_forward+0x2f8>
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	ee 19       	sub	r30, r14
     be8:	ff 09       	sbc	r31, r15
     bea:	0e 17       	cp	r16, r30
     bec:	1f 07       	cpc	r17, r31
     bee:	80 f3       	brcs	.-32     	; 0xbd0 <move_forward+0x2ea>
     bf0:	59 c0       	rjmp	.+178    	; 0xca4 <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_right_signal>360 && sensor->cliff_right_signal<800){
		else if(sensor->cliff_right_signal>700){
     bf2:	f8 01       	movw	r30, r16
     bf4:	82 a1       	ldd	r24, Z+34	; 0x22
     bf6:	93 a1       	ldd	r25, Z+35	; 0x23
     bf8:	8d 3b       	cpi	r24, 0xBD	; 189
     bfa:	92 40       	sbci	r25, 0x02	; 2
     bfc:	08 f1       	brcs	.+66     	; 0xc40 <move_forward+0x35a>
			char message[]="cliff_right_signal>350WALL";
     bfe:	8b e1       	ldi	r24, 0x1B	; 27
     c00:	eb ea       	ldi	r30, 0xAB	; 171
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	de 01       	movw	r26, r28
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	01 90       	ld	r0, Z+
     c0a:	0d 92       	st	X+, r0
     c0c:	8a 95       	dec	r24
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <move_forward+0x322>
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     c16:	00 e0       	ldi	r16, 0x00	; 0
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	7c 01       	movw	r14, r24
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <move_forward+0x344>
     c1e:	f6 01       	movw	r30, r12
     c20:	81 91       	ld	r24, Z+
     c22:	6f 01       	movw	r12, r30
     c24:	39 d2       	rcall	.+1138   	; 0x1098 <USART_Transmit>
     c26:	0f 5f       	subi	r16, 0xFF	; 255
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	f7 01       	movw	r30, r14
     c2c:	01 90       	ld	r0, Z+
     c2e:	00 20       	and	r0, r0
     c30:	e9 f7       	brne	.-6      	; 0xc2c <move_forward+0x346>
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	ee 19       	sub	r30, r14
     c36:	ff 09       	sbc	r31, r15
     c38:	0e 17       	cp	r16, r30
     c3a:	1f 07       	cpc	r17, r31
     c3c:	80 f3       	brcs	.-32     	; 0xc1e <move_forward+0x338>
     c3e:	32 c0       	rjmp	.+100    	; 0xca4 <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}
//		else if(sensor->cliff_frontright_signal>300 && sensor->cliff_frontright_signal<700){
		else if(sensor->cliff_frontright_signal>700){
     c40:	f8 01       	movw	r30, r16
     c42:	80 a1       	ldd	r24, Z+32	; 0x20
     c44:	91 a1       	ldd	r25, Z+33	; 0x21
     c46:	8d 3b       	cpi	r24, 0xBD	; 189
     c48:	92 40       	sbci	r25, 0x02	; 2
     c4a:	08 f1       	brcs	.+66     	; 0xc8e <move_forward+0x3a8>
			char message[]="cliff_frontright_signal>350WALL";
     c4c:	80 e2       	ldi	r24, 0x20	; 32
     c4e:	e6 ec       	ldi	r30, 0xC6	; 198
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	de 01       	movw	r26, r28
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	01 90       	ld	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	8a 95       	dec	r24
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <move_forward+0x370>
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	6c 01       	movw	r12, r24
			for(int i=0;i<strlen(message);i++){USART_Transmit(message[i]);}
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	7c 01       	movw	r14, r24
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <move_forward+0x392>
     c6c:	f6 01       	movw	r30, r12
     c6e:	81 91       	ld	r24, Z+
     c70:	6f 01       	movw	r12, r30
     c72:	12 d2       	rcall	.+1060   	; 0x1098 <USART_Transmit>
     c74:	0f 5f       	subi	r16, 0xFF	; 255
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	f7 01       	movw	r30, r14
     c7a:	01 90       	ld	r0, Z+
     c7c:	00 20       	and	r0, r0
     c7e:	e9 f7       	brne	.-6      	; 0xc7a <move_forward+0x394>
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	ee 19       	sub	r30, r14
     c84:	ff 09       	sbc	r31, r15
     c86:	0e 17       	cp	r16, r30
     c88:	1f 07       	cpc	r17, r31
     c8a:	80 f3       	brcs	.-32     	; 0xc6c <move_forward+0x386>
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <move_forward+0x3be>
			//move_backward(sensor, 10);
			break;
		}		
		
		
		oi_update(sensor);
     c8e:	c8 01       	movw	r24, r16
     c90:	c3 d0       	rcall	.+390    	; 0xe18 <oi_update>
		sum += sensor->distance;
     c92:	f8 01       	movw	r30, r16
     c94:	84 85       	ldd	r24, Z+12	; 0x0c
     c96:	95 85       	ldd	r25, Z+13	; 0x0d
     c98:	e8 0e       	add	r14, r24
     c9a:	f9 1e       	adc	r15, r25
void move_forward(oi_t *sensor, int centimeters) 
{
	int sum = 0;
	oi_update(sensor);
	oi_set_wheels(200, 200); // move forward
	while (sum < centimeters * 10) {
     c9c:	ec 14       	cp	r14, r12
     c9e:	fd 04       	cpc	r15, r13
     ca0:	0c f4       	brge	.+2      	; 0xca4 <move_forward+0x3be>
     ca2:	5d ce       	rjmp	.-838    	; 0x95e <move_forward+0x78>
		
		
		oi_update(sensor);
		sum += sensor->distance;
	}
	oi_set_wheels(0, 0); // stop
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	5d d0       	rcall	.+186    	; 0xd68 <oi_set_wheels>
}
     cae:	a0 96       	adiw	r28, 0x20	; 32
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	08 95       	ret

00000cd0 <turn_clockwise>:
 *
 *  @param sensor a struct containing the data from all the sensors onboard the Create
 *  @param degrees the number of degrees to rotate the Create clockwise
 */
void turn_clockwise(oi_t *sensor, int degrees)
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8c 01       	movw	r16, r24
     cda:	eb 01       	movw	r28, r22
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
     cdc:	66 e9       	ldi	r22, 0x96	; 150
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	8a e6       	ldi	r24, 0x6A	; 106
     ce2:	9f ef       	ldi	r25, 0xFF	; 255
     ce4:	41 d0       	rcall	.+130    	; 0xd68 <oi_set_wheels>
	while (sum > 0) {
     ce6:	1c 16       	cp	r1, r28
     ce8:	1d 06       	cpc	r1, r29
     cea:	54 f4       	brge	.+20     	; 0xd00 <turn_clockwise+0x30>
		oi_update(sensor);
     cec:	c8 01       	movw	r24, r16
     cee:	94 d0       	rcall	.+296    	; 0xe18 <oi_update>
		sum += sensor->angle;
     cf0:	f8 01       	movw	r30, r16
     cf2:	86 85       	ldd	r24, Z+14	; 0x0e
     cf4:	97 85       	ldd	r25, Z+15	; 0x0f
     cf6:	c8 0f       	add	r28, r24
     cf8:	d9 1f       	adc	r29, r25
 */
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = degrees;
	oi_set_wheels(-150, 150);  // start turning 
	while (sum > 0) {
     cfa:	1c 16       	cp	r1, r28
     cfc:	1d 06       	cpc	r1, r29
     cfe:	b4 f3       	brlt	.-20     	; 0xcec <turn_clockwise+0x1c>
		oi_update(sensor);
		sum += sensor->angle;
	}
	oi_set_wheels(0, 0);		// stop turning
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2f d0       	rcall	.+94     	; 0xd68 <oi_set_wheels>
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     d14:	64 e3       	ldi	r22, 0x34	; 52
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	ab c6       	rjmp	.+3414   	; 0x1a74 <calloc>
     d1e:	08 95       	ret

00000d20 <oi_byte_tx>:
     d20:	eb e9       	ldi	r30, 0x9B	; 155
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	90 81       	ld	r25, Z
     d26:	95 ff       	sbrs	r25, 5
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <oi_byte_tx+0x4>
     d2a:	80 93 9c 00 	sts	0x009C, r24
     d2e:	08 95       	ret

00000d30 <oi_set_leds>:
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	08 2f       	mov	r16, r24
     d3a:	16 2f       	mov	r17, r22
     d3c:	d4 2f       	mov	r29, r20
     d3e:	c2 2f       	mov	r28, r18
     d40:	8b e8       	ldi	r24, 0x8B	; 139
     d42:	ee df       	rcall	.-36     	; 0xd20 <oi_byte_tx>
     d44:	11 23       	and	r17, r17
     d46:	29 f0       	breq	.+10     	; 0xd52 <oi_set_leds+0x22>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	01 11       	cpse	r16, r1
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <oi_set_leds+0x24>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <oi_set_leds+0x24>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	e5 df       	rcall	.-54     	; 0xd20 <oi_byte_tx>
     d56:	8d 2f       	mov	r24, r29
     d58:	e3 df       	rcall	.-58     	; 0xd20 <oi_byte_tx>
     d5a:	8c 2f       	mov	r24, r28
     d5c:	e1 df       	rcall	.-62     	; 0xd20 <oi_byte_tx>
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <oi_set_wheels>:
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	18 2f       	mov	r17, r24
     d72:	09 2f       	mov	r16, r25
     d74:	c6 2f       	mov	r28, r22
     d76:	d7 2f       	mov	r29, r23
     d78:	81 e9       	ldi	r24, 0x91	; 145
     d7a:	d2 df       	rcall	.-92     	; 0xd20 <oi_byte_tx>
     d7c:	80 2f       	mov	r24, r16
     d7e:	d0 df       	rcall	.-96     	; 0xd20 <oi_byte_tx>
     d80:	81 2f       	mov	r24, r17
     d82:	ce df       	rcall	.-100    	; 0xd20 <oi_byte_tx>
     d84:	8d 2f       	mov	r24, r29
     d86:	cc df       	rcall	.-104    	; 0xd20 <oi_byte_tx>
     d88:	8c 2f       	mov	r24, r28
     d8a:	ca df       	rcall	.-108    	; 0xd20 <oi_byte_tx>
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <oi_load_song>:
     d96:	af 92       	push	r10
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	c8 2f       	mov	r28, r24
     dac:	7b 01       	movw	r14, r22
     dae:	6a 01       	movw	r12, r20
     db0:	a2 2e       	mov	r10, r18
     db2:	b3 2e       	mov	r11, r19
     db4:	8c e8       	ldi	r24, 0x8C	; 140
     db6:	b4 df       	rcall	.-152    	; 0xd20 <oi_byte_tx>
     db8:	8c 2f       	mov	r24, r28
     dba:	b2 df       	rcall	.-156    	; 0xd20 <oi_byte_tx>
     dbc:	8e 2d       	mov	r24, r14
     dbe:	b0 df       	rcall	.-160    	; 0xd20 <oi_byte_tx>
     dc0:	1e 14       	cp	r1, r14
     dc2:	1f 04       	cpc	r1, r15
     dc4:	74 f4       	brge	.+28     	; 0xde2 <oi_load_song+0x4c>
     dc6:	e6 01       	movw	r28, r12
     dc8:	0a 2d       	mov	r16, r10
     dca:	1b 2d       	mov	r17, r11
     dcc:	ec 0c       	add	r14, r12
     dce:	fd 1c       	adc	r15, r13
     dd0:	89 91       	ld	r24, Y+
     dd2:	a6 df       	rcall	.-180    	; 0xd20 <oi_byte_tx>
     dd4:	f8 01       	movw	r30, r16
     dd6:	81 91       	ld	r24, Z+
     dd8:	8f 01       	movw	r16, r30
     dda:	a2 df       	rcall	.-188    	; 0xd20 <oi_byte_tx>
     ddc:	ce 15       	cp	r28, r14
     dde:	df 05       	cpc	r29, r15
     de0:	b9 f7       	brne	.-18     	; 0xdd0 <oi_load_song+0x3a>
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	08 95       	ret

00000df8 <oi_play_song>:
     df8:	cf 93       	push	r28
     dfa:	c8 2f       	mov	r28, r24
     dfc:	8d e8       	ldi	r24, 0x8D	; 141
     dfe:	90 df       	rcall	.-224    	; 0xd20 <oi_byte_tx>
     e00:	8c 2f       	mov	r24, r28
     e02:	8e df       	rcall	.-228    	; 0xd20 <oi_byte_tx>
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     e08:	eb e9       	ldi	r30, 0x9B	; 155
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	ec f7       	brge	.-6      	; 0xe0c <oi_byte_rx+0x4>

	return UDR1;
     e12:	80 91 9c 00 	lds	r24, 0x009C
}
     e16:	08 95       	ret

00000e18 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     e26:	80 91 9b 00 	lds	r24, 0x009B
     e2a:	88 23       	and	r24, r24
     e2c:	44 f4       	brge	.+16     	; 0xe3e <oi_update+0x26>
		i = UDR1;
     e2e:	ac e9       	ldi	r26, 0x9C	; 156
     e30:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     e32:	eb e9       	ldi	r30, 0x9B	; 155
     e34:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     e36:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	e4 f3       	brlt	.-8      	; 0xe36 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     e3e:	8e e8       	ldi	r24, 0x8E	; 142
     e40:	6f df       	rcall	.-290    	; 0xd20 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	6d df       	rcall	.-294    	; 0xd20 <oi_byte_tx>
     e46:	e7 01       	movw	r28, r14
     e48:	87 01       	movw	r16, r14
     e4a:	0c 5c       	subi	r16, 0xCC	; 204
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     e4e:	dc df       	rcall	.-72     	; 0xe08 <oi_byte_rx>
     e50:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     e52:	c0 17       	cp	r28, r16
     e54:	d1 07       	cpc	r29, r17
     e56:	d9 f7       	brne	.-10     	; 0xe4e <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     e58:	f7 01       	movw	r30, r14
     e5a:	84 85       	ldd	r24, Z+12	; 0x0c
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	98 2f       	mov	r25, r24
     e60:	88 27       	eor	r24, r24
     e62:	25 85       	ldd	r18, Z+13	; 0x0d
     e64:	82 0f       	add	r24, r18
     e66:	91 1d       	adc	r25, r1
     e68:	95 87       	std	Z+13, r25	; 0x0d
     e6a:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     e6c:	86 85       	ldd	r24, Z+14	; 0x0e
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	98 2f       	mov	r25, r24
     e72:	88 27       	eor	r24, r24
     e74:	27 85       	ldd	r18, Z+15	; 0x0f
     e76:	82 0f       	add	r24, r18
     e78:	91 1d       	adc	r25, r1
     e7a:	97 87       	std	Z+15, r25	; 0x0f
     e7c:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     e7e:	81 89       	ldd	r24, Z+17	; 0x11
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	98 2f       	mov	r25, r24
     e84:	88 27       	eor	r24, r24
     e86:	22 89       	ldd	r18, Z+18	; 0x12
     e88:	82 0f       	add	r24, r18
     e8a:	91 1d       	adc	r25, r1
     e8c:	92 8b       	std	Z+18, r25	; 0x12
     e8e:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     e90:	83 89       	ldd	r24, Z+19	; 0x13
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	98 2f       	mov	r25, r24
     e96:	88 27       	eor	r24, r24
     e98:	24 89       	ldd	r18, Z+20	; 0x14
     e9a:	82 0f       	add	r24, r18
     e9c:	91 1d       	adc	r25, r1
     e9e:	94 8b       	std	Z+20, r25	; 0x14
     ea0:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     ea2:	86 89       	ldd	r24, Z+22	; 0x16
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	98 2f       	mov	r25, r24
     ea8:	88 27       	eor	r24, r24
     eaa:	27 89       	ldd	r18, Z+23	; 0x17
     eac:	82 0f       	add	r24, r18
     eae:	91 1d       	adc	r25, r1
     eb0:	97 8b       	std	Z+23, r25	; 0x17
     eb2:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     eb4:	80 8d       	ldd	r24, Z+24	; 0x18
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	98 2f       	mov	r25, r24
     eba:	88 27       	eor	r24, r24
     ebc:	21 8d       	ldd	r18, Z+25	; 0x19
     ebe:	82 0f       	add	r24, r18
     ec0:	91 1d       	adc	r25, r1
     ec2:	91 8f       	std	Z+25, r25	; 0x19
     ec4:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     ec6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	98 2f       	mov	r25, r24
     ecc:	88 27       	eor	r24, r24
     ece:	23 8d       	ldd	r18, Z+27	; 0x1b
     ed0:	82 0f       	add	r24, r18
     ed2:	91 1d       	adc	r25, r1
     ed4:	93 8f       	std	Z+27, r25	; 0x1b
     ed6:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     ed8:	84 8d       	ldd	r24, Z+28	; 0x1c
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	98 2f       	mov	r25, r24
     ede:	88 27       	eor	r24, r24
     ee0:	25 8d       	ldd	r18, Z+29	; 0x1d
     ee2:	82 0f       	add	r24, r18
     ee4:	91 1d       	adc	r25, r1
     ee6:	95 8f       	std	Z+29, r25	; 0x1d
     ee8:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     eea:	86 8d       	ldd	r24, Z+30	; 0x1e
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	98 2f       	mov	r25, r24
     ef0:	88 27       	eor	r24, r24
     ef2:	27 8d       	ldd	r18, Z+31	; 0x1f
     ef4:	82 0f       	add	r24, r18
     ef6:	91 1d       	adc	r25, r1
     ef8:	97 8f       	std	Z+31, r25	; 0x1f
     efa:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     efc:	80 a1       	ldd	r24, Z+32	; 0x20
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	98 2f       	mov	r25, r24
     f02:	88 27       	eor	r24, r24
     f04:	21 a1       	ldd	r18, Z+33	; 0x21
     f06:	82 0f       	add	r24, r18
     f08:	91 1d       	adc	r25, r1
     f0a:	91 a3       	std	Z+33, r25	; 0x21
     f0c:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     f0e:	82 a1       	ldd	r24, Z+34	; 0x22
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	98 2f       	mov	r25, r24
     f14:	88 27       	eor	r24, r24
     f16:	23 a1       	ldd	r18, Z+35	; 0x23
     f18:	82 0f       	add	r24, r18
     f1a:	91 1d       	adc	r25, r1
     f1c:	93 a3       	std	Z+35, r25	; 0x23
     f1e:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     f20:	82 a5       	ldd	r24, Z+42	; 0x2a
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	21 a5       	ldd	r18, Z+41	; 0x29
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	32 2f       	mov	r19, r18
     f2a:	22 27       	eor	r18, r18
     f2c:	28 0f       	add	r18, r24
     f2e:	39 1f       	adc	r19, r25
     f30:	36 a3       	std	Z+38, r19	; 0x26
     f32:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     f34:	20 a9       	ldd	r18, Z+48	; 0x30
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	32 2f       	mov	r19, r18
     f3a:	22 27       	eor	r18, r18
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	95 a7       	std	Z+45, r25	; 0x2d
     f42:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     f44:	82 a9       	ldd	r24, Z+50	; 0x32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	98 2f       	mov	r25, r24
     f4a:	88 27       	eor	r24, r24
     f4c:	23 a9       	ldd	r18, Z+51	; 0x33
     f4e:	82 0f       	add	r24, r18
     f50:	91 1d       	adc	r25, r1
     f52:	97 a7       	std	Z+47, r25	; 0x2f
     f54:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     f56:	84 a9       	ldd	r24, Z+52	; 0x34
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 27       	eor	r24, r24
     f5e:	25 a9       	ldd	r18, Z+53	; 0x35
     f60:	82 0f       	add	r24, r18
     f62:	91 1d       	adc	r25, r1
     f64:	91 ab       	std	Z+49, r25	; 0x31
     f66:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     f68:	86 a9       	ldd	r24, Z+54	; 0x36
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	98 2f       	mov	r25, r24
     f6e:	88 27       	eor	r24, r24
     f70:	27 a9       	ldd	r18, Z+55	; 0x37
     f72:	82 0f       	add	r24, r18
     f74:	91 1d       	adc	r25, r1
     f76:	93 ab       	std	Z+51, r25	; 0x33
     f78:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     f7a:	83 e2       	ldi	r24, 0x23	; 35
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	4f d0       	rcall	.+158    	; 0x101e <wait_ms>
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	08 95       	ret

00000f8e <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     f98:	09 e9       	ldi	r16, 0x99	; 153
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	80 e1       	ldi	r24, 0x10	; 16
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     fa2:	88 e1       	ldi	r24, 0x18	; 24
     fa4:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	b7 de       	rcall	.-658    	; 0xd20 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     fb2:	81 e8       	ldi	r24, 0x81	; 129
     fb4:	b5 de       	rcall	.-662    	; 0xd20 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	b3 de       	rcall	.-666    	; 0xd20 <oi_byte_tx>
	wait_ms(100);
     fba:	84 e6       	ldi	r24, 0x64	; 100
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	2f d0       	rcall	.+94     	; 0x101e <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     fc0:	81 e2       	ldi	r24, 0x21	; 33
     fc2:	f8 01       	movw	r30, r16
     fc4:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     fc6:	84 e8       	ldi	r24, 0x84	; 132
     fc8:	ab de       	rcall	.-682    	; 0xd20 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	47 e0       	ldi	r20, 0x07	; 7
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	ae de       	rcall	.-676    	; 0xd30 <oi_set_leds>
	
	oi_update(self);
     fd4:	ce 01       	movw	r24, r28
     fd6:	20 df       	rcall	.-448    	; 0xe18 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     fd8:	ce 01       	movw	r24, r28
     fda:	1e df       	rcall	.-452    	; 0xe18 <oi_update>
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <timer2_start>:
}

/// Start timer2
void timer2_start(char unit) 
{
	timer2_tick=0;
     fe6:	10 92 45 03 	sts	0x0345, r1
     fea:	10 92 44 03 	sts	0x0344, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     fee:	81 11       	cpse	r24, r1
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     ff2:	8b e0       	ldi	r24, 0x0B	; 11
     ff4:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     ff6:	87 b7       	in	r24, 0x37	; 55
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	87 bf       	out	0x37, r24	; 55
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	29 f4       	brne	.+10     	; 0x100c <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    1002:	89 e0       	ldi	r24, 0x09	; 9
    1004:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    1006:	87 b7       	in	r24, 0x37	; 55
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    100c:	78 94       	sei
    100e:	08 95       	ret

00001010 <timer2_stop>:
}

/// Stop timer2
void timer2_stop() 
{
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    1010:	87 b7       	in	r24, 0x37	; 55
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    1016:	85 b5       	in	r24, 0x25	; 37
    1018:	8f 77       	andi	r24, 0x7F	; 127
    101a:	85 bd       	out	0x25, r24	; 37
    101c:	08 95       	ret

0000101e <wait_ms>:
void timer2_start(char unit);
void timer2_stop();

/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) 
{
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    1024:	8a ef       	ldi	r24, 0xFA	; 250
    1026:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1028:	10 92 45 03 	sts	0x0345, r1
    102c:	10 92 44 03 	sts	0x0344, r1
	timer2_start(0);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	d9 df       	rcall	.-78     	; 0xfe6 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    1034:	20 91 44 03 	lds	r18, 0x0344
    1038:	30 91 45 03 	lds	r19, 0x0345
    103c:	2c 17       	cp	r18, r28
    103e:	3d 07       	cpc	r19, r29
    1040:	c8 f3       	brcs	.-14     	; 0x1034 <wait_ms+0x16>

	timer2_stop();
    1042:	e6 df       	rcall	.-52     	; 0x1010 <timer2_stop>
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}

/// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) 
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
	timer2_tick++;
    1058:	80 91 44 03 	lds	r24, 0x0344
    105c:	90 91 45 03 	lds	r25, 0x0345
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	90 93 45 03 	sts	0x0345, r25
    1066:	80 93 44 03 	sts	0x0344, r24
}
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <USART_init>:
/// Initalize USART registers
void USART_init()
{
	unsigned int baud = 34;
	
	UBRR0H = (unsigned char)(baud >> 8);
    1078:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
    107c:	82 e2       	ldi	r24, 0x22	; 34
    107e:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	8b b9       	out	0x0b, r24	; 11
	UCSR0C = 0b00001110;
    1084:	8e e0       	ldi	r24, 0x0E	; 14
    1086:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00011000;
    108a:	88 e1       	ldi	r24, 0x18	; 24
    108c:	8a b9       	out	0x0a, r24	; 10
    108e:	08 95       	ret

00001090 <USART_Receive>:
 *  @return the recieved character 
 */
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ((UCSR0A & 0b10000000) == 0);
    1090:	5f 9b       	sbis	0x0b, 7	; 11
    1092:	fe cf       	rjmp	.-4      	; 0x1090 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
    1094:	8c b1       	in	r24, 0x0c	; 12
}
    1096:	08 95       	ret

00001098 <USART_Transmit>:
 *  @param data the character to be transmitted
 */
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0) {}
    1098:	5d 9b       	sbis	0x0b, 5	; 11
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <USART_Transmit>

	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
    109c:	8c b9       	out	0x0c, r24	; 12
    109e:	08 95       	ret

000010a0 <move_servo>:
 *
 *  @param degree angle to rotate the servo to
 */		
int move_servo(int degree)
{
	int conv = 20*degree+800;
    10a0:	24 e1       	ldi	r18, 0x14	; 20
    10a2:	ac 01       	movw	r20, r24
    10a4:	24 9f       	mul	r18, r20
    10a6:	c0 01       	movw	r24, r0
    10a8:	25 9f       	mul	r18, r21
    10aa:	90 0d       	add	r25, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	80 5e       	subi	r24, 0xE0	; 224
    10b0:	9c 4f       	sbci	r25, 0xFC	; 252
	OCR3B = conv;
    10b2:	90 93 85 00 	sts	0x0085, r25
    10b6:	80 93 84 00 	sts	0x0084, r24
	return conv;
}
    10ba:	08 95       	ret

000010bc <timer3_init>:

/// Initalize Timer 3 registers
void timer3_init(void)
{
	TCCR3A = 0b00100011;
    10bc:	83 e2       	ldi	r24, 0x23	; 35
    10be:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;
    10c2:	8a e1       	ldi	r24, 0x1A	; 26
    10c4:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = 0b1010011111111000;
    10c8:	88 ef       	ldi	r24, 0xF8	; 248
    10ca:	97 ea       	ldi	r25, 0xA7	; 167
    10cc:	90 93 87 00 	sts	0x0087, r25
    10d0:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 800;	
    10d4:	80 e2       	ldi	r24, 0x20	; 32
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	90 93 85 00 	sts	0x0085, r25
    10dc:	80 93 84 00 	sts	0x0084, r24
	DDRE = 0b00010000;
    10e0:	80 e1       	ldi	r24, 0x10	; 16
    10e2:	82 b9       	out	0x02, r24	; 2
    10e4:	08 95       	ret

000010e6 <send_pulse>:
}

/// Send pulse on wire to control Ping sensor
void send_pulse(void)
{
	DDRD |=0x10;
    10e6:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
    10e8:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	97 df       	rcall	.-210    	; 0x101e <wait_ms>
	PORTD &=0xEF;
    10f0:	94 98       	cbi	0x12, 4	; 18
	DDRD &=0xEF;
    10f2:	8c 98       	cbi	0x11, 4	; 17
    10f4:	08 95       	ret

000010f6 <__vector_11>:
}

ISR(TIMER1_CAPT_vect)
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
	if(State==RISING){
    1108:	80 91 43 03 	lds	r24, 0x0343
    110c:	81 11       	cpse	r24, r1
    110e:	13 c0       	rjmp	.+38     	; 0x1136 <__stack+0x37>
		rising_time=ICR1;
    1110:	86 b5       	in	r24, 0x26	; 38
    1112:	97 b5       	in	r25, 0x27	; 39
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	80 93 3f 03 	sts	0x033F, r24
    111c:	90 93 40 03 	sts	0x0340, r25
    1120:	a0 93 41 03 	sts	0x0341, r26
    1124:	b0 93 42 03 	sts	0x0342, r27
		State = FALLING;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 43 03 	sts	0x0343, r24
		TCCR1B &= 0b10111111;
    112e:	8e b5       	in	r24, 0x2e	; 46
    1130:	8f 7b       	andi	r24, 0xBF	; 191
    1132:	8e bd       	out	0x2e, r24	; 46
    1134:	16 c0       	rjmp	.+44     	; 0x1162 <__stack+0x63>
	}
	else if(State==FALLING){
    1136:	80 91 43 03 	lds	r24, 0x0343
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 f4       	brne	.+36     	; 0x1162 <__stack+0x63>
		falling_time=ICR1;
    113e:	86 b5       	in	r24, 0x26	; 38
    1140:	97 b5       	in	r25, 0x27	; 39
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	80 93 3b 03 	sts	0x033B, r24
    114a:	90 93 3c 03 	sts	0x033C, r25
    114e:	a0 93 3d 03 	sts	0x033D, r26
    1152:	b0 93 3e 03 	sts	0x033E, r27
		State = DONE;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	80 93 43 03 	sts	0x0343, r24
		TCCR1B |= 0b01000000;
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	8e bd       	out	0x2e, r24	; 46
	}
}
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <pinginit>:

/// Initalize Ping sonar sensor
void pinginit(void)
{
	TIFR = 0b00000000;
    1174:	16 be       	out	0x36, r1	; 54
	TCCR1B = 0b11000011;
    1176:	83 ec       	ldi	r24, 0xC3	; 195
    1178:	8e bd       	out	0x2e, r24	; 46
    117a:	08 95       	ret

0000117c <getPingDistance>:
	int ping =0;
	int centimeters=0;
	
	int milliseconds = 0;
	//for (int i=0;i<5;i++){
	State=RISING;
    117c:	10 92 43 03 	sts	0x0343, r1
	TIMSK &= 0b11011111;
    1180:	87 b7       	in	r24, 0x37	; 55
    1182:	8f 7d       	andi	r24, 0xDF	; 223
    1184:	87 bf       	out	0x37, r24	; 55
	send_pulse();
    1186:	af df       	rcall	.-162    	; 0x10e6 <send_pulse>
	TIFR |= 0b00100000;
    1188:	86 b7       	in	r24, 0x36	; 54
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 0b00100000;
    118e:	87 b7       	in	r24, 0x37	; 55
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	87 bf       	out	0x37, r24	; 55
	
	while (State != DONE){
    1194:	80 91 43 03 	lds	r24, 0x0343
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	e1 f7       	brne	.-8      	; 0x1194 <getPingDistance+0x18>
		// lprintf("NOt Done");
		// wait_ms(1000);
	}
	
	ping = falling_time-rising_time;
    119c:	40 91 3b 03 	lds	r20, 0x033B
    11a0:	50 91 3c 03 	lds	r21, 0x033C
    11a4:	60 91 3d 03 	lds	r22, 0x033D
    11a8:	70 91 3e 03 	lds	r23, 0x033E
    11ac:	80 91 3f 03 	lds	r24, 0x033F
    11b0:	90 91 40 03 	lds	r25, 0x0340
    11b4:	a0 91 41 03 	lds	r26, 0x0341
    11b8:	b0 91 42 03 	lds	r27, 0x0342
    11bc:	ba 01       	movw	r22, r20
    11be:	68 1b       	sub	r22, r24
    11c0:	79 0b       	sbc	r23, r25
	milliseconds = ping / 250;
	centimeters = ping / 14.70588;
    11c2:	88 27       	eor	r24, r24
    11c4:	77 fd       	sbrc	r23, 7
    11c6:	80 95       	com	r24
    11c8:	98 2f       	mov	r25, r24
    11ca:	46 d1       	rcall	.+652    	; 0x1458 <__floatsisf>
    11cc:	29 e4       	ldi	r18, 0x49	; 73
    11ce:	3b e4       	ldi	r19, 0x4B	; 75
    11d0:	4b e6       	ldi	r20, 0x6B	; 107
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	a6 d0       	rcall	.+332    	; 0x1322 <__divsf3>
    11d6:	0d d1       	rcall	.+538    	; 0x13f2 <__fixsfsi>
	
	return centimeters;
}
    11d8:	cb 01       	movw	r24, r22
    11da:	08 95       	ret

000011dc <ADC_init>:

/// Initalize Analog-Digital Conversion registers
void ADC_init(void)
{
	ADMUX=0b11000010;
    11dc:	82 ec       	ldi	r24, 0xC2	; 194
    11de:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10000111;
    11e0:	87 e8       	ldi	r24, 0x87	; 135
    11e2:	86 b9       	out	0x06, r24	; 6
    11e4:	08 95       	ret

000011e6 <ADC_read>:
 *
 *  @return digital integer value of the analog signal between 0-1023 
 */
int ADC_read(void)
{
	ADCSRA |= 0b01000000;
    11e6:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 0b01000000){}
    11e8:	36 99       	sbic	0x06, 6	; 6
    11ea:	fe cf       	rjmp	.-4      	; 0x11e8 <ADC_read+0x2>
	return ADC;
    11ec:	84 b1       	in	r24, 0x04	; 4
    11ee:	95 b1       	in	r25, 0x05	; 5
}
    11f0:	08 95       	ret

000011f2 <getIrDistance>:
 *  Returns the distance of an object based on the IR sensor reaing 
 *
 *  @return distance in centimeters of detected object
 */
int getIrDistance(void)
{
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	c5 e0       	ldi	r28, 0x05	; 5
    11fc:	d0 e0       	ldi	r29, 0x00	; 0
	int avgsum = 0;
    11fe:	00 e0       	ldi	r16, 0x00	; 0
    1200:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		avgsum += ADC_read();
    1202:	f1 df       	rcall	.-30     	; 0x11e6 <ADC_read>
    1204:	08 0f       	add	r16, r24
    1206:	19 1f       	adc	r17, r25
    1208:	21 97       	sbiw	r28, 0x01	; 1
 *  @return distance in centimeters of detected object
 */
int getIrDistance(void)
{
	int avgsum = 0;
	for (int i = 0; i < 5; i++) {
    120a:	20 97       	sbiw	r28, 0x00	; 0
    120c:	d1 f7       	brne	.-12     	; 0x1202 <getIrDistance+0x10>
		avgsum += ADC_read();
	}
	value1 = avgsum / 5;
    120e:	c8 01       	movw	r24, r16
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	08 d4       	rcall	.+2064   	; 0x1a26 <__divmodhi4>
    1216:	70 93 38 03 	sts	0x0338, r23
    121a:	60 93 37 03 	sts	0x0337, r22
	distance = 24443*pow(value1,(-1.156));
    121e:	88 27       	eor	r24, r24
    1220:	77 fd       	sbrc	r23, 7
    1222:	80 95       	com	r24
    1224:	98 2f       	mov	r25, r24
    1226:	18 d1       	rcall	.+560    	; 0x1458 <__floatsisf>
    1228:	2f ec       	ldi	r18, 0xCF	; 207
    122a:	37 ef       	ldi	r19, 0xF7	; 247
    122c:	43 e9       	ldi	r20, 0x93	; 147
    122e:	5f eb       	ldi	r21, 0xBF	; 191
    1230:	3b d2       	rcall	.+1142   	; 0x16a8 <pow>
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	36 ef       	ldi	r19, 0xF6	; 246
    1236:	4e eb       	ldi	r20, 0xBE	; 190
    1238:	56 e4       	ldi	r21, 0x46	; 70
    123a:	d3 d1       	rcall	.+934    	; 0x15e2 <__mulsf3>
    123c:	da d0       	rcall	.+436    	; 0x13f2 <__fixsfsi>
    123e:	70 93 3a 03 	sts	0x033A, r23
    1242:	60 93 39 03 	sts	0x0339, r22
	return distance;
    1246:	cb 01       	movw	r24, r22
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	08 95       	ret

00001252 <__subsf3>:
    1252:	50 58       	subi	r21, 0x80	; 128

00001254 <__addsf3>:
    1254:	bb 27       	eor	r27, r27
    1256:	aa 27       	eor	r26, r26
    1258:	0e d0       	rcall	.+28     	; 0x1276 <__addsf3x>
    125a:	78 c1       	rjmp	.+752    	; 0x154c <__fp_round>
    125c:	41 d1       	rcall	.+642    	; 0x14e0 <__fp_pscA>
    125e:	30 f0       	brcs	.+12     	; 0x126c <__addsf3+0x18>
    1260:	46 d1       	rcall	.+652    	; 0x14ee <__fp_pscB>
    1262:	20 f0       	brcs	.+8      	; 0x126c <__addsf3+0x18>
    1264:	31 f4       	brne	.+12     	; 0x1272 <__addsf3+0x1e>
    1266:	9f 3f       	cpi	r25, 0xFF	; 255
    1268:	11 f4       	brne	.+4      	; 0x126e <__addsf3+0x1a>
    126a:	1e f4       	brtc	.+6      	; 0x1272 <__addsf3+0x1e>
    126c:	36 c1       	rjmp	.+620    	; 0x14da <__fp_nan>
    126e:	0e f4       	brtc	.+2      	; 0x1272 <__addsf3+0x1e>
    1270:	e0 95       	com	r30
    1272:	e7 fb       	bst	r30, 7
    1274:	2c c1       	rjmp	.+600    	; 0x14ce <__fp_inf>

00001276 <__addsf3x>:
    1276:	e9 2f       	mov	r30, r25
    1278:	8b d1       	rcall	.+790    	; 0x1590 <__fp_split3>
    127a:	80 f3       	brcs	.-32     	; 0x125c <__addsf3+0x8>
    127c:	ba 17       	cp	r27, r26
    127e:	62 07       	cpc	r22, r18
    1280:	73 07       	cpc	r23, r19
    1282:	84 07       	cpc	r24, r20
    1284:	95 07       	cpc	r25, r21
    1286:	18 f0       	brcs	.+6      	; 0x128e <__addsf3x+0x18>
    1288:	71 f4       	brne	.+28     	; 0x12a6 <__addsf3x+0x30>
    128a:	9e f5       	brtc	.+102    	; 0x12f2 <__addsf3x+0x7c>
    128c:	a3 c1       	rjmp	.+838    	; 0x15d4 <__fp_zero>
    128e:	0e f4       	brtc	.+2      	; 0x1292 <__addsf3x+0x1c>
    1290:	e0 95       	com	r30
    1292:	0b 2e       	mov	r0, r27
    1294:	ba 2f       	mov	r27, r26
    1296:	a0 2d       	mov	r26, r0
    1298:	0b 01       	movw	r0, r22
    129a:	b9 01       	movw	r22, r18
    129c:	90 01       	movw	r18, r0
    129e:	0c 01       	movw	r0, r24
    12a0:	ca 01       	movw	r24, r20
    12a2:	a0 01       	movw	r20, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	ff 27       	eor	r31, r31
    12a8:	59 1b       	sub	r21, r25
    12aa:	99 f0       	breq	.+38     	; 0x12d2 <__addsf3x+0x5c>
    12ac:	59 3f       	cpi	r21, 0xF9	; 249
    12ae:	50 f4       	brcc	.+20     	; 0x12c4 <__addsf3x+0x4e>
    12b0:	50 3e       	cpi	r21, 0xE0	; 224
    12b2:	68 f1       	brcs	.+90     	; 0x130e <__addsf3x+0x98>
    12b4:	1a 16       	cp	r1, r26
    12b6:	f0 40       	sbci	r31, 0x00	; 0
    12b8:	a2 2f       	mov	r26, r18
    12ba:	23 2f       	mov	r18, r19
    12bc:	34 2f       	mov	r19, r20
    12be:	44 27       	eor	r20, r20
    12c0:	58 5f       	subi	r21, 0xF8	; 248
    12c2:	f3 cf       	rjmp	.-26     	; 0x12aa <__addsf3x+0x34>
    12c4:	46 95       	lsr	r20
    12c6:	37 95       	ror	r19
    12c8:	27 95       	ror	r18
    12ca:	a7 95       	ror	r26
    12cc:	f0 40       	sbci	r31, 0x00	; 0
    12ce:	53 95       	inc	r21
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__addsf3x+0x4e>
    12d2:	7e f4       	brtc	.+30     	; 0x12f2 <__addsf3x+0x7c>
    12d4:	1f 16       	cp	r1, r31
    12d6:	ba 0b       	sbc	r27, r26
    12d8:	62 0b       	sbc	r22, r18
    12da:	73 0b       	sbc	r23, r19
    12dc:	84 0b       	sbc	r24, r20
    12de:	ba f0       	brmi	.+46     	; 0x130e <__addsf3x+0x98>
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	a1 f0       	breq	.+40     	; 0x130c <__addsf3x+0x96>
    12e4:	ff 0f       	add	r31, r31
    12e6:	bb 1f       	adc	r27, r27
    12e8:	66 1f       	adc	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	c2 f7       	brpl	.-16     	; 0x12e0 <__addsf3x+0x6a>
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <__addsf3x+0x98>
    12f2:	ba 0f       	add	r27, r26
    12f4:	62 1f       	adc	r22, r18
    12f6:	73 1f       	adc	r23, r19
    12f8:	84 1f       	adc	r24, r20
    12fa:	48 f4       	brcc	.+18     	; 0x130e <__addsf3x+0x98>
    12fc:	87 95       	ror	r24
    12fe:	77 95       	ror	r23
    1300:	67 95       	ror	r22
    1302:	b7 95       	ror	r27
    1304:	f7 95       	ror	r31
    1306:	9e 3f       	cpi	r25, 0xFE	; 254
    1308:	08 f0       	brcs	.+2      	; 0x130c <__addsf3x+0x96>
    130a:	b3 cf       	rjmp	.-154    	; 0x1272 <__addsf3+0x1e>
    130c:	93 95       	inc	r25
    130e:	88 0f       	add	r24, r24
    1310:	08 f0       	brcs	.+2      	; 0x1314 <__addsf3x+0x9e>
    1312:	99 27       	eor	r25, r25
    1314:	ee 0f       	add	r30, r30
    1316:	97 95       	ror	r25
    1318:	87 95       	ror	r24
    131a:	08 95       	ret

0000131c <cos>:
    131c:	f0 d0       	rcall	.+480    	; 0x14fe <__fp_rempio2>
    131e:	e3 95       	inc	r30
    1320:	26 c1       	rjmp	.+588    	; 0x156e <__fp_sinus>

00001322 <__divsf3>:
    1322:	0c d0       	rcall	.+24     	; 0x133c <__divsf3x>
    1324:	13 c1       	rjmp	.+550    	; 0x154c <__fp_round>
    1326:	e3 d0       	rcall	.+454    	; 0x14ee <__fp_pscB>
    1328:	40 f0       	brcs	.+16     	; 0x133a <__divsf3+0x18>
    132a:	da d0       	rcall	.+436    	; 0x14e0 <__fp_pscA>
    132c:	30 f0       	brcs	.+12     	; 0x133a <__divsf3+0x18>
    132e:	21 f4       	brne	.+8      	; 0x1338 <__divsf3+0x16>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	19 f0       	breq	.+6      	; 0x133a <__divsf3+0x18>
    1334:	cc c0       	rjmp	.+408    	; 0x14ce <__fp_inf>
    1336:	51 11       	cpse	r21, r1
    1338:	4e c1       	rjmp	.+668    	; 0x15d6 <__fp_szero>
    133a:	cf c0       	rjmp	.+414    	; 0x14da <__fp_nan>

0000133c <__divsf3x>:
    133c:	29 d1       	rcall	.+594    	; 0x1590 <__fp_split3>
    133e:	98 f3       	brcs	.-26     	; 0x1326 <__divsf3+0x4>

00001340 <__divsf3_pse>:
    1340:	99 23       	and	r25, r25
    1342:	c9 f3       	breq	.-14     	; 0x1336 <__divsf3+0x14>
    1344:	55 23       	and	r21, r21
    1346:	b1 f3       	breq	.-20     	; 0x1334 <__divsf3+0x12>
    1348:	95 1b       	sub	r25, r21
    134a:	55 0b       	sbc	r21, r21
    134c:	bb 27       	eor	r27, r27
    134e:	aa 27       	eor	r26, r26
    1350:	62 17       	cp	r22, r18
    1352:	73 07       	cpc	r23, r19
    1354:	84 07       	cpc	r24, r20
    1356:	38 f0       	brcs	.+14     	; 0x1366 <__divsf3_pse+0x26>
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	22 0f       	add	r18, r18
    135e:	33 1f       	adc	r19, r19
    1360:	44 1f       	adc	r20, r20
    1362:	aa 1f       	adc	r26, r26
    1364:	a9 f3       	breq	.-22     	; 0x1350 <__divsf3_pse+0x10>
    1366:	33 d0       	rcall	.+102    	; 0x13ce <__divsf3_pse+0x8e>
    1368:	0e 2e       	mov	r0, r30
    136a:	3a f0       	brmi	.+14     	; 0x137a <__divsf3_pse+0x3a>
    136c:	e0 e8       	ldi	r30, 0x80	; 128
    136e:	30 d0       	rcall	.+96     	; 0x13d0 <__divsf3_pse+0x90>
    1370:	91 50       	subi	r25, 0x01	; 1
    1372:	50 40       	sbci	r21, 0x00	; 0
    1374:	e6 95       	lsr	r30
    1376:	00 1c       	adc	r0, r0
    1378:	ca f7       	brpl	.-14     	; 0x136c <__divsf3_pse+0x2c>
    137a:	29 d0       	rcall	.+82     	; 0x13ce <__divsf3_pse+0x8e>
    137c:	fe 2f       	mov	r31, r30
    137e:	27 d0       	rcall	.+78     	; 0x13ce <__divsf3_pse+0x8e>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	bb 1f       	adc	r27, r27
    1388:	26 17       	cp	r18, r22
    138a:	37 07       	cpc	r19, r23
    138c:	48 07       	cpc	r20, r24
    138e:	ab 07       	cpc	r26, r27
    1390:	b0 e8       	ldi	r27, 0x80	; 128
    1392:	09 f0       	breq	.+2      	; 0x1396 <__divsf3_pse+0x56>
    1394:	bb 0b       	sbc	r27, r27
    1396:	80 2d       	mov	r24, r0
    1398:	bf 01       	movw	r22, r30
    139a:	ff 27       	eor	r31, r31
    139c:	93 58       	subi	r25, 0x83	; 131
    139e:	5f 4f       	sbci	r21, 0xFF	; 255
    13a0:	2a f0       	brmi	.+10     	; 0x13ac <__divsf3_pse+0x6c>
    13a2:	9e 3f       	cpi	r25, 0xFE	; 254
    13a4:	51 05       	cpc	r21, r1
    13a6:	68 f0       	brcs	.+26     	; 0x13c2 <__divsf3_pse+0x82>
    13a8:	92 c0       	rjmp	.+292    	; 0x14ce <__fp_inf>
    13aa:	15 c1       	rjmp	.+554    	; 0x15d6 <__fp_szero>
    13ac:	5f 3f       	cpi	r21, 0xFF	; 255
    13ae:	ec f3       	brlt	.-6      	; 0x13aa <__divsf3_pse+0x6a>
    13b0:	98 3e       	cpi	r25, 0xE8	; 232
    13b2:	dc f3       	brlt	.-10     	; 0x13aa <__divsf3_pse+0x6a>
    13b4:	86 95       	lsr	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f7 95       	ror	r31
    13be:	9f 5f       	subi	r25, 0xFF	; 255
    13c0:	c9 f7       	brne	.-14     	; 0x13b4 <__divsf3_pse+0x74>
    13c2:	88 0f       	add	r24, r24
    13c4:	91 1d       	adc	r25, r1
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret
    13ce:	e1 e0       	ldi	r30, 0x01	; 1
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	bb 1f       	adc	r27, r27
    13d8:	62 17       	cp	r22, r18
    13da:	73 07       	cpc	r23, r19
    13dc:	84 07       	cpc	r24, r20
    13de:	ba 07       	cpc	r27, r26
    13e0:	20 f0       	brcs	.+8      	; 0x13ea <__divsf3_pse+0xaa>
    13e2:	62 1b       	sub	r22, r18
    13e4:	73 0b       	sbc	r23, r19
    13e6:	84 0b       	sbc	r24, r20
    13e8:	ba 0b       	sbc	r27, r26
    13ea:	ee 1f       	adc	r30, r30
    13ec:	88 f7       	brcc	.-30     	; 0x13d0 <__divsf3_pse+0x90>
    13ee:	e0 95       	com	r30
    13f0:	08 95       	ret

000013f2 <__fixsfsi>:
    13f2:	04 d0       	rcall	.+8      	; 0x13fc <__fixunssfsi>
    13f4:	68 94       	set
    13f6:	b1 11       	cpse	r27, r1
    13f8:	ee c0       	rjmp	.+476    	; 0x15d6 <__fp_szero>
    13fa:	08 95       	ret

000013fc <__fixunssfsi>:
    13fc:	d1 d0       	rcall	.+418    	; 0x15a0 <__fp_splitA>
    13fe:	88 f0       	brcs	.+34     	; 0x1422 <__fixunssfsi+0x26>
    1400:	9f 57       	subi	r25, 0x7F	; 127
    1402:	90 f0       	brcs	.+36     	; 0x1428 <__fixunssfsi+0x2c>
    1404:	b9 2f       	mov	r27, r25
    1406:	99 27       	eor	r25, r25
    1408:	b7 51       	subi	r27, 0x17	; 23
    140a:	a0 f0       	brcs	.+40     	; 0x1434 <__fixunssfsi+0x38>
    140c:	d1 f0       	breq	.+52     	; 0x1442 <__fixunssfsi+0x46>
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	1a f0       	brmi	.+6      	; 0x141e <__fixunssfsi+0x22>
    1418:	ba 95       	dec	r27
    141a:	c9 f7       	brne	.-14     	; 0x140e <__fixunssfsi+0x12>
    141c:	12 c0       	rjmp	.+36     	; 0x1442 <__fixunssfsi+0x46>
    141e:	b1 30       	cpi	r27, 0x01	; 1
    1420:	81 f0       	breq	.+32     	; 0x1442 <__fixunssfsi+0x46>
    1422:	d8 d0       	rcall	.+432    	; 0x15d4 <__fp_zero>
    1424:	b1 e0       	ldi	r27, 0x01	; 1
    1426:	08 95       	ret
    1428:	d5 c0       	rjmp	.+426    	; 0x15d4 <__fp_zero>
    142a:	67 2f       	mov	r22, r23
    142c:	78 2f       	mov	r23, r24
    142e:	88 27       	eor	r24, r24
    1430:	b8 5f       	subi	r27, 0xF8	; 248
    1432:	39 f0       	breq	.+14     	; 0x1442 <__fixunssfsi+0x46>
    1434:	b9 3f       	cpi	r27, 0xF9	; 249
    1436:	cc f3       	brlt	.-14     	; 0x142a <__fixunssfsi+0x2e>
    1438:	86 95       	lsr	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	b3 95       	inc	r27
    1440:	d9 f7       	brne	.-10     	; 0x1438 <__fixunssfsi+0x3c>
    1442:	3e f4       	brtc	.+14     	; 0x1452 <__fixunssfsi+0x56>
    1444:	90 95       	com	r25
    1446:	80 95       	com	r24
    1448:	70 95       	com	r23
    144a:	61 95       	neg	r22
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	08 95       	ret

00001454 <__floatunsisf>:
    1454:	e8 94       	clt
    1456:	09 c0       	rjmp	.+18     	; 0x146a <__floatsisf+0x12>

00001458 <__floatsisf>:
    1458:	97 fb       	bst	r25, 7
    145a:	3e f4       	brtc	.+14     	; 0x146a <__floatsisf+0x12>
    145c:	90 95       	com	r25
    145e:	80 95       	com	r24
    1460:	70 95       	com	r23
    1462:	61 95       	neg	r22
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	99 23       	and	r25, r25
    146c:	a9 f0       	breq	.+42     	; 0x1498 <__floatsisf+0x40>
    146e:	f9 2f       	mov	r31, r25
    1470:	96 e9       	ldi	r25, 0x96	; 150
    1472:	bb 27       	eor	r27, r27
    1474:	93 95       	inc	r25
    1476:	f6 95       	lsr	r31
    1478:	87 95       	ror	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b7 95       	ror	r27
    1480:	f1 11       	cpse	r31, r1
    1482:	f8 cf       	rjmp	.-16     	; 0x1474 <__floatsisf+0x1c>
    1484:	fa f4       	brpl	.+62     	; 0x14c4 <__floatsisf+0x6c>
    1486:	bb 0f       	add	r27, r27
    1488:	11 f4       	brne	.+4      	; 0x148e <__floatsisf+0x36>
    148a:	60 ff       	sbrs	r22, 0
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <__floatsisf+0x6c>
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	8f 4f       	sbci	r24, 0xFF	; 255
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <__floatsisf+0x6c>
    1498:	88 23       	and	r24, r24
    149a:	11 f0       	breq	.+4      	; 0x14a0 <__floatsisf+0x48>
    149c:	96 e9       	ldi	r25, 0x96	; 150
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <__floatsisf+0x6a>
    14a0:	77 23       	and	r23, r23
    14a2:	21 f0       	breq	.+8      	; 0x14ac <__floatsisf+0x54>
    14a4:	9e e8       	ldi	r25, 0x8E	; 142
    14a6:	87 2f       	mov	r24, r23
    14a8:	76 2f       	mov	r23, r22
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <__floatsisf+0x5e>
    14ac:	66 23       	and	r22, r22
    14ae:	71 f0       	breq	.+28     	; 0x14cc <__floatsisf+0x74>
    14b0:	96 e8       	ldi	r25, 0x86	; 134
    14b2:	86 2f       	mov	r24, r22
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	2a f0       	brmi	.+10     	; 0x14c4 <__floatsisf+0x6c>
    14ba:	9a 95       	dec	r25
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	da f7       	brpl	.-10     	; 0x14ba <__floatsisf+0x62>
    14c4:	88 0f       	add	r24, r24
    14c6:	96 95       	lsr	r25
    14c8:	87 95       	ror	r24
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret

000014ce <__fp_inf>:
    14ce:	97 f9       	bld	r25, 7
    14d0:	9f 67       	ori	r25, 0x7F	; 127
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	08 95       	ret

000014da <__fp_nan>:
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	80 ec       	ldi	r24, 0xC0	; 192
    14de:	08 95       	ret

000014e0 <__fp_pscA>:
    14e0:	00 24       	eor	r0, r0
    14e2:	0a 94       	dec	r0
    14e4:	16 16       	cp	r1, r22
    14e6:	17 06       	cpc	r1, r23
    14e8:	18 06       	cpc	r1, r24
    14ea:	09 06       	cpc	r0, r25
    14ec:	08 95       	ret

000014ee <__fp_pscB>:
    14ee:	00 24       	eor	r0, r0
    14f0:	0a 94       	dec	r0
    14f2:	12 16       	cp	r1, r18
    14f4:	13 06       	cpc	r1, r19
    14f6:	14 06       	cpc	r1, r20
    14f8:	05 06       	cpc	r0, r21
    14fa:	08 95       	ret
    14fc:	ee cf       	rjmp	.-36     	; 0x14da <__fp_nan>

000014fe <__fp_rempio2>:
    14fe:	50 d0       	rcall	.+160    	; 0x15a0 <__fp_splitA>
    1500:	e8 f3       	brcs	.-6      	; 0x14fc <__fp_pscB+0xe>
    1502:	e8 94       	clt
    1504:	e0 e0       	ldi	r30, 0x00	; 0
    1506:	bb 27       	eor	r27, r27
    1508:	9f 57       	subi	r25, 0x7F	; 127
    150a:	f0 f0       	brcs	.+60     	; 0x1548 <__fp_rempio2+0x4a>
    150c:	2a ed       	ldi	r18, 0xDA	; 218
    150e:	3f e0       	ldi	r19, 0x0F	; 15
    1510:	49 ec       	ldi	r20, 0xC9	; 201
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <__fp_rempio2+0x22>
    1514:	ee 0f       	add	r30, r30
    1516:	bb 0f       	add	r27, r27
    1518:	66 1f       	adc	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	28 f0       	brcs	.+10     	; 0x152a <__fp_rempio2+0x2c>
    1520:	b2 3a       	cpi	r27, 0xA2	; 162
    1522:	62 07       	cpc	r22, r18
    1524:	73 07       	cpc	r23, r19
    1526:	84 07       	cpc	r24, r20
    1528:	28 f0       	brcs	.+10     	; 0x1534 <__fp_rempio2+0x36>
    152a:	b2 5a       	subi	r27, 0xA2	; 162
    152c:	62 0b       	sbc	r22, r18
    152e:	73 0b       	sbc	r23, r19
    1530:	84 0b       	sbc	r24, r20
    1532:	e3 95       	inc	r30
    1534:	9a 95       	dec	r25
    1536:	72 f7       	brpl	.-36     	; 0x1514 <__fp_rempio2+0x16>
    1538:	80 38       	cpi	r24, 0x80	; 128
    153a:	30 f4       	brcc	.+12     	; 0x1548 <__fp_rempio2+0x4a>
    153c:	9a 95       	dec	r25
    153e:	bb 0f       	add	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	d2 f7       	brpl	.-12     	; 0x153c <__fp_rempio2+0x3e>
    1548:	90 48       	sbci	r25, 0x80	; 128
    154a:	6f c1       	rjmp	.+734    	; 0x182a <__fp_mpack_finite>

0000154c <__fp_round>:
    154c:	09 2e       	mov	r0, r25
    154e:	03 94       	inc	r0
    1550:	00 0c       	add	r0, r0
    1552:	11 f4       	brne	.+4      	; 0x1558 <__fp_round+0xc>
    1554:	88 23       	and	r24, r24
    1556:	52 f0       	brmi	.+20     	; 0x156c <__fp_round+0x20>
    1558:	bb 0f       	add	r27, r27
    155a:	40 f4       	brcc	.+16     	; 0x156c <__fp_round+0x20>
    155c:	bf 2b       	or	r27, r31
    155e:	11 f4       	brne	.+4      	; 0x1564 <__fp_round+0x18>
    1560:	60 ff       	sbrs	r22, 0
    1562:	04 c0       	rjmp	.+8      	; 0x156c <__fp_round+0x20>
    1564:	6f 5f       	subi	r22, 0xFF	; 255
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	08 95       	ret

0000156e <__fp_sinus>:
    156e:	ef 93       	push	r30
    1570:	e0 ff       	sbrs	r30, 0
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <__fp_sinus+0x12>
    1574:	a2 ea       	ldi	r26, 0xA2	; 162
    1576:	2a ed       	ldi	r18, 0xDA	; 218
    1578:	3f e0       	ldi	r19, 0x0F	; 15
    157a:	49 ec       	ldi	r20, 0xC9	; 201
    157c:	5f eb       	ldi	r21, 0xBF	; 191
    157e:	7b de       	rcall	.-778    	; 0x1276 <__addsf3x>
    1580:	e5 df       	rcall	.-54     	; 0x154c <__fp_round>
    1582:	0f 90       	pop	r0
    1584:	03 94       	inc	r0
    1586:	01 fc       	sbrc	r0, 1
    1588:	90 58       	subi	r25, 0x80	; 128
    158a:	ec e8       	ldi	r30, 0x8C	; 140
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	85 c1       	rjmp	.+778    	; 0x189a <__fp_powsodd>

00001590 <__fp_split3>:
    1590:	57 fd       	sbrc	r21, 7
    1592:	90 58       	subi	r25, 0x80	; 128
    1594:	44 0f       	add	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	59 f0       	breq	.+22     	; 0x15b0 <__fp_splitA+0x10>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	71 f0       	breq	.+28     	; 0x15ba <__fp_splitA+0x1a>
    159e:	47 95       	ror	r20

000015a0 <__fp_splitA>:
    15a0:	88 0f       	add	r24, r24
    15a2:	97 fb       	bst	r25, 7
    15a4:	99 1f       	adc	r25, r25
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <__fp_splitA+0x20>
    15a8:	9f 3f       	cpi	r25, 0xFF	; 255
    15aa:	79 f0       	breq	.+30     	; 0x15ca <__fp_splitA+0x2a>
    15ac:	87 95       	ror	r24
    15ae:	08 95       	ret
    15b0:	12 16       	cp	r1, r18
    15b2:	13 06       	cpc	r1, r19
    15b4:	14 06       	cpc	r1, r20
    15b6:	55 1f       	adc	r21, r21
    15b8:	f2 cf       	rjmp	.-28     	; 0x159e <__fp_split3+0xe>
    15ba:	46 95       	lsr	r20
    15bc:	f1 df       	rcall	.-30     	; 0x15a0 <__fp_splitA>
    15be:	08 c0       	rjmp	.+16     	; 0x15d0 <__fp_splitA+0x30>
    15c0:	16 16       	cp	r1, r22
    15c2:	17 06       	cpc	r1, r23
    15c4:	18 06       	cpc	r1, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	f1 cf       	rjmp	.-30     	; 0x15ac <__fp_splitA+0xc>
    15ca:	86 95       	lsr	r24
    15cc:	71 05       	cpc	r23, r1
    15ce:	61 05       	cpc	r22, r1
    15d0:	08 94       	sec
    15d2:	08 95       	ret

000015d4 <__fp_zero>:
    15d4:	e8 94       	clt

000015d6 <__fp_szero>:
    15d6:	bb 27       	eor	r27, r27
    15d8:	66 27       	eor	r22, r22
    15da:	77 27       	eor	r23, r23
    15dc:	cb 01       	movw	r24, r22
    15de:	97 f9       	bld	r25, 7
    15e0:	08 95       	ret

000015e2 <__mulsf3>:
    15e2:	0b d0       	rcall	.+22     	; 0x15fa <__mulsf3x>
    15e4:	b3 cf       	rjmp	.-154    	; 0x154c <__fp_round>
    15e6:	7c df       	rcall	.-264    	; 0x14e0 <__fp_pscA>
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__mulsf3+0x12>
    15ea:	81 df       	rcall	.-254    	; 0x14ee <__fp_pscB>
    15ec:	18 f0       	brcs	.+6      	; 0x15f4 <__mulsf3+0x12>
    15ee:	95 23       	and	r25, r21
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__mulsf3+0x12>
    15f2:	6d cf       	rjmp	.-294    	; 0x14ce <__fp_inf>
    15f4:	72 cf       	rjmp	.-284    	; 0x14da <__fp_nan>
    15f6:	11 24       	eor	r1, r1
    15f8:	ee cf       	rjmp	.-36     	; 0x15d6 <__fp_szero>

000015fa <__mulsf3x>:
    15fa:	ca df       	rcall	.-108    	; 0x1590 <__fp_split3>
    15fc:	a0 f3       	brcs	.-24     	; 0x15e6 <__mulsf3+0x4>

000015fe <__mulsf3_pse>:
    15fe:	95 9f       	mul	r25, r21
    1600:	d1 f3       	breq	.-12     	; 0x15f6 <__mulsf3+0x14>
    1602:	95 0f       	add	r25, r21
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	55 1f       	adc	r21, r21
    1608:	62 9f       	mul	r22, r18
    160a:	f0 01       	movw	r30, r0
    160c:	72 9f       	mul	r23, r18
    160e:	bb 27       	eor	r27, r27
    1610:	f0 0d       	add	r31, r0
    1612:	b1 1d       	adc	r27, r1
    1614:	63 9f       	mul	r22, r19
    1616:	aa 27       	eor	r26, r26
    1618:	f0 0d       	add	r31, r0
    161a:	b1 1d       	adc	r27, r1
    161c:	aa 1f       	adc	r26, r26
    161e:	64 9f       	mul	r22, r20
    1620:	66 27       	eor	r22, r22
    1622:	b0 0d       	add	r27, r0
    1624:	a1 1d       	adc	r26, r1
    1626:	66 1f       	adc	r22, r22
    1628:	82 9f       	mul	r24, r18
    162a:	22 27       	eor	r18, r18
    162c:	b0 0d       	add	r27, r0
    162e:	a1 1d       	adc	r26, r1
    1630:	62 1f       	adc	r22, r18
    1632:	73 9f       	mul	r23, r19
    1634:	b0 0d       	add	r27, r0
    1636:	a1 1d       	adc	r26, r1
    1638:	62 1f       	adc	r22, r18
    163a:	83 9f       	mul	r24, r19
    163c:	a0 0d       	add	r26, r0
    163e:	61 1d       	adc	r22, r1
    1640:	22 1f       	adc	r18, r18
    1642:	74 9f       	mul	r23, r20
    1644:	33 27       	eor	r19, r19
    1646:	a0 0d       	add	r26, r0
    1648:	61 1d       	adc	r22, r1
    164a:	23 1f       	adc	r18, r19
    164c:	84 9f       	mul	r24, r20
    164e:	60 0d       	add	r22, r0
    1650:	21 1d       	adc	r18, r1
    1652:	82 2f       	mov	r24, r18
    1654:	76 2f       	mov	r23, r22
    1656:	6a 2f       	mov	r22, r26
    1658:	11 24       	eor	r1, r1
    165a:	9f 57       	subi	r25, 0x7F	; 127
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	8a f0       	brmi	.+34     	; 0x1682 <__mulsf3_pse+0x84>
    1660:	e1 f0       	breq	.+56     	; 0x169a <__mulsf3_pse+0x9c>
    1662:	88 23       	and	r24, r24
    1664:	4a f0       	brmi	.+18     	; 0x1678 <__mulsf3_pse+0x7a>
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	bb 1f       	adc	r27, r27
    166c:	66 1f       	adc	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	91 50       	subi	r25, 0x01	; 1
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	a9 f7       	brne	.-22     	; 0x1662 <__mulsf3_pse+0x64>
    1678:	9e 3f       	cpi	r25, 0xFE	; 254
    167a:	51 05       	cpc	r21, r1
    167c:	70 f0       	brcs	.+28     	; 0x169a <__mulsf3_pse+0x9c>
    167e:	27 cf       	rjmp	.-434    	; 0x14ce <__fp_inf>
    1680:	aa cf       	rjmp	.-172    	; 0x15d6 <__fp_szero>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	ec f3       	brlt	.-6      	; 0x1680 <__mulsf3_pse+0x82>
    1686:	98 3e       	cpi	r25, 0xE8	; 232
    1688:	dc f3       	brlt	.-10     	; 0x1680 <__mulsf3_pse+0x82>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b7 95       	ror	r27
    1692:	f7 95       	ror	r31
    1694:	e7 95       	ror	r30
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	c1 f7       	brne	.-16     	; 0x168a <__mulsf3_pse+0x8c>
    169a:	fe 2b       	or	r31, r30
    169c:	88 0f       	add	r24, r24
    169e:	91 1d       	adc	r25, r1
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	97 f9       	bld	r25, 7
    16a6:	08 95       	ret

000016a8 <pow>:
    16a8:	fa 01       	movw	r30, r20
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	30 96       	adiw	r30, 0x00	; 0
    16b0:	21 05       	cpc	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	99 f1       	breq	.+102    	; 0x171c <pow+0x74>
    16b6:	61 15       	cp	r22, r1
    16b8:	71 05       	cpc	r23, r1
    16ba:	61 f4       	brne	.+24     	; 0x16d4 <pow+0x2c>
    16bc:	80 38       	cpi	r24, 0x80	; 128
    16be:	bf e3       	ldi	r27, 0x3F	; 63
    16c0:	9b 07       	cpc	r25, r27
    16c2:	49 f1       	breq	.+82     	; 0x1716 <pow+0x6e>
    16c4:	68 94       	set
    16c6:	90 38       	cpi	r25, 0x80	; 128
    16c8:	81 05       	cpc	r24, r1
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <pow+0x3c>
    16cc:	80 38       	cpi	r24, 0x80	; 128
    16ce:	bf ef       	ldi	r27, 0xFF	; 255
    16d0:	9b 07       	cpc	r25, r27
    16d2:	41 f0       	breq	.+16     	; 0x16e4 <pow+0x3c>
    16d4:	99 23       	and	r25, r25
    16d6:	42 f5       	brpl	.+80     	; 0x1728 <pow+0x80>
    16d8:	ff 3f       	cpi	r31, 0xFF	; 255
    16da:	e1 05       	cpc	r30, r1
    16dc:	31 05       	cpc	r19, r1
    16de:	21 05       	cpc	r18, r1
    16e0:	11 f1       	breq	.+68     	; 0x1726 <pow+0x7e>
    16e2:	e8 94       	clt
    16e4:	08 94       	sec
    16e6:	e7 95       	ror	r30
    16e8:	d9 01       	movw	r26, r18
    16ea:	aa 23       	and	r26, r26
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <pow+0x50>
    16ee:	ab 2f       	mov	r26, r27
    16f0:	be 2f       	mov	r27, r30
    16f2:	f8 5f       	subi	r31, 0xF8	; 248
    16f4:	d0 f3       	brcs	.-12     	; 0x16ea <pow+0x42>
    16f6:	10 c0       	rjmp	.+32     	; 0x1718 <pow+0x70>
    16f8:	ff 5f       	subi	r31, 0xFF	; 255
    16fa:	70 f4       	brcc	.+28     	; 0x1718 <pow+0x70>
    16fc:	a6 95       	lsr	r26
    16fe:	e0 f7       	brcc	.-8      	; 0x16f8 <pow+0x50>
    1700:	f7 39       	cpi	r31, 0x97	; 151
    1702:	50 f0       	brcs	.+20     	; 0x1718 <pow+0x70>
    1704:	19 f0       	breq	.+6      	; 0x170c <pow+0x64>
    1706:	ff 3a       	cpi	r31, 0xAF	; 175
    1708:	38 f4       	brcc	.+14     	; 0x1718 <pow+0x70>
    170a:	9f 77       	andi	r25, 0x7F	; 127
    170c:	9f 93       	push	r25
    170e:	0c d0       	rcall	.+24     	; 0x1728 <pow+0x80>
    1710:	0f 90       	pop	r0
    1712:	07 fc       	sbrc	r0, 7
    1714:	90 58       	subi	r25, 0x80	; 128
    1716:	08 95       	ret
    1718:	3e f0       	brts	.+14     	; 0x1728 <pow+0x80>
    171a:	df ce       	rjmp	.-578    	; 0x14da <__fp_nan>
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	9f e3       	ldi	r25, 0x3F	; 63
    1724:	08 95       	ret
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	9f 77       	andi	r25, 0x7F	; 127
    172a:	5f 93       	push	r21
    172c:	4f 93       	push	r20
    172e:	3f 93       	push	r19
    1730:	2f 93       	push	r18
    1732:	06 d1       	rcall	.+524    	; 0x1940 <log>
    1734:	2f 91       	pop	r18
    1736:	3f 91       	pop	r19
    1738:	4f 91       	pop	r20
    173a:	5f 91       	pop	r21
    173c:	52 df       	rcall	.-348    	; 0x15e2 <__mulsf3>
    173e:	47 c0       	rjmp	.+142    	; 0x17ce <exp>
    1740:	11 f4       	brne	.+4      	; 0x1746 <pow+0x9e>
    1742:	0e f4       	brtc	.+2      	; 0x1746 <pow+0x9e>
    1744:	ca ce       	rjmp	.-620    	; 0x14da <__fp_nan>
    1746:	6f c0       	rjmp	.+222    	; 0x1826 <__fp_mpack>

00001748 <sqrt>:
    1748:	2b df       	rcall	.-426    	; 0x15a0 <__fp_splitA>
    174a:	d0 f3       	brcs	.-12     	; 0x1740 <pow+0x98>
    174c:	99 23       	and	r25, r25
    174e:	d9 f3       	breq	.-10     	; 0x1746 <pow+0x9e>
    1750:	ce f3       	brts	.-14     	; 0x1744 <pow+0x9c>
    1752:	9f 57       	subi	r25, 0x7F	; 127
    1754:	55 0b       	sbc	r21, r21
    1756:	87 ff       	sbrs	r24, 7
    1758:	74 d0       	rcall	.+232    	; 0x1842 <__fp_norm2>
    175a:	00 24       	eor	r0, r0
    175c:	a0 e6       	ldi	r26, 0x60	; 96
    175e:	40 ea       	ldi	r20, 0xA0	; 160
    1760:	90 01       	movw	r18, r0
    1762:	80 58       	subi	r24, 0x80	; 128
    1764:	56 95       	lsr	r21
    1766:	97 95       	ror	r25
    1768:	28 f4       	brcc	.+10     	; 0x1774 <sqrt+0x2c>
    176a:	80 5c       	subi	r24, 0xC0	; 192
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	20 f0       	brcs	.+8      	; 0x177c <sqrt+0x34>
    1774:	26 17       	cp	r18, r22
    1776:	37 07       	cpc	r19, r23
    1778:	48 07       	cpc	r20, r24
    177a:	30 f4       	brcc	.+12     	; 0x1788 <sqrt+0x40>
    177c:	62 1b       	sub	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	20 29       	or	r18, r0
    1784:	31 29       	or	r19, r1
    1786:	4a 2b       	or	r20, r26
    1788:	a6 95       	lsr	r26
    178a:	17 94       	ror	r1
    178c:	07 94       	ror	r0
    178e:	20 25       	eor	r18, r0
    1790:	31 25       	eor	r19, r1
    1792:	4a 27       	eor	r20, r26
    1794:	58 f7       	brcc	.-42     	; 0x176c <sqrt+0x24>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	20 f0       	brcs	.+8      	; 0x17a6 <sqrt+0x5e>
    179e:	26 17       	cp	r18, r22
    17a0:	37 07       	cpc	r19, r23
    17a2:	48 07       	cpc	r20, r24
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <sqrt+0x6a>
    17a6:	62 0b       	sbc	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	20 0d       	add	r18, r0
    17ae:	31 1d       	adc	r19, r1
    17b0:	41 1d       	adc	r20, r1
    17b2:	a0 95       	com	r26
    17b4:	81 f7       	brne	.-32     	; 0x1796 <sqrt+0x4e>
    17b6:	b9 01       	movw	r22, r18
    17b8:	84 2f       	mov	r24, r20
    17ba:	91 58       	subi	r25, 0x81	; 129
    17bc:	88 0f       	add	r24, r24
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret
    17c4:	19 f4       	brne	.+6      	; 0x17cc <sqrt+0x84>
    17c6:	0e f0       	brts	.+2      	; 0x17ca <sqrt+0x82>
    17c8:	82 ce       	rjmp	.-764    	; 0x14ce <__fp_inf>
    17ca:	04 cf       	rjmp	.-504    	; 0x15d4 <__fp_zero>
    17cc:	86 ce       	rjmp	.-756    	; 0x14da <__fp_nan>

000017ce <exp>:
    17ce:	e8 de       	rcall	.-560    	; 0x15a0 <__fp_splitA>
    17d0:	c8 f3       	brcs	.-14     	; 0x17c4 <sqrt+0x7c>
    17d2:	96 38       	cpi	r25, 0x86	; 134
    17d4:	c0 f7       	brcc	.-16     	; 0x17c6 <sqrt+0x7e>
    17d6:	07 f8       	bld	r0, 7
    17d8:	0f 92       	push	r0
    17da:	e8 94       	clt
    17dc:	2b e3       	ldi	r18, 0x3B	; 59
    17de:	3a ea       	ldi	r19, 0xAA	; 170
    17e0:	48 eb       	ldi	r20, 0xB8	; 184
    17e2:	5f e7       	ldi	r21, 0x7F	; 127
    17e4:	0c df       	rcall	.-488    	; 0x15fe <__mulsf3_pse>
    17e6:	0f 92       	push	r0
    17e8:	0f 92       	push	r0
    17ea:	0f 92       	push	r0
    17ec:	4d b7       	in	r20, 0x3d	; 61
    17ee:	5e b7       	in	r21, 0x3e	; 62
    17f0:	0f 92       	push	r0
    17f2:	e6 d0       	rcall	.+460    	; 0x19c0 <modf>
    17f4:	ea ea       	ldi	r30, 0xAA	; 170
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	2b d0       	rcall	.+86     	; 0x1850 <__fp_powser>
    17fa:	4f 91       	pop	r20
    17fc:	5f 91       	pop	r21
    17fe:	ef 91       	pop	r30
    1800:	ff 91       	pop	r31
    1802:	e5 95       	asr	r30
    1804:	ee 1f       	adc	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	49 f0       	breq	.+18     	; 0x181c <exp+0x4e>
    180a:	fe 57       	subi	r31, 0x7E	; 126
    180c:	e0 68       	ori	r30, 0x80	; 128
    180e:	44 27       	eor	r20, r20
    1810:	ee 0f       	add	r30, r30
    1812:	44 1f       	adc	r20, r20
    1814:	fa 95       	dec	r31
    1816:	e1 f7       	brne	.-8      	; 0x1810 <exp+0x42>
    1818:	41 95       	neg	r20
    181a:	55 0b       	sbc	r21, r21
    181c:	58 d0       	rcall	.+176    	; 0x18ce <ldexp>
    181e:	0f 90       	pop	r0
    1820:	07 fe       	sbrs	r0, 7
    1822:	4c c0       	rjmp	.+152    	; 0x18bc <inverse>
    1824:	08 95       	ret

00001826 <__fp_mpack>:
    1826:	9f 3f       	cpi	r25, 0xFF	; 255
    1828:	31 f0       	breq	.+12     	; 0x1836 <__fp_mpack_finite+0xc>

0000182a <__fp_mpack_finite>:
    182a:	91 50       	subi	r25, 0x01	; 1
    182c:	20 f4       	brcc	.+8      	; 0x1836 <__fp_mpack_finite+0xc>
    182e:	87 95       	ror	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	b7 95       	ror	r27
    1836:	88 0f       	add	r24, r24
    1838:	91 1d       	adc	r25, r1
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret

00001842 <__fp_norm2>:
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	50 40       	sbci	r21, 0x00	; 0
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	d2 f7       	brpl	.-12     	; 0x1842 <__fp_norm2>
    184e:	08 95       	ret

00001850 <__fp_powser>:
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	1f 93       	push	r17
    1856:	0f 93       	push	r16
    1858:	ff 92       	push	r15
    185a:	ef 92       	push	r14
    185c:	df 92       	push	r13
    185e:	7b 01       	movw	r14, r22
    1860:	8c 01       	movw	r16, r24
    1862:	68 94       	set
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <__fp_powser+0x20>
    1866:	da 2e       	mov	r13, r26
    1868:	ef 01       	movw	r28, r30
    186a:	c7 de       	rcall	.-626    	; 0x15fa <__mulsf3x>
    186c:	fe 01       	movw	r30, r28
    186e:	e8 94       	clt
    1870:	a5 91       	lpm	r26, Z+
    1872:	25 91       	lpm	r18, Z+
    1874:	35 91       	lpm	r19, Z+
    1876:	45 91       	lpm	r20, Z+
    1878:	55 91       	lpm	r21, Z+
    187a:	ae f3       	brts	.-22     	; 0x1866 <__fp_powser+0x16>
    187c:	ef 01       	movw	r28, r30
    187e:	fb dc       	rcall	.-1546   	; 0x1276 <__addsf3x>
    1880:	fe 01       	movw	r30, r28
    1882:	97 01       	movw	r18, r14
    1884:	a8 01       	movw	r20, r16
    1886:	da 94       	dec	r13
    1888:	79 f7       	brne	.-34     	; 0x1868 <__fp_powser+0x18>
    188a:	df 90       	pop	r13
    188c:	ef 90       	pop	r14
    188e:	ff 90       	pop	r15
    1890:	0f 91       	pop	r16
    1892:	1f 91       	pop	r17
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <__fp_powsodd>:
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	7f 93       	push	r23
    18a0:	6f 93       	push	r22
    18a2:	ff 93       	push	r31
    18a4:	ef 93       	push	r30
    18a6:	9b 01       	movw	r18, r22
    18a8:	ac 01       	movw	r20, r24
    18aa:	9b de       	rcall	.-714    	; 0x15e2 <__mulsf3>
    18ac:	ef 91       	pop	r30
    18ae:	ff 91       	pop	r31
    18b0:	cf df       	rcall	.-98     	; 0x1850 <__fp_powser>
    18b2:	2f 91       	pop	r18
    18b4:	3f 91       	pop	r19
    18b6:	4f 91       	pop	r20
    18b8:	5f 91       	pop	r21
    18ba:	93 ce       	rjmp	.-730    	; 0x15e2 <__mulsf3>

000018bc <inverse>:
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	80 e8       	ldi	r24, 0x80	; 128
    18c6:	9f e3       	ldi	r25, 0x3F	; 63
    18c8:	2c cd       	rjmp	.-1448   	; 0x1322 <__divsf3>
    18ca:	01 ce       	rjmp	.-1022   	; 0x14ce <__fp_inf>
    18cc:	ac cf       	rjmp	.-168    	; 0x1826 <__fp_mpack>

000018ce <ldexp>:
    18ce:	68 de       	rcall	.-816    	; 0x15a0 <__fp_splitA>
    18d0:	e8 f3       	brcs	.-6      	; 0x18cc <inverse+0x10>
    18d2:	99 23       	and	r25, r25
    18d4:	d9 f3       	breq	.-10     	; 0x18cc <inverse+0x10>
    18d6:	94 0f       	add	r25, r20
    18d8:	51 1d       	adc	r21, r1
    18da:	bb f3       	brvs	.-18     	; 0x18ca <inverse+0xe>
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	94 f0       	brlt	.+36     	; 0x1906 <ldexp+0x38>
    18e2:	59 f0       	breq	.+22     	; 0x18fa <ldexp+0x2c>
    18e4:	88 23       	and	r24, r24
    18e6:	32 f0       	brmi	.+12     	; 0x18f4 <ldexp+0x26>
    18e8:	66 0f       	add	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	91 50       	subi	r25, 0x01	; 1
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	c1 f7       	brne	.-16     	; 0x18e4 <ldexp+0x16>
    18f4:	9e 3f       	cpi	r25, 0xFE	; 254
    18f6:	51 05       	cpc	r21, r1
    18f8:	44 f7       	brge	.-48     	; 0x18ca <inverse+0xe>
    18fa:	88 0f       	add	r24, r24
    18fc:	91 1d       	adc	r25, r1
    18fe:	96 95       	lsr	r25
    1900:	87 95       	ror	r24
    1902:	97 f9       	bld	r25, 7
    1904:	08 95       	ret
    1906:	5f 3f       	cpi	r21, 0xFF	; 255
    1908:	ac f0       	brlt	.+42     	; 0x1934 <ldexp+0x66>
    190a:	98 3e       	cpi	r25, 0xE8	; 232
    190c:	9c f0       	brlt	.+38     	; 0x1934 <ldexp+0x66>
    190e:	bb 27       	eor	r27, r27
    1910:	86 95       	lsr	r24
    1912:	77 95       	ror	r23
    1914:	67 95       	ror	r22
    1916:	b7 95       	ror	r27
    1918:	08 f4       	brcc	.+2      	; 0x191c <ldexp+0x4e>
    191a:	b1 60       	ori	r27, 0x01	; 1
    191c:	93 95       	inc	r25
    191e:	c1 f7       	brne	.-16     	; 0x1910 <ldexp+0x42>
    1920:	bb 0f       	add	r27, r27
    1922:	58 f7       	brcc	.-42     	; 0x18fa <ldexp+0x2c>
    1924:	11 f4       	brne	.+4      	; 0x192a <ldexp+0x5c>
    1926:	60 ff       	sbrs	r22, 0
    1928:	e8 cf       	rjmp	.-48     	; 0x18fa <ldexp+0x2c>
    192a:	6f 5f       	subi	r22, 0xFF	; 255
    192c:	7f 4f       	sbci	r23, 0xFF	; 255
    192e:	8f 4f       	sbci	r24, 0xFF	; 255
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	e3 cf       	rjmp	.-58     	; 0x18fa <ldexp+0x2c>
    1934:	50 ce       	rjmp	.-864    	; 0x15d6 <__fp_szero>
    1936:	0e f0       	brts	.+2      	; 0x193a <ldexp+0x6c>
    1938:	76 cf       	rjmp	.-276    	; 0x1826 <__fp_mpack>
    193a:	cf cd       	rjmp	.-1122   	; 0x14da <__fp_nan>
    193c:	68 94       	set
    193e:	c7 cd       	rjmp	.-1138   	; 0x14ce <__fp_inf>

00001940 <log>:
    1940:	2f de       	rcall	.-930    	; 0x15a0 <__fp_splitA>
    1942:	c8 f3       	brcs	.-14     	; 0x1936 <ldexp+0x68>
    1944:	99 23       	and	r25, r25
    1946:	d1 f3       	breq	.-12     	; 0x193c <ldexp+0x6e>
    1948:	c6 f3       	brts	.-16     	; 0x193a <ldexp+0x6c>
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	1f 93       	push	r17
    1950:	0f 93       	push	r16
    1952:	ff 92       	push	r15
    1954:	c9 2f       	mov	r28, r25
    1956:	dd 27       	eor	r29, r29
    1958:	88 23       	and	r24, r24
    195a:	2a f0       	brmi	.+10     	; 0x1966 <log+0x26>
    195c:	21 97       	sbiw	r28, 0x01	; 1
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	da f7       	brpl	.-10     	; 0x195c <log+0x1c>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f eb       	ldi	r21, 0xBF	; 191
    196e:	9f e3       	ldi	r25, 0x3F	; 63
    1970:	88 39       	cpi	r24, 0x98	; 152
    1972:	20 f0       	brcs	.+8      	; 0x197c <log+0x3c>
    1974:	80 3e       	cpi	r24, 0xE0	; 224
    1976:	30 f0       	brcs	.+12     	; 0x1984 <log+0x44>
    1978:	21 96       	adiw	r28, 0x01	; 1
    197a:	8f 77       	andi	r24, 0x7F	; 127
    197c:	6b dc       	rcall	.-1834   	; 0x1254 <__addsf3>
    197e:	e2 ed       	ldi	r30, 0xD2	; 210
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	03 c0       	rjmp	.+6      	; 0x198a <log+0x4a>
    1984:	67 dc       	rcall	.-1842   	; 0x1254 <__addsf3>
    1986:	ef ef       	ldi	r30, 0xFF	; 255
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	62 df       	rcall	.-316    	; 0x1850 <__fp_powser>
    198c:	8b 01       	movw	r16, r22
    198e:	be 01       	movw	r22, r28
    1990:	ec 01       	movw	r28, r24
    1992:	fb 2e       	mov	r15, r27
    1994:	6f 57       	subi	r22, 0x7F	; 127
    1996:	71 09       	sbc	r23, r1
    1998:	75 95       	asr	r23
    199a:	77 1f       	adc	r23, r23
    199c:	88 0b       	sbc	r24, r24
    199e:	99 0b       	sbc	r25, r25
    19a0:	5b dd       	rcall	.-1354   	; 0x1458 <__floatsisf>
    19a2:	28 e1       	ldi	r18, 0x18	; 24
    19a4:	32 e7       	ldi	r19, 0x72	; 114
    19a6:	41 e3       	ldi	r20, 0x31	; 49
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	27 de       	rcall	.-946    	; 0x15fa <__mulsf3x>
    19ac:	af 2d       	mov	r26, r15
    19ae:	98 01       	movw	r18, r16
    19b0:	ae 01       	movw	r20, r28
    19b2:	ff 90       	pop	r15
    19b4:	0f 91       	pop	r16
    19b6:	1f 91       	pop	r17
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	5c dc       	rcall	.-1864   	; 0x1276 <__addsf3x>
    19be:	c6 cd       	rjmp	.-1140   	; 0x154c <__fp_round>

000019c0 <modf>:
    19c0:	fa 01       	movw	r30, r20
    19c2:	dc 01       	movw	r26, r24
    19c4:	aa 0f       	add	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	bf 57       	subi	r27, 0x7F	; 127
    19ce:	28 f4       	brcc	.+10     	; 0x19da <modf+0x1a>
    19d0:	22 27       	eor	r18, r18
    19d2:	33 27       	eor	r19, r19
    19d4:	44 27       	eor	r20, r20
    19d6:	50 78       	andi	r21, 0x80	; 128
    19d8:	1f c0       	rjmp	.+62     	; 0x1a18 <modf+0x58>
    19da:	b7 51       	subi	r27, 0x17	; 23
    19dc:	88 f4       	brcc	.+34     	; 0x1a00 <modf+0x40>
    19de:	ab 2f       	mov	r26, r27
    19e0:	00 24       	eor	r0, r0
    19e2:	46 95       	lsr	r20
    19e4:	37 95       	ror	r19
    19e6:	27 95       	ror	r18
    19e8:	01 1c       	adc	r0, r1
    19ea:	a3 95       	inc	r26
    19ec:	d2 f3       	brmi	.-12     	; 0x19e2 <modf+0x22>
    19ee:	00 20       	and	r0, r0
    19f0:	69 f0       	breq	.+26     	; 0x1a0c <modf+0x4c>
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	44 1f       	adc	r20, r20
    19f8:	b3 95       	inc	r27
    19fa:	da f3       	brmi	.-10     	; 0x19f2 <modf+0x32>
    19fc:	0d d0       	rcall	.+26     	; 0x1a18 <modf+0x58>
    19fe:	29 cc       	rjmp	.-1966   	; 0x1252 <__subsf3>
    1a00:	61 30       	cpi	r22, 0x01	; 1
    1a02:	71 05       	cpc	r23, r1
    1a04:	a0 e8       	ldi	r26, 0x80	; 128
    1a06:	8a 07       	cpc	r24, r26
    1a08:	b9 46       	sbci	r27, 0x69	; 105
    1a0a:	30 f4       	brcc	.+12     	; 0x1a18 <modf+0x58>
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	66 27       	eor	r22, r22
    1a12:	77 27       	eor	r23, r23
    1a14:	88 27       	eor	r24, r24
    1a16:	90 78       	andi	r25, 0x80	; 128
    1a18:	30 96       	adiw	r30, 0x00	; 0
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <modf+0x64>
    1a1c:	20 83       	st	Z, r18
    1a1e:	31 83       	std	Z+1, r19	; 0x01
    1a20:	42 83       	std	Z+2, r20	; 0x02
    1a22:	53 83       	std	Z+3, r21	; 0x03
    1a24:	08 95       	ret

00001a26 <__divmodhi4>:
    1a26:	97 fb       	bst	r25, 7
    1a28:	07 2e       	mov	r0, r23
    1a2a:	16 f4       	brtc	.+4      	; 0x1a30 <__divmodhi4+0xa>
    1a2c:	00 94       	com	r0
    1a2e:	06 d0       	rcall	.+12     	; 0x1a3c <__divmodhi4_neg1>
    1a30:	77 fd       	sbrc	r23, 7
    1a32:	08 d0       	rcall	.+16     	; 0x1a44 <__divmodhi4_neg2>
    1a34:	0b d0       	rcall	.+22     	; 0x1a4c <__udivmodhi4>
    1a36:	07 fc       	sbrc	r0, 7
    1a38:	05 d0       	rcall	.+10     	; 0x1a44 <__divmodhi4_neg2>
    1a3a:	3e f4       	brtc	.+14     	; 0x1a4a <__divmodhi4_exit>

00001a3c <__divmodhi4_neg1>:
    1a3c:	90 95       	com	r25
    1a3e:	81 95       	neg	r24
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	08 95       	ret

00001a44 <__divmodhi4_neg2>:
    1a44:	70 95       	com	r23
    1a46:	61 95       	neg	r22
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255

00001a4a <__divmodhi4_exit>:
    1a4a:	08 95       	ret

00001a4c <__udivmodhi4>:
    1a4c:	aa 1b       	sub	r26, r26
    1a4e:	bb 1b       	sub	r27, r27
    1a50:	51 e1       	ldi	r21, 0x11	; 17
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <__udivmodhi4_ep>

00001a54 <__udivmodhi4_loop>:
    1a54:	aa 1f       	adc	r26, r26
    1a56:	bb 1f       	adc	r27, r27
    1a58:	a6 17       	cp	r26, r22
    1a5a:	b7 07       	cpc	r27, r23
    1a5c:	10 f0       	brcs	.+4      	; 0x1a62 <__udivmodhi4_ep>
    1a5e:	a6 1b       	sub	r26, r22
    1a60:	b7 0b       	sbc	r27, r23

00001a62 <__udivmodhi4_ep>:
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	5a 95       	dec	r21
    1a68:	a9 f7       	brne	.-22     	; 0x1a54 <__udivmodhi4_loop>
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	08 95       	ret

00001a74 <calloc>:
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	86 9f       	mul	r24, r22
    1a7e:	80 01       	movw	r16, r0
    1a80:	87 9f       	mul	r24, r23
    1a82:	10 0d       	add	r17, r0
    1a84:	96 9f       	mul	r25, r22
    1a86:	10 0d       	add	r17, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	0d d0       	rcall	.+26     	; 0x1aa8 <malloc>
    1a8e:	ec 01       	movw	r28, r24
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <calloc+0x28>
    1a94:	a8 01       	movw	r20, r16
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	4a d1       	rcall	.+660    	; 0x1d30 <memset>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	08 95       	ret

00001aa8 <malloc>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	10 f4       	brcc	.+4      	; 0x1ab6 <malloc+0xe>
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	e0 91 48 03 	lds	r30, 0x0348
    1aba:	f0 91 49 03 	lds	r31, 0x0349
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	a0 e0       	ldi	r26, 0x00	; 0
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	30 97       	sbiw	r30, 0x00	; 0
    1ac8:	39 f1       	breq	.+78     	; 0x1b18 <malloc+0x70>
    1aca:	40 81       	ld	r20, Z
    1acc:	51 81       	ldd	r21, Z+1	; 0x01
    1ace:	48 17       	cp	r20, r24
    1ad0:	59 07       	cpc	r21, r25
    1ad2:	b8 f0       	brcs	.+46     	; 0x1b02 <malloc+0x5a>
    1ad4:	48 17       	cp	r20, r24
    1ad6:	59 07       	cpc	r21, r25
    1ad8:	71 f4       	brne	.+28     	; 0x1af6 <malloc+0x4e>
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	10 97       	sbiw	r26, 0x00	; 0
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <malloc+0x44>
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	9c 93       	st	X, r25
    1ae6:	8e 93       	st	-X, r24
    1ae8:	12 97       	sbiw	r26, 0x02	; 2
    1aea:	2c c0       	rjmp	.+88     	; 0x1b44 <malloc+0x9c>
    1aec:	90 93 49 03 	sts	0x0349, r25
    1af0:	80 93 48 03 	sts	0x0348, r24
    1af4:	27 c0       	rjmp	.+78     	; 0x1b44 <malloc+0x9c>
    1af6:	21 15       	cp	r18, r1
    1af8:	31 05       	cpc	r19, r1
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <malloc+0x60>
    1afc:	42 17       	cp	r20, r18
    1afe:	53 07       	cpc	r21, r19
    1b00:	18 f0       	brcs	.+6      	; 0x1b08 <malloc+0x60>
    1b02:	a9 01       	movw	r20, r18
    1b04:	db 01       	movw	r26, r22
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <malloc+0x62>
    1b08:	ef 01       	movw	r28, r30
    1b0a:	9a 01       	movw	r18, r20
    1b0c:	bd 01       	movw	r22, r26
    1b0e:	df 01       	movw	r26, r30
    1b10:	02 80       	ldd	r0, Z+2	; 0x02
    1b12:	f3 81       	ldd	r31, Z+3	; 0x03
    1b14:	e0 2d       	mov	r30, r0
    1b16:	d7 cf       	rjmp	.-82     	; 0x1ac6 <malloc+0x1e>
    1b18:	21 15       	cp	r18, r1
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	f9 f0       	breq	.+62     	; 0x1b5c <malloc+0xb4>
    1b1e:	28 1b       	sub	r18, r24
    1b20:	39 0b       	sbc	r19, r25
    1b22:	24 30       	cpi	r18, 0x04	; 4
    1b24:	31 05       	cpc	r19, r1
    1b26:	80 f4       	brcc	.+32     	; 0x1b48 <malloc+0xa0>
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	61 15       	cp	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	21 f0       	breq	.+8      	; 0x1b3a <malloc+0x92>
    1b32:	fb 01       	movw	r30, r22
    1b34:	93 83       	std	Z+3, r25	; 0x03
    1b36:	82 83       	std	Z+2, r24	; 0x02
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <malloc+0x9a>
    1b3a:	90 93 49 03 	sts	0x0349, r25
    1b3e:	80 93 48 03 	sts	0x0348, r24
    1b42:	fe 01       	movw	r30, r28
    1b44:	32 96       	adiw	r30, 0x02	; 2
    1b46:	44 c0       	rjmp	.+136    	; 0x1bd0 <malloc+0x128>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e2 0f       	add	r30, r18
    1b4c:	f3 1f       	adc	r31, r19
    1b4e:	81 93       	st	Z+, r24
    1b50:	91 93       	st	Z+, r25
    1b52:	22 50       	subi	r18, 0x02	; 2
    1b54:	31 09       	sbc	r19, r1
    1b56:	39 83       	std	Y+1, r19	; 0x01
    1b58:	28 83       	st	Y, r18
    1b5a:	3a c0       	rjmp	.+116    	; 0x1bd0 <malloc+0x128>
    1b5c:	20 91 46 03 	lds	r18, 0x0346
    1b60:	30 91 47 03 	lds	r19, 0x0347
    1b64:	23 2b       	or	r18, r19
    1b66:	41 f4       	brne	.+16     	; 0x1b78 <malloc+0xd0>
    1b68:	20 91 02 01 	lds	r18, 0x0102
    1b6c:	30 91 03 01 	lds	r19, 0x0103
    1b70:	30 93 47 03 	sts	0x0347, r19
    1b74:	20 93 46 03 	sts	0x0346, r18
    1b78:	20 91 00 01 	lds	r18, 0x0100
    1b7c:	30 91 01 01 	lds	r19, 0x0101
    1b80:	21 15       	cp	r18, r1
    1b82:	31 05       	cpc	r19, r1
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <malloc+0xee>
    1b86:	2d b7       	in	r18, 0x3d	; 61
    1b88:	3e b7       	in	r19, 0x3e	; 62
    1b8a:	40 91 04 01 	lds	r20, 0x0104
    1b8e:	50 91 05 01 	lds	r21, 0x0105
    1b92:	24 1b       	sub	r18, r20
    1b94:	35 0b       	sbc	r19, r21
    1b96:	e0 91 46 03 	lds	r30, 0x0346
    1b9a:	f0 91 47 03 	lds	r31, 0x0347
    1b9e:	e2 17       	cp	r30, r18
    1ba0:	f3 07       	cpc	r31, r19
    1ba2:	a0 f4       	brcc	.+40     	; 0x1bcc <malloc+0x124>
    1ba4:	2e 1b       	sub	r18, r30
    1ba6:	3f 0b       	sbc	r19, r31
    1ba8:	28 17       	cp	r18, r24
    1baa:	39 07       	cpc	r19, r25
    1bac:	78 f0       	brcs	.+30     	; 0x1bcc <malloc+0x124>
    1bae:	ac 01       	movw	r20, r24
    1bb0:	4e 5f       	subi	r20, 0xFE	; 254
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	24 17       	cp	r18, r20
    1bb6:	35 07       	cpc	r19, r21
    1bb8:	48 f0       	brcs	.+18     	; 0x1bcc <malloc+0x124>
    1bba:	4e 0f       	add	r20, r30
    1bbc:	5f 1f       	adc	r21, r31
    1bbe:	50 93 47 03 	sts	0x0347, r21
    1bc2:	40 93 46 03 	sts	0x0346, r20
    1bc6:	81 93       	st	Z+, r24
    1bc8:	91 93       	st	Z+, r25
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <malloc+0x128>
    1bcc:	e0 e0       	ldi	r30, 0x00	; 0
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	cf 01       	movw	r24, r30
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <free>:
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <free+0xa>
    1be0:	87 c0       	rjmp	.+270    	; 0x1cf0 <free+0x118>
    1be2:	fc 01       	movw	r30, r24
    1be4:	32 97       	sbiw	r30, 0x02	; 2
    1be6:	13 82       	std	Z+3, r1	; 0x03
    1be8:	12 82       	std	Z+2, r1	; 0x02
    1bea:	c0 91 48 03 	lds	r28, 0x0348
    1bee:	d0 91 49 03 	lds	r29, 0x0349
    1bf2:	20 97       	sbiw	r28, 0x00	; 0
    1bf4:	81 f4       	brne	.+32     	; 0x1c16 <free+0x3e>
    1bf6:	20 81       	ld	r18, Z
    1bf8:	31 81       	ldd	r19, Z+1	; 0x01
    1bfa:	28 0f       	add	r18, r24
    1bfc:	39 1f       	adc	r19, r25
    1bfe:	80 91 46 03 	lds	r24, 0x0346
    1c02:	90 91 47 03 	lds	r25, 0x0347
    1c06:	82 17       	cp	r24, r18
    1c08:	93 07       	cpc	r25, r19
    1c0a:	79 f5       	brne	.+94     	; 0x1c6a <free+0x92>
    1c0c:	f0 93 47 03 	sts	0x0347, r31
    1c10:	e0 93 46 03 	sts	0x0346, r30
    1c14:	6d c0       	rjmp	.+218    	; 0x1cf0 <free+0x118>
    1c16:	de 01       	movw	r26, r28
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	ae 17       	cp	r26, r30
    1c1e:	bf 07       	cpc	r27, r31
    1c20:	50 f4       	brcc	.+20     	; 0x1c36 <free+0x5e>
    1c22:	12 96       	adiw	r26, 0x02	; 2
    1c24:	4d 91       	ld	r20, X+
    1c26:	5c 91       	ld	r21, X
    1c28:	13 97       	sbiw	r26, 0x03	; 3
    1c2a:	9d 01       	movw	r18, r26
    1c2c:	41 15       	cp	r20, r1
    1c2e:	51 05       	cpc	r21, r1
    1c30:	09 f1       	breq	.+66     	; 0x1c74 <free+0x9c>
    1c32:	da 01       	movw	r26, r20
    1c34:	f3 cf       	rjmp	.-26     	; 0x1c1c <free+0x44>
    1c36:	b3 83       	std	Z+3, r27	; 0x03
    1c38:	a2 83       	std	Z+2, r26	; 0x02
    1c3a:	40 81       	ld	r20, Z
    1c3c:	51 81       	ldd	r21, Z+1	; 0x01
    1c3e:	84 0f       	add	r24, r20
    1c40:	95 1f       	adc	r25, r21
    1c42:	8a 17       	cp	r24, r26
    1c44:	9b 07       	cpc	r25, r27
    1c46:	71 f4       	brne	.+28     	; 0x1c64 <free+0x8c>
    1c48:	8d 91       	ld	r24, X+
    1c4a:	9c 91       	ld	r25, X
    1c4c:	11 97       	sbiw	r26, 0x01	; 1
    1c4e:	84 0f       	add	r24, r20
    1c50:	95 1f       	adc	r25, r21
    1c52:	02 96       	adiw	r24, 0x02	; 2
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	12 96       	adiw	r26, 0x02	; 2
    1c5a:	8d 91       	ld	r24, X+
    1c5c:	9c 91       	ld	r25, X
    1c5e:	13 97       	sbiw	r26, 0x03	; 3
    1c60:	93 83       	std	Z+3, r25	; 0x03
    1c62:	82 83       	std	Z+2, r24	; 0x02
    1c64:	21 15       	cp	r18, r1
    1c66:	31 05       	cpc	r19, r1
    1c68:	29 f4       	brne	.+10     	; 0x1c74 <free+0x9c>
    1c6a:	f0 93 49 03 	sts	0x0349, r31
    1c6e:	e0 93 48 03 	sts	0x0348, r30
    1c72:	3e c0       	rjmp	.+124    	; 0x1cf0 <free+0x118>
    1c74:	d9 01       	movw	r26, r18
    1c76:	13 96       	adiw	r26, 0x03	; 3
    1c78:	fc 93       	st	X, r31
    1c7a:	ee 93       	st	-X, r30
    1c7c:	12 97       	sbiw	r26, 0x02	; 2
    1c7e:	4d 91       	ld	r20, X+
    1c80:	5d 91       	ld	r21, X+
    1c82:	a4 0f       	add	r26, r20
    1c84:	b5 1f       	adc	r27, r21
    1c86:	ea 17       	cp	r30, r26
    1c88:	fb 07       	cpc	r31, r27
    1c8a:	79 f4       	brne	.+30     	; 0x1caa <free+0xd2>
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	84 0f       	add	r24, r20
    1c92:	95 1f       	adc	r25, r21
    1c94:	02 96       	adiw	r24, 0x02	; 2
    1c96:	d9 01       	movw	r26, r18
    1c98:	11 96       	adiw	r26, 0x01	; 1
    1c9a:	9c 93       	st	X, r25
    1c9c:	8e 93       	st	-X, r24
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	13 96       	adiw	r26, 0x03	; 3
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
    1ca8:	12 97       	sbiw	r26, 0x02	; 2
    1caa:	e0 e0       	ldi	r30, 0x00	; 0
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <free+0xe4>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ec 01       	movw	r28, r24
    1cba:	f9 cf       	rjmp	.-14     	; 0x1cae <free+0xd6>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	02 96       	adiw	r24, 0x02	; 2
    1cc0:	28 81       	ld	r18, Y
    1cc2:	39 81       	ldd	r19, Y+1	; 0x01
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	20 91 46 03 	lds	r18, 0x0346
    1ccc:	30 91 47 03 	lds	r19, 0x0347
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	69 f4       	brne	.+26     	; 0x1cf0 <free+0x118>
    1cd6:	30 97       	sbiw	r30, 0x00	; 0
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <free+0x10c>
    1cda:	10 92 49 03 	sts	0x0349, r1
    1cde:	10 92 48 03 	sts	0x0348, r1
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <free+0x110>
    1ce4:	13 82       	std	Z+3, r1	; 0x03
    1ce6:	12 82       	std	Z+2, r1	; 0x02
    1ce8:	d0 93 47 03 	sts	0x0347, r29
    1cec:	c0 93 46 03 	sts	0x0346, r28
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <atoi>:
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	88 27       	eor	r24, r24
    1cfa:	99 27       	eor	r25, r25
    1cfc:	e8 94       	clt
    1cfe:	21 91       	ld	r18, Z+
    1d00:	20 32       	cpi	r18, 0x20	; 32
    1d02:	e9 f3       	breq	.-6      	; 0x1cfe <atoi+0x8>
    1d04:	29 30       	cpi	r18, 0x09	; 9
    1d06:	10 f0       	brcs	.+4      	; 0x1d0c <atoi+0x16>
    1d08:	2e 30       	cpi	r18, 0x0E	; 14
    1d0a:	c8 f3       	brcs	.-14     	; 0x1cfe <atoi+0x8>
    1d0c:	2b 32       	cpi	r18, 0x2B	; 43
    1d0e:	39 f0       	breq	.+14     	; 0x1d1e <atoi+0x28>
    1d10:	2d 32       	cpi	r18, 0x2D	; 45
    1d12:	31 f4       	brne	.+12     	; 0x1d20 <atoi+0x2a>
    1d14:	68 94       	set
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <atoi+0x28>
    1d18:	22 d0       	rcall	.+68     	; 0x1d5e <__mulhi_const_10>
    1d1a:	82 0f       	add	r24, r18
    1d1c:	91 1d       	adc	r25, r1
    1d1e:	21 91       	ld	r18, Z+
    1d20:	20 53       	subi	r18, 0x30	; 48
    1d22:	2a 30       	cpi	r18, 0x0A	; 10
    1d24:	c8 f3       	brcs	.-14     	; 0x1d18 <atoi+0x22>
    1d26:	1e f4       	brtc	.+6      	; 0x1d2e <atoi+0x38>
    1d28:	90 95       	com	r25
    1d2a:	81 95       	neg	r24
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	08 95       	ret

00001d30 <memset>:
    1d30:	dc 01       	movw	r26, r24
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <memset+0x6>
    1d34:	6d 93       	st	X+, r22
    1d36:	41 50       	subi	r20, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	e0 f7       	brcc	.-8      	; 0x1d34 <memset+0x4>
    1d3c:	08 95       	ret

00001d3e <strcmp>:
    1d3e:	fb 01       	movw	r30, r22
    1d40:	dc 01       	movw	r26, r24
    1d42:	8d 91       	ld	r24, X+
    1d44:	01 90       	ld	r0, Z+
    1d46:	80 19       	sub	r24, r0
    1d48:	01 10       	cpse	r0, r1
    1d4a:	d9 f3       	breq	.-10     	; 0x1d42 <strcmp+0x4>
    1d4c:	99 0b       	sbc	r25, r25
    1d4e:	08 95       	ret

00001d50 <strcpy>:
    1d50:	fb 01       	movw	r30, r22
    1d52:	dc 01       	movw	r26, r24
    1d54:	01 90       	ld	r0, Z+
    1d56:	0d 92       	st	X+, r0
    1d58:	00 20       	and	r0, r0
    1d5a:	e1 f7       	brne	.-8      	; 0x1d54 <strcpy+0x4>
    1d5c:	08 95       	ret

00001d5e <__mulhi_const_10>:
    1d5e:	7a e0       	ldi	r23, 0x0A	; 10
    1d60:	97 9f       	mul	r25, r23
    1d62:	90 2d       	mov	r25, r0
    1d64:	87 9f       	mul	r24, r23
    1d66:	80 2d       	mov	r24, r0
    1d68:	91 0d       	add	r25, r1
    1d6a:	11 24       	eor	r1, r1
    1d6c:	08 95       	ret

00001d6e <sprintf>:
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	0d 89       	ldd	r16, Y+21	; 0x15
    1d88:	1e 89       	ldd	r17, Y+22	; 0x16
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	8c 83       	std	Y+4, r24	; 0x04
    1d8e:	1a 83       	std	Y+2, r17	; 0x02
    1d90:	09 83       	std	Y+1, r16	; 0x01
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	9f e7       	ldi	r25, 0x7F	; 127
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	ae 01       	movw	r20, r28
    1d9c:	47 5e       	subi	r20, 0xE7	; 231
    1d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1da0:	6f 89       	ldd	r22, Y+23	; 0x17
    1da2:	78 8d       	ldd	r23, Y+24	; 0x18
    1da4:	ce 01       	movw	r24, r28
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	48 d0       	rcall	.+144    	; 0x1e3a <vfprintf>
    1daa:	ef 81       	ldd	r30, Y+7	; 0x07
    1dac:	f8 85       	ldd	r31, Y+8	; 0x08
    1dae:	e0 0f       	add	r30, r16
    1db0:	f1 1f       	adc	r31, r17
    1db2:	10 82       	st	Z, r1
    1db4:	2e 96       	adiw	r28, 0x0e	; 14
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <vsnprintf>:
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2e 97       	sbiw	r28, 0x0e	; 14
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	8c 01       	movw	r16, r24
    1de4:	ca 01       	movw	r24, r20
    1de6:	46 e0       	ldi	r20, 0x06	; 6
    1de8:	4c 83       	std	Y+4, r20	; 0x04
    1dea:	1a 83       	std	Y+2, r17	; 0x02
    1dec:	09 83       	std	Y+1, r16	; 0x01
    1dee:	77 ff       	sbrs	r23, 7
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <vsnprintf+0x2c>
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e8       	ldi	r23, 0x80	; 128
    1df6:	61 50       	subi	r22, 0x01	; 1
    1df8:	71 09       	sbc	r23, r1
    1dfa:	7e 83       	std	Y+6, r23	; 0x06
    1dfc:	6d 83       	std	Y+5, r22	; 0x05
    1dfe:	a9 01       	movw	r20, r18
    1e00:	bc 01       	movw	r22, r24
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	19 d0       	rcall	.+50     	; 0x1e3a <vfprintf>
    1e08:	4d 81       	ldd	r20, Y+5	; 0x05
    1e0a:	5e 81       	ldd	r21, Y+6	; 0x06
    1e0c:	57 fd       	sbrc	r21, 7
    1e0e:	0a c0       	rjmp	.+20     	; 0x1e24 <vsnprintf+0x5a>
    1e10:	2f 81       	ldd	r18, Y+7	; 0x07
    1e12:	38 85       	ldd	r19, Y+8	; 0x08
    1e14:	42 17       	cp	r20, r18
    1e16:	53 07       	cpc	r21, r19
    1e18:	0c f4       	brge	.+2      	; 0x1e1c <vsnprintf+0x52>
    1e1a:	9a 01       	movw	r18, r20
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	10 82       	st	Z, r1
    1e24:	2e 96       	adiw	r28, 0x0e	; 14
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <vfprintf>:
    1e3a:	2f 92       	push	r2
    1e3c:	3f 92       	push	r3
    1e3e:	4f 92       	push	r4
    1e40:	5f 92       	push	r5
    1e42:	6f 92       	push	r6
    1e44:	7f 92       	push	r7
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	2c 97       	sbiw	r28, 0x0c	; 12
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	7c 01       	movw	r14, r24
    1e70:	6b 01       	movw	r12, r22
    1e72:	8a 01       	movw	r16, r20
    1e74:	fc 01       	movw	r30, r24
    1e76:	17 82       	std	Z+7, r1	; 0x07
    1e78:	16 82       	std	Z+6, r1	; 0x06
    1e7a:	83 81       	ldd	r24, Z+3	; 0x03
    1e7c:	81 ff       	sbrs	r24, 1
    1e7e:	b0 c1       	rjmp	.+864    	; 0x21e0 <vfprintf+0x3a6>
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	4c 01       	movw	r8, r24
    1e86:	f7 01       	movw	r30, r14
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	93 fd       	sbrc	r25, 3
    1e8e:	85 91       	lpm	r24, Z+
    1e90:	93 ff       	sbrs	r25, 3
    1e92:	81 91       	ld	r24, Z+
    1e94:	6f 01       	movw	r12, r30
    1e96:	88 23       	and	r24, r24
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <vfprintf+0x62>
    1e9a:	9e c1       	rjmp	.+828    	; 0x21d8 <vfprintf+0x39e>
    1e9c:	85 32       	cpi	r24, 0x25	; 37
    1e9e:	39 f4       	brne	.+14     	; 0x1eae <vfprintf+0x74>
    1ea0:	93 fd       	sbrc	r25, 3
    1ea2:	85 91       	lpm	r24, Z+
    1ea4:	93 ff       	sbrs	r25, 3
    1ea6:	81 91       	ld	r24, Z+
    1ea8:	6f 01       	movw	r12, r30
    1eaa:	85 32       	cpi	r24, 0x25	; 37
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <vfprintf+0x7c>
    1eae:	b7 01       	movw	r22, r14
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	c7 d1       	rcall	.+910    	; 0x2242 <fputc>
    1eb4:	e8 cf       	rjmp	.-48     	; 0x1e86 <vfprintf+0x4c>
    1eb6:	51 2c       	mov	r5, r1
    1eb8:	31 2c       	mov	r3, r1
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	20 32       	cpi	r18, 0x20	; 32
    1ebe:	a0 f4       	brcc	.+40     	; 0x1ee8 <vfprintf+0xae>
    1ec0:	8b 32       	cpi	r24, 0x2B	; 43
    1ec2:	69 f0       	breq	.+26     	; 0x1ede <vfprintf+0xa4>
    1ec4:	30 f4       	brcc	.+12     	; 0x1ed2 <vfprintf+0x98>
    1ec6:	80 32       	cpi	r24, 0x20	; 32
    1ec8:	59 f0       	breq	.+22     	; 0x1ee0 <vfprintf+0xa6>
    1eca:	83 32       	cpi	r24, 0x23	; 35
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <vfprintf+0xae>
    1ece:	20 61       	ori	r18, 0x10	; 16
    1ed0:	2c c0       	rjmp	.+88     	; 0x1f2a <vfprintf+0xf0>
    1ed2:	8d 32       	cpi	r24, 0x2D	; 45
    1ed4:	39 f0       	breq	.+14     	; 0x1ee4 <vfprintf+0xaa>
    1ed6:	80 33       	cpi	r24, 0x30	; 48
    1ed8:	39 f4       	brne	.+14     	; 0x1ee8 <vfprintf+0xae>
    1eda:	21 60       	ori	r18, 0x01	; 1
    1edc:	26 c0       	rjmp	.+76     	; 0x1f2a <vfprintf+0xf0>
    1ede:	22 60       	ori	r18, 0x02	; 2
    1ee0:	24 60       	ori	r18, 0x04	; 4
    1ee2:	23 c0       	rjmp	.+70     	; 0x1f2a <vfprintf+0xf0>
    1ee4:	28 60       	ori	r18, 0x08	; 8
    1ee6:	21 c0       	rjmp	.+66     	; 0x1f2a <vfprintf+0xf0>
    1ee8:	27 fd       	sbrc	r18, 7
    1eea:	27 c0       	rjmp	.+78     	; 0x1f3a <vfprintf+0x100>
    1eec:	30 ed       	ldi	r19, 0xD0	; 208
    1eee:	38 0f       	add	r19, r24
    1ef0:	3a 30       	cpi	r19, 0x0A	; 10
    1ef2:	78 f4       	brcc	.+30     	; 0x1f12 <vfprintf+0xd8>
    1ef4:	26 ff       	sbrs	r18, 6
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0xca>
    1ef8:	fa e0       	ldi	r31, 0x0A	; 10
    1efa:	5f 9e       	mul	r5, r31
    1efc:	30 0d       	add	r19, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	53 2e       	mov	r5, r19
    1f02:	13 c0       	rjmp	.+38     	; 0x1f2a <vfprintf+0xf0>
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	38 9e       	mul	r3, r24
    1f08:	30 0d       	add	r19, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	33 2e       	mov	r3, r19
    1f0e:	20 62       	ori	r18, 0x20	; 32
    1f10:	0c c0       	rjmp	.+24     	; 0x1f2a <vfprintf+0xf0>
    1f12:	8e 32       	cpi	r24, 0x2E	; 46
    1f14:	21 f4       	brne	.+8      	; 0x1f1e <vfprintf+0xe4>
    1f16:	26 fd       	sbrc	r18, 6
    1f18:	5f c1       	rjmp	.+702    	; 0x21d8 <vfprintf+0x39e>
    1f1a:	20 64       	ori	r18, 0x40	; 64
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <vfprintf+0xf0>
    1f1e:	8c 36       	cpi	r24, 0x6C	; 108
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <vfprintf+0xec>
    1f22:	20 68       	ori	r18, 0x80	; 128
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <vfprintf+0xf0>
    1f26:	88 36       	cpi	r24, 0x68	; 104
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <vfprintf+0x100>
    1f2a:	f6 01       	movw	r30, r12
    1f2c:	93 fd       	sbrc	r25, 3
    1f2e:	85 91       	lpm	r24, Z+
    1f30:	93 ff       	sbrs	r25, 3
    1f32:	81 91       	ld	r24, Z+
    1f34:	6f 01       	movw	r12, r30
    1f36:	81 11       	cpse	r24, r1
    1f38:	c1 cf       	rjmp	.-126    	; 0x1ebc <vfprintf+0x82>
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	9f 7d       	andi	r25, 0xDF	; 223
    1f3e:	95 54       	subi	r25, 0x45	; 69
    1f40:	93 30       	cpi	r25, 0x03	; 3
    1f42:	28 f4       	brcc	.+10     	; 0x1f4e <vfprintf+0x114>
    1f44:	0c 5f       	subi	r16, 0xFC	; 252
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	ff e3       	ldi	r31, 0x3F	; 63
    1f4a:	f9 83       	std	Y+1, r31	; 0x01
    1f4c:	0d c0       	rjmp	.+26     	; 0x1f68 <vfprintf+0x12e>
    1f4e:	83 36       	cpi	r24, 0x63	; 99
    1f50:	31 f0       	breq	.+12     	; 0x1f5e <vfprintf+0x124>
    1f52:	83 37       	cpi	r24, 0x73	; 115
    1f54:	71 f0       	breq	.+28     	; 0x1f72 <vfprintf+0x138>
    1f56:	83 35       	cpi	r24, 0x53	; 83
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <vfprintf+0x122>
    1f5a:	57 c0       	rjmp	.+174    	; 0x200a <vfprintf+0x1d0>
    1f5c:	21 c0       	rjmp	.+66     	; 0x1fa0 <vfprintf+0x166>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	80 81       	ld	r24, Z
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	0e 5f       	subi	r16, 0xFE	; 254
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	44 24       	eor	r4, r4
    1f6a:	43 94       	inc	r4
    1f6c:	51 2c       	mov	r5, r1
    1f6e:	54 01       	movw	r10, r8
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <vfprintf+0x160>
    1f72:	38 01       	movw	r6, r16
    1f74:	f2 e0       	ldi	r31, 0x02	; 2
    1f76:	6f 0e       	add	r6, r31
    1f78:	71 1c       	adc	r7, r1
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	a0 80       	ld	r10, Z
    1f7e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f80:	26 ff       	sbrs	r18, 6
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <vfprintf+0x150>
    1f84:	65 2d       	mov	r22, r5
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <vfprintf+0x154>
    1f8a:	6f ef       	ldi	r22, 0xFF	; 255
    1f8c:	7f ef       	ldi	r23, 0xFF	; 255
    1f8e:	c5 01       	movw	r24, r10
    1f90:	2c 87       	std	Y+12, r18	; 0x0c
    1f92:	4c d1       	rcall	.+664    	; 0x222c <strnlen>
    1f94:	2c 01       	movw	r4, r24
    1f96:	83 01       	movw	r16, r6
    1f98:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9a:	2f 77       	andi	r18, 0x7F	; 127
    1f9c:	22 2e       	mov	r2, r18
    1f9e:	16 c0       	rjmp	.+44     	; 0x1fcc <vfprintf+0x192>
    1fa0:	38 01       	movw	r6, r16
    1fa2:	f2 e0       	ldi	r31, 0x02	; 2
    1fa4:	6f 0e       	add	r6, r31
    1fa6:	71 1c       	adc	r7, r1
    1fa8:	f8 01       	movw	r30, r16
    1faa:	a0 80       	ld	r10, Z
    1fac:	b1 80       	ldd	r11, Z+1	; 0x01
    1fae:	26 ff       	sbrs	r18, 6
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x17e>
    1fb2:	65 2d       	mov	r22, r5
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0x182>
    1fb8:	6f ef       	ldi	r22, 0xFF	; 255
    1fba:	7f ef       	ldi	r23, 0xFF	; 255
    1fbc:	c5 01       	movw	r24, r10
    1fbe:	2c 87       	std	Y+12, r18	; 0x0c
    1fc0:	2a d1       	rcall	.+596    	; 0x2216 <strnlen_P>
    1fc2:	2c 01       	movw	r4, r24
    1fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc6:	20 68       	ori	r18, 0x80	; 128
    1fc8:	22 2e       	mov	r2, r18
    1fca:	83 01       	movw	r16, r6
    1fcc:	23 fc       	sbrc	r2, 3
    1fce:	19 c0       	rjmp	.+50     	; 0x2002 <vfprintf+0x1c8>
    1fd0:	83 2d       	mov	r24, r3
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	48 16       	cp	r4, r24
    1fd6:	59 06       	cpc	r5, r25
    1fd8:	a0 f4       	brcc	.+40     	; 0x2002 <vfprintf+0x1c8>
    1fda:	b7 01       	movw	r22, r14
    1fdc:	80 e2       	ldi	r24, 0x20	; 32
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	30 d1       	rcall	.+608    	; 0x2242 <fputc>
    1fe2:	3a 94       	dec	r3
    1fe4:	f5 cf       	rjmp	.-22     	; 0x1fd0 <vfprintf+0x196>
    1fe6:	f5 01       	movw	r30, r10
    1fe8:	27 fc       	sbrc	r2, 7
    1fea:	85 91       	lpm	r24, Z+
    1fec:	27 fe       	sbrs	r2, 7
    1fee:	81 91       	ld	r24, Z+
    1ff0:	5f 01       	movw	r10, r30
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	25 d1       	rcall	.+586    	; 0x2242 <fputc>
    1ff8:	31 10       	cpse	r3, r1
    1ffa:	3a 94       	dec	r3
    1ffc:	f1 e0       	ldi	r31, 0x01	; 1
    1ffe:	4f 1a       	sub	r4, r31
    2000:	51 08       	sbc	r5, r1
    2002:	41 14       	cp	r4, r1
    2004:	51 04       	cpc	r5, r1
    2006:	79 f7       	brne	.-34     	; 0x1fe6 <vfprintf+0x1ac>
    2008:	de c0       	rjmp	.+444    	; 0x21c6 <vfprintf+0x38c>
    200a:	84 36       	cpi	r24, 0x64	; 100
    200c:	11 f0       	breq	.+4      	; 0x2012 <vfprintf+0x1d8>
    200e:	89 36       	cpi	r24, 0x69	; 105
    2010:	31 f5       	brne	.+76     	; 0x205e <vfprintf+0x224>
    2012:	f8 01       	movw	r30, r16
    2014:	27 ff       	sbrs	r18, 7
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <vfprintf+0x1ec>
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	0c 5f       	subi	r16, 0xFC	; 252
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	08 c0       	rjmp	.+16     	; 0x2036 <vfprintf+0x1fc>
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	88 27       	eor	r24, r24
    202c:	77 fd       	sbrc	r23, 7
    202e:	80 95       	com	r24
    2030:	98 2f       	mov	r25, r24
    2032:	0e 5f       	subi	r16, 0xFE	; 254
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	2f 76       	andi	r18, 0x6F	; 111
    2038:	b2 2e       	mov	r11, r18
    203a:	97 ff       	sbrs	r25, 7
    203c:	09 c0       	rjmp	.+18     	; 0x2050 <vfprintf+0x216>
    203e:	90 95       	com	r25
    2040:	80 95       	com	r24
    2042:	70 95       	com	r23
    2044:	61 95       	neg	r22
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	8f 4f       	sbci	r24, 0xFF	; 255
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	20 68       	ori	r18, 0x80	; 128
    204e:	b2 2e       	mov	r11, r18
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	a4 01       	movw	r20, r8
    2056:	27 d1       	rcall	.+590    	; 0x22a6 <__ultoa_invert>
    2058:	a8 2e       	mov	r10, r24
    205a:	a8 18       	sub	r10, r8
    205c:	43 c0       	rjmp	.+134    	; 0x20e4 <vfprintf+0x2aa>
    205e:	85 37       	cpi	r24, 0x75	; 117
    2060:	29 f4       	brne	.+10     	; 0x206c <vfprintf+0x232>
    2062:	2f 7e       	andi	r18, 0xEF	; 239
    2064:	b2 2e       	mov	r11, r18
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	25 c0       	rjmp	.+74     	; 0x20b6 <vfprintf+0x27c>
    206c:	f2 2f       	mov	r31, r18
    206e:	f9 7f       	andi	r31, 0xF9	; 249
    2070:	bf 2e       	mov	r11, r31
    2072:	8f 36       	cpi	r24, 0x6F	; 111
    2074:	c1 f0       	breq	.+48     	; 0x20a6 <vfprintf+0x26c>
    2076:	18 f4       	brcc	.+6      	; 0x207e <vfprintf+0x244>
    2078:	88 35       	cpi	r24, 0x58	; 88
    207a:	79 f0       	breq	.+30     	; 0x209a <vfprintf+0x260>
    207c:	ad c0       	rjmp	.+346    	; 0x21d8 <vfprintf+0x39e>
    207e:	80 37       	cpi	r24, 0x70	; 112
    2080:	19 f0       	breq	.+6      	; 0x2088 <vfprintf+0x24e>
    2082:	88 37       	cpi	r24, 0x78	; 120
    2084:	21 f0       	breq	.+8      	; 0x208e <vfprintf+0x254>
    2086:	a8 c0       	rjmp	.+336    	; 0x21d8 <vfprintf+0x39e>
    2088:	2f 2f       	mov	r18, r31
    208a:	20 61       	ori	r18, 0x10	; 16
    208c:	b2 2e       	mov	r11, r18
    208e:	b4 fe       	sbrs	r11, 4
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <vfprintf+0x272>
    2092:	8b 2d       	mov	r24, r11
    2094:	84 60       	ori	r24, 0x04	; 4
    2096:	b8 2e       	mov	r11, r24
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <vfprintf+0x272>
    209a:	24 ff       	sbrs	r18, 4
    209c:	0a c0       	rjmp	.+20     	; 0x20b2 <vfprintf+0x278>
    209e:	9f 2f       	mov	r25, r31
    20a0:	96 60       	ori	r25, 0x06	; 6
    20a2:	b9 2e       	mov	r11, r25
    20a4:	06 c0       	rjmp	.+12     	; 0x20b2 <vfprintf+0x278>
    20a6:	28 e0       	ldi	r18, 0x08	; 8
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <vfprintf+0x27c>
    20ac:	20 e1       	ldi	r18, 0x10	; 16
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x27c>
    20b2:	20 e1       	ldi	r18, 0x10	; 16
    20b4:	32 e0       	ldi	r19, 0x02	; 2
    20b6:	f8 01       	movw	r30, r16
    20b8:	b7 fe       	sbrs	r11, 7
    20ba:	07 c0       	rjmp	.+14     	; 0x20ca <vfprintf+0x290>
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	0c 5f       	subi	r16, 0xFC	; 252
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <vfprintf+0x29c>
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 5f       	subi	r16, 0xFE	; 254
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	a4 01       	movw	r20, r8
    20d8:	e6 d0       	rcall	.+460    	; 0x22a6 <__ultoa_invert>
    20da:	a8 2e       	mov	r10, r24
    20dc:	a8 18       	sub	r10, r8
    20de:	fb 2d       	mov	r31, r11
    20e0:	ff 77       	andi	r31, 0x7F	; 127
    20e2:	bf 2e       	mov	r11, r31
    20e4:	b6 fe       	sbrs	r11, 6
    20e6:	0b c0       	rjmp	.+22     	; 0x20fe <vfprintf+0x2c4>
    20e8:	2b 2d       	mov	r18, r11
    20ea:	2e 7f       	andi	r18, 0xFE	; 254
    20ec:	a5 14       	cp	r10, r5
    20ee:	50 f4       	brcc	.+20     	; 0x2104 <vfprintf+0x2ca>
    20f0:	b4 fe       	sbrs	r11, 4
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <vfprintf+0x2ce>
    20f4:	b2 fc       	sbrc	r11, 2
    20f6:	08 c0       	rjmp	.+16     	; 0x2108 <vfprintf+0x2ce>
    20f8:	2b 2d       	mov	r18, r11
    20fa:	2e 7e       	andi	r18, 0xEE	; 238
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <vfprintf+0x2ce>
    20fe:	7a 2c       	mov	r7, r10
    2100:	2b 2d       	mov	r18, r11
    2102:	03 c0       	rjmp	.+6      	; 0x210a <vfprintf+0x2d0>
    2104:	7a 2c       	mov	r7, r10
    2106:	01 c0       	rjmp	.+2      	; 0x210a <vfprintf+0x2d0>
    2108:	75 2c       	mov	r7, r5
    210a:	24 ff       	sbrs	r18, 4
    210c:	0d c0       	rjmp	.+26     	; 0x2128 <vfprintf+0x2ee>
    210e:	fe 01       	movw	r30, r28
    2110:	ea 0d       	add	r30, r10
    2112:	f1 1d       	adc	r31, r1
    2114:	80 81       	ld	r24, Z
    2116:	80 33       	cpi	r24, 0x30	; 48
    2118:	11 f4       	brne	.+4      	; 0x211e <vfprintf+0x2e4>
    211a:	29 7e       	andi	r18, 0xE9	; 233
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <vfprintf+0x2f6>
    211e:	22 ff       	sbrs	r18, 2
    2120:	06 c0       	rjmp	.+12     	; 0x212e <vfprintf+0x2f4>
    2122:	73 94       	inc	r7
    2124:	73 94       	inc	r7
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <vfprintf+0x2f6>
    2128:	82 2f       	mov	r24, r18
    212a:	86 78       	andi	r24, 0x86	; 134
    212c:	09 f0       	breq	.+2      	; 0x2130 <vfprintf+0x2f6>
    212e:	73 94       	inc	r7
    2130:	23 fd       	sbrc	r18, 3
    2132:	12 c0       	rjmp	.+36     	; 0x2158 <vfprintf+0x31e>
    2134:	20 ff       	sbrs	r18, 0
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <vfprintf+0x30a>
    2138:	5a 2c       	mov	r5, r10
    213a:	73 14       	cp	r7, r3
    213c:	18 f4       	brcc	.+6      	; 0x2144 <vfprintf+0x30a>
    213e:	53 0c       	add	r5, r3
    2140:	57 18       	sub	r5, r7
    2142:	73 2c       	mov	r7, r3
    2144:	73 14       	cp	r7, r3
    2146:	60 f4       	brcc	.+24     	; 0x2160 <vfprintf+0x326>
    2148:	b7 01       	movw	r22, r14
    214a:	80 e2       	ldi	r24, 0x20	; 32
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	2c 87       	std	Y+12, r18	; 0x0c
    2150:	78 d0       	rcall	.+240    	; 0x2242 <fputc>
    2152:	73 94       	inc	r7
    2154:	2c 85       	ldd	r18, Y+12	; 0x0c
    2156:	f6 cf       	rjmp	.-20     	; 0x2144 <vfprintf+0x30a>
    2158:	73 14       	cp	r7, r3
    215a:	10 f4       	brcc	.+4      	; 0x2160 <vfprintf+0x326>
    215c:	37 18       	sub	r3, r7
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <vfprintf+0x328>
    2160:	31 2c       	mov	r3, r1
    2162:	24 ff       	sbrs	r18, 4
    2164:	11 c0       	rjmp	.+34     	; 0x2188 <vfprintf+0x34e>
    2166:	b7 01       	movw	r22, r14
    2168:	80 e3       	ldi	r24, 0x30	; 48
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	2c 87       	std	Y+12, r18	; 0x0c
    216e:	69 d0       	rcall	.+210    	; 0x2242 <fputc>
    2170:	2c 85       	ldd	r18, Y+12	; 0x0c
    2172:	22 ff       	sbrs	r18, 2
    2174:	16 c0       	rjmp	.+44     	; 0x21a2 <vfprintf+0x368>
    2176:	21 ff       	sbrs	r18, 1
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <vfprintf+0x346>
    217a:	88 e5       	ldi	r24, 0x58	; 88
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vfprintf+0x34a>
    2180:	88 e7       	ldi	r24, 0x78	; 120
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	b7 01       	movw	r22, r14
    2186:	0c c0       	rjmp	.+24     	; 0x21a0 <vfprintf+0x366>
    2188:	82 2f       	mov	r24, r18
    218a:	86 78       	andi	r24, 0x86	; 134
    218c:	51 f0       	breq	.+20     	; 0x21a2 <vfprintf+0x368>
    218e:	21 fd       	sbrc	r18, 1
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <vfprintf+0x35c>
    2192:	80 e2       	ldi	r24, 0x20	; 32
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <vfprintf+0x35e>
    2196:	8b e2       	ldi	r24, 0x2B	; 43
    2198:	27 fd       	sbrc	r18, 7
    219a:	8d e2       	ldi	r24, 0x2D	; 45
    219c:	b7 01       	movw	r22, r14
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	50 d0       	rcall	.+160    	; 0x2242 <fputc>
    21a2:	a5 14       	cp	r10, r5
    21a4:	30 f4       	brcc	.+12     	; 0x21b2 <vfprintf+0x378>
    21a6:	b7 01       	movw	r22, r14
    21a8:	80 e3       	ldi	r24, 0x30	; 48
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	4a d0       	rcall	.+148    	; 0x2242 <fputc>
    21ae:	5a 94       	dec	r5
    21b0:	f8 cf       	rjmp	.-16     	; 0x21a2 <vfprintf+0x368>
    21b2:	aa 94       	dec	r10
    21b4:	f4 01       	movw	r30, r8
    21b6:	ea 0d       	add	r30, r10
    21b8:	f1 1d       	adc	r31, r1
    21ba:	80 81       	ld	r24, Z
    21bc:	b7 01       	movw	r22, r14
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	40 d0       	rcall	.+128    	; 0x2242 <fputc>
    21c2:	a1 10       	cpse	r10, r1
    21c4:	f6 cf       	rjmp	.-20     	; 0x21b2 <vfprintf+0x378>
    21c6:	33 20       	and	r3, r3
    21c8:	09 f4       	brne	.+2      	; 0x21cc <vfprintf+0x392>
    21ca:	5d ce       	rjmp	.-838    	; 0x1e86 <vfprintf+0x4c>
    21cc:	b7 01       	movw	r22, r14
    21ce:	80 e2       	ldi	r24, 0x20	; 32
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	37 d0       	rcall	.+110    	; 0x2242 <fputc>
    21d4:	3a 94       	dec	r3
    21d6:	f7 cf       	rjmp	.-18     	; 0x21c6 <vfprintf+0x38c>
    21d8:	f7 01       	movw	r30, r14
    21da:	86 81       	ldd	r24, Z+6	; 0x06
    21dc:	97 81       	ldd	r25, Z+7	; 0x07
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <vfprintf+0x3aa>
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	9f ef       	ldi	r25, 0xFF	; 255
    21e4:	2c 96       	adiw	r28, 0x0c	; 12
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	df 90       	pop	r13
    21fe:	cf 90       	pop	r12
    2200:	bf 90       	pop	r11
    2202:	af 90       	pop	r10
    2204:	9f 90       	pop	r9
    2206:	8f 90       	pop	r8
    2208:	7f 90       	pop	r7
    220a:	6f 90       	pop	r6
    220c:	5f 90       	pop	r5
    220e:	4f 90       	pop	r4
    2210:	3f 90       	pop	r3
    2212:	2f 90       	pop	r2
    2214:	08 95       	ret

00002216 <strnlen_P>:
    2216:	fc 01       	movw	r30, r24
    2218:	05 90       	lpm	r0, Z+
    221a:	61 50       	subi	r22, 0x01	; 1
    221c:	70 40       	sbci	r23, 0x00	; 0
    221e:	01 10       	cpse	r0, r1
    2220:	d8 f7       	brcc	.-10     	; 0x2218 <strnlen_P+0x2>
    2222:	80 95       	com	r24
    2224:	90 95       	com	r25
    2226:	8e 0f       	add	r24, r30
    2228:	9f 1f       	adc	r25, r31
    222a:	08 95       	ret

0000222c <strnlen>:
    222c:	fc 01       	movw	r30, r24
    222e:	61 50       	subi	r22, 0x01	; 1
    2230:	70 40       	sbci	r23, 0x00	; 0
    2232:	01 90       	ld	r0, Z+
    2234:	01 10       	cpse	r0, r1
    2236:	d8 f7       	brcc	.-10     	; 0x222e <strnlen+0x2>
    2238:	80 95       	com	r24
    223a:	90 95       	com	r25
    223c:	8e 0f       	add	r24, r30
    223e:	9f 1f       	adc	r25, r31
    2240:	08 95       	ret

00002242 <fputc>:
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	18 2f       	mov	r17, r24
    224c:	09 2f       	mov	r16, r25
    224e:	eb 01       	movw	r28, r22
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	81 fd       	sbrc	r24, 1
    2254:	03 c0       	rjmp	.+6      	; 0x225c <fputc+0x1a>
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	9f ef       	ldi	r25, 0xFF	; 255
    225a:	20 c0       	rjmp	.+64     	; 0x229c <fputc+0x5a>
    225c:	82 ff       	sbrs	r24, 2
    225e:	10 c0       	rjmp	.+32     	; 0x2280 <fputc+0x3e>
    2260:	4e 81       	ldd	r20, Y+6	; 0x06
    2262:	5f 81       	ldd	r21, Y+7	; 0x07
    2264:	2c 81       	ldd	r18, Y+4	; 0x04
    2266:	3d 81       	ldd	r19, Y+5	; 0x05
    2268:	42 17       	cp	r20, r18
    226a:	53 07       	cpc	r21, r19
    226c:	7c f4       	brge	.+30     	; 0x228c <fputc+0x4a>
    226e:	e8 81       	ld	r30, Y
    2270:	f9 81       	ldd	r31, Y+1	; 0x01
    2272:	9f 01       	movw	r18, r30
    2274:	2f 5f       	subi	r18, 0xFF	; 255
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	39 83       	std	Y+1, r19	; 0x01
    227a:	28 83       	st	Y, r18
    227c:	10 83       	st	Z, r17
    227e:	06 c0       	rjmp	.+12     	; 0x228c <fputc+0x4a>
    2280:	e8 85       	ldd	r30, Y+8	; 0x08
    2282:	f9 85       	ldd	r31, Y+9	; 0x09
    2284:	81 2f       	mov	r24, r17
    2286:	09 95       	icall
    2288:	89 2b       	or	r24, r25
    228a:	29 f7       	brne	.-54     	; 0x2256 <fputc+0x14>
    228c:	2e 81       	ldd	r18, Y+6	; 0x06
    228e:	3f 81       	ldd	r19, Y+7	; 0x07
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	3f 83       	std	Y+7, r19	; 0x07
    2296:	2e 83       	std	Y+6, r18	; 0x06
    2298:	81 2f       	mov	r24, r17
    229a:	90 2f       	mov	r25, r16
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <__ultoa_invert>:
    22a6:	fa 01       	movw	r30, r20
    22a8:	aa 27       	eor	r26, r26
    22aa:	28 30       	cpi	r18, 0x08	; 8
    22ac:	51 f1       	breq	.+84     	; 0x2302 <__ultoa_invert+0x5c>
    22ae:	20 31       	cpi	r18, 0x10	; 16
    22b0:	81 f1       	breq	.+96     	; 0x2312 <__ultoa_invert+0x6c>
    22b2:	e8 94       	clt
    22b4:	6f 93       	push	r22
    22b6:	6e 7f       	andi	r22, 0xFE	; 254
    22b8:	6e 5f       	subi	r22, 0xFE	; 254
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	8f 4f       	sbci	r24, 0xFF	; 255
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	af 4f       	sbci	r26, 0xFF	; 255
    22c2:	b1 e0       	ldi	r27, 0x01	; 1
    22c4:	3e d0       	rcall	.+124    	; 0x2342 <__ultoa_invert+0x9c>
    22c6:	b4 e0       	ldi	r27, 0x04	; 4
    22c8:	3c d0       	rcall	.+120    	; 0x2342 <__ultoa_invert+0x9c>
    22ca:	67 0f       	add	r22, r23
    22cc:	78 1f       	adc	r23, r24
    22ce:	89 1f       	adc	r24, r25
    22d0:	9a 1f       	adc	r25, r26
    22d2:	a1 1d       	adc	r26, r1
    22d4:	68 0f       	add	r22, r24
    22d6:	79 1f       	adc	r23, r25
    22d8:	8a 1f       	adc	r24, r26
    22da:	91 1d       	adc	r25, r1
    22dc:	a1 1d       	adc	r26, r1
    22de:	6a 0f       	add	r22, r26
    22e0:	71 1d       	adc	r23, r1
    22e2:	81 1d       	adc	r24, r1
    22e4:	91 1d       	adc	r25, r1
    22e6:	a1 1d       	adc	r26, r1
    22e8:	20 d0       	rcall	.+64     	; 0x232a <__ultoa_invert+0x84>
    22ea:	09 f4       	brne	.+2      	; 0x22ee <__ultoa_invert+0x48>
    22ec:	68 94       	set
    22ee:	3f 91       	pop	r19
    22f0:	2a e0       	ldi	r18, 0x0A	; 10
    22f2:	26 9f       	mul	r18, r22
    22f4:	11 24       	eor	r1, r1
    22f6:	30 19       	sub	r19, r0
    22f8:	30 5d       	subi	r19, 0xD0	; 208
    22fa:	31 93       	st	Z+, r19
    22fc:	de f6       	brtc	.-74     	; 0x22b4 <__ultoa_invert+0xe>
    22fe:	cf 01       	movw	r24, r30
    2300:	08 95       	ret
    2302:	46 2f       	mov	r20, r22
    2304:	47 70       	andi	r20, 0x07	; 7
    2306:	40 5d       	subi	r20, 0xD0	; 208
    2308:	41 93       	st	Z+, r20
    230a:	b3 e0       	ldi	r27, 0x03	; 3
    230c:	0f d0       	rcall	.+30     	; 0x232c <__ultoa_invert+0x86>
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__ultoa_invert+0x5c>
    2310:	f6 cf       	rjmp	.-20     	; 0x22fe <__ultoa_invert+0x58>
    2312:	46 2f       	mov	r20, r22
    2314:	4f 70       	andi	r20, 0x0F	; 15
    2316:	40 5d       	subi	r20, 0xD0	; 208
    2318:	4a 33       	cpi	r20, 0x3A	; 58
    231a:	18 f0       	brcs	.+6      	; 0x2322 <__ultoa_invert+0x7c>
    231c:	49 5d       	subi	r20, 0xD9	; 217
    231e:	31 fd       	sbrc	r19, 1
    2320:	40 52       	subi	r20, 0x20	; 32
    2322:	41 93       	st	Z+, r20
    2324:	02 d0       	rcall	.+4      	; 0x232a <__ultoa_invert+0x84>
    2326:	a9 f7       	brne	.-22     	; 0x2312 <__ultoa_invert+0x6c>
    2328:	ea cf       	rjmp	.-44     	; 0x22fe <__ultoa_invert+0x58>
    232a:	b4 e0       	ldi	r27, 0x04	; 4
    232c:	a6 95       	lsr	r26
    232e:	97 95       	ror	r25
    2330:	87 95       	ror	r24
    2332:	77 95       	ror	r23
    2334:	67 95       	ror	r22
    2336:	ba 95       	dec	r27
    2338:	c9 f7       	brne	.-14     	; 0x232c <__ultoa_invert+0x86>
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	61 05       	cpc	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	08 95       	ret
    2342:	9b 01       	movw	r18, r22
    2344:	ac 01       	movw	r20, r24
    2346:	0a 2e       	mov	r0, r26
    2348:	06 94       	lsr	r0
    234a:	57 95       	ror	r21
    234c:	47 95       	ror	r20
    234e:	37 95       	ror	r19
    2350:	27 95       	ror	r18
    2352:	ba 95       	dec	r27
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__ultoa_invert+0xa2>
    2356:	62 0f       	add	r22, r18
    2358:	73 1f       	adc	r23, r19
    235a:	84 1f       	adc	r24, r20
    235c:	95 1f       	adc	r25, r21
    235e:	a0 1d       	adc	r26, r0
    2360:	08 95       	ret

00002362 <_exit>:
    2362:	f8 94       	cli

00002364 <__stop_program>:
    2364:	ff cf       	rjmp	.-2      	; 0x2364 <__stop_program>
